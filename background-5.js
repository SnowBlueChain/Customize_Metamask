LavaPack.loadBundle([
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js", {"./protocol/latticeConstants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cconstants.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PUBLIC = exports.ETH_ABI_LATTICE_FW_TYPE_MAP = exports.MAX_CHAIN_ID_BYTES = exports.HANDLE_LARGER_CHAIN_ID = exports.HARDENED_OFFSET = exports.VERSION_BYTE = exports.REQUEST_TYPE_BYTE = exports.signingSchema = exports.ethMsgProtocol = exports.addressSizes = exports.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = exports.NETWORKS_BY_CHAIN_ID = exports.MAX_ADDR = exports.CURRENCIES = exports.BASE_URL = exports.BIP_CONSTANTS = exports.getFwVersionConst = exports.ASCII_REGEX = exports.LEDGER_LEGACY_DERIVATION = exports.LEDGER_LIVE_DERIVATION = exports.SOLANA_DERIVATION = exports.BTC_WRAPPED_SEGWIT_DERIVATION = exports.BTC_SEGWIT_DERIVATION = exports.BTC_LEGACY_DERIVATION = exports.DEFAULT_ETH_DERIVATION = exports.DEFAULT_ACTIVE_WALLETS = exports.EMPTY_WALLET_UID = exports.EXTERNAL = void 0;
var latticeConstants_1 = require("./protocol/latticeConstants");
/**
 * Externally exported constants used for building requests
 * @public
 */
exports.EXTERNAL = {
    // Optional flags for `getAddresses`
    GET_ADDR_FLAGS: {
        SECP256K1_PUB: latticeConstants_1.LatticeGetAddressesFlag.secp256k1Pubkey,
        ED25519_PUB: latticeConstants_1.LatticeGetAddressesFlag.ed25519Pubkey,
        BLS12_381_G1_PUB: latticeConstants_1.LatticeGetAddressesFlag.bls12_381Pubkey,
    },
    // Options for building general signing requests
    SIGNING: {
        HASHES: {
            NONE: latticeConstants_1.LatticeSignHash.none,
            KECCAK256: latticeConstants_1.LatticeSignHash.keccak256,
            SHA256: latticeConstants_1.LatticeSignHash.sha256,
        },
        CURVES: {
            SECP256K1: latticeConstants_1.LatticeSignCurve.secp256k1,
            ED25519: latticeConstants_1.LatticeSignCurve.ed25519,
            BLS12_381_G2: latticeConstants_1.LatticeSignCurve.bls12_381,
        },
        ENCODINGS: {
            NONE: latticeConstants_1.LatticeSignEncoding.none,
            SOLANA: latticeConstants_1.LatticeSignEncoding.solana,
            EVM: latticeConstants_1.LatticeSignEncoding.evm,
            ETH_DEPOSIT: latticeConstants_1.LatticeSignEncoding.eth_deposit,
        },
        BLS_DST: {
            BLS_DST_NUL: latticeConstants_1.LatticeSignBlsDst.NUL,
            BLS_DST_POP: latticeConstants_1.LatticeSignBlsDst.POP,
        },
    },
    // Options for exporting encrypted data
    ENC_DATA: {
        SCHEMAS: {
            BLS_KEYSTORE_EIP2335_PBKDF_V4: latticeConstants_1.LatticeEncDataSchema.eip2335,
        },
    },
    ETH_CONSENSUS_SPEC: {
        NETWORKS: {
            MAINNET_GENESIS: {
                networkName: 'mainnet',
                forkVersion: Buffer.alloc(4),
                // Empty root because there were no validators at genesis
                validatorsRoot: Buffer.alloc(32),
            },
        },
        DOMAINS: {
            DEPOSIT: Buffer.from('03000000', 'hex'),
            VOLUNTARY_EXIT: Buffer.from('04000000', 'hex'),
        },
    },
};
exports.PUBLIC = exports.EXTERNAL;
//===============================
// INTERNAL CONSTANTS
//===============================
/** @internal */
var addressSizes = {
    BTC: 20,
    ETH: 20, // 20 byte address not including 0x prefix
};
exports.addressSizes = addressSizes;
/** @internal */
var CURRENCIES = {
    ETH: 'ETH',
    BTC: 'BTC',
    ETH_MSG: 'ETH_MSG',
};
exports.CURRENCIES = CURRENCIES;
/** @internal */
// THIS NEEDS TO BE A PROTOCOL CONSTANT TOO
var signingSchema = {
    BTC_TRANSFER: 0,
    ETH_TRANSFER: 1,
    ERC20_TRANSFER: 2,
    ETH_MSG: 3,
    EXTRA_DATA: 4,
    GENERAL_SIGNING: 5,
};
exports.signingSchema = signingSchema;
/** @internal */
var HARDENED_OFFSET = 0x80000000; // Hardened offset
exports.HARDENED_OFFSET = HARDENED_OFFSET;
/** @internal */
var BIP_CONSTANTS = {
    PURPOSES: {
        ETH: HARDENED_OFFSET + 44,
        BTC_LEGACY: HARDENED_OFFSET + 44,
        BTC_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,
        BTC_SEGWIT: HARDENED_OFFSET + 84,
    },
    COINS: {
        ETH: HARDENED_OFFSET + 60,
        BTC: HARDENED_OFFSET,
        BTC_TESTNET: HARDENED_OFFSET + 1,
    },
};
exports.BIP_CONSTANTS = BIP_CONSTANTS;
/** @internal For all HSM-bound requests */
var REQUEST_TYPE_BYTE = 0x02;
exports.REQUEST_TYPE_BYTE = REQUEST_TYPE_BYTE;
/** @internal */
var VERSION_BYTE = 1;
exports.VERSION_BYTE = VERSION_BYTE;
/** @internal ChainId value to signify larger chainID is in data buffer */
var HANDLE_LARGER_CHAIN_ID = 255;
exports.HANDLE_LARGER_CHAIN_ID = HANDLE_LARGER_CHAIN_ID;
/** @internal Max number of bytes to contain larger chainID in data buffer */
var MAX_CHAIN_ID_BYTES = 8;
exports.MAX_CHAIN_ID_BYTES = MAX_CHAIN_ID_BYTES;
/** @internal */
var BASE_URL = 'https://signing.gridpl.us';
exports.BASE_URL = BASE_URL;
/** @internal */
var EIP712_ABI_LATTICE_FW_TYPE_MAP = {
    address: 1,
    bool: 2,
    uint8: 3,
    uint16: 4,
    uint24: 5,
    uint32: 6,
    uint40: 7,
    uint48: 8,
    uint56: 9,
    uint64: 10,
    uint72: 11,
    uint80: 12,
    uint88: 13,
    uint96: 14,
    uint104: 15,
    uint112: 16,
    uint120: 17,
    uint128: 18,
    uint136: 19,
    uint144: 20,
    uint152: 21,
    uint160: 22,
    uint168: 23,
    uint176: 24,
    uint184: 25,
    uint192: 26,
    uint200: 27,
    uint208: 28,
    uint216: 29,
    uint224: 30,
    uint232: 31,
    uint240: 32,
    uint248: 33,
    uint256: 34,
    int8: 35,
    int16: 36,
    int24: 37,
    int32: 38,
    int40: 39,
    int48: 40,
    int56: 41,
    int64: 42,
    int72: 43,
    int80: 44,
    int88: 45,
    int96: 46,
    int104: 47,
    int112: 48,
    int120: 49,
    int128: 50,
    int136: 51,
    int144: 52,
    int152: 53,
    int160: 54,
    int168: 55,
    int176: 56,
    int184: 57,
    int192: 58,
    int200: 59,
    int208: 60,
    int216: 61,
    int224: 62,
    int232: 63,
    int240: 64,
    int248: 65,
    int256: 66,
    uint: 67,
    bytes1: 69,
    bytes2: 70,
    bytes3: 71,
    bytes4: 72,
    bytes5: 73,
    bytes6: 74,
    bytes7: 75,
    bytes8: 76,
    bytes9: 77,
    bytes10: 78,
    bytes11: 79,
    bytes12: 80,
    bytes13: 81,
    bytes14: 82,
    bytes15: 83,
    bytes16: 84,
    bytes17: 85,
    bytes18: 86,
    bytes19: 87,
    bytes20: 88,
    bytes21: 89,
    bytes22: 90,
    bytes23: 91,
    bytes24: 92,
    bytes25: 93,
    bytes26: 94,
    bytes27: 95,
    bytes28: 96,
    bytes29: 97,
    bytes30: 98,
    bytes31: 99,
    bytes32: 100,
    bytes: 101,
    string: 102,
};
/** @internal */
var ETH_ABI_LATTICE_FW_TYPE_MAP = __assign(__assign({}, EIP712_ABI_LATTICE_FW_TYPE_MAP), { tuple1: 103, tuple2: 104, tuple3: 105, tuple4: 106, tuple5: 107, tuple6: 108, tuple7: 109, tuple8: 110, tuple9: 111, tuple10: 112, tuple11: 113, tuple12: 114, tuple13: 115, tuple14: 116, tuple15: 117, tuple16: 118, tuple17: 119 });
exports.ETH_ABI_LATTICE_FW_TYPE_MAP = ETH_ABI_LATTICE_FW_TYPE_MAP;
/** @internal */
var ethMsgProtocol = {
    SIGN_PERSONAL: {
        str: 'signPersonal',
        enumIdx: 0, // Enum index of this protocol in Lattice firmware
    },
    TYPED_DATA: {
        str: 'typedData',
        enumIdx: 1,
        rawDataMaxLen: 1629,
        typeCodes: EIP712_ABI_LATTICE_FW_TYPE_MAP, // Enum indices of data types in Lattice firmware
    },
};
exports.ethMsgProtocol = ethMsgProtocol;
/** @internal */
function getFwVersionConst(v) {
    var c = {
        extraDataFrameSz: 0,
        extraDataMaxFrames: 0,
        genericSigning: {},
    };
    function gte(v, exp) {
        // Note that `v` fields come in as [fix|minor|major]
        return (v[2] > exp[0] ||
            (v[2] === exp[0] && v[1] > exp[1]) ||
            (v[2] === exp[0] && v[1] === exp[1] && v[0] > exp[2]) ||
            (v[2] === exp[0] && v[1] === exp[1] && v[0] === exp[2]));
    }
    // Very old legacy versions do not give a version number
    var legacy = v.length === 0;
    // BASE FIELDS
    //--------------------------------------
    // Various size constants have changed on the firmware side over time and
    // are captured here
    if (!legacy && gte(v, [0, 10, 4])) {
        // >=0.10.3
        c.reqMaxDataSz = 1678;
        c.ethMaxGasPrice = 20000000000000; // 20000 gwei
        c.addrFlagsAllowed = true;
    }
    else if (!legacy && gte(v, [0, 10, 0])) {
        // >=0.10.0
        c.reqMaxDataSz = 1678;
        c.ethMaxGasPrice = 20000000000000; // 20000 gwei
        c.addrFlagsAllowed = true;
    }
    else {
        // Legacy or <0.10.0
        c.reqMaxDataSz = 1152;
        c.ethMaxGasPrice = 500000000000; // 500 gwei
        c.addrFlagsAllowed = false;
    }
    // These transformations apply to all versions. The subtraction
    // of 128 bytes accounts for metadata and is for legacy reasons.
    // For all modern versions, these are 1550 bytes.
    // NOTE: Non-legacy ETH txs (e.g. EIP1559) will shrink
    // this number.
    // See `ETH_BASE_TX_MAX_DATA_SZ` and `ETH_MAX_BASE_MSG_SZ` in firmware
    c.ethMaxDataSz = c.reqMaxDataSz - 128;
    c.ethMaxMsgSz = c.ethMaxDataSz;
    // Max number of params in an EIP712 type. This was added to firmware
    // to avoid blowing stack size.
    c.eip712MaxTypeParams = 18;
    // -----
    // EXTRA FIELDS ADDED IN LATER FIRMWARE VERSIONS
    // -----
    // --- V0.10.X ---
    // V0.10.4 introduced the ability to send signing requests over multiple
    // data frames (i.e. in multiple requests)
    if (!legacy && gte(v, [0, 10, 4])) {
        c.extraDataFrameSz = 1500; // 1500 bytes per frame of extraData allowed
        c.extraDataMaxFrames = 1; // 1 frame of extraData allowed
    }
    // V0.10.5 added the ability to use flexible address path sizes, which
    // changes the `getAddress` API. It also added support for EIP712
    if (!legacy && gte(v, [0, 10, 5])) {
        c.varAddrPathSzAllowed = true;
        c.eip712Supported = true;
    }
    // V0.10.8 allows a user to sign a prehashed transaction if the payload
    // is too big
    if (!legacy && gte(v, [0, 10, 8])) {
        c.prehashAllowed = true;
    }
    // V0.10.10 allows a user to sign a prehashed ETH message if payload too big
    if (!legacy && gte(v, [0, 10, 10])) {
        c.ethMsgPreHashAllowed = true;
    }
    // --- 0.11.X ---
    // V0.11.0 allows new ETH transaction types
    if (!legacy && gte(v, [0, 11, 0])) {
        c.allowedEthTxTypes = [
            1,
            2, // eip1559
        ];
        // This version added extra data fields to the ETH tx
        c.ethMaxDataSz -= 10;
        c.ethMaxMsgSz = c.ethMaxDataSz;
    }
    // V0.11.2 changed how messages are displayed. For personal_sign messages
    // we now write the header (`Signer: <path>`) into the main body of the screen.
    // This means personal sign message max size is slightly smaller than for
    // EIP712 messages because in the latter case there is no header
    // Note that `<path>` has max size of 62 bytes (`m/X/X/...`)
    if (!legacy && gte(v, [0, 11, 2])) {
        c.personalSignHeaderSz = 72;
    }
    // --- V0.12.X ---
    // V0.12.0 added an API for creating, removing, and fetching key-val file
    // records. For the purposes of this SDK, we only hook into one type of kv
    // file: address names.
    if (!legacy && gte(v, [0, 12, 0])) {
        c.kvActionsAllowed = true;
        c.kvKeyMaxStrSz = 63;
        c.kvValMaxStrSz = 63;
        c.kvActionMaxNum = 10;
        c.kvRemoveMaxNum = 100;
    }
    // --- V0.13.X ---
    // V0.13.0 added native segwit addresses and fixed a bug in exporting
    // legacy bitcoin addresses
    if (!legacy && gte(v, [0, 13, 0])) {
        c.allowBtcLegacyAndSegwitAddrs = true;
        // Random address to be used when trying to deploy a contract
        c.contractDeployKey = '0x08002e0fec8e6acf00835f43c9764f7364fa3f42';
    }
    // --- V0.14.X ---
    // V0.14.0 added support for a more robust API around ABI definitions
    // and generic signing functionality
    if (!legacy && gte(v, [0, 14, 0])) {
        // Size of `category` buffer. Inclusive of null terminator byte.
        c.abiCategorySz = 32;
        c.abiMaxRmv = 200; // Max number of ABI defs that can be removed with
        // a single request
        // See `sizeof(GenericSigningRequest_t)` in firmware
        c.genericSigning.baseReqSz = 1552;
        // See `GENERIC_SIGNING_BASE_MSG_SZ` in firmware
        c.genericSigning.baseDataSz = 1519;
        c.genericSigning.hashTypes = exports.EXTERNAL.SIGNING.HASHES;
        c.genericSigning.curveTypes = exports.EXTERNAL.SIGNING.CURVES;
        c.genericSigning.encodingTypes = {
            NONE: exports.EXTERNAL.SIGNING.ENCODINGS.NONE,
            SOLANA: exports.EXTERNAL.SIGNING.ENCODINGS.SOLANA,
        };
        // Supported flags for `getAddresses`
        c.getAddressFlags = [
            exports.EXTERNAL.GET_ADDR_FLAGS.ED25519_PUB,
            exports.EXTERNAL.GET_ADDR_FLAGS.SECP256K1_PUB,
        ];
        // We updated the max number of params in EIP712 types
        c.eip712MaxTypeParams = 36;
    }
    // DEPRECATED
    // V0.14.1 Added the Terra decoder
    // if (!legacy && gte(v, [0, 14, 1])) {
    //   c.genericSigning.encodingTypes.TERRA = EXTERNAL.SIGNING.ENCODINGS.TERRA;
    // }
    // --- V0.15.X ---
    // V0.15.0 added an EVM decoder and removed the legacy ETH signing pathway
    if (!legacy && gte(v, [0, 15, 0])) {
        c.genericSigning.encodingTypes.EVM = exports.EXTERNAL.SIGNING.ENCODINGS.EVM;
        // We now use the general signing data field as the base
        // Note that we have NOT removed the ETH_MSG type so we should
        // not change ethMaxMsgSz
        c.ethMaxDataSz = 1550 - 31;
        // Max buffer size for get/add decoder requests
        c.maxDecoderBufSz = 1600;
        // Code used to write a calldata decoder
        c.genericSigning.calldataDecoding = {
            reserved: 2895728,
            maxSz: 1024,
        };
    }
    // --- V0.17.X ---
    // V0.17.0 added support for BLS12-381-G1 pubkeys and G2 sigs
    if (!legacy && gte(v, [0, 17, 0])) {
        c.getAddressFlags.push(exports.EXTERNAL.GET_ADDR_FLAGS.BLS12_381_G1_PUB);
        c.genericSigning.encodingTypes.ETH_DEPOSIT = exports.EXTERNAL.SIGNING.ENCODINGS.ETH_DEPOSIT;
    }
    return c;
}
exports.getFwVersionConst = getFwVersionConst;
/** @internal */
// eslint-disable-next-line no-control-regex
var ASCII_REGEX = /^[\x00-\x7F]+$/;
exports.ASCII_REGEX = ASCII_REGEX;
/** @internal */
var EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = 'https://gridplus.github.io/chains/chains.json';
exports.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = EXTERNAL_NETWORKS_BY_CHAIN_ID_URL;
/** @internal - Max number of addresses to fetch */
var MAX_ADDR = 10;
exports.MAX_ADDR = MAX_ADDR;
/** @internal */
var NETWORKS_BY_CHAIN_ID = {
    1: {
        name: 'ethereum',
        baseUrl: 'https://api.etherscan.io',
        apiRoute: 'api?module=contract&action=getabi',
    },
    137: {
        name: 'polygon',
        baseUrl: 'https://api.polygonscan.com',
        apiRoute: 'api?module=contract&action=getabi',
    },
    56: {
        name: 'binance',
        baseUrl: 'https://api.bscscan.com',
        apiRoute: 'api?module=contract&action=getabi',
    },
    42220: {
        name: 'celo',
        baseUrl: 'https://api.celoscan.io',
        apiRoute: 'api?module=contract&action=getabi',
    },
    43114: {
        name: 'avalanche',
        baseUrl: 'https://api.snowtrace.io',
        apiRoute: 'api?module=contract&action=getabi',
    },
};
exports.NETWORKS_BY_CHAIN_ID = NETWORKS_BY_CHAIN_ID;
/** @internal */
exports.EMPTY_WALLET_UID = Buffer.alloc(32);
/** @internal */
exports.DEFAULT_ACTIVE_WALLETS = {
    internal: {
        uid: exports.EMPTY_WALLET_UID,
        external: false,
        name: Buffer.alloc(0),
        capabilities: 0,
    },
    external: {
        uid: exports.EMPTY_WALLET_UID,
        external: true,
        name: Buffer.alloc(0),
        capabilities: 0,
    },
};
/** @internal */
exports.DEFAULT_ETH_DERIVATION = [
    HARDENED_OFFSET + 44,
    HARDENED_OFFSET + 60,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.BTC_LEGACY_DERIVATION = [
    HARDENED_OFFSET + 44,
    HARDENED_OFFSET + 0,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.BTC_SEGWIT_DERIVATION = [
    HARDENED_OFFSET + 84,
    HARDENED_OFFSET,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.BTC_WRAPPED_SEGWIT_DERIVATION = [
    HARDENED_OFFSET + 49,
    HARDENED_OFFSET,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.SOLANA_DERIVATION = [
    HARDENED_OFFSET + 44,
    HARDENED_OFFSET + 501,
    HARDENED_OFFSET,
];
/** @internal */
exports.LEDGER_LIVE_DERIVATION = [
    HARDENED_OFFSET + 49,
    HARDENED_OFFSET + 60,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.LEDGER_LEGACY_DERIVATION = [
    HARDENED_OFFSET + 49,
    HARDENED_OFFSET + 60,
    HARDENED_OFFSET,
    0,
];

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\constants.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\ethereum.js", {"./constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","@ethereumjs/common":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\index.js","@ethereumjs/tx":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\index.js","bignumber.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bignumber.js\\bignumber.js","borc":"F:\\metamask-extension\\node_modules\\borc\\src\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","eth-eip712-util-browser":"F:\\metamask-extension\\node_modules\\eth-eip712-util-browser\\index.js","js-sha3":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js","rlp":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\rlp\\dist\\index.js","secp256k1":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cethereum.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Utils for Ethereum transactions. This is effecitvely a shim of ethereumjs-util, which
// does not have browser (or, by proxy, React-Native) support.
var common_1 = require("@ethereumjs/common");
var tx_1 = require("@ethereumjs/tx");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var borc_1 = __importDefault(require("borc"));
//@ts-expect-error - This third-party package is not typed properly
var eth_eip712_util_browser_1 = require("eth-eip712-util-browser");
var js_sha3_1 = require("js-sha3");
var rlp_1 = require("rlp");
var secp256k1_1 = __importDefault(require("secp256k1"));
var constants_1 = require("./constants");
var protocol_1 = require("./protocol");
var util_1 = require("./util");
var buildEthereumMsgRequest = function (input) {
    if (!input.payload || !input.protocol || !input.signerPath)
        throw new Error('You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request');
    if (input.signerPath.length > 5 || input.signerPath.length < 2)
        throw new Error('Please provide a signer path with 2-5 indices');
    var req = {
        schema: protocol_1.LatticeSignSchema.ethereumMsg,
        payload: null,
        input: input,
        msg: null, // Save the buffered message for later
    };
    switch (input.protocol) {
        case 'signPersonal':
            return buildPersonalSignRequest(req, input);
        case 'eip712':
            if (!input.fwConstants.eip712Supported)
                throw new Error('EIP712 is not supported by your Lattice firmware version. Please upgrade.');
            return buildEIP712Request(req, input);
        default:
            throw new Error('Unsupported protocol');
    }
};
var validateEthereumMsgResponse = function (res, req) {
    var signer = res.signer, sig = res.sig;
    var input = req.input, msg = req.msg, _a = req.prehash, prehash = _a === void 0 ? null : _a;
    if (input.protocol === 'signPersonal') {
        // NOTE: We are currently hardcoding networkID=1 and useEIP155=false but these
        //       may be configurable in future versions
        var hash_1 = prehash
            ? prehash
            : Buffer.from((0, js_sha3_1.keccak256)(Buffer.concat([get_personal_sign_prefix(msg.length), msg])), 'hex');
        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`
        return addRecoveryParam(hash_1, sig, signer, {
            chainId: 1,
            useEIP155: false,
        });
    }
    else if (input.protocol === 'eip712') {
        var encoded = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);
        var digest = prehash ? prehash : encoded;
        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`
        return addRecoveryParam(digest, sig, signer, { useEIP155: false });
    }
    else {
        throw new Error('Unsupported protocol');
    }
};
var buildEthereumTxRequest = function (data) {
    try {
        var _a = data.chainId, chainId = _a === void 0 ? 1 : _a;
        var signerPath = data.signerPath, _b = data.eip155, eip155 = _b === void 0 ? null : _b, fwConstants = data.fwConstants, _c = data.type, type = _c === void 0 ? null : _c;
        var contractDeployKey = fwConstants.contractDeployKey, extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed;
        var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;
        var MAX_BASE_DATA_SZ = fwConstants.ethMaxDataSz;
        var VAR_PATH_SZ = fwConstants.varAddrPathSzAllowed;
        // Sanity checks:
        // There are a handful of named chains we allow the user to reference (`chainIds`)
        // Custom chainIDs should be either numerical or hex strings
        if (typeof chainId !== 'number' &&
            isValidChainIdHexNumStr(chainId) === false) {
            chainId = chainIds[chainId];
        }
        // If this was not a custom chainID and we cannot find the name of it, exit
        if (!chainId)
            throw new Error('Unsupported chain ID or name');
        // Sanity check on signePath
        if (!signerPath)
            throw new Error('`signerPath` not provided');
        // Is this a contract deployment?
        if (data.to === null && !contractDeployKey) {
            throw new Error('Contract deployment not supported. Please update your Lattice firmware.');
        }
        var isDeployment = data.to === null && contractDeployKey;
        // We support eip1559 and eip2930 types (as well as legacy)
        var eip1559IsAllowed = fwConstants.allowedEthTxTypes &&
            fwConstants.allowedEthTxTypes.indexOf(2) > -1;
        var eip2930IsAllowed = fwConstants.allowedEthTxTypes &&
            fwConstants.allowedEthTxTypes.indexOf(1) > -1;
        var isEip1559 = eip1559IsAllowed && (type === 2 || type === 'eip1559');
        var isEip2930 = eip2930IsAllowed && (type === 1 || type === 'eip2930');
        if (type !== null && !isEip1559 && !isEip2930)
            throw new Error('Unsupported Ethereum transaction type');
        // Determine if we should use EIP155 given the chainID.
        // If we are explicitly told to use eip155, we will use it. Otherwise,
        // we will look up if the specified chainId is associated with a chain
        // that does not use EIP155 by default. Note that most do use EIP155.
        var useEIP155 = chainUsesEIP155(chainId);
        if (eip155 !== null && typeof eip155 === 'boolean') {
            useEIP155 = eip155;
        }
        else if (isEip1559 || isEip2930) {
            // Newer transaction types do not use EIP155 since the chainId is serialized
            useEIP155 = false;
        }
        // Hack for metamask, which sends value=null for 0 ETH transactions
        if (!data.value)
            data.value = 0;
        //--------------
        // 1. BUILD THE RAW TX FOR FUTURE RLP ENCODING
        //--------------
        // Ensure all fields are 0x-prefixed hex strings
        var rawTx = [];
        // Build the transaction buffer array
        var chainIdBytes = (0, util_1.ensureHexBuffer)(chainId);
        var nonceBytes = (0, util_1.ensureHexBuffer)(data.nonce);
        var gasPriceBytes = void 0;
        var gasLimitBytes = (0, util_1.ensureHexBuffer)(data.gasLimit);
        // Handle contract deployment (indicated by `to` being `null`)
        // For contract deployment we write a 20-byte key to the request
        // buffer, which gets swapped for an empty buffer in firmware.
        var toRlpElem = void 0, toBytes = void 0;
        if (isDeployment) {
            toRlpElem = Buffer.alloc(0);
            toBytes = (0, util_1.ensureHexBuffer)(contractDeployKey);
        }
        else {
            toRlpElem = (0, util_1.ensureHexBuffer)(data.to);
            toBytes = (0, util_1.ensureHexBuffer)(data.to);
        }
        var valueBytes = (0, util_1.ensureHexBuffer)(data.value);
        var dataBytes = (0, util_1.ensureHexBuffer)(data.data);
        if (isEip1559 || isEip2930) {
            // EIP1559 and EIP2930 transactions have a chainID field
            rawTx.push(chainIdBytes);
        }
        rawTx.push(nonceBytes);
        var maxPriorityFeePerGasBytes = void 0, maxFeePerGasBytes = void 0;
        if (isEip1559) {
            if (!data.maxPriorityFeePerGas)
                throw new Error('EIP1559 transactions must include `maxPriorityFeePerGas`');
            maxPriorityFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxPriorityFeePerGas);
            rawTx.push(maxPriorityFeePerGasBytes);
            maxFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxFeePerGas);
            rawTx.push(maxFeePerGasBytes);
            // EIP1559 renamed "gasPrice" to "maxFeePerGas", but firmware still
            // uses `gasPrice` in the struct, so update that value here.
            gasPriceBytes = maxFeePerGasBytes;
        }
        else {
            // EIP1559 transactions do not have the gasPrice field
            gasPriceBytes = (0, util_1.ensureHexBuffer)(data.gasPrice);
            rawTx.push(gasPriceBytes);
        }
        rawTx.push(gasLimitBytes);
        rawTx.push(toRlpElem);
        rawTx.push(valueBytes);
        rawTx.push(dataBytes);
        // We do not currently support accessList in firmware so we need to prehash if
        // the list is non-null
        var PREHASH_FROM_ACCESS_LIST_1 = false;
        if (isEip1559 || isEip2930) {
            var accessList_1 = [];
            if (Array.isArray(data.accessList)) {
                data.accessList.forEach(function (listItem) {
                    var keys = [];
                    listItem.storageKeys.forEach(function (key) {
                        keys.push((0, util_1.ensureHexBuffer)(key));
                    });
                    accessList_1.push([(0, util_1.ensureHexBuffer)(listItem.address), keys]);
                    PREHASH_FROM_ACCESS_LIST_1 = true;
                });
            }
            rawTx.push(accessList_1);
        }
        else if (useEIP155 === true) {
            // Add empty v,r,s values for EIP155 legacy transactions
            rawTx.push(chainIdBytes); // v (which is the same as chainId in EIP155 txs)
            rawTx.push((0, util_1.ensureHexBuffer)(null)); // r
            rawTx.push((0, util_1.ensureHexBuffer)(null)); // s
        }
        //--------------
        // 2. BUILD THE LATTICE REQUEST PAYLOAD
        //--------------
        var ETH_TX_NON_DATA_SZ = 122; // Accounts for metadata and non-data params
        var txReqPayload = Buffer.alloc(MAX_BASE_DATA_SZ + ETH_TX_NON_DATA_SZ);
        var off = 0;
        // 1. EIP155 switch and chainID
        //------------------
        txReqPayload.writeUInt8(Number(useEIP155), off);
        off++;
        // NOTE: Originally we designed for a 1-byte chainID, but modern rollup chains use much larger
        // chainID values. To account for these, we will put the chainID into the `data` buffer if it
        // is >=255. Values up to UINT64_MAX will be allowed.
        var chainIdBuf = void 0;
        var chainIdBufSz = 0;
        if (useChainIdBuffer(chainId) === true) {
            chainIdBuf = getChainIdBuf(chainId);
            chainIdBufSz = chainIdBuf.length;
            if (chainIdBufSz > constants_1.MAX_CHAIN_ID_BYTES)
                throw new Error('ChainID provided is too large.');
            // Signal to Lattice firmware that it needs to read the chainId from the tx.data buffer
            txReqPayload.writeUInt8(constants_1.HANDLE_LARGER_CHAIN_ID, off);
            off++;
        }
        else {
            // For chainIDs <255, write it to the chainId u8 slot in the main tx buffer
            chainIdBuf = (0, util_1.ensureHexBuffer)(chainId);
            if (chainIdBuf.length !== 1)
                throw new Error('Error parsing chainID');
            chainIdBuf.copy(txReqPayload, off);
            off += chainIdBuf.length;
        }
        // 2. Signer Path
        //------------------
        var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, VAR_PATH_SZ);
        signerPathBuf.copy(txReqPayload, off);
        off += signerPathBuf.length;
        // 3. ETH TX request data
        //------------------
        if (nonceBytes.length > 4)
            throw new Error('Nonce too large');
        nonceBytes.copy(txReqPayload, off + (4 - nonceBytes.length));
        off += 4;
        if (gasPriceBytes.length > 8)
            throw new Error('Gas price too large');
        gasPriceBytes.copy(txReqPayload, off + (8 - gasPriceBytes.length));
        off += 8;
        if (gasLimitBytes.length > 4)
            throw new Error('Gas limit too large');
        gasLimitBytes.copy(txReqPayload, off + (4 - gasLimitBytes.length));
        off += 4;
        if (toBytes.length !== 20)
            throw new Error('Invalid `to` address');
        toBytes.copy(txReqPayload, off);
        off += 20;
        if (valueBytes.length > 32)
            throw new Error('Value too large');
        valueBytes.copy(txReqPayload, off + (32 - valueBytes.length));
        off += 32;
        // Extra Tx data comes before `data` in the struct
        var PREHASH_UNSUPPORTED = false;
        if (fwConstants.allowedEthTxTypes) {
            // Some types may not be supported by firmware, so we will need to prehash
            if (PREHASH_FROM_ACCESS_LIST_1) {
                PREHASH_UNSUPPORTED = true;
            }
            txReqPayload.writeUInt8(PREHASH_UNSUPPORTED ? 1 : 0, off);
            off += 1;
            // EIP1559 & EIP2930 struct version
            if (isEip1559) {
                txReqPayload.writeUInt8(2, off);
                off += 1; // Eip1559 type enum value
                if (maxPriorityFeePerGasBytes.length > 8)
                    throw new Error('maxPriorityFeePerGasBytes too large');
                maxPriorityFeePerGasBytes.copy(txReqPayload, off + (8 - maxPriorityFeePerGasBytes.length));
                off += 8; // Skip EIP1559 params
            }
            else if (isEip2930) {
                txReqPayload.writeUInt8(1, off);
                off += 1; // Eip2930 type enum value
                off += 8; // Skip EIP1559 params
            }
            else {
                off += 9; // Skip EIP1559 and EIP2930 params
            }
        }
        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable
        var extraDataPayloads_1 = [];
        var prehash = null;
        // Create the buffer, prefix with chainId (if needed) and add data slice
        var dataSz = dataBytes.length || 0;
        var chainIdExtraSz = chainIdBufSz > 0 ? chainIdBufSz + 1 : 0;
        var dataToCopy = Buffer.alloc(dataSz + chainIdExtraSz);
        if (chainIdExtraSz > 0) {
            dataToCopy.writeUInt8(chainIdBufSz, 0);
            chainIdBuf.copy(dataToCopy, 1);
        }
        dataBytes.copy(dataToCopy, chainIdExtraSz);
        if (dataSz > MAX_BASE_DATA_SZ) {
            // Determine sizes and run through sanity checks
            var totalSz = dataSz + chainIdExtraSz;
            var maxSzAllowed = MAX_BASE_DATA_SZ + extraDataMaxFrames * extraDataFrameSz;
            if (prehashAllowed && totalSz > maxSzAllowed) {
                // If this payload is too large to send, but the Lattice allows a prehashed message, do that
                prehash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');
            }
            else {
                if (!EXTRA_DATA_ALLOWED ||
                    (EXTRA_DATA_ALLOWED && totalSz > maxSzAllowed))
                    throw new Error("Data field too large (got ".concat(dataBytes.length, "; must be <=").concat(maxSzAllowed - chainIdExtraSz, " bytes)"));
                // Split overflow data into extraData frames
                var frames_1 = (0, util_1.splitFrames)(dataToCopy.slice(MAX_BASE_DATA_SZ), extraDataFrameSz);
                frames_1.forEach(function (frame) {
                    var szLE = Buffer.alloc(4);
                    szLE.writeUInt32LE(frame.length, 0);
                    extraDataPayloads_1.push(Buffer.concat([szLE, frame]));
                });
            }
        }
        else if (PREHASH_UNSUPPORTED) {
            // If something is unsupported in firmware but we want to allow such transactions,
            // we prehash the message here.
            prehash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');
        }
        // Write the data size (does *NOT* include the chainId buffer, if that exists)
        txReqPayload.writeUInt16BE(dataBytes.length, off);
        off += 2;
        // Copy in the chainId buffer if needed
        if (chainIdBufSz > 0) {
            txReqPayload.writeUInt8(chainIdBufSz, off);
            off++;
            chainIdBuf.copy(txReqPayload, off);
            off += chainIdBufSz;
        }
        // Copy the first slice of the data itself. If this payload has been pre-hashed, include it
        // in the `data` field. This will result in a different Lattice screen being drawn.
        if (prehash) {
            prehash.copy(txReqPayload, off);
            off += MAX_BASE_DATA_SZ;
        }
        else {
            dataBytes.slice(0, MAX_BASE_DATA_SZ).copy(txReqPayload, off);
            off += MAX_BASE_DATA_SZ;
        }
        return {
            rawTx: rawTx,
            type: type,
            payload: txReqPayload.slice(0, off),
            extraDataPayloads: extraDataPayloads_1,
            schema: protocol_1.LatticeSignSchema.ethereum,
            chainId: chainId,
            useEIP155: useEIP155,
            signerPath: signerPath,
        };
    }
    catch (err) {
        return { err: err.message };
    }
};
// From ethereumjs-util
function stripZeros(a) {
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
    }
    return a;
}
// Given a 64-byte signature [r,s] we need to figure out the v value
// and attah the full signature to the end of the transaction payload
var buildEthRawTx = function (tx, sig, address) {
    // RLP-encode the data we sent to the lattice
    var hash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(tx.rawTx, tx.type)), 'hex');
    var newSig = addRecoveryParam(hash, sig, address, tx);
    // Use the signature to generate a new raw transaction payload
    // Strip the last 3 items and replace them with signature components
    var newRawTx = tx.useEIP155 ? tx.rawTx.slice(0, -3) : tx.rawTx;
    newRawTx.push(newSig.v);
    // Per `ethereumjs-tx`, RLP encoding should include signature components w/ stripped zeros
    // See: https://github.com/ethereumjs/ethereumjs-tx/blob/master/src/transaction.ts#L187
    newRawTx.push(stripZeros(newSig.r));
    newRawTx.push(stripZeros(newSig.s));
    var rlpEncodedWithSig = Buffer.from((0, rlp_1.encode)(newRawTx));
    if (tx.type) {
        rlpEncodedWithSig = Buffer.concat([
            Buffer.from([tx.type]),
            rlpEncodedWithSig,
        ]);
    }
    return { rawTx: rlpEncodedWithSig.toString('hex'), sigWithV: newSig };
};
// Attach a recovery parameter to a signature by brute-forcing ECRecover
function addRecoveryParam(hashBuf, sig, address, txData) {
    if (txData === void 0) { txData = {}; }
    try {
        // Rebuild the keccak256 hash here so we can `ecrecover`
        var hash_2 = new Uint8Array(hashBuf);
        var v = 0;
        // Fix signature componenet lengths to 32 bytes each
        var r = (0, util_1.fixLen)(sig.r, 32);
        sig.r = r;
        var s = (0, util_1.fixLen)(sig.s, 32);
        sig.s = s;
        // Calculate the recovery param
        var rs = new Uint8Array(Buffer.concat([r, s]));
        var pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);
        // If the first `v` value is a match, return the sig!
        if (pubToAddrStr(pubkey) === address.toString('hex')) {
            sig.v = getRecoveryParam(v, txData);
            return sig;
        }
        // Otherwise, try the other `v` value
        v = 1;
        pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);
        if (pubToAddrStr(pubkey) === address.toString('hex')) {
            sig.v = getRecoveryParam(v, txData);
            return sig;
        }
        else {
            // If neither is a match, we should return an error
            throw new Error('Invalid Ethereum signature returned.');
        }
    }
    catch (err) {
        throw new Error(err);
    }
}
// Convert an RLP-serialized transaction (plus signature) into a transaction hash
var hashTransaction = function (serializedTx) {
    return (0, js_sha3_1.keccak256)(Buffer.from(serializedTx, 'hex'));
};
// Returns address string given public key buffer
function pubToAddrStr(pub) {
    return (0, js_sha3_1.keccak256)(pub).slice(-40);
}
// Convert a 0/1 `v` into a recovery param:
// * For non-EIP155 transactions, return `27 + v`
// * For EIP155 transactions, return `(CHAIN_ID*2) + 35 + v`
function getRecoveryParam(v, txData) {
    if (txData === void 0) { txData = {}; }
    var chainId = txData.chainId, useEIP155 = txData.useEIP155, type = txData.type;
    // For EIP1559 and EIP2930 transactions, we want the recoveryParam (0 or 1)
    // rather than the `v` value because the `chainId` is already included in the
    // transaction payload.
    if (type === 1 || type === 2) {
        return (0, util_1.ensureHexBuffer)(v, true); // 0 or 1, with 0 expected as an empty buffer
    }
    else if (false === useEIP155 || chainId === null) {
        // For ETH messages and non-EIP155 chains the set should be [27, 28] for `v`
        return Buffer.from(new bignumber_js_1.default(v).plus(27).toString(16), 'hex');
    }
    // We will use EIP155 in most cases. Convert v to a bignum and operate on it.
    // Note that the protocol calls for v = (CHAIN_ID*2) + 35/36, where 35 or 36
    // is decided on based on the ecrecover result. `v` is passed in as either 0 or 1
    // so we add 35 to that.
    var chainIdBuf = getChainIdBuf(chainId);
    var chainIdBN = new bignumber_js_1.default(chainIdBuf.toString('hex'), 16);
    return (0, util_1.ensureHexBuffer)("0x".concat(chainIdBN.times(2).plus(35).plus(v).toString(16)));
}
var chainIds = {
    mainnet: 1,
    roptsten: 3,
    rinkeby: 4,
    kovan: 42,
    goerli: 5,
};
// Get a buffer containing the chainId value.
// Returns a 1, 2, 4, or 8 byte buffer with the chainId encoded in big endian
function getChainIdBuf(chainId) {
    var b;
    // If our chainID is a hex string, we can convert it to a hex
    // buffer directly
    if (true === isValidChainIdHexNumStr(chainId))
        b = (0, util_1.ensureHexBuffer)(chainId);
    // If our chainID is a base-10 number, parse with bignumber.js and convert to hex buffer
    else
        b = (0, util_1.ensureHexBuffer)("0x".concat(new bignumber_js_1.default(chainId).toString(16)));
    // Make sure the buffer is an allowed size
    if (b.length > 8)
        throw new Error('ChainID provided is too large.');
    // If this matches a u16, u32, or u64 size, return it now
    if (b.length <= 2 || b.length === 4 || b.length === 8)
        return b;
    // For other size buffers, we need to pack into u32 or u64 before returning;
    var buf;
    if (b.length === 3) {
        buf = Buffer.alloc(4);
        buf.writeUInt32BE(chainId);
    }
    else if (b.length <= 8) {
        buf = Buffer.alloc(8);
        b.copy(buf, 8 - b.length);
    }
    return buf;
}
// Determine if the chain uses EIP155 by default, based on the chainID
function chainUsesEIP155(chainID) {
    switch (chainID) {
        case 3: // ropsten
        case 4: // rinkeby
            return false;
        case 1: // mainnet
        case 42: // kovan
        case 5: // goerli
        default:
            // all others should use eip155
            return true;
    }
}
// Determine if a valid number was passed in as a hex string
function isValidChainIdHexNumStr(s) {
    if (typeof s !== 'string')
        return false;
    if (s.slice(0, 2) !== '0x')
        return false;
    try {
        var b = new bignumber_js_1.default(s, 16);
        return b.isNaN() === false;
    }
    catch (err) {
        return false;
    }
}
// If this is a nubmer that fits in one byte, we don't need to add it
// to the `data` buffer of the main transaction.
// Note the one edge case: we still need to use the `data` field for chainID=255.
function useChainIdBuffer(id) {
    var buf = getChainIdBuf(id);
    if (buf.length === 1)
        return buf.readUInt8(0) === 255;
    return true;
}
function buildPersonalSignRequest(req, input) {
    var MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;
    var VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;
    var L = 24 + MAX_BASE_MSG_SZ + 4;
    var off = 0;
    req.payload = Buffer.alloc(L);
    req.payload.writeUInt8(constants_1.ethMsgProtocol.SIGN_PERSONAL, 0);
    off += 1;
    // Write the signer path into the buffer
    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, VAR_PATH_SZ);
    signerPathBuf.copy(req.payload, off);
    off += signerPathBuf.length;
    // Write the payload buffer. The payload can come in either as a buffer or as a string
    var payload = input.payload;
    // Determine if this is a hex string
    var displayHex = false;
    if (typeof input.payload === 'string') {
        if (input.payload.slice(0, 2) === '0x') {
            payload = (0, util_1.ensureHexBuffer)(input.payload);
            displayHex =
                false ===
                    constants_1.ASCII_REGEX.test(Buffer.from(input.payload.slice(2), 'hex').toString());
        }
        else {
            if (false === (0, util_1.isAsciiStr)(input.payload))
                throw new Error('Currently, the Lattice can only display ASCII strings.');
            payload = Buffer.from(input.payload);
        }
    }
    else if (typeof input.displayHex === 'boolean') {
        // If this is a buffer and the user has specified whether or not this
        // is a hex buffer with the optional argument, write that
        displayHex = input.displayHex;
    }
    else {
        // Otherwise, determine if this buffer is an ASCII string. If it is, set `displayHex` accordingly.
        // NOTE: THIS MEANS THAT NON-ASCII STRINGS WILL DISPLAY AS HEX SINCE WE CANNOT KNOW IF THE REQUESTER
        //        EXPECTED NON-ASCII CHARACTERS TO DISPLAY IN A STRING
        // TODO: Develop a more elegant solution for this
        if (!input.payload.toString)
            throw new Error('Unsupported input data type');
        displayHex = false === constants_1.ASCII_REGEX.test(input.payload.toString());
    }
    var fwConst = input.fwConstants;
    var maxSzAllowed = MAX_BASE_MSG_SZ + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;
    if (fwConst.personalSignHeaderSz) {
        // Account for the personal_sign header string
        maxSzAllowed -= fwConst.personalSignHeaderSz;
    }
    if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {
        // If this message will not fit and pre-hashing is allowed, do that
        req.payload.writeUInt8(displayHex, off);
        off += 1;
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        var prehash = Buffer.from((0, js_sha3_1.keccak256)(Buffer.concat([get_personal_sign_prefix(payload.length), payload])), 'hex');
        prehash.copy(req.payload, off);
        req.prehash = prehash;
    }
    else {
        // Otherwise we can fit the payload.
        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable
        var extraDataPayloads = getExtraData(payload, input);
        // Write the payload and metadata into our buffer
        req.extraDataPayloads = extraDataPayloads;
        req.msg = payload;
        req.payload.writeUInt8(displayHex, off);
        off += 1;
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        payload.copy(req.payload, off);
    }
    return req;
}
function buildEIP712Request(req, input) {
    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, varAddrPathSzAllowed = _a.varAddrPathSzAllowed, eip712MaxTypeParams = _a.eip712MaxTypeParams;
    var TYPED_DATA = constants_1.ethMsgProtocol.TYPED_DATA;
    var L = 24 + ethMaxMsgSz + 4;
    var off = 0;
    req.payload = Buffer.alloc(L);
    req.payload.writeUInt8(TYPED_DATA.enumIdx, 0);
    off += 1;
    // Write the signer path
    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, varAddrPathSzAllowed);
    signerPathBuf.copy(req.payload, off);
    off += signerPathBuf.length;
    // Parse/clean the EIP712 payload, serialize with CBOR, and write to the payload
    var data = JSON.parse(JSON.stringify(input.payload));
    if (!data.primaryType || !data.types[data.primaryType])
        throw new Error('primaryType must be specified and the type must be included.');
    if (!data.message || !data.domain)
        throw new Error('message and domain must be specified.');
    if (0 > Object.keys(data.types).indexOf('EIP712Domain'))
        throw new Error('EIP712Domain type must be defined.');
    // Parse the payload to ensure we have valid EIP712 data types and that
    // they are encoded such that Lattice firmware can parse them.
    // We need two different encodings: one to send to the Lattice in a format that plays
    // nicely with our firmware CBOR decoder. The other is formatted to be consumable by
    // our EIP712 validation module.
    input.payload.message = parseEIP712Msg(JSON.parse(JSON.stringify(data.message)), JSON.parse(JSON.stringify(data.primaryType)), JSON.parse(JSON.stringify(data.types)), true);
    input.payload.domain = parseEIP712Msg(JSON.parse(JSON.stringify(data.domain)), 'EIP712Domain', JSON.parse(JSON.stringify(data.types)), true);
    data.domain = parseEIP712Msg(data.domain, 'EIP712Domain', data.types, false);
    data.message = parseEIP712Msg(data.message, data.primaryType, data.types, false);
    // Now build the message to be sent to the Lattice
    var payload = Buffer.from(borc_1.default.encode(data));
    var fwConst = input.fwConstants;
    var maxSzAllowed = ethMaxMsgSz + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;
    // Determine if we need to prehash
    var shouldPrehash = payload.length > maxSzAllowed;
    Object.keys(data.types).forEach(function (k) {
        if (data.types[k].length > eip712MaxTypeParams) {
            shouldPrehash = true;
        }
    });
    if (fwConst.ethMsgPreHashAllowed && shouldPrehash) {
        // If this payload is too large to send, but the Lattice allows a prehashed message, do that
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        var prehash = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);
        var prehashBuf = Buffer.from(prehash);
        prehashBuf.copy(req.payload, off);
        req.prehash = prehash;
    }
    else {
        var extraDataPayloads = getExtraData(payload, input);
        req.extraDataPayloads = extraDataPayloads;
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        payload.copy(req.payload, off);
        off += payload.length;
        // Slice out the part of the buffer that we didn't use.
        req.payload = req.payload.slice(0, off);
    }
    return req;
}
function getExtraData(payload, input) {
    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, extraDataFrameSz = _a.extraDataFrameSz, extraDataMaxFrames = _a.extraDataMaxFrames;
    var MAX_BASE_MSG_SZ = ethMaxMsgSz;
    var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;
    var extraDataPayloads = [];
    if (payload.length > MAX_BASE_MSG_SZ) {
        // Determine sizes and run through sanity checks
        var maxSzAllowed = MAX_BASE_MSG_SZ + extraDataMaxFrames * extraDataFrameSz;
        if (!EXTRA_DATA_ALLOWED)
            throw new Error("Your message is ".concat(payload.length, " bytes, but can only be a maximum of ").concat(MAX_BASE_MSG_SZ));
        else if (EXTRA_DATA_ALLOWED && payload.length > maxSzAllowed)
            throw new Error("Your message is ".concat(payload.length, " bytes, but can only be a maximum of ").concat(maxSzAllowed));
        // Split overflow data into extraData frames
        var frames_2 = (0, util_1.splitFrames)(payload.slice(MAX_BASE_MSG_SZ), extraDataFrameSz);
        frames_2.forEach(function (frame) {
            var szLE = Buffer.alloc(4);
            szLE.writeUInt32LE(frame.length, 0);
            extraDataPayloads.push(Buffer.concat([szLE, frame]));
        });
    }
    return extraDataPayloads;
}
function parseEIP712Msg(msg, typeName, types, forJSParser) {
    if (forJSParser === void 0) { forJSParser = false; }
    var type = types[typeName];
    type.forEach(function (item) {
        var isArrayType = item.type.indexOf('[') > -1;
        var singularType = isArrayType
            ? item.type.slice(0, item.type.indexOf('['))
            : item.type;
        var isCustomType = Object.keys(types).indexOf(singularType) > -1;
        if (isCustomType && Array.isArray(msg)) {
            // For custom types we need to jump into the `msg` using the key (name of type) and
            // parse that entire sub-struct as if it were a message.
            // We will recurse into sub-structs until we reach a level where every item is an
            // elementary (i.e. non-custom) type.
            // For arrays, we need to loop through each message item.
            for (var i = 0; i < msg.length; i++) {
                msg[i][item.name] = parseEIP712Msg(msg[i][item.name], singularType, types, forJSParser);
            }
        }
        else if (isCustomType) {
            // Not an array means we can jump directly into the sub-struct to convert
            msg[item.name] = parseEIP712Msg(msg[item.name], singularType, types, forJSParser);
        }
        else if (Array.isArray(msg)) {
            // If we have an array for this particular type and the type we are parsing
            // is *not* a custom type, loop through the array elements and convert the types.
            for (var i = 0; i < msg.length; i++) {
                if (isArrayType) {
                    // If this type is itself an array, loop through those elements and parse individually.
                    // This code is not reachable for custom types so we assume these are arrays of
                    // elementary types.
                    for (var j = 0; j < msg[i][item.name].length; j++) {
                        msg[i][item.name][j] = parseEIP712Item(msg[i][item.name][j], singularType, forJSParser);
                    }
                }
                else {
                    // Non-arrays parse + replace one value for the elementary type
                    msg[i][item.name] = parseEIP712Item(msg[i][item.name], singularType, forJSParser);
                }
            }
        }
        else if (isArrayType) {
            // If we have an elementary array type and a non-array message level,
            //loop through the array and parse + replace  each item individually.
            for (var i = 0; i < msg[item.name].length; i++) {
                msg[item.name][i] = parseEIP712Item(msg[item.name][i], singularType, forJSParser);
            }
        }
        else {
            // If this is a singular elementary type, simply parse + replace.
            msg[item.name] = parseEIP712Item(msg[item.name], singularType, forJSParser);
        }
    });
    return msg;
}
function parseEIP712Item(data, type, forJSParser) {
    if (forJSParser === void 0) { forJSParser = false; }
    if (type === 'bytes') {
        // Variable sized bytes need to be buffer type
        data = (0, util_1.ensureHexBuffer)(data);
        if (forJSParser) {
            // For EIP712 encoding module it's easier to encode hex strings
            data = "0x".concat(data.toString('hex'));
        }
    }
    else if (type.slice(0, 5) === 'bytes') {
        // Fixed sizes bytes need to be buffer type. We also add some sanity checks.
        var nBytes = parseInt(type.slice(5));
        data = (0, util_1.ensureHexBuffer)(data);
        if (data.length !== nBytes)
            throw new Error("Expected ".concat(type, " type, but got ").concat(data.length, " bytes"));
        if (forJSParser) {
            // For EIP712 encoding module it's easier to encode hex strings
            data = "0x".concat(data.toString('hex'));
        }
    }
    else if (type === 'address') {
        // Address must be a 20 byte buffer
        data = (0, util_1.ensureHexBuffer)(data);
        // Edge case to handle the 0-address
        if (data.length === 0) {
            data = Buffer.alloc(20);
        }
        if (data.length !== 20)
            throw new Error("Address type must be 20 bytes, but got ".concat(data.length, " bytes"));
        // For EIP712 encoding module it's easier to encode hex strings
        if (forJSParser) {
            data = "0x".concat(data.toString('hex'));
        }
    }
    else if (constants_1.ethMsgProtocol.TYPED_DATA.typeCodes[type] &&
        (type.indexOf('uint') > -1 || type.indexOf('int') > -1)) {
        var b = (0, util_1.ensureHexBuffer)(data);
        // Edge case to handle 0-value bignums
        if (b.length === 0) {
            b = Buffer.from('00', 'hex');
        }
        // Uint256s should be encoded as bignums.
        if (forJSParser) {
            // For EIP712 encoding in this module we need strings to represent the numbers
            data = "0x".concat(b.toString('hex'));
        }
        else {
            // `bignumber.js` is needed for `cbor` encoding, which gets sent to the Lattice and plays
            // nicely with its firmware cbor lib.
            // NOTE: If we instantiate a `bignumber.js` object, it will not match what `borc` creates
            // when run inside of the browser (i.e. MetaMask). Thus we introduce this hack to make sure
            // we are creating a compatible type.
            // TODO: Find another cbor lib that is compataible with the firmware's lib in a browser
            // context. This is surprisingly difficult - I tried several libs and only cbor/borc have
            // worked (borc is a supposedly "browser compatible" version of cbor)
            data = new borc_1.default.Encoder().semanticTypes[1][0](b.toString('hex'), 16);
        }
    }
    else if (type === 'bool') {
        // Booleans need to be cast to a u8
        data = data === true ? 1 : 0;
    }
    // Other types don't need to be modified
    return data;
}
function get_personal_sign_prefix(L) {
    return Buffer.from("\u0019Ethereum Signed Message:\n".concat(L.toString()), 'utf-8');
}
function get_rlp_encoded_preimage(rawTx, txType) {
    if (txType) {
        return Buffer.concat([Buffer.from([txType]), Buffer.from((0, rlp_1.encode)(rawTx))]);
    }
    else {
        return Buffer.from((0, rlp_1.encode)(rawTx));
    }
}
// ======
// TEMPORARY BRIDGE
// We are migrating from all legacy signing paths to a single generic
// signing route. If users are attempting a legacy transaction request
// against a Lattice on firmware v0.15.0 and above, we need to convert
// that to a generic signing request.
//
// NOTE: Once we deprecate, we will remove this entire file
// ======
var ethConvertLegacyToGenericReq = function (req) {
    var common;
    if (!req.chainId || (0, util_1.ensureHexBuffer)(req.chainId).toString('hex') === '01') {
        common = new common_1.Common({ chain: common_1.Chain.Mainnet, hardfork: common_1.Hardfork.London });
    }
    else {
        // Not every network will support these EIPs but we will allow
        // signing of transactions using them
        common = common_1.Common.custom({ chainId: Number(req.chainId) }, { hardfork: common_1.Hardfork.London, eips: [1559, 2930] });
    }
    var tx = tx_1.TransactionFactory.fromTxData(req, { common: common });
    // Get the raw transaction payload to be hashed and signed.
    // Different `@ethereumjs/tx` Transaction object types have
    // slightly different APIs around this.
    if (req.type) {
        // Newer transaction types
        return tx.getMessageToSign(false);
    }
    else {
        // Legacy transaction type
        return Buffer.from((0, rlp_1.encode)(tx.getMessageToSign(false)));
    }
};
exports.default = {
    buildEthereumMsgRequest: buildEthereumMsgRequest,
    validateEthereumMsgResponse: validateEthereumMsgResponse,
    buildEthereumTxRequest: buildEthereumTxRequest,
    buildEthRawTx: buildEthRawTx,
    hashTransaction: hashTransaction,
    chainIds: chainIds,
    ensureHexBuffer: util_1.ensureHexBuffer,
    ethConvertLegacyToGenericReq: ethConvertLegacyToGenericReq,
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\ethereum.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\addKvRecords.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CaddKvRecords.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeAddKvRecordsRequest = exports.validateAddKvRequest = exports.addKvRecords = void 0;
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
/**
 * `addKvRecords` takes in a set of key-value records and sends a request to add them to the
 * Lattice.
 * @category Lattice
 * @returns A callback with an error or null.
 */
function addKvRecords(_a) {
    var client = _a.client, records = _a.records, type = _a.type, caseSensitive = _a.caseSensitive;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, data, _c, decryptedData, newEphemeralPub;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    (0, exports.validateAddKvRequest)({ records: records, fwConstants: fwConstants });
                    data = (0, exports.encodeAddKvRecordsRequest)({
                        records: records,
                        type: type,
                        caseSensitive: caseSensitive,
                        fwConstants: fwConstants,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.addKvRecords,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, decryptedData];
            }
        });
    });
}
exports.addKvRecords = addKvRecords;
var validateAddKvRequest = function (_a) {
    var records = _a.records, fwConstants = _a.fwConstants;
    (0, validators_1.validateKvRecords)(records, fwConstants);
};
exports.validateAddKvRequest = validateAddKvRequest;
var encodeAddKvRecordsRequest = function (_a) {
    var records = _a.records, type = _a.type, caseSensitive = _a.caseSensitive, fwConstants = _a.fwConstants;
    var payload = Buffer.alloc(1 + 139 * fwConstants.kvActionMaxNum);
    payload.writeUInt8(Object.keys(records).length, 0);
    var off = 1;
    Object.entries(records).forEach(function (_a) {
        var _key = _a[0], _val = _a[1];
        var _b = (0, validators_1.validateKvRecord)({ key: _key, val: _val }, fwConstants), key = _b.key, val = _b.val;
        // Skip the ID portion. This will get added by firmware.
        payload.writeUInt32LE(0, off);
        off += 4;
        payload.writeUInt32LE(type, off);
        off += 4;
        payload.writeUInt8(caseSensitive ? 1 : 0, off);
        off += 1;
        payload.writeUInt8(String(key).length + 1, off);
        off += 1;
        Buffer.from(String(key)).copy(payload, off);
        off += fwConstants.kvKeyMaxStrSz + 1;
        payload.writeUInt8(String(val).length + 1, off);
        off += 1;
        Buffer.from(String(val)).copy(payload, off);
        off += fwConstants.kvValMaxStrSz + 1;
    });
    return payload;
};
exports.encodeAddKvRecordsRequest = encodeAddKvRecordsRequest;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\addKvRecords.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\connect.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/predicates":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\predicates.js","../shared/utilities":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Cconnect.js
      return function (require, module, exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeConnectResponse = exports.validateConnectRequest = exports.connect = void 0;
var protocol_1 = require("../protocol");
var predicates_1 = require("../shared/predicates");
var utilities_1 = require("../shared/utilities");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
function connect(_a) {
    var client = _a.client, id = _a.id;
    return __awaiter(this, void 0, void 0, function () {
        var _b, deviceId, key, baseUrl, url, respPayloadData, _c, isPaired, fwVersion, activeWallets, ephemeralPub;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, exports.validateConnectRequest)({
                        deviceId: id,
                        key: client.key,
                        baseUrl: client.baseUrl,
                    }), deviceId = _b.deviceId, key = _b.key, baseUrl = _b.baseUrl;
                    url = "".concat(baseUrl, "/").concat(deviceId);
                    return [4 /*yield*/, (0, protocol_1.connectSecureRequest)({
                            url: url,
                            pubkey: client.publicKey,
                        })];
                case 1:
                    respPayloadData = _d.sent();
                    return [4 /*yield*/, (0, exports.decodeConnectResponse)(respPayloadData, key)];
                case 2:
                    _c = _d.sent(), isPaired = _c.isPaired, fwVersion = _c.fwVersion, activeWallets = _c.activeWallets, ephemeralPub = _c.ephemeralPub;
                    // Update client state with response data
                    client.mutate({
                        deviceId: deviceId,
                        ephemeralPub: ephemeralPub,
                        url: url,
                        isPaired: isPaired,
                        fwVersion: fwVersion,
                        activeWallets: activeWallets,
                    });
                    if (!(isPaired && !(0, predicates_1.doesFetchWalletsOnLoad)(client.getFwVersion()))) return [3 /*break*/, 4];
                    return [4 /*yield*/, client.fetchActiveWallet()];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4: 
                // Return flag indicating whether we are paired or not.
                // If we are *not* already paired, the Lattice is now in
                // pairing mode and expects a `finalizePairing` encrypted
                // request as a follow up.
                return [2 /*return*/, isPaired];
            }
        });
    });
}
exports.connect = connect;
var validateConnectRequest = function (_a) {
    var deviceId = _a.deviceId, key = _a.key, baseUrl = _a.baseUrl;
    var validDeviceId = (0, validators_1.validateDeviceId)(deviceId);
    var validKey = (0, validators_1.validateKey)(key);
    var validBaseUrl = (0, validators_1.validateBaseUrl)(baseUrl);
    return {
        deviceId: validDeviceId,
        key: validKey,
        baseUrl: validBaseUrl,
    };
};
exports.validateConnectRequest = validateConnectRequest;
/**
 * `decodeConnectResponse` will call `StartPairingMode` on the device, which gives the user 60 seconds to
 * finalize the pairing. This will return an ephemeral public key, which is needed for the next
 * request.
 * - If the device is already paired, this ephemPub is simply used to encrypt the next request.
 * - If the device is not paired, it is needed to pair the device within 60 seconds.
 * @category Device Response
 * @internal
 * @returns true if we are paired to the device already
 */
var decodeConnectResponse = function (response, key) {
    var off = 0;
    var isPaired = response.readUInt8(off) === protocol_1.ProtocolConstants.pairingStatus.paired;
    off++;
    // If we are already paired, we get the next ephemeral key
    var pub = response.slice(off, off + 65).toString('hex');
    off += 65; // Set the public key
    var ephemeralPub = (0, util_1.getP256KeyPairFromPub)(pub);
    // Grab the firmware version (will be 0-length for older fw versions) It is of format
    // |fix|minor|major|reserved|
    var fwVersion = response.slice(off, off + 4);
    off += 4;
    // If we are already paired, the response will include some encrypted data about the current
    // wallets This data was added in Lattice firmware v0.14.1
    if (isPaired) {
        //TODO && this._fwVersionGTE(0, 14, 1)) {
        // Later versions of firmware added wallet info
        var encWalletData = response.slice(off, off + 160);
        off += 160;
        var sharedSecret = (0, utilities_1.getSharedSecret)(key, ephemeralPub);
        var decWalletData = (0, util_1.aes256_decrypt)(encWalletData, sharedSecret);
        // Sanity check to make sure the last part of the decrypted data is empty. The last 2 bytes
        // are AES padding
        if (decWalletData[decWalletData.length - 2] !== 0 ||
            decWalletData[decWalletData.length - 1] !== 0) {
            throw new Error('Failed to connect to Lattice.');
        }
        var activeWallets = (0, utilities_1.parseWallets)(decWalletData);
        return { isPaired: isPaired, fwVersion: fwVersion, activeWallets: activeWallets, ephemeralPub: ephemeralPub };
    }
    // return the state of our pairing
    return { isPaired: isPaired, fwVersion: fwVersion, activeWallets: undefined, ephemeralPub: ephemeralPub };
};
exports.decodeConnectResponse = decodeConnectResponse;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\connect.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchActiveWallet.js", {"../constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CfetchActiveWallet.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeFetchActiveWalletResponse = exports.fetchActiveWallet = void 0;
var constants_1 = require("../constants");
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
/**
 * Fetch the active wallet in the device.
 *
 * The Lattice has two wallet interfaces: internal and external. If a SafeCard is inserted and
 * unlocked, the external interface is considered "active" and this will return its {@link Wallet}
 * data. Otherwise it will return the info for the internal Lattice wallet.
 */
function fetchActiveWallet(_a) {
    var client = _a.client;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, _c, decryptedData, newEphemeralPub, activeWallets, validActiveWallets;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub;
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: Buffer.alloc(0),
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getWallets,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;
                    activeWallets = (0, exports.decodeFetchActiveWalletResponse)(decryptedData);
                    validActiveWallets = (0, validators_1.validateActiveWallets)(activeWallets);
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                        activeWallets: validActiveWallets,
                    });
                    return [2 /*return*/, validActiveWallets];
            }
        });
    });
}
exports.fetchActiveWallet = fetchActiveWallet;
var decodeFetchActiveWalletResponse = function (data) {
    // Read the external wallet data first. If it is non-null, the external wallet will be the
    // active wallet of the device and we should save it. If the external wallet is blank, it means
    // there is no card present and we should save and use the interal wallet. If both wallets are
    // empty, it means the device still needs to be set up.
    var walletDescriptorLen = 71;
    // Internal first
    var activeWallets = {
        internal: {
            uid: constants_1.EMPTY_WALLET_UID,
            external: false,
            name: Buffer.alloc(0),
            capabilities: 0,
        },
        external: {
            uid: constants_1.EMPTY_WALLET_UID,
            external: true,
            name: Buffer.alloc(0),
            capabilities: 0,
        },
    };
    var off = 0;
    activeWallets.internal.uid = data.slice(off, off + 32);
    activeWallets.internal.capabilities = data.readUInt32BE(off + 32);
    activeWallets.internal.name = data.slice(off + 36, off + walletDescriptorLen);
    // Offset the first item
    off += walletDescriptorLen;
    // External
    activeWallets.external.uid = data.slice(off, off + 32);
    activeWallets.external.capabilities = data.readUInt32BE(off + 32);
    activeWallets.external.name = data.slice(off + 36, off + walletDescriptorLen);
    return activeWallets;
};
exports.decodeFetchActiveWalletResponse = decodeFetchActiveWalletResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\fetchActiveWallet.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchEncData.js", {"../constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/utilities":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","uuid":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CfetchEncData.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeFetchEncData = exports.encodeFetchEncDataRequest = exports.validateFetchEncDataRequest = exports.fetchEncData = void 0;
/**
 * Export encrypted data from the Lattice. Data must conform
 * to known schema, e.g. EIP2335 derived privkey export.
 */
var uuid_1 = require("uuid");
var constants_1 = require("../constants");
var protocol_1 = require("../protocol");
var utilities_1 = require("../shared/utilities");
var validators_1 = require("../shared/validators");
var ENC_DATA = constants_1.EXTERNAL.ENC_DATA;
var ENC_DATA_ERR_STR = 'Unknown encrypted data export type requested. Exiting.';
var ENC_DATA_REQ_DATA_SZ = 1025;
var ENC_DATA_RESP_SZ = {
    EIP2335: {
        CIPHERTEXT: 32,
        SALT: 32,
        CHECKSUM: 32,
        IV: 16,
        PUBKEY: 48,
    },
};
function fetchEncData(_a) {
    var client = _a.client, schema = _a.schema, params = _a.params;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwVersion, activeWallet, data, _c, decryptedData, newEphemeralPub;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwVersion = _b.fwVersion;
                    activeWallet = (0, validators_1.validateWallet)(client.getActiveWallet());
                    (0, exports.validateFetchEncDataRequest)({ params: params });
                    data = (0, exports.encodeFetchEncDataRequest)({
                        schema: schema,
                        params: params,
                        fwVersion: fwVersion,
                        activeWallet: activeWallet,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.fetchEncryptedData,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, (0, exports.decodeFetchEncData)({ data: decryptedData, schema: schema, params: params })];
            }
        });
    });
}
exports.fetchEncData = fetchEncData;
var validateFetchEncDataRequest = function (_a) {
    var params = _a.params;
    // Validate derivation path
    (0, validators_1.validateStartPath)(params.path);
};
exports.validateFetchEncDataRequest = validateFetchEncDataRequest;
var encodeFetchEncDataRequest = function (_a) {
    var schema = _a.schema, params = _a.params, fwVersion = _a.fwVersion, activeWallet = _a.activeWallet;
    // Check firmware version
    if (fwVersion.major < 1 && fwVersion.minor < 17) {
        throw new Error('Firmware version >=v0.17.0 is required for encrypted data export.');
    }
    // Update params depending on what type of data is being exported
    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {
        // Set the wallet UID to the client's current active wallet
        params.walletUID = activeWallet.uid;
    }
    else {
        throw new Error(ENC_DATA_ERR_STR);
    }
    // Build the payload data
    var payload = Buffer.alloc(ENC_DATA_REQ_DATA_SZ);
    var off = 0;
    payload.writeUInt8(schema, off);
    off += 1;
    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {
        params.walletUID.copy(payload, off);
        off += params.walletUID.length;
        payload.writeUInt8(params.path.length, off);
        off += 1;
        for (var i = 0; i < 5; i++) {
            if (i <= params.path.length) {
                payload.writeUInt32LE(params.path[i], off);
            }
            off += 4;
        }
        if (params.c) {
            payload.writeUInt32LE(params.c, off);
        }
        off += 4;
        return payload;
    }
    else {
        throw new Error(ENC_DATA_ERR_STR);
    }
};
exports.encodeFetchEncDataRequest = encodeFetchEncDataRequest;
var decodeFetchEncData = function (_a) {
    var data = _a.data, schema = _a.schema, params = _a.params;
    var off = 0;
    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {
        var respData = {};
        var _b = ENC_DATA_RESP_SZ.EIP2335, CIPHERTEXT = _b.CIPHERTEXT, SALT = _b.SALT, CHECKSUM = _b.CHECKSUM, IV = _b.IV, PUBKEY = _b.PUBKEY;
        var expectedSz = 4 + // iterations = u32
            CIPHERTEXT +
            SALT +
            CHECKSUM +
            IV +
            PUBKEY;
        var dataSz = data.readUInt32LE(off);
        off += 4;
        if (dataSz !== expectedSz) {
            throw new Error('Invalid data returned from Lattice. Expected EIP2335 data.');
        }
        respData.iterations = data.readUInt32LE(off);
        off += 4;
        respData.cipherText = data.slice(off, off + CIPHERTEXT);
        off += CIPHERTEXT;
        respData.salt = data.slice(off, off + SALT);
        off += SALT;
        respData.checksum = data.slice(off, off + CHECKSUM);
        off += CHECKSUM;
        respData.iv = data.slice(off, off + IV);
        off += IV;
        respData.pubkey = data.slice(off, off + PUBKEY);
        off += PUBKEY;
        return formatEIP2335ExportData(respData, params.path);
    }
    else {
        throw new Error(ENC_DATA_ERR_STR);
    }
};
exports.decodeFetchEncData = decodeFetchEncData;
var formatEIP2335ExportData = function (resp, path) {
    try {
        var iterations = resp.iterations, salt = resp.salt, checksum = resp.checksum, iv = resp.iv, cipherText = resp.cipherText, pubkey = resp.pubkey;
        return Buffer.from(JSON.stringify({
            'version': 4,
            'uuid': (0, uuid_1.v4)(),
            'path': (0, utilities_1.getPathStr)(path),
            'pubkey': pubkey.toString('hex'),
            'crypto': {
                'kdf': {
                    'function': 'pbkdf2',
                    'params': {
                        'dklen': 32,
                        'c': iterations,
                        'prf': 'hmac-sha256',
                        'salt': salt.toString('hex'),
                    },
                    'message': ''
                },
                'checksum': {
                    'function': 'sha256',
                    'params': {},
                    'message': checksum.toString('hex'),
                },
                'cipher': {
                    'function': 'aes-128-ctr',
                    'params': {
                        'iv': iv.toString('hex'),
                    },
                    'message': cipherText.toString('hex')
                }
            }
        }));
    }
    catch (err) {
        throw Error("Failed to format EIP2335 return data: ".concat(err.toString()));
    }
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\fetchEncData.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getAddresses.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","bitwise":"F:\\metamask-extension\\node_modules\\bitwise\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CgetAddresses.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeGetAddressesResponse = exports.encodeGetAddressesRequest = exports.validateGetAddressesRequest = exports.getAddresses = void 0;
var bitwise_1 = __importDefault(require("bitwise"));
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
/**
 * `getAddresses` takes a starting path and a number to get the addresses or public keys associated
 * with the active wallet.
 * @category Lattice
 * @returns An array of addresses or public keys.
 */
function getAddresses(_a) {
    var client = _a.client, _startPath = _a.startPath, _n = _a.n, _flag = _a.flag;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, activeWallet, _c, startPath, n, flag, data, _d, decryptedData, newEphemeralPub;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    activeWallet = (0, validators_1.validateWallet)(client.getActiveWallet());
                    _c = (0, exports.validateGetAddressesRequest)({
                        startPath: _startPath,
                        n: _n,
                        flag: _flag,
                    }), startPath = _c.startPath, n = _c.n, flag = _c.flag;
                    data = (0, exports.encodeGetAddressesRequest)({
                        startPath: startPath,
                        n: n,
                        flag: flag,
                        fwConstants: fwConstants,
                        wallet: activeWallet,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getAddresses,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, (0, exports.decodeGetAddressesResponse)(decryptedData, flag)];
            }
        });
    });
}
exports.getAddresses = getAddresses;
var validateGetAddressesRequest = function (_a) {
    var startPath = _a.startPath, n = _a.n, flag = _a.flag;
    return {
        startPath: (0, validators_1.validateStartPath)(startPath),
        n: (0, validators_1.validateNAddresses)(n),
        flag: (0, validators_1.validateIsUInt4)(flag),
    };
};
exports.validateGetAddressesRequest = validateGetAddressesRequest;
var encodeGetAddressesRequest = function (_a) {
    var _b;
    var startPath = _a.startPath, n = _a.n, flag = _a.flag, fwConstants = _a.fwConstants, wallet = _a.wallet;
    var flags = fwConstants.getAddressFlags || [];
    var isPubkeyOnly = flags.indexOf(flag) > -1 &&
        (flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey ||
            flag === protocol_1.LatticeGetAddressesFlag.secp256k1Pubkey ||
            flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey);
    if (!isPubkeyOnly && !(0, util_1.isValidAssetPath)(startPath, fwConstants)) {
        throw new Error('Derivation path or flag is not supported. Try updating Lattice firmware.');
    }
    var sz = 32 + 20 + 1; // walletUID + 5 u32 indices + count/flag
    if (fwConstants.varAddrPathSzAllowed) {
        sz += 1; // pathDepth
    }
    else if (startPath.length !== 5) {
        throw new Error('Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.');
    }
    var payload = Buffer.alloc(sz);
    var off = 0;
    wallet.uid.copy(payload, off);
    off += 32;
    // Build the start path (5x u32 indices)
    if (fwConstants.varAddrPathSzAllowed) {
        payload.writeUInt8(startPath.length, off);
        off += 1;
    }
    for (var i = 0; i < 5; i++) {
        if (i <= startPath.length) {
            var val_1 = (_b = startPath[i]) !== null && _b !== void 0 ? _b : 0;
            payload.writeUInt32BE(val_1, off);
        }
        off += 4;
    }
    // Specify the number of subsequent addresses to request. We also allow the user to skip the
    // cache and request any address related to the asset in the wallet.
    var val, flagVal = 0;
    if (fwConstants.addrFlagsAllowed) {
        // A 4-bit flag can be used for non-standard address requests Client needs to be combined with
        // `n` as a 4 bit value
        flagVal =
            fwConstants.getAddressFlags &&
                fwConstants.getAddressFlags.indexOf(flag) > -1
                ? flag
                : 0;
        var flagBits = bitwise_1.default.nibble.read(flagVal);
        var countBits = bitwise_1.default.nibble.read(n);
        val = bitwise_1.default.byte.write(flagBits.concat(countBits));
    }
    else {
        // Very old firmware does not support client flag. We can deprecate client soon.
        val = n;
    }
    payload.writeUInt8(val, off);
    off++;
    return payload;
};
exports.encodeGetAddressesRequest = encodeGetAddressesRequest;
/**
 * @internal
 * @return an array of address strings or pubkey buffers
 */
var decodeGetAddressesResponse = function (data, flag) {
    var off = 0;
    // Look for addresses until we reach the end (a 4 byte checksum)
    var addrs = [];
    // Pubkeys are formatted differently in the response
    var arePubkeys = flag === protocol_1.LatticeGetAddressesFlag.secp256k1Pubkey ||
        flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey ||
        flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey;
    if (arePubkeys) {
        off += 1; // skip uint8 representing pubkey type
    }
    var respDataLength = protocol_1.ProtocolConstants.msgSizes.secure.data.response.encrypted[protocol_1.LatticeSecureEncryptedRequestType.getAddresses];
    while (off < respDataLength) {
        if (arePubkeys) {
            // Pubkeys are shorter and are returned as buffers
            var pubBytes = data.slice(off, off + 65);
            var isEmpty = pubBytes.every(function (byte) { return byte === 0x00; });
            if (!isEmpty && flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey) {
                // ED25519 pubkeys are 32 bytes
                addrs.push(pubBytes.slice(0, 32));
            }
            else if (!isEmpty && flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey) {
                // BLS12_381_G1 keys are 48 bytes
                addrs.push(pubBytes.slice(0, 48));
            }
            else if (!isEmpty) {
                // Only other returned pubkeys are ECC, or 65 bytes Note that we return full
                // (uncompressed) ECC pubkeys
                addrs.push(pubBytes);
            }
            off += 65;
        }
        else {
            // Otherwise we are dealing with address strings
            var addrBytes = data.slice(off, off + protocol_1.ProtocolConstants.addrStrLen);
            off += protocol_1.ProtocolConstants.addrStrLen;
            // Return the UTF-8 representation
            var len = addrBytes.indexOf(0); // First 0 is the null terminator
            if (len > 0) {
                addrs.push(addrBytes.slice(0, len).toString());
            }
        }
    }
    return addrs;
};
exports.decodeGetAddressesResponse = decodeGetAddressesResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\getAddresses.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getKvRecords.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CgetKvRecords.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeGetKvRecordsResponse = exports.encodeGetKvRecordsRequest = exports.validateGetKvRequest = exports.getKvRecords = void 0;
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
function getKvRecords(_a) {
    var client = _a.client, _type = _a.type, _n = _a.n, _start = _a.start;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, _c, type, n, start, data, _d, decryptedData, newEphemeralPub;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    _c = (0, exports.validateGetKvRequest)({
                        type: _type,
                        n: _n,
                        start: _start,
                        fwConstants: fwConstants,
                    }), type = _c.type, n = _c.n, start = _c.start;
                    data = (0, exports.encodeGetKvRecordsRequest)({ type: type, n: n, start: start });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getKvRecords,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, (0, exports.decodeGetKvRecordsResponse)(decryptedData, fwConstants)];
            }
        });
    });
}
exports.getKvRecords = getKvRecords;
var validateGetKvRequest = function (_a) {
    var fwConstants = _a.fwConstants, n = _a.n, type = _a.type, start = _a.start;
    if (!fwConstants.kvActionsAllowed) {
        throw new Error('Unsupported. Please update firmware.');
    }
    if (!n || n < 1) {
        throw new Error('You must request at least one record.');
    }
    if (n > fwConstants.kvActionMaxNum) {
        throw new Error("You may only request up to ".concat(fwConstants.kvActionMaxNum, " records at once."));
    }
    if (type !== 0 && !type) {
        throw new Error('You must specify a type.');
    }
    if (start !== 0 && !start) {
        throw new Error('You must specify a type.');
    }
    return { fwConstants: fwConstants, n: n, type: type, start: start };
};
exports.validateGetKvRequest = validateGetKvRequest;
var encodeGetKvRecordsRequest = function (_a) {
    var type = _a.type, n = _a.n, start = _a.start;
    var payload = Buffer.alloc(9);
    payload.writeUInt32LE(type, 0);
    payload.writeUInt8(n, 4);
    payload.writeUInt32LE(start, 5);
    return payload;
};
exports.encodeGetKvRecordsRequest = encodeGetKvRecordsRequest;
var decodeGetKvRecordsResponse = function (data, fwConstants) {
    var off = 0;
    var nTotal = data.readUInt32BE(off);
    off += 4;
    var nFetched = parseInt(data.slice(off, off + 1).toString('hex'), 16);
    off += 1;
    if (nFetched > fwConstants.kvActionMaxNum)
        throw new Error('Too many records fetched. Firmware error.');
    var records = [];
    for (var i = 0; i < nFetched; i++) {
        var r = {};
        r.id = data.readUInt32BE(off);
        off += 4;
        r.type = data.readUInt32BE(off);
        off += 4;
        r.caseSensitive =
            parseInt(data.slice(off, off + 1).toString('hex'), 16) === 1
                ? true
                : false;
        off += 1;
        var keySz = parseInt(data.slice(off, off + 1).toString('hex'), 16);
        off += 1;
        r.key = data.slice(off, off + keySz - 1).toString();
        off += fwConstants.kvKeyMaxStrSz + 1;
        var valSz = parseInt(data.slice(off, off + 1).toString('hex'), 16);
        off += 1;
        r.val = data.slice(off, off + valSz - 1).toString();
        off += fwConstants.kvValMaxStrSz + 1;
        records.push(r);
    }
    return {
        records: records,
        total: nTotal,
        fetched: nFetched,
    };
};
exports.decodeGetKvRecordsResponse = decodeGetKvRecordsResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\getKvRecords.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\index.js", {"./addKvRecords":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\addKvRecords.js","./connect":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\connect.js","./fetchActiveWallet":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchActiveWallet.js","./fetchEncData":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchEncData.js","./getAddresses":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getAddresses.js","./getKvRecords":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getKvRecords.js","./pair":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\pair.js","./removeKvRecords":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\removeKvRecords.js","./sign":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\sign.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./addKvRecords"), exports);
__exportStar(require("./connect"), exports);
__exportStar(require("./fetchEncData"), exports);
__exportStar(require("./fetchActiveWallet"), exports);
__exportStar(require("./getAddresses"), exports);
__exportStar(require("./getKvRecords"), exports);
__exportStar(require("./pair"), exports);
__exportStar(require("./removeKvRecords"), exports);
__exportStar(require("./sign"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\pair.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/utilities":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Cpair.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodePairRequest = exports.pair = void 0;
var protocol_1 = require("../protocol");
var utilities_1 = require("../shared/utilities");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
/**
 * If a pairing secret is provided, `pair` uses it to sign a hash of the public key, name, and
 * pairing secret. It then sends the name and signature to the device. If no pairing secret is
 * provided, `pair` sends a zero-length name buffer to the device.
 * @category Lattice
 * @returns The active wallet object.
 */
function pair(_a) {
    var client = _a.client, pairingSecret = _a.pairingSecret;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, appName, key, data, newEphemeralPub;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, appName = _b.appName, key = _b.key;
                    data = (0, exports.encodePairRequest)({ pairingSecret: pairingSecret, key: key, appName: appName });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.finalizePairing,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    newEphemeralPub = (_c.sent()).newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                        isPaired: true,
                    });
                    return [4 /*yield*/, client.fetchActiveWallet()];
                case 2:
                    _c.sent();
                    return [2 /*return*/, client.hasActiveWallet()];
            }
        });
    });
}
exports.pair = pair;
var encodePairRequest = function (_a) {
    var key = _a.key, pairingSecret = _a.pairingSecret, appName = _a.appName;
    // Build the payload data
    var pubKeyBytes = (0, utilities_1.getPubKeyBytes)(key);
    var nameBuf = Buffer.alloc(25);
    if (pairingSecret.length > 0) {
        // If a pairing secret of zero length is passed in, it usually indicates we want to cancel
        // the pairing attempt. In this case we pass a zero-length name buffer so the firmware can
        // know not to draw the error screen. Note that we still expect an error to come back
        // (RESP_ERR_PAIR_FAIL)
        nameBuf.write(appName);
    }
    var hash = (0, util_1.generateAppSecret)(pubKeyBytes, nameBuf, Buffer.from(pairingSecret));
    var sig = key.sign(hash); // returns an array, not a buffer
    var derSig = (0, util_1.toPaddedDER)(sig);
    var payload = Buffer.concat([nameBuf, derSig]);
    return payload;
};
exports.encodePairRequest = encodePairRequest;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\pair.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\removeKvRecords.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CremoveKvRecords.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeRemoveKvRecordsRequest = exports.validateRemoveKvRequest = exports.removeKvRecords = void 0;
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
/**
 * `removeKvRecords` takes in an array of ids and sends a request to remove them from the Lattice.
 * @category Lattice
 * @returns A callback with an error or null.
 */
function removeKvRecords(_a) {
    var client = _a.client, _type = _a.type, _ids = _a.ids;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, _c, type, ids, data, _d, decryptedData, newEphemeralPub;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    _c = (0, exports.validateRemoveKvRequest)({
                        fwConstants: fwConstants,
                        type: _type,
                        ids: _ids,
                    }), type = _c.type, ids = _c.ids;
                    data = (0, exports.encodeRemoveKvRecordsRequest)({
                        type: type,
                        ids: ids,
                        fwConstants: fwConstants,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.removeKvRecords,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, decryptedData];
            }
        });
    });
}
exports.removeKvRecords = removeKvRecords;
var validateRemoveKvRequest = function (_a) {
    var fwConstants = _a.fwConstants, type = _a.type, ids = _a.ids;
    if (!fwConstants.kvActionsAllowed) {
        throw new Error('Unsupported. Please update firmware.');
    }
    if (!Array.isArray(ids) || ids.length < 1) {
        throw new Error('You must include one or more `ids` to removed.');
    }
    if (ids.length > fwConstants.kvRemoveMaxNum) {
        throw new Error("Only up to ".concat(fwConstants.kvRemoveMaxNum, " records may be removed at once."));
    }
    if (type !== 0 && !type) {
        throw new Error('You must specify a type.');
    }
    return { type: type, ids: ids };
};
exports.validateRemoveKvRequest = validateRemoveKvRequest;
var encodeRemoveKvRecordsRequest = function (_a) {
    var fwConstants = _a.fwConstants, type = _a.type, ids = _a.ids;
    var payload = Buffer.alloc(5 + 4 * fwConstants.kvRemoveMaxNum);
    payload.writeUInt32LE(type, 0);
    payload.writeUInt8(ids.length, 4);
    for (var i = 0; i < ids.length; i++) {
        var id = parseInt(ids[i]);
        payload.writeUInt32LE(id, 5 + 4 * i);
    }
    return payload;
};
exports.encodeRemoveKvRecordsRequest = encodeRemoveKvRecordsRequest;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\removeKvRecords.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\sign.js", {"../bitcoin":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\bitcoin.js","../constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../ethereum":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\ethereum.js","../genericSigning":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\genericSigning.js","../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/functions":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js":"F:\\metamask-extension\\node_modules\\hash.js\\lib\\hash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Csign.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeSignResponse = exports.encodeSignRequest = exports.sign = void 0;
var hash_js_1 = require("hash.js");
var bitcoin_1 = __importDefault(require("../bitcoin"));
var constants_1 = require("../constants");
var ethereum_1 = __importDefault(require("../ethereum"));
var genericSigning_1 = require("../genericSigning");
var protocol_1 = require("../protocol");
var functions_1 = require("../shared/functions");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
/**
 * `sign` builds and sends a request for signing to the device.
 * @category Lattice
 * @returns The response from the device.
 */
function sign(_a) {
    var client = _a.client, data = _a.data, currency = _a.currency, cachedData = _a.cachedData, nextCode = _a.nextCode;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, wallet, _c, requestData, isGeneric, _d, payload, hasExtraPayloads, _e, decryptedData, newEphemeralPub, decodedResponse;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    wallet = (0, validators_1.validateWallet)(client.getActiveWallet());
                    _c = (0, functions_1.buildTransaction)({
                        data: data,
                        currency: currency,
                        fwConstants: fwConstants,
                    }), requestData = _c.requestData, isGeneric = _c.isGeneric;
                    _d = (0, exports.encodeSignRequest)({
                        fwConstants: fwConstants,
                        wallet: wallet,
                        requestData: requestData,
                        cachedData: cachedData,
                        nextCode: nextCode,
                    }), payload = _d.payload, hasExtraPayloads = _d.hasExtraPayloads;
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: payload,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.sign,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _e = _f.sent(), decryptedData = _e.decryptedData, newEphemeralPub = _e.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    // If this request has multiple payloads, we need to recurse
                    // so that we can make the next request.
                    // It is chained to the first request using `nextCode`
                    if (hasExtraPayloads) {
                        return [2 /*return*/, client.sign({
                                data: data,
                                currency: currency,
                                cachedData: requestData,
                                nextCode: decryptedData.slice(0, 8),
                            })];
                    }
                    decodedResponse = (0, exports.decodeSignResponse)({
                        data: decryptedData,
                        request: requestData,
                        isGeneric: isGeneric,
                        currency: currency,
                    });
                    return [2 /*return*/, decodedResponse];
            }
        });
    });
}
exports.sign = sign;
var encodeSignRequest = function (_a) {
    var _b, _c, _d;
    var fwConstants = _a.fwConstants, wallet = _a.wallet, requestData = _a.requestData, cachedData = _a.cachedData, nextCode = _a.nextCode;
    var reqPayload, schema;
    if (cachedData && nextCode) {
        requestData = cachedData;
        reqPayload = Buffer.concat([
            nextCode,
            requestData.extraDataPayloads.shift(),
        ]);
        schema = protocol_1.LatticeSignSchema.extraData;
    }
    else {
        reqPayload = requestData.payload;
        schema = requestData.schema;
    }
    var payload = Buffer.alloc(2 + fwConstants.reqMaxDataSz);
    var off = 0;
    var hasExtraPayloads = requestData.extraDataPayloads &&
        Number(requestData.extraDataPayloads.length > 0);
    payload.writeUInt8(hasExtraPayloads, off);
    off += 1;
    // Copy request schema (e.g. ETH or BTC transfer)
    payload.writeUInt8(schema, off);
    off += 1;
    // Copy the wallet UID
    (_b = wallet.uid) === null || _b === void 0 ? void 0 : _b.copy(payload, off);
    off += (_d = (_c = wallet.uid) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
    // Build data based on the type of request
    reqPayload.copy(payload, off);
    return { payload: payload, hasExtraPayloads: hasExtraPayloads };
};
exports.encodeSignRequest = encodeSignRequest;
var decodeSignResponse = function (_a) {
    var _b;
    var data = _a.data, request = _a.request, isGeneric = _a.isGeneric, currency = _a.currency;
    var off = 0;
    var derSigLen = 74; // DER signatures are 74 bytes
    if (currency === constants_1.CURRENCIES.BTC) {
        var btcRequest = request;
        var pkhLen = 20; // Pubkeyhashes are 20 bytes
        var sigsLen = 740; // Up to 10x DER signatures
        var changeVersion = bitcoin_1.default.getAddressFormat(btcRequest.origData.changePath);
        var changePubKeyHash = data.slice(off, off + pkhLen);
        off += pkhLen;
        var changeRecipient = bitcoin_1.default.getBitcoinAddress(changePubKeyHash, changeVersion);
        var compressedPubLength = 33; // Size of compressed public key
        var pubkeys = [];
        var sigs = [];
        var n = 0;
        // Parse the signature for each output -- they are returned in the serialized payload in form
        // [pubkey, sig] There is one signature per output
        while (off < data.length) {
            // Exit out if we have seen all the returned sigs and pubkeys
            if (data[off] !== 0x30)
                break;
            // Otherwise grab another set Note that all DER sigs returned fill the maximum 74 byte
            // buffer, but also contain a length at off+1, which we use to parse the non-zero data.
            // First get the signature from its slot
            var sigStart = off;
            var sigEnd = off + 2 + data[off + 1];
            sigs.push(data.slice(sigStart, sigEnd));
            off += derSigLen;
            // Next, shift by the full set of signatures to hit the respective pubkey NOTE: The data
            // returned is: [<sig0>, <sig1>, ... <sig9>][<pubkey0>, <pubkey1>, ... <pubkey9>]
            var pubStart = n * compressedPubLength + sigsLen;
            var pubEnd = (n + 1) * compressedPubLength + sigsLen;
            pubkeys.push(data.slice(pubStart, pubEnd));
            // Update offset to hit the next signature slot
            n += 1;
        }
        // Build the transaction data to be serialized
        var preSerializedData = {
            inputs: [],
            outputs: [],
        };
        // First output comes from request dta
        preSerializedData.outputs.push({
            value: btcRequest.origData.value,
            recipient: btcRequest.origData.recipient,
        });
        if (((_b = btcRequest.changeData) === null || _b === void 0 ? void 0 : _b.value) && btcRequest.changeData.value > 0) {
            // Second output comes from change data
            preSerializedData.outputs.push({
                value: btcRequest.changeData.value,
                recipient: changeRecipient,
            });
        }
        // Add the inputs
        for (var i = 0; i < sigs.length; i++) {
            preSerializedData.inputs.push({
                hash: btcRequest.origData.prevOuts[i].txHash,
                index: btcRequest.origData.prevOuts[i].index,
                sig: sigs[i],
                pubkey: pubkeys[i],
                signerPath: btcRequest.origData.prevOuts[i].signerPath,
            });
        }
        // Finally, serialize the transaction
        var serializedTx = bitcoin_1.default.serializeTx(preSerializedData);
        // Generate the transaction hash so the user can look this transaction up later
        var preImageTxHash = serializedTx;
        var txHashPre = Buffer.from((0, hash_js_1.sha256)().update(Buffer.from(preImageTxHash, 'hex')).digest('hex'), 'hex');
        // Add extra data for debugging/lookup purposes
        return {
            tx: serializedTx,
            txHash: (0, hash_js_1.sha256)().update(txHashPre).digest('hex'),
            changeRecipient: changeRecipient,
            sigs: sigs,
        };
    }
    else if (currency === constants_1.CURRENCIES.ETH && !isGeneric) {
        var sig = (0, util_1.parseDER)(data.slice(off, off + 2 + data[off + 1]));
        off += derSigLen;
        var ethAddr = data.slice(off, off + 20);
        // Determine the `v` param and add it to the sig before returning
        var _c = ethereum_1.default.buildEthRawTx(request, sig, ethAddr), rawTx = _c.rawTx, sigWithV = _c.sigWithV;
        return {
            tx: "0x".concat(rawTx),
            txHash: "0x".concat(ethereum_1.default.hashTransaction(rawTx)),
            sig: {
                v: sigWithV.v,
                r: sigWithV.r.toString('hex'),
                s: sigWithV.s.toString('hex'),
            },
            signer: ethAddr,
        };
    }
    else if (currency === constants_1.CURRENCIES.ETH_MSG) {
        var sig = (0, util_1.parseDER)(data.slice(off, off + 2 + data[off + 1]));
        off += derSigLen;
        var signer = data.slice(off, off + 20);
        var validatedSig = ethereum_1.default.validateEthereumMsgResponse({ signer: signer, sig: sig }, request);
        return {
            sig: {
                v: validatedSig.v,
                r: validatedSig.r.toString('hex'),
                s: validatedSig.s.toString('hex'),
            },
            signer: signer,
        };
    }
    else {
        // Generic signing request
        return (0, genericSigning_1.parseGenericSigningResponse)(data, off, request);
    }
};
exports.decodeSignResponse = decodeSignResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\sign.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\genericSigning.js", {"./constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./index":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","./protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js/lib/hash/sha":"F:\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js","js-sha3":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5CgenericSigning.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEncodedPayload = exports.parseGenericSigningResponse = exports.buildGenericSigningMsgRequest = void 0;
/**
Generic signing module. Any payload can be sent to the Lattice and
will be displayed in full (note that \n and \t characters will be
displayed as line breaks and tabs on the screen).

This payload should be coupled with:
* Signer's BIP44 path
* Curve on which to derive the signing key
* Hash function to use on the message
*/
var sha_1 = require("hash.js/lib/hash/sha");
var js_sha3_1 = require("js-sha3");
var constants_1 = require("./constants");
var index_1 = require("./index");
var protocol_1 = require("./protocol");
var util_1 = require("./util");
var buildGenericSigningMsgRequest = function (req) {
    var signerPath = req.signerPath, curveType = req.curveType, hashType = req.hashType, _a = req.encodingType, encodingType = _a === void 0 ? null : _a, _b = req.decoder, decoder = _b === void 0 ? null : _b, _c = req.omitPubkey, omitPubkey = _c === void 0 ? false : _c, fwConstants = req.fwConstants, _d = req.blsDst, blsDst = _d === void 0 ? index_1.Constants.SIGNING.BLS_DST.BLS_DST_NUL : _d;
    var extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed, genericSigning = fwConstants.genericSigning, varAddrPathSzAllowed = fwConstants.varAddrPathSzAllowed;
    var curveTypes = genericSigning.curveTypes, encodingTypes = genericSigning.encodingTypes, hashTypes = genericSigning.hashTypes, baseDataSz = genericSigning.baseDataSz, baseReqSz = genericSigning.baseReqSz, calldataDecoding = genericSigning.calldataDecoding;
    var encodedPayload = (0, exports.getEncodedPayload)(req.payload, encodingType, encodingTypes);
    var encoding = encodedPayload.encoding;
    var payloadBuf = encodedPayload.payloadBuf;
    var origPayloadBuf = payloadBuf;
    var payloadDataSz = payloadBuf.length;
    // Size of data payload that can be included in the first/base request
    var maxExpandedSz = baseDataSz + extraDataMaxFrames * extraDataFrameSz;
    // Sanity checks
    if (!payloadDataSz) {
        throw new Error('Payload could not be handled.');
    }
    else if (!genericSigning ||
        !extraDataFrameSz ||
        !extraDataMaxFrames ||
        !prehashAllowed) {
        throw new Error('Unsupported. Please update your Lattice firmware.');
    }
    else if (!(0, util_1.existsIn)(curveType, curveTypes)) {
        throw new Error('Unsupported curve type.');
    }
    else if (!(0, util_1.existsIn)(hashType, hashTypes)) {
        throw new Error('Unsupported hash type.');
    }
    // If there is a decoder attached to our payload, add it to
    // the data field of the request.
    var hasDecoder = (decoder && calldataDecoding && decoder.length <= calldataDecoding.maxSz);
    // Make sure the payload AND decoder data fits in the firmware buffer.
    // If it doesn't, we can't include the decoder because the payload will likely
    // be pre-hashed and the decoder data isn't part of the message to sign.
    var decoderFits = (hasDecoder && payloadBuf.length + decoder.length <= maxExpandedSz);
    if (hasDecoder && decoderFits) {
        var decoderBuf = Buffer.alloc(8 + decoder.length);
        // First write th reserved word
        decoderBuf.writeUInt32LE(calldataDecoding.reserved, 0);
        // Then write size, then the data
        decoderBuf.writeUInt32LE(decoder.length, 4);
        Buffer.from(decoder).copy(decoderBuf, 8);
        payloadBuf = Buffer.concat([payloadBuf, decoderBuf]);
    }
    // Ed25519 specific sanity checks
    if (curveType === curveTypes.ED25519) {
        if (hashType !== hashTypes.NONE) {
            throw new Error('Signing on ed25519 requires unhashed message');
        }
        signerPath.forEach(function (idx) {
            if (idx < constants_1.HARDENED_OFFSET) {
                throw new Error('Signing on ed25519 requires all signer path indices be hardened.');
            }
        });
    }
    // BLS12_381 specific processing
    else if (curveType === curveTypes.BLS12_381_G2) {
        // For BLS signing we need to prefix 4 bytes to represent the
        // domain separator (DST). If none is provided, we use the default
        // value of DST_NUL.
        var blsDstBuf = Buffer.alloc(4);
        blsDstBuf.writeUInt32LE(blsDst);
        payloadBuf = Buffer.concat([blsDstBuf, payloadBuf]);
        payloadDataSz += blsDstBuf.length;
    }
    // Build the request buffer with metadata and then the payload to sign.
    var buf = Buffer.alloc(baseReqSz);
    var off = 0;
    buf.writeUInt32LE(encoding, off);
    off += 4;
    buf.writeUInt8(hashType, off);
    off += 1;
    buf.writeUInt8(curveType, off);
    off += 1;
    var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, varAddrPathSzAllowed);
    signerPathBuf.copy(buf, off);
    off += signerPathBuf.length;
    buf.writeUInt8(omitPubkey ? 1 : 0, off);
    off += 1;
    // Flow data into extraData requests if applicable
    var extraDataPayloads = [];
    var prehash = null;
    var didPrehash = false;
    if (payloadBuf.length > baseDataSz) {
        if (prehashAllowed && payloadBuf.length > maxExpandedSz) {
            // If we prehash, we need to provide the full payload size
            buf.writeUInt16LE(payloadBuf.length, off);
            off += 2;
            didPrehash = true;
            // If we have to prehash, only hash the actual payload data, i.e. exclude
            // any optional calldata decoder data.
            var payloadData = payloadBuf.slice(0, payloadDataSz);
            // If this payload is too large to send, but the Lattice allows a prehashed message, do that
            if (hashType === hashTypes.NONE) {
                // This cannot be done for ED25519 signing, which must sign the full message
                throw new Error('Message too large to send and could not be prehashed (hashType=NONE).');
            }
            else if (hashType === hashTypes.KECCAK256) {
                prehash = Buffer.from((0, js_sha3_1.keccak256)(payloadData), 'hex');
            }
            else if (hashType === hashTypes.SHA256) {
                prehash = Buffer.from((0, sha_1.sha256)().update(payloadData).digest('hex'), 'hex');
            }
            else {
                throw new Error('Unsupported hash type.');
            }
        }
        else {
            // Split overflow data into extraData frames
            var frames_1 = (0, util_1.splitFrames)(payloadBuf.slice(baseDataSz), extraDataFrameSz);
            frames_1.forEach(function (frame) {
                var szLE = Buffer.alloc(4);
                szLE.writeUInt32LE(frame.length, 0);
                extraDataPayloads.push(Buffer.concat([szLE, frame]));
            });
        }
    }
    // If we didn't prehash, we know the full request (including calldata info) fits.
    // Set the payload size to only include message data. This will inform firmware
    // where to slice off calldata info.
    if (!didPrehash) {
        buf.writeUInt16LE(payloadDataSz, off);
        off += 2;
    }
    // If the message had to be prehashed, we will only copy the hash data into the request.
    // Otherwise copy as many payload bytes into the request as possible. Follow up data
    // from `frames` will come in follow up requests.
    var toCopy = prehash ? prehash : payloadBuf;
    toCopy.copy(buf, off);
    // Return all the necessary data
    return {
        payload: buf,
        extraDataPayloads: extraDataPayloads,
        schema: protocol_1.LatticeSignSchema.generic,
        curveType: curveType,
        encodingType: encodingType,
        hashType: hashType,
        omitPubkey: omitPubkey,
        origPayloadBuf: origPayloadBuf,
    };
};
exports.buildGenericSigningMsgRequest = buildGenericSigningMsgRequest;
var parseGenericSigningResponse = function (res, off, req) {
    var parsed = {
        pubkey: null,
        sig: null,
    };
    // Parse BIP44 path
    // Parse pubkey and then sig
    if (req.curveType === index_1.Constants.SIGNING.CURVES.SECP256K1) {
        // Handle `GpEccPubkey256_t`
        if (!req.omitPubkey) {
            var compression = res.readUInt8(off);
            off += 1;
            if (compression === 0x02 || compression === 0x03) {
                // Compressed key - only copy x
                parsed.pubkey = Buffer.alloc(33);
                parsed.pubkey.writeUInt8(compression, 0);
                res.slice(off, off + 32).copy(parsed.pubkey, 1);
            }
            else if (compression === 0x04) {
                // Uncompressed key
                parsed.pubkey = Buffer.alloc(65);
                parsed.pubkey.writeUInt8(compression, 0);
                res.slice(off).copy(parsed.pubkey, 1);
            }
            else {
                throw new Error('Bad compression byte in signing response.');
            }
            off += 64;
        }
        else {
            // Skip pubkey section
            off += 65;
        }
        // Handle `GpECDSASig_t`
        parsed.sig = (0, util_1.parseDER)(res.slice(off, off + 2 + res[off + 1]));
        // Remove any leading zeros in signature components to ensure
        // the result is a 64 byte sig
        parsed.sig.r = (0, util_1.fixLen)(parsed.sig.r, 32);
        parsed.sig.s = (0, util_1.fixLen)(parsed.sig.s, 32);
        // If this is an EVM request, we want to add a `v`. Other request
        // types do not require this additional signature param.
        if (req.encodingType === index_1.Constants.SIGNING.ENCODINGS.EVM) {
            var vBn = (0, util_1.getV)(req.origPayloadBuf, parsed);
            // NOTE: For backward-compatibility reasons we are returning
            // a Buffer for `v` here. In the future, we will switch to
            // returning `v` as a BN and `r`,`s` as Buffers (they are hex
            // strings right now).
            parsed.sig.v = vBn.toArrayLike(Buffer);
        }
    }
    else if (req.curveType === index_1.Constants.SIGNING.CURVES.ED25519) {
        if (!req.omitPubkey) {
            // Handle `GpEdDSAPubkey_t`
            parsed.pubkey = Buffer.alloc(32);
            res.slice(off, off + 32).copy(parsed.pubkey);
        }
        off += 32;
        // Handle `GpEdDSASig_t`
        parsed.sig = {
            r: res.slice(off, off + 32),
            s: res.slice(off + 32, off + 64),
        };
    }
    else if (req.curveType === index_1.Constants.SIGNING.CURVES.BLS12_381_G2) {
        if (!req.omitPubkey) {
            // Handle `GpBLS12_381_G1Pub_t`
            parsed.pubkey = Buffer.alloc(48);
            res.slice(off, off + 48).copy(parsed.pubkey);
        }
        off += 48;
        // Handle `GpBLS12_381_G2Sig_t`
        parsed.sig = Buffer.alloc(96);
        res.slice(off, off + 96).copy(parsed.sig);
    }
    else {
        throw new Error('Unsupported curve.');
    }
    return parsed;
};
exports.parseGenericSigningResponse = parseGenericSigningResponse;
var getEncodedPayload = function (payload, encoding, allowedEncodings) {
    if (!encoding) {
        encoding = index_1.Constants.SIGNING.ENCODINGS.NONE;
    }
    // Make sure the encoding type specified is supported by firmware
    if (!(0, util_1.existsIn)(encoding, allowedEncodings)) {
        throw new Error('Encoding not supported by Lattice firmware. You may want to update.');
    }
    var payloadBuf;
    if (!payload) {
        throw new Error('No payload included');
    }
    if (typeof payload === 'string' && payload.slice(0, 2) === '0x') {
        payloadBuf = Buffer.from(payload.slice(2), 'hex');
    }
    else {
        payloadBuf = Buffer.from(payload);
    }
    // Build the request with the specified encoding type
    return {
        payloadBuf: payloadBuf,
        encoding: encoding,
    };
};
exports.getEncodedPayload = getEncodedPayload;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\genericSigning.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js", {"./api":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\index.js","./calldata/index":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\calldata\\index.js","./client":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\client.js","./constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.Constants = exports.Client = exports.Calldata = void 0;
var index_1 = require("./calldata/index");
Object.defineProperty(exports, "Calldata", { enumerable: true, get: function () { return index_1.CALLDATA; } });
var client_1 = require("./client");
Object.defineProperty(exports, "Client", { enumerable: true, get: function () { return client_1.Client; } });
var constants_1 = require("./constants");
Object.defineProperty(exports, "Constants", { enumerable: true, get: function () { return constants_1.EXTERNAL; } });
var util_1 = require("./util");
Object.defineProperty(exports, "Utils", { enumerable: true, get: function () { return util_1.EXTERNAL; } });
__exportStar(require("./api"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js", {"./latticeConstants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js","./secureMessages":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\secureMessages.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cprotocol%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./latticeConstants"), exports);
__exportStar(require("./secureMessages"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\protocol\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cprotocol%5ClatticeConstants.js
      return function (require, module, exports) {
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolConstants = exports.LatticeEncDataSchema = exports.LatticeSignBlsDst = exports.LatticeSignEncoding = exports.LatticeSignCurve = exports.LatticeSignHash = exports.LatticeSignSchema = exports.LatticeGetAddressesFlag = exports.LatticeSecureEncryptedRequestType = exports.LatticeMsgType = exports.LatticeProtocolVersion = exports.LatticeSecureMsgType = exports.LatticeResponseCode = void 0;
var LatticeResponseCode;
(function (LatticeResponseCode) {
    LatticeResponseCode[LatticeResponseCode["success"] = 0] = "success";
    LatticeResponseCode[LatticeResponseCode["invalidMsg"] = 128] = "invalidMsg";
    LatticeResponseCode[LatticeResponseCode["unsupportedVersion"] = 129] = "unsupportedVersion";
    LatticeResponseCode[LatticeResponseCode["deviceBusy"] = 130] = "deviceBusy";
    LatticeResponseCode[LatticeResponseCode["userTimeout"] = 131] = "userTimeout";
    LatticeResponseCode[LatticeResponseCode["userDeclined"] = 132] = "userDeclined";
    LatticeResponseCode[LatticeResponseCode["pairFailed"] = 133] = "pairFailed";
    LatticeResponseCode[LatticeResponseCode["pairDisabled"] = 134] = "pairDisabled";
    LatticeResponseCode[LatticeResponseCode["permissionDisabled"] = 135] = "permissionDisabled";
    LatticeResponseCode[LatticeResponseCode["internalError"] = 136] = "internalError";
    LatticeResponseCode[LatticeResponseCode["gceTimeout"] = 137] = "gceTimeout";
    LatticeResponseCode[LatticeResponseCode["wrongWallet"] = 138] = "wrongWallet";
    LatticeResponseCode[LatticeResponseCode["deviceLocked"] = 139] = "deviceLocked";
    LatticeResponseCode[LatticeResponseCode["disabled"] = 140] = "disabled";
    LatticeResponseCode[LatticeResponseCode["already"] = 141] = "already";
    LatticeResponseCode[LatticeResponseCode["invalidEphemId"] = 142] = "invalidEphemId";
})(LatticeResponseCode = exports.LatticeResponseCode || (exports.LatticeResponseCode = {}));
var LatticeSecureMsgType;
(function (LatticeSecureMsgType) {
    LatticeSecureMsgType[LatticeSecureMsgType["connect"] = 1] = "connect";
    LatticeSecureMsgType[LatticeSecureMsgType["encrypted"] = 2] = "encrypted";
})(LatticeSecureMsgType = exports.LatticeSecureMsgType || (exports.LatticeSecureMsgType = {}));
var LatticeProtocolVersion;
(function (LatticeProtocolVersion) {
    LatticeProtocolVersion[LatticeProtocolVersion["v1"] = 1] = "v1";
})(LatticeProtocolVersion = exports.LatticeProtocolVersion || (exports.LatticeProtocolVersion = {}));
var LatticeMsgType;
(function (LatticeMsgType) {
    LatticeMsgType[LatticeMsgType["response"] = 0] = "response";
    LatticeMsgType[LatticeMsgType["secure"] = 2] = "secure";
})(LatticeMsgType = exports.LatticeMsgType || (exports.LatticeMsgType = {}));
var LatticeSecureEncryptedRequestType;
(function (LatticeSecureEncryptedRequestType) {
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["finalizePairing"] = 0] = "finalizePairing";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["getAddresses"] = 1] = "getAddresses";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["sign"] = 3] = "sign";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["getWallets"] = 4] = "getWallets";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["getKvRecords"] = 7] = "getKvRecords";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["addKvRecords"] = 8] = "addKvRecords";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["removeKvRecords"] = 9] = "removeKvRecords";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["fetchEncryptedData"] = 12] = "fetchEncryptedData";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["test"] = 13] = "test";
})(LatticeSecureEncryptedRequestType = exports.LatticeSecureEncryptedRequestType || (exports.LatticeSecureEncryptedRequestType = {}));
var LatticeGetAddressesFlag;
(function (LatticeGetAddressesFlag) {
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["none"] = 0] = "none";
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["secp256k1Pubkey"] = 3] = "secp256k1Pubkey";
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["ed25519Pubkey"] = 4] = "ed25519Pubkey";
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["bls12_381Pubkey"] = 5] = "bls12_381Pubkey";
})(LatticeGetAddressesFlag = exports.LatticeGetAddressesFlag || (exports.LatticeGetAddressesFlag = {}));
var LatticeSignSchema;
(function (LatticeSignSchema) {
    LatticeSignSchema[LatticeSignSchema["bitcoin"] = 0] = "bitcoin";
    LatticeSignSchema[LatticeSignSchema["ethereum"] = 1] = "ethereum";
    LatticeSignSchema[LatticeSignSchema["ethereumMsg"] = 3] = "ethereumMsg";
    LatticeSignSchema[LatticeSignSchema["extraData"] = 4] = "extraData";
    LatticeSignSchema[LatticeSignSchema["generic"] = 5] = "generic";
})(LatticeSignSchema = exports.LatticeSignSchema || (exports.LatticeSignSchema = {}));
var LatticeSignHash;
(function (LatticeSignHash) {
    LatticeSignHash[LatticeSignHash["none"] = 0] = "none";
    LatticeSignHash[LatticeSignHash["keccak256"] = 1] = "keccak256";
    LatticeSignHash[LatticeSignHash["sha256"] = 2] = "sha256";
})(LatticeSignHash = exports.LatticeSignHash || (exports.LatticeSignHash = {}));
var LatticeSignCurve;
(function (LatticeSignCurve) {
    LatticeSignCurve[LatticeSignCurve["secp256k1"] = 0] = "secp256k1";
    LatticeSignCurve[LatticeSignCurve["ed25519"] = 1] = "ed25519";
    LatticeSignCurve[LatticeSignCurve["bls12_381"] = 2] = "bls12_381";
})(LatticeSignCurve = exports.LatticeSignCurve || (exports.LatticeSignCurve = {}));
var LatticeSignEncoding;
(function (LatticeSignEncoding) {
    LatticeSignEncoding[LatticeSignEncoding["none"] = 1] = "none";
    LatticeSignEncoding[LatticeSignEncoding["solana"] = 2] = "solana";
    LatticeSignEncoding[LatticeSignEncoding["evm"] = 4] = "evm";
    LatticeSignEncoding[LatticeSignEncoding["eth_deposit"] = 5] = "eth_deposit";
})(LatticeSignEncoding = exports.LatticeSignEncoding || (exports.LatticeSignEncoding = {}));
var LatticeSignBlsDst;
(function (LatticeSignBlsDst) {
    LatticeSignBlsDst[LatticeSignBlsDst["NUL"] = 1] = "NUL";
    LatticeSignBlsDst[LatticeSignBlsDst["POP"] = 2] = "POP";
})(LatticeSignBlsDst = exports.LatticeSignBlsDst || (exports.LatticeSignBlsDst = {}));
var LatticeEncDataSchema;
(function (LatticeEncDataSchema) {
    LatticeEncDataSchema[LatticeEncDataSchema["eip2335"] = 0] = "eip2335";
})(LatticeEncDataSchema = exports.LatticeEncDataSchema || (exports.LatticeEncDataSchema = {}));
exports.ProtocolConstants = {
    // Lattice firmware uses a static initialization vector for
    // message encryption/decryption. This is generally considered
    // fine because each encryption/decryption uses a unique encryption
    // secret (derived from the per-message ephemeral key pair).
    aesIv: [
        0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73,
        0x77, 0x6f, 0x72, 0x64,
    ],
    // Constant size of address buffers from the Lattice.
    // Note that this size also captures public keys returned
    // by the Lattice (addresses = strings, pubkeys = buffers)
    addrStrLen: 129,
    // Status of the client's pairing with the target Lattice
    pairingStatus: {
        notPaired: 0x00,
        paired: 0x01,
    },
    // Response types, codes, and error messages
    responseMsg: (_a = {},
        _a[LatticeResponseCode.success] = '',
        _a[LatticeResponseCode.invalidMsg] = 'Invalid Request',
        _a[LatticeResponseCode.unsupportedVersion] = 'Unsupported Version',
        _a[LatticeResponseCode.deviceBusy] = 'Device Busy',
        _a[LatticeResponseCode.userTimeout] = 'Timeout waiting for user',
        _a[LatticeResponseCode.userDeclined] = 'Request declined by user',
        _a[LatticeResponseCode.pairFailed] = 'Pairing failed',
        _a[LatticeResponseCode.pairDisabled] = 'Pairing is currently disabled',
        _a[LatticeResponseCode.permissionDisabled] = 'Automated signing is currently disabled',
        _a[LatticeResponseCode.internalError] = 'Device Error',
        _a[LatticeResponseCode.gceTimeout] = 'Device Timeout',
        _a[LatticeResponseCode.wrongWallet] = 'Active wallet does not match request',
        _a[LatticeResponseCode.deviceLocked] = 'Device Locked',
        _a[LatticeResponseCode.disabled] = 'Feature Disabled',
        _a[LatticeResponseCode.already] = 'Record already exists on device',
        _a[LatticeResponseCode.invalidEphemId] = 'Request failed - needs resync',
        _a),
    msgSizes: {
        // General message header size. Valid for all Lattice messages
        header: 8,
        // Checksum must be appended to each message
        checksum: 4,
        // Lattice secure message constants. All requests from this SDK
        // are secure messages.
        secure: {
            // Sizes of full payloads for secure messages
            payload: {
                request: {
                    // [ requestType (1 byte) | pubkey (65 bytes) ]
                    connect: 66,
                    // [ requestType (1 byte) | ephemeralId (4 bytes) | encryptedData (1728 bytes) ]
                    encrypted: 1733,
                },
                // Note that the response payload always has status code as the
                // first byte. This byte is removed as part of `request`, inside
                // `parseLattice1Response`. These constants include the status
                // code byte.
                response: {
                    connect: 215,
                    // Encrypted responses are as follows:
                    // encryptedData (1728) | empty (1728)
                    // The latter half is empty due to an invalid type definition
                    // in Lattice firmware. (Someone made a C `struct` instead of
                    // a `union`, oops).
                    encrypted: 3457,
                },
            },
            // Sizes for data inside secure message payloads
            data: {
                // All requests also have a `requestCode`, which is omitted
                // from these constants.
                request: {
                    connect: 65,
                    encrypted: (_b = {
                            // All encrypted requests are encrypted into a 1728 byte buffer
                            encryptedData: 1728
                        },
                        // Individual request types have different data sizes.
                        _b[LatticeSecureEncryptedRequestType.finalizePairing] = 99,
                        _b[LatticeSecureEncryptedRequestType.getAddresses] = 54,
                        _b[LatticeSecureEncryptedRequestType.sign] = 1680,
                        _b[LatticeSecureEncryptedRequestType.getWallets] = 0,
                        _b[LatticeSecureEncryptedRequestType.getKvRecords] = 9,
                        _b[LatticeSecureEncryptedRequestType.addKvRecords] = 1391,
                        _b[LatticeSecureEncryptedRequestType.removeKvRecords] = 405,
                        _b[LatticeSecureEncryptedRequestType.fetchEncryptedData] = 1025,
                        _b[LatticeSecureEncryptedRequestType.test] = 506,
                        _b),
                },
                // All responses also have a `responseCode`, which is omitted
                // from these constants.
                response: {
                    encrypted: (_c = {
                            encryptedData: 1728
                        },
                        // Once decrypted, the data size of the response
                        // payload will be determined by the request type.
                        // NOTE: All requests also have ephemeralPublicKey (65 bytes) and
                        // checksum (4 bytes), which are excluded from these sizes.
                        _c[LatticeSecureEncryptedRequestType.finalizePairing] = 0,
                        _c[LatticeSecureEncryptedRequestType.getAddresses] = 1290,
                        _c[LatticeSecureEncryptedRequestType.sign] = 1090,
                        _c[LatticeSecureEncryptedRequestType.getWallets] = 142,
                        _c[LatticeSecureEncryptedRequestType.getKvRecords] = 1395,
                        _c[LatticeSecureEncryptedRequestType.addKvRecords] = 0,
                        _c[LatticeSecureEncryptedRequestType.removeKvRecords] = 0,
                        _c[LatticeSecureEncryptedRequestType.fetchEncryptedData] = 1608,
                        _c[LatticeSecureEncryptedRequestType.test] = 1646,
                        _c),
                },
            },
        },
    },
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\secureMessages.js", {"../shared/functions":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js","../shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","./latticeConstants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cprotocol%5CsecureMessages.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptedSecureRequest = exports.connectSecureRequest = void 0;
/**
 * All messages sent to the Lattice from this SDK will be
 * "secure messages", of which there are two types:
 *
 * 1. Connect requests are *unencrypted* and serve to establish
 *    a connection between the SDK Client instance and the target
 *    Lattice. If the client is already paired to the target Lattice,
 *    the response will indicate that. If the client has never paired
 *    with this Lattice, the Lattice will go into "pairing mode" and
 *    will expect a follow up `finalizePairing` request, which is
 *    an encrypted request. This will return an ephemeral public key,
 *    which is used to encrypt the next request.
 * 2. Encrypted requests are *encrypted* (obviously) and from a Lattice
 *    protocol perspective they are all constructed the same way:
 *    create a buffer of `payload` length and fill it with unencrypted
 *    data, then encrypt the entire payload (not just the data you filled)
 *    with the ECDH secret formed from the last ephemeral public key.
 *    The response to this request will contain a new ephemral public
 *    key, which you will need for the next encrypted request.
 */
var latticeConstants_1 = require("./latticeConstants");
var util_1 = require("../util");
var functions_1 = require("../shared/functions");
var validators_1 = require("../shared/validators");
var msgSizes = latticeConstants_1.ProtocolConstants.msgSizes;
var szs = msgSizes.secure;
/**
 * Build and make a request to connect to a specific Lattice
 * based on its `deviceId`.
 * @param deviceId - Device ID for the target Lattice. Must be in
 *                   the same `client.baseUrl` domain to be found.
 * @return {Buffer} - Connection response payload data, which contains
 *                    information about the connected Lattice.
 */
function connectSecureRequest(_a) {
    var url = _a.url, pubkey = _a.pubkey;
    return __awaiter(this, void 0, void 0, function () {
        var payloadData, msgId, msg, resp;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    payloadData = serializeSecureRequestConnectPayloadData({
                        pubkey: pubkey,
                    });
                    msgId = (0, util_1.randomBytes)(4);
                    msg = serializeSecureRequestMsg(msgId, latticeConstants_1.LatticeSecureMsgType.connect, payloadData);
                    return [4 /*yield*/, (0, functions_1.request)({ url: url, payload: msg })];
                case 1:
                    resp = _b.sent();
                    if (resp.length !== szs.payload.response.connect - 1) {
                        throw new Error('Wrong Lattice response message size.');
                    }
                    return [2 /*return*/, resp];
            }
        });
    });
}
exports.connectSecureRequest = connectSecureRequest;
/**
 * Build an encrypted secure request using raw data,
 * then send that request to the target Lattice, handle
 * the response, and return the *decrypted* response
 * payload data.
 * Also updates ephemeral public key in the client.
 * This is a wrapper around several local util functions.
 * @param data - Unencrypted raw calldata for function
 * @param requestType - Type of encrypted reques to make
 * @return {Buffer} Decrypted response data (excluding metadata)
 */
function encryptedSecureRequest(_a) {
    var data = _a.data, requestType = _a.requestType, sharedSecret = _a.sharedSecret, ephemeralPub = _a.ephemeralPub, url = _a.url;
    return __awaiter(this, void 0, void 0, function () {
        var msgId, payloadData, msg, resp, encPayloadData;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    msgId = (0, util_1.randomBytes)(4);
                    payloadData = serializeSecureRequestEncryptedPayloadData({
                        data: data,
                        requestType: requestType,
                        ephemeralPub: ephemeralPub,
                        sharedSecret: sharedSecret,
                    });
                    msg = serializeSecureRequestMsg(msgId, latticeConstants_1.LatticeSecureMsgType.encrypted, payloadData);
                    return [4 /*yield*/, (0, functions_1.request)({
                            url: url,
                            payload: msg,
                        })];
                case 1:
                    resp = _b.sent();
                    // Deserialize the response payload data
                    if (resp.length !== szs.payload.response.encrypted - 1) {
                        throw new Error('Wrong Lattice response message size.');
                    }
                    encPayloadData = resp.slice(0, szs.data.response.encrypted.encryptedData);
                    // Return decrypted response payload data
                    return [2 /*return*/, decryptEncryptedLatticeResponseData({
                            encPayloadData: encPayloadData,
                            requestType: requestType,
                            sharedSecret: sharedSecret,
                        })];
            }
        });
    });
}
exports.encryptedSecureRequest = encryptedSecureRequest;
/**
 * @internal
 * Serialize a Secure Request message for the Lattice.
 * All outgoing SDK requests are of this form.
 * @param msgId - Random 4 bytes of data for internally tracking this message
 * @param secureRequestType - 0x01 for connect, 0x02 for encrypted
 * @param payloadData - Request data
 * @return {Buffer} Serialized message to be sent to Lattice
 */
function serializeSecureRequestMsg(msgId, secureRequestType, payloadData) {
    // Sanity check request data
    if (msgId.length !== 4) {
        throw new Error('msgId must be four bytes');
    }
    if (secureRequestType !== latticeConstants_1.LatticeSecureMsgType.connect &&
        secureRequestType !== latticeConstants_1.LatticeSecureMsgType.encrypted) {
        throw new Error('Invalid Lattice secure request type');
    }
    // Validate the incoming payload data size. Note that the payload
    // data is prepended with a secure request type byte, so the
    // payload data size is one less than the expected size.
    var isValidConnectPayloadDataSz = secureRequestType === latticeConstants_1.LatticeSecureMsgType.connect &&
        payloadData.length === szs.payload.request.connect - 1;
    var isValidEncryptedPayloadDataSz = secureRequestType === latticeConstants_1.LatticeSecureMsgType.encrypted &&
        payloadData.length === szs.payload.request.encrypted - 1;
    // Build payload and size
    var msgSz = msgSizes.header + msgSizes.checksum;
    var payloadLen;
    var payload = {
        requestType: secureRequestType,
        data: payloadData,
    };
    if (isValidConnectPayloadDataSz) {
        payloadLen = szs.payload.request.connect;
    }
    else if (isValidEncryptedPayloadDataSz) {
        payloadLen = szs.payload.request.encrypted;
    }
    else {
        throw new Error('Invalid Lattice secure request payload size');
    }
    msgSz += payloadLen;
    // Construct the request in object form
    var header = {
        version: latticeConstants_1.LatticeProtocolVersion.v1,
        type: latticeConstants_1.LatticeMsgType.secure,
        id: msgId,
        len: payloadLen,
    };
    var req = {
        header: header,
        payload: payload,
    };
    // Now serialize the whole message
    // Header | requestType | payloadData | checksum
    var msg = Buffer.alloc(msgSz);
    var off = 0;
    // Header
    msg.writeUInt8(req.header.version, off);
    off += 1;
    msg.writeUInt8(req.header.type, off);
    off += 1;
    req.header.id.copy(msg, off);
    off += req.header.id.length;
    msg.writeUInt16BE(req.header.len, off);
    off += 2;
    // Payload
    msg.writeUInt8(req.payload.requestType, off);
    off += 1;
    req.payload.data.copy(msg, off);
    off += req.payload.data.length;
    // Checksum
    msg.writeUInt32BE((0, util_1.checksum)(msg.slice(0, off)), off);
    off += 4;
    if (off !== msgSz) {
        throw new Error('Failed to build request message');
    }
    // We have our serialized secure message!
    return msg;
}
/**
 * @internal
 * Serialize payload data for a Lattice secure request: connect
 * @return {Buffer} - 1700 bytes, of which only 65 are used
 */
function serializeSecureRequestConnectPayloadData(payloadData) {
    var serPayloadData = Buffer.alloc(szs.data.request.connect);
    payloadData.pubkey.copy(serPayloadData, 0);
    return serPayloadData;
}
/**
 * @internal
 * Serialize payload data for Lattice secure request: encrypted
 * @param data - Raw (unencrypted) request data
 * @return {Buffer} - 1700 bytes, all of which should be used
 */
function serializeSecureRequestEncryptedPayloadData(_a) {
    var data = _a.data, requestType = _a.requestType, ephemeralPub = _a.ephemeralPub, sharedSecret = _a.sharedSecret;
    // Sanity checks request size
    if (data.length > szs.data.request.encrypted.encryptedData) {
        throw new Error('Encrypted request data too large');
    }
    // Make sure we have a shared secret. An error will be thrown
    // if there is no ephemeral pub, indicating we need to reconnect.
    (0, validators_1.validateEphemeralPub)(ephemeralPub);
    // Validate the request data size matches the desired request
    var requestDataSize = szs.data.request.encrypted[requestType];
    if (data.length !== requestDataSize) {
        throw new Error("Invalid request datasize (wanted ".concat(requestDataSize, ", got ").concat(data.length, ")"));
    }
    // Build the pre-encrypted data payload, which variable sized and of form:
    // encryptedRequestType | data | checksum
    var preEncryptedData = Buffer.alloc(1 + requestDataSize);
    preEncryptedData[0] = requestType;
    data.copy(preEncryptedData, 1);
    var preEncryptedDataChecksum = (0, util_1.checksum)(preEncryptedData);
    // Encrypt the data into a fixed size buffer. The buffer size should
    // equal to the full message request less the 4-byte ephemeral id.
    var _encryptedData = Buffer.alloc(szs.data.request.encrypted.encryptedData);
    preEncryptedData.copy(_encryptedData, 0);
    _encryptedData.writeUInt32LE(preEncryptedDataChecksum, preEncryptedData.length);
    var encryptedData = (0, util_1.aes256_encrypt)(_encryptedData, sharedSecret);
    // Calculate ephemeral ID
    var ephemeralId = (0, functions_1.getEphemeralId)(sharedSecret);
    // Now we will serialize the payload data.
    var serPayloadData = Buffer.alloc(szs.payload.request.encrypted - 1);
    serPayloadData.writeUInt32LE(ephemeralId);
    encryptedData.copy(serPayloadData, 4);
    return serPayloadData;
}
/**
 * @internal
 * Decrypt the response data from an encrypted request.
 * @param encPayloadData - Encrypted payload data in response
 * @return {Buffer} Decrypted response data (excluding metadata)
 */
function decryptEncryptedLatticeResponseData(_a) {
    var encPayloadData = _a.encPayloadData, requestType = _a.requestType, sharedSecret = _a.sharedSecret;
    // Decrypt data using the *current* shared secret
    var decData = (0, util_1.aes256_decrypt)(encPayloadData, sharedSecret);
    // Bulid the object
    var ephemeralPubSz = 65; // secp256r1 pubkey
    var checksumOffset = ephemeralPubSz + szs.data.response.encrypted[requestType];
    var respData = {
        ephemeralPub: decData.slice(0, ephemeralPubSz),
        data: decData.slice(ephemeralPubSz, checksumOffset),
        checksum: decData.readUInt32BE(checksumOffset),
    };
    // Validate the checksum
    var validChecksum = (0, util_1.checksum)(decData.slice(0, checksumOffset));
    if (respData.checksum !== validChecksum) {
        throw new Error('Checksum mismatch in decrypted Lattice data');
    }
    // Validate the response data size
    var validSz = szs.data.response.encrypted[requestType];
    if (respData.data.length !== validSz) {
        throw new Error('Incorrect response data returned from Lattice');
    }
    var newEphemeralPub = (0, util_1.getP256KeyPairFromPub)(respData.ephemeralPub);
    // Returned the decrypted data
    return { decryptedData: respData.data, newEphemeralPub: newEphemeralPub };
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\protocol\\secureMessages.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\errors.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cerrors.js
      return function (require, module, exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LatticeResponseError = void 0;
var protocol_1 = require("../protocol");
var buildLatticeResponseErrorMessage = function (_a) {
    var responseCode = _a.responseCode, errorMessage = _a.errorMessage;
    var msg = [];
    if (responseCode) {
        msg.push("".concat(protocol_1.ProtocolConstants.responseMsg[responseCode]));
    }
    if (errorMessage) {
        msg.push('Error Message: ');
        msg.push(errorMessage);
    }
    return msg.join('\n');
};
var LatticeResponseError = /** @class */ (function (_super) {
    __extends(LatticeResponseError, _super);
    function LatticeResponseError(responseCode, errorMessage) {
        var _this = this;
        var message = buildLatticeResponseErrorMessage({
            responseCode: responseCode,
            errorMessage: errorMessage,
        });
        _this = _super.call(this, message) || this;
        _this.responseCode = responseCode;
        _this.errorMessage = errorMessage;
        _this.name = 'LatticeResponseError';
        _this.responseCode = responseCode;
        _this.errorMessage = errorMessage;
        return _this;
    }
    return LatticeResponseError;
}(Error));
exports.LatticeResponseError = LatticeResponseError;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\errors.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js", {"../bitcoin":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\bitcoin.js","../constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../ethereum":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\ethereum.js","../genericSigning":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\genericSigning.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","./errors":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\errors.js","./predicates":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\predicates.js","./validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js/lib/hash/sha":"F:\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cfunctions.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEphemeralId = exports.retryWrapper = exports.buildRetryWrapper = exports.request = exports.buildTransaction = void 0;
var sha_1 = require("hash.js/lib/hash/sha");
var bitcoin_1 = __importDefault(require("../bitcoin"));
var constants_1 = require("../constants");
var ethereum_1 = __importDefault(require("../ethereum"));
var genericSigning_1 = require("../genericSigning");
var util_1 = require("../util");
var errors_1 = require("./errors");
var predicates_1 = require("./predicates");
var validators_1 = require("./validators");
var buildTransaction = function (_a) {
    // All transaction requests must be put into the same sized buffer. This comes from
    // sizeof(GpTransactionRequest_t), but note we remove the 2-byte schemaId since it is not
    // returned from our resolver. Note that different firmware versions may have different data
    // sizes.
    var data = _a.data, currency = _a.currency, fwConstants = _a.fwConstants;
    // TEMPORARY BRIDGE -- DEPRECATE ME In v0.15.0 Lattice firmware removed the legacy ETH
    // signing path, so we need to convert such requests to general signing requests using the
    // EVM decoder. NOTE: Not every request can be converted, so users should switch to using
    // general signing requests for newer firmware versions. EIP1559 and EIP155 legacy
    // requests will convert, but others may not.
    if (currency === 'ETH' && (0, predicates_1.shouldUseEVMLegacyConverter)(fwConstants)) {
        console.log('Using the legacy ETH signing path. This will soon be deprecated. ' +
            'Please switch to general signing request.');
        var payload = void 0;
        try {
            payload = ethereum_1.default.ethConvertLegacyToGenericReq(data);
        }
        catch (err) {
            throw new Error('Could not convert legacy request. Please switch to a general signing ' +
                'request. See gridplus-sdk docs for more information.');
        }
        data = {
            fwConstants: fwConstants,
            encodingType: constants_1.EXTERNAL.SIGNING.ENCODINGS.EVM,
            curveType: constants_1.EXTERNAL.SIGNING.CURVES.SECP256K1,
            hashType: constants_1.EXTERNAL.SIGNING.HASHES.KECCAK256,
            signerPath: data.signerPath,
            payload: payload,
        };
        return {
            requestData: (0, genericSigning_1.buildGenericSigningMsgRequest)(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: true,
        };
    }
    else if (currency === 'ETH') {
        // Legacy signing pathway -- should deprecate in the future
        return {
            requestData: ethereum_1.default.buildEthereumTxRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: false,
        };
    }
    else if (currency === 'ETH_MSG') {
        return {
            requestData: ethereum_1.default.buildEthereumMsgRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: false,
        };
    }
    else if (currency === 'BTC') {
        return {
            requestData: bitcoin_1.default.buildBitcoinTxRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: false,
        };
    }
    return {
        requestData: (0, genericSigning_1.buildGenericSigningMsgRequest)(__assign(__assign({}, data), { fwConstants: fwConstants })),
        isGeneric: true,
    };
};
exports.buildTransaction = buildTransaction;
var request = function (_a) {
    var url = _a.url, payload = _a.payload, _b = _a.timeout, timeout = _b === void 0 ? 60000 : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_c) {
            return [2 /*return*/, (0, util_1.fetchWithTimeout)(url, {
                    method: 'POST',
                    body: JSON.stringify({ data: payload }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: timeout,
                })
                    .catch(validators_1.validateRequestError)
                    .then(function (res) { return res.json(); })
                    .then(function (body) {
                    // Handle formatting or generic HTTP errors
                    if (!body || !body.message) {
                        throw new Error('Invalid response');
                    }
                    else if (body.status !== 200) {
                        throw new Error("Error code ".concat(body.status, ": ").concat(body.message));
                    }
                    var _a = (0, util_1.parseLattice1Response)(body.message), data = _a.data, errorMessage = _a.errorMessage, responseCode = _a.responseCode;
                    if (errorMessage || responseCode) {
                        throw new errors_1.LatticeResponseError(responseCode, errorMessage);
                    }
                    return data;
                })];
        });
    });
};
exports.request = request;
/**
 * `sleep()` returns a Promise that resolves after a given number of milliseconds.
 */
function sleep(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
/**
 * Takes a function and a set of parameters, and returns a function that will retry the original
 * function with the given parameters a number of times
 *
 * @param client - a {@link Client} instance that is passed to the {@link retryWrapper}
 * @param retries - the number of times to retry the function before giving up
 * @returns a {@link retryWrapper} function for handing retry logic
 */
var buildRetryWrapper = function (client, retries) {
    return function (fn, params) {
        return (0, exports.retryWrapper)({
            fn: fn,
            params: __assign(__assign({}, params), { client: client }),
            retries: retries,
            client: client,
        });
    };
};
exports.buildRetryWrapper = buildRetryWrapper;
/**
 * Retries a function call if the error message or response code is present and the number of
 * retries is greater than 0.
 *
 * @param fn - The function to retry
 * @param params - The parameters to pass to the function
 * @param retries - The number of times to retry the function
 * @param client - The {@link Client} to use for side-effects
 */
var retryWrapper = function (_a) {
    var fn = _a.fn, params = _a.params, retries = _a.retries, client = _a.client;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_b) {
            return [2 /*return*/, fn(__assign({}, params)).catch(function (err) { return __awaiter(void 0, void 0, void 0, function () {
                    var errorMessage, responseCode;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                errorMessage = err.errorMessage;
                                responseCode = err.responseCode;
                                if (!((errorMessage || responseCode) && retries)) return [3 /*break*/, 8];
                                if (!(0, predicates_1.isDeviceBusy)(responseCode)) return [3 /*break*/, 2];
                                return [4 /*yield*/, sleep(3000)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 7];
                            case 2:
                                if (!((0, predicates_1.isWrongWallet)(responseCode) &&
                                    !client.skipRetryOnWrongWallet)) return [3 /*break*/, 4];
                                return [4 /*yield*/, client.fetchActiveWallet()];
                            case 3:
                                _a.sent();
                                return [3 /*break*/, 7];
                            case 4:
                                if (!(0, predicates_1.isInvalidEphemeralId)(responseCode)) return [3 /*break*/, 6];
                                return [4 /*yield*/, client.connect(client.deviceId)];
                            case 5:
                                _a.sent();
                                return [3 /*break*/, 7];
                            case 6: throw err;
                            case 7: return [2 /*return*/, (0, exports.retryWrapper)({
                                    fn: fn,
                                    params: params,
                                    retries: retries - 1,
                                    client: client,
                                })];
                            case 8: throw err;
                        }
                    });
                }); })];
        });
    });
};
exports.retryWrapper = retryWrapper;
/**
 * Get the ephemeral id, which is the first 4 bytes of the shared secret generated from the local
 * private key and the ephemeral public key from the device.
 * @internal
 * @returns Buffer
 */
var getEphemeralId = function (sharedSecret) {
    // EphemId is the first 4 bytes of the hash of the shared secret
    var hash = Buffer.from((0, sha_1.sha256)().update(sharedSecret).digest('hex'), 'hex');
    return parseInt(hash.slice(0, 4).toString('hex'), 16);
};
exports.getEphemeralId = getEphemeralId;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\functions.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\predicates.js", {"../protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./utilities":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cpredicates.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldUseEVMLegacyConverter = exports.doesFetchWalletsOnLoad = exports.isInvalidEphemeralId = exports.isWrongWallet = exports.isDeviceBusy = void 0;
var protocol_1 = require("../protocol");
var utilities_1 = require("./utilities");
var isDeviceBusy = function (responseCode) {
    return responseCode === protocol_1.LatticeResponseCode.deviceBusy ||
        responseCode === protocol_1.LatticeResponseCode.gceTimeout;
};
exports.isDeviceBusy = isDeviceBusy;
var isWrongWallet = function (responseCode) {
    return responseCode === protocol_1.LatticeResponseCode.wrongWallet;
};
exports.isWrongWallet = isWrongWallet;
var isInvalidEphemeralId = function (responseCode) {
    return responseCode === protocol_1.LatticeResponseCode.invalidEphemId;
};
exports.isInvalidEphemeralId = isInvalidEphemeralId;
var doesFetchWalletsOnLoad = function (fwVersion) {
    return (0, utilities_1.isFWSupported)(fwVersion, { major: 0, minor: 14, fix: 1 });
};
exports.doesFetchWalletsOnLoad = doesFetchWalletsOnLoad;
var shouldUseEVMLegacyConverter = function (fwConstants) {
    return fwConstants.genericSigning &&
        fwConstants.genericSigning.encodingTypes &&
        fwConstants.genericSigning.encodingTypes.EVM;
};
exports.shouldUseEVMLegacyConverter = shouldUseEVMLegacyConverter;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\predicates.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js", {"../constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cutilities.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPathStr = exports.isFWSupported = exports.parseWallets = exports.getSharedSecret = exports.getPubKeyBytes = void 0;
var constants_1 = require("../constants");
/**
 * Get 64 bytes representing the public key This is the uncompressed key without the leading 04
 * byte
 * @param KeyPair - //TODO Describe the keypair
 * @param LE - Whether to return the public key in little endian format.
 * @returns A Buffer containing the public key.
 */
var getPubKeyBytes = function (key, LE) {
    if (LE === void 0) { LE = false; }
    var k = key.getPublic();
    var p = k.encode('hex');
    var pb = Buffer.from(p, 'hex');
    if (LE === true) {
        // Need to flip X and Y components to little endian
        var x = pb.slice(1, 33).reverse();
        var y = pb.slice(33, 65).reverse();
        // @ts-expect-error - TODO: Find out why Buffer won't accept pb[0]
        return Buffer.concat([pb[0], x, y]);
    }
    else {
        return pb;
    }
};
exports.getPubKeyBytes = getPubKeyBytes;
/**
 * Get the shared secret, derived via ECDH from the local private key and the ephemeral public key
 * @internal
 * @returns Buffer
 */
var getSharedSecret = function (key, ephemeralPub) {
    // Once every ~256 attempts, we will get a key that starts with a `00` byte, which can lead to
    // problems initializing AES if we don't force a 32 byte BE buffer.
    return Buffer.from(key.derive(ephemeralPub.getPublic()).toArray('be', 32));
};
exports.getSharedSecret = getSharedSecret;
// Given a set of wallet data, which contains two wallet descriptors, parse the data and save it
// to memory
var parseWallets = function (walletData) {
    // Read the external wallet data first. If it is non-null, the external wallet will be the
    // active wallet of the device and we should save it. If the external wallet is blank, it means
    // there is no card present and we should save and use the interal wallet. If both wallets are
    // empty, it means the device still needs to be set up.
    var walletDescriptorLen = 71;
    // Internal first
    var off = 0;
    var activeWallets = {
        internal: {
            uid: undefined,
            capabilities: undefined,
            name: undefined,
            external: false,
        },
        external: {
            uid: undefined,
            capabilities: undefined,
            name: undefined,
            external: true,
        },
    };
    activeWallets.internal.uid = walletData.slice(off, off + 32);
    // NOTE: `capabilities` and `name` were deprecated in Lattice firmware.
    // They never provided any real information, but have been archived here
    // since the response size has been preserved and we may bring them back
    // in a different form.
    // activeWallets.internal.capabilities = walletData.readUInt32BE(off + 32);
    // activeWallets.internal.name = walletData.slice(
    // off + 36,
    // off + walletDescriptorLen,
    // );
    // Offset the first item
    off += walletDescriptorLen;
    // External
    activeWallets.external.uid = walletData.slice(off, off + 32);
    // activeWallets.external.capabilities = walletData.readUInt32BE(off + 32);
    // activeWallets.external.name = walletData.slice(
    // off + 36,
    // off + walletDescriptorLen,
    // );
    return activeWallets;
};
exports.parseWallets = parseWallets;
// Determine if a provided firmware version matches or exceeds the current firmware version
var isFWSupported = function (fwVersion, versionSupported) {
    var major = fwVersion.major, minor = fwVersion.minor, fix = fwVersion.fix;
    var _major = versionSupported.major, _minor = versionSupported.minor, _fix = versionSupported.fix;
    return (major > _major ||
        (major >= _major && minor > _minor) ||
        (major >= _major && minor >= _minor && fix >= _fix));
};
exports.isFWSupported = isFWSupported;
/**
 * Convert a set of BIP39 path indices to a string
 * @param path - Set of indices
 */
var getPathStr = function (path) {
    var pathStr = 'm';
    path.forEach(function (idx) {
        if (idx >= constants_1.HARDENED_OFFSET) {
            pathStr += "/".concat(idx - constants_1.HARDENED_OFFSET, "'");
        }
        else {
            pathStr += "/".concat(idx);
        }
    });
    return pathStr;
};
exports.getPathStr = getPathStr;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\utilities.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js", {"../constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","lodash/isEmpty":"F:\\metamask-extension\\node_modules\\lodash\\isEmpty.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cvalidators.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValid4ByteResponse = exports.isValidBlockExplorerResponse = exports.validateKvRecord = exports.validateKvRecords = exports.validateActiveWallets = exports.validateKey = exports.validateSharedSecret = exports.validateEphemeralPub = exports.validateConnectedClient = exports.validateWallet = exports.validateRequestError = exports.validateFwVersion = exports.validateFwConstants = exports.validateBaseUrl = exports.validateUrl = exports.validateAppName = exports.validateDeviceId = exports.validateStartPath = exports.validateNAddresses = exports.validateIsUInt4 = void 0;
var constants_1 = require("../constants");
var util_1 = require("../util");
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var validateIsUInt4 = function (n) {
    if (typeof n !== 'number' || !(0, util_1.isUInt4)(n)) {
        throw new Error('Must be an integer between 0 and 15 inclusive');
    }
    return n;
};
exports.validateIsUInt4 = validateIsUInt4;
var validateNAddresses = function (n) {
    if (!n) {
        throw new Error('The number of addresses is required.');
    }
    if (n > constants_1.MAX_ADDR) {
        throw new Error("You may only request ".concat(constants_1.MAX_ADDR, " addresses at once."));
    }
    return n;
};
exports.validateNAddresses = validateNAddresses;
var validateStartPath = function (startPath) {
    if (!startPath) {
        throw new Error('Start path is required');
    }
    if (startPath.length < 1 || startPath.length > 5)
        throw new Error('Path must include between 1 and 5 indices');
    return startPath;
};
exports.validateStartPath = validateStartPath;
var validateDeviceId = function (deviceId) {
    if (!deviceId) {
        throw new Error('No device ID has been stored. Please connect with your device ID first.');
    }
    return deviceId;
};
exports.validateDeviceId = validateDeviceId;
var validateAppName = function (name) {
    if (!name) {
        throw new Error('Name is required.');
    }
    if (name.length < 5 || name.length > 24) {
        throw new Error('Invalid length for name provided. Must be 5-24 characters.');
    }
    return name;
};
exports.validateAppName = validateAppName;
var validateUrl = function (url) {
    if (!url) {
        throw new Error('URL does not exist. Please reconnect.');
    }
    try {
        new URL(url);
    }
    catch (err) {
        throw new Error('Invalid URL provided. Please use a valid URL.');
    }
    return url;
};
exports.validateUrl = validateUrl;
var validateBaseUrl = function (baseUrl) {
    if (!baseUrl) {
        throw new Error('Base URL is required.');
    }
    try {
        new URL(baseUrl);
    }
    catch (err) {
        throw new Error('Invalid Base URL provided. Please use a valid URL.');
    }
    return baseUrl;
};
exports.validateBaseUrl = validateBaseUrl;
var validateFwConstants = function (fwConstants) {
    if (!fwConstants) {
        throw new Error('Firmware constants do not exist. Please reconnect.');
    }
    return fwConstants;
};
exports.validateFwConstants = validateFwConstants;
var validateFwVersion = function (fwVersion) {
    if (!fwVersion) {
        throw new Error('Firmware version does not exist. Please reconnect.');
    }
    if (typeof fwVersion.fix !== 'number' ||
        typeof fwVersion.minor !== 'number' ||
        typeof fwVersion.major !== 'number') {
        throw new Error('Firmware version improperly formatted. Please reconnect.');
    }
    return fwVersion;
};
exports.validateFwVersion = validateFwVersion;
var validateRequestError = function (err) {
    var isTimeout = err.code === 'ECONNABORTED' && err.errno === 'ETIME';
    if (isTimeout) {
        throw new Error('Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.');
    }
    throw new Error("Failed to make request to device:\n".concat(err.message));
};
exports.validateRequestError = validateRequestError;
var validateWallet = function (wallet) {
    if (!wallet || wallet === null) {
        throw new Error('No active wallet.');
    }
    return wallet;
};
exports.validateWallet = validateWallet;
var validateConnectedClient = function (client) {
    var appName = (0, exports.validateAppName)(client.getAppName());
    var ephemeralPub = (0, exports.validateEphemeralPub)(client.ephemeralPub);
    var sharedSecret = (0, exports.validateSharedSecret)(client.sharedSecret);
    var url = (0, exports.validateUrl)(client.url);
    var fwConstants = (0, exports.validateFwConstants)(client.getFwConstants());
    var fwVersion = (0, exports.validateFwVersion)(client.getFwVersion());
    // @ts-expect-error - Key is private
    var key = (0, exports.validateKey)(client.key);
    return {
        appName: appName,
        ephemeralPub: ephemeralPub,
        sharedSecret: sharedSecret,
        url: url,
        fwConstants: fwConstants,
        fwVersion: fwVersion,
        key: key,
    };
};
exports.validateConnectedClient = validateConnectedClient;
var validateEphemeralPub = function (ephemeralPub) {
    if (!ephemeralPub) {
        throw new Error('`ephemeralPub` (ephemeral public key) is required. Please reconnect.');
    }
    return ephemeralPub;
};
exports.validateEphemeralPub = validateEphemeralPub;
var validateSharedSecret = function (sharedSecret) {
    if (!sharedSecret) {
        throw new Error('Shared secret required. Please reconnect.');
    }
    return sharedSecret;
};
exports.validateSharedSecret = validateSharedSecret;
var validateKey = function (key) {
    if (!key) {
        throw new Error('Key is required. Please reconnect.');
    }
    return key;
};
exports.validateKey = validateKey;
var validateActiveWallets = function (activeWallets) {
    var _a, _b, _c, _d;
    if (!activeWallets ||
        (((_b = (_a = activeWallets === null || activeWallets === void 0 ? void 0 : activeWallets.internal) === null || _a === void 0 ? void 0 : _a.uid) === null || _b === void 0 ? void 0 : _b.equals(constants_1.EMPTY_WALLET_UID)) &&
            ((_d = (_c = activeWallets === null || activeWallets === void 0 ? void 0 : activeWallets.external) === null || _c === void 0 ? void 0 : _c.uid) === null || _d === void 0 ? void 0 : _d.equals(constants_1.EMPTY_WALLET_UID)))) {
        throw new Error('No active wallet.');
    }
    return activeWallets;
};
exports.validateActiveWallets = validateActiveWallets;
var validateKvRecords = function (records, fwConstants) {
    if (!fwConstants || !fwConstants.kvActionsAllowed) {
        throw new Error('Unsupported. Please update firmware.');
    }
    else if (typeof records !== 'object' || Object.keys(records).length < 1) {
        throw new Error('One or more key-value mapping must be provided in `records` param.');
    }
    else if (Object.keys(records).length > fwConstants.kvActionMaxNum) {
        throw new Error("Too many keys provided. Please only provide up to ".concat(fwConstants.kvActionMaxNum, "."));
    }
    return records;
};
exports.validateKvRecords = validateKvRecords;
var validateKvRecord = function (_a, fwConstants) {
    var key = _a.key, val = _a.val;
    if (typeof key !== 'string' ||
        String(key).length > fwConstants.kvKeyMaxStrSz) {
        throw new Error("Key ".concat(key, " too large. Must be <=").concat(fwConstants.kvKeyMaxStrSz, " characters."));
    }
    else if (typeof val !== 'string' ||
        String(val).length > fwConstants.kvValMaxStrSz) {
        throw new Error("Value ".concat(val, " too large. Must be <=").concat(fwConstants.kvValMaxStrSz, " characters."));
    }
    else if (String(key).length === 0 || String(val).length === 0) {
        throw new Error('Keys and values must be >0 characters.');
    }
    else if (!constants_1.ASCII_REGEX.test(key) || !constants_1.ASCII_REGEX.test(val)) {
        throw new Error('Unicode characters are not supported.');
    }
    return { key: key, val: val };
};
exports.validateKvRecord = validateKvRecord;
var isValidBlockExplorerResponse = function (data) {
    try {
        var result = JSON.parse(data.result);
        return !(0, isEmpty_1.default)(result);
    }
    catch (err) {
        return false;
    }
};
exports.isValidBlockExplorerResponse = isValidBlockExplorerResponse;
var isValid4ByteResponse = function (data) {
    try {
        return !(0, isEmpty_1.default)(data.results);
    }
    catch (err) {
        return false;
    }
};
exports.isValid4ByteResponse = isValid4ByteResponse;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\validators.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js", {".":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","./constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./protocol":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./shared/validators":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","@ethereumjs/tx":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\index.js","aes-js":"F:\\metamask-extension\\node_modules\\aes-js\\index.js","bignumber.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bignumber.js\\bignumber.js","bn.js":"F:\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","crc-32":"F:\\metamask-extension\\node_modules\\crc-32\\crc32.js","elliptic":"F:\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js","hash.js/lib/hash/sha":"F:\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js","js-sha3":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js","lodash/inRange":"F:\\metamask-extension\\node_modules\\lodash\\inRange.js","lodash/isInteger":"F:\\metamask-extension\\node_modules\\lodash\\isInteger.js","rlp":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\rlp\\dist\\index.js","secp256k1":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cutil.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXTERNAL = exports.getV = exports.generateAppSecret = exports.fetchCalldataDecoder = exports.fetchWithTimeout = exports.selectDefFrom4byteABI = exports.isUInt4 = exports.randomBytes = exports.existsIn = exports.isAsciiStr = exports.buildSignerPathBuf = exports.getP256KeyPairFromPub = exports.getP256KeyPair = exports.parseDER = exports.aes256_decrypt = exports.aes256_encrypt = exports.fixLen = exports.ensureHexBuffer = exports.splitFrames = exports.isValidAssetPath = exports.toPaddedDER = exports.checksum = exports.parseLattice1Response = void 0;
// Static utility functions
var tx_1 = require("@ethereumjs/tx");
var aes_js_1 = __importDefault(require("aes-js"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var bn_js_1 = require("bn.js");
var crc_32_1 = __importDefault(require("crc-32"));
var elliptic_1 = __importDefault(require("elliptic"));
var sha_1 = require("hash.js/lib/hash/sha");
var js_sha3_1 = require("js-sha3");
var inRange_1 = __importDefault(require("lodash/inRange"));
var isInteger_1 = __importDefault(require("lodash/isInteger"));
var rlp_1 = require("rlp");
var secp256k1_1 = require("secp256k1");
var _1 = require(".");
var constants_1 = require("./constants");
var protocol_1 = require("./protocol");
var validators_1 = require("./shared/validators");
var COINS = constants_1.BIP_CONSTANTS.COINS, PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES;
var EC = elliptic_1.default.ec;
var ec;
//--------------------------------------------------
// LATTICE UTILS
//--------------------------------------------------
/** @internal Parse a response from the Lattice1 */
var parseLattice1Response = function (r) {
    var parsed = {
        errorMessage: null,
        data: null,
    };
    var b = Buffer.from(r, 'hex');
    var off = 0;
    // Get protocol version
    var protoVer = b.readUInt8(off);
    off++;
    if (protoVer !== constants_1.VERSION_BYTE) {
        parsed.errorMessage = 'Incorrect protocol version. Please update your SDK';
        return parsed;
    }
    // Get the type of response
    // Should always be 0x00
    var msgType = b.readUInt8(off);
    off++;
    if (msgType !== 0x00) {
        parsed.errorMessage = 'Incorrect response from Lattice1';
        return parsed;
    }
    // Get the payload
    b.readUInt32BE(off);
    off += 4; // First 4 bytes is the id, but we don't need that anymore
    var len = b.readUInt16BE(off);
    off += 2;
    var payload = b.slice(off, off + len);
    off += len;
    // Get response code
    var responseCode = payload.readUInt8(0);
    if (responseCode !== protocol_1.LatticeResponseCode.success) {
        var errMsg = protocol_1.ProtocolConstants.responseMsg[responseCode];
        parsed.errorMessage = "[Lattice] ".concat(errMsg ? errMsg : 'Unknown Error');
        parsed.responseCode = responseCode;
        return parsed;
    }
    else {
        parsed.data = payload.slice(1, payload.length);
    }
    // Verify checksum
    var cs = b.readUInt32BE(off);
    var expectedCs = (0, exports.checksum)(b.slice(0, b.length - 4));
    if (cs !== expectedCs) {
        parsed.errorMessage = 'Invalid checksum from device response';
        parsed.data = null;
        return parsed;
    }
    return parsed;
};
exports.parseLattice1Response = parseLattice1Response;
/** @internal */
var checksum = function (x) {
    // crc32 returns a signed integer - need to cast it to unsigned
    // Note that this uses the default 0xedb88320 polynomial
    return crc_32_1.default.buf(x) >>> 0; // Need this to be a uint, hence the bit shift
};
exports.checksum = checksum;
// Get a 74-byte padded DER-encoded signature buffer
// `sig` must be the signature output from elliptic.js
/** @internal */
var toPaddedDER = function (sig) {
    // We use 74 as the maximum length of a DER signature. All sigs must
    // be right-padded with zeros so that this can be a fixed size field
    var b = Buffer.alloc(74);
    var ds = Buffer.from(sig.toDER());
    ds.copy(b);
    return b;
};
exports.toPaddedDER = toPaddedDER;
//--------------------------------------------------
// TRANSACTION UTILS
//--------------------------------------------------
/** @internal */
var isValidAssetPath = function (path, fwConstants) {
    var allowedPurposes = [
        PURPOSES.ETH,
        PURPOSES.BTC_LEGACY,
        PURPOSES.BTC_WRAPPED_SEGWIT,
        PURPOSES.BTC_SEGWIT,
    ];
    var allowedCoins = [COINS.ETH, COINS.BTC, COINS.BTC_TESTNET];
    // These coin types were given to us by MyCrypto. They should be allowed, but we expect
    // an Ethereum-type address with these coin types.
    // These all use SLIP44: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    var allowedMyCryptoCoins = [
        60, 61, 966, 700, 9006, 9000, 1007, 553, 178, 137, 37310, 108, 40, 889,
        1987, 820, 6060, 1620, 1313114, 76, 246529, 246785, 1001, 227, 916, 464,
        2221, 344, 73799, 246,
    ];
    // Make sure firmware supports this Bitcoin path
    var isBitcoin = path[1] === COINS.BTC || path[1] === COINS.BTC_TESTNET;
    var isBitcoinNonWrappedSegwit = isBitcoin && path[0] !== PURPOSES.BTC_WRAPPED_SEGWIT;
    if (isBitcoinNonWrappedSegwit && !fwConstants.allowBtcLegacyAndSegwitAddrs)
        return false;
    // Make sure this path is otherwise valid
    return (allowedPurposes.indexOf(path[0]) >= 0 &&
        (allowedCoins.indexOf(path[1]) >= 0 ||
            allowedMyCryptoCoins.indexOf(path[1] - constants_1.HARDENED_OFFSET) > 0));
};
exports.isValidAssetPath = isValidAssetPath;
/** @internal */
var splitFrames = function (data, frameSz) {
    var frames = [];
    var n = Math.ceil(data.length / frameSz);
    var off = 0;
    for (var i = 0; i < n; i++) {
        frames.push(data.slice(off, off + frameSz));
        off += frameSz;
    }
    return frames;
};
exports.splitFrames = splitFrames;
/** @internal */
function isBase10NumStr(x) {
    var bn = new bignumber_js_1.default(x).toFixed().split('.').join('');
    var s = new String(x);
    // Note that the JS native `String()` loses precision for large numbers, but we only
    // want to validate the base of the number so we don't care about far out precision.
    return bn.slice(0, 8) === s.slice(0, 8);
}
/** @internal Ensure a param is represented by a buffer */
var ensureHexBuffer = function (x, zeroIsNull) {
    if (zeroIsNull === void 0) { zeroIsNull = true; }
    try {
        // For null values, return a 0-sized buffer. For most situations we assume
        // 0 should be represented with a zero-length buffer (e.g. for RLP-building
        // txs), but it can also be treated as a 1-byte buffer (`00`) if needed
        if (x === null || (x === 0 && zeroIsNull === true))
            return Buffer.alloc(0);
        var isNumber = typeof x === 'number' || isBase10NumStr(x);
        // Otherwise try to get this converted to a hex string
        if (isNumber) {
            // If this is a number or a base-10 number string, convert it to hex
            x = "".concat(new bignumber_js_1.default(x).toString(16));
        }
        else if (typeof x === 'string' && x.slice(0, 2) === '0x') {
            x = x.slice(2);
        }
        else {
            x = x.toString('hex');
        }
        if (x.length % 2 > 0)
            x = "0".concat(x);
        if (x === '00' && !isNumber)
            return Buffer.alloc(0);
        return Buffer.from(x, 'hex');
    }
    catch (err) {
        throw new Error("Cannot convert ".concat(x.toString(), " to hex buffer (").concat(err.toString(), ")"));
    }
};
exports.ensureHexBuffer = ensureHexBuffer;
/** @internal */
var fixLen = function (msg, length) {
    var buf = Buffer.alloc(length);
    if (msg.length < length) {
        msg.copy(buf, length - msg.length);
        return buf;
    }
    return msg.slice(-length);
};
exports.fixLen = fixLen;
//--------------------------------------------------
// CRYPTO UTILS
//--------------------------------------------------
/** @internal */
var aes256_encrypt = function (data, key) {
    var iv = Buffer.from(protocol_1.ProtocolConstants.aesIv);
    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
    var paddedData = data.length % 16 === 0 ? data : aes_js_1.default.padding.pkcs7.pad(data);
    return Buffer.from(aesCbc.encrypt(paddedData));
};
exports.aes256_encrypt = aes256_encrypt;
/** @internal */
var aes256_decrypt = function (data, key) {
    var iv = Buffer.from(protocol_1.ProtocolConstants.aesIv);
    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
    return Buffer.from(aesCbc.decrypt(data));
};
exports.aes256_decrypt = aes256_decrypt;
// Decode a DER signature. Returns signature object {r, s } or null if there is an error
/** @internal */
var parseDER = function (sigBuf) {
    if (sigBuf[0] !== 0x30 || sigBuf[2] !== 0x02)
        throw new Error('Failed to decode DER signature');
    var off = 3;
    var rLen = sigBuf[off];
    off++;
    var r = sigBuf.slice(off, off + rLen);
    off += rLen;
    if (sigBuf[off] !== 0x02)
        throw new Error('Failed to decode DER signature');
    off++;
    var sLen = sigBuf[off];
    off++;
    var s = sigBuf.slice(off, off + sLen);
    return { r: r, s: s };
};
exports.parseDER = parseDER;
/** @internal */
var getP256KeyPair = function (priv) {
    if (ec === undefined)
        ec = new EC('p256');
    return ec.keyFromPrivate(priv, 'hex');
};
exports.getP256KeyPair = getP256KeyPair;
/** @internal */
var getP256KeyPairFromPub = function (pub) {
    if (ec === undefined)
        ec = new EC('p256');
    return ec.keyFromPublic(pub, 'hex');
};
exports.getP256KeyPairFromPub = getP256KeyPairFromPub;
/** @internal */
var buildSignerPathBuf = function (signerPath, varAddrPathSzAllowed) {
    var buf = Buffer.alloc(24);
    var off = 0;
    if (varAddrPathSzAllowed && signerPath.length > 5)
        throw new Error('Signer path must be <=5 indices.');
    if (!varAddrPathSzAllowed && signerPath.length !== 5)
        throw new Error('Your Lattice firmware only supports 5-index derivation paths. Please upgrade.');
    buf.writeUInt32LE(signerPath.length, off);
    off += 4;
    for (var i = 0; i < 5; i++) {
        if (i < signerPath.length)
            buf.writeUInt32LE(signerPath[i], off);
        else
            buf.writeUInt32LE(0, off);
        off += 4;
    }
    return buf;
};
exports.buildSignerPathBuf = buildSignerPathBuf;
//--------------------------------------------------
// OTHER UTILS
//--------------------------------------------------
/** @internal */
var isAsciiStr = function (str, allowFormatChars) {
    if (allowFormatChars === void 0) { allowFormatChars = false; }
    if (typeof str !== 'string') {
        return false;
    }
    var extraChars = allowFormatChars ?
        [
            0x0020,
            0x000a, // New line
        ] : [];
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (extraChars.indexOf(c) < 0 && (c < 0x0020 || c > 0x007f)) {
            return false;
        }
    }
    return true;
};
exports.isAsciiStr = isAsciiStr;
/** @internal Check if a value exists in an object. Only checks first level of keys. */
var existsIn = function (val, obj) {
    return Object.keys(obj).some(function (key) { return obj[key] === val; });
};
exports.existsIn = existsIn;
/** @internal Create a buffer of size `n` and fill it with random data */
var randomBytes = function (n) {
    var buf = Buffer.alloc(n);
    for (var i = 0; i < n; i++) {
        buf[i] = Math.round(Math.random() * 255);
    }
    return buf;
};
exports.randomBytes = randomBytes;
/** @internal `isUInt4` accepts a number and returns true if it is a UInt4 */
var isUInt4 = function (n) { return (0, isInteger_1.default)(n) && (0, inRange_1.default)(n, 0, 16); };
exports.isUInt4 = isUInt4;
/**
 * Fetches an external JSON file containing networks indexed by chain id from a GridPlus repo, and
 * returns the parsed JSON.
 */
function fetchExternalNetworkForChainId(chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var body, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fetch(constants_1.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL)
                            .then(function (res) { return res.json(); })];
                case 1:
                    body = _a.sent();
                    if (body) {
                        return [2 /*return*/, body[chainId]];
                    }
                    else {
                        return [2 /*return*/, undefined];
                    }
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    console.warn('Fetching external networks failed.\n', err_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Builds a URL for fetching calldata from block explorers for any supported chains
 * */
function buildUrlForSupportedChainAndAddress(_a) {
    var supportedChain = _a.supportedChain, address = _a.address;
    var baseUrl = supportedChain.baseUrl;
    var apiRoute = supportedChain.apiRoute;
    var urlWithRoute = "".concat(baseUrl, "/").concat(apiRoute, "&address=").concat(address);
    var apiKey = null;
    var apiKeyParam = apiKey ? "&apiKey=".concat(null) : '';
    return urlWithRoute + apiKeyParam;
}
/**
 * Takes a list of ABI data objects and a selector, and returns the earliest ABI data object that
 * matches the selector.
 */
function selectDefFrom4byteABI(abiData, selector) {
    if (abiData.length > 1) {
        console.warn('WARNING: There are multiple results. Using the first one.');
    }
    var def;
    abiData
        .sort(function (a, b) {
        var aTime = new Date(a.created_at).getTime();
        var bTime = new Date(b.created_at).getTime();
        return aTime - bTime;
    })
        .find(function (result) {
        try {
            def = _1.Calldata.EVM.parsers.parseCanonicalName(selector, result.text_signature);
            return !!def;
        }
        catch (err) {
            return false;
        }
    });
    if (def) {
        return def;
    }
    else {
        throw new Error('Could not find definition for selector');
    }
}
exports.selectDefFrom4byteABI = selectDefFrom4byteABI;
function fetchWithTimeout(url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, timeout, controller, timeoutId, response;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = options.timeout, timeout = _a === void 0 ? 8000 : _a;
                    controller = new AbortController();
                    timeoutId = setTimeout(function () { return controller.abort(); }, timeout);
                    return [4 /*yield*/, fetch(url, __assign(__assign({}, options), { signal: controller.signal }))];
                case 1:
                    response = _b.sent();
                    clearTimeout(timeoutId);
                    return [2 /*return*/, response];
            }
        });
    });
}
exports.fetchWithTimeout = fetchWithTimeout;
function fetchAndCache(url, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var cache, request, match, response, responseClone, data, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 11, , 12]);
                    if (!(globalThis.caches && globalThis.Request)) return [3 /*break*/, 9];
                    return [4 /*yield*/, caches.open('gp-calldata')];
                case 1:
                    cache = _a.sent();
                    request = new Request(url, opts);
                    return [4 /*yield*/, cache.match(request)];
                case 2:
                    match = _a.sent();
                    if (!match) return [3 /*break*/, 3];
                    return [2 /*return*/, match];
                case 3: return [4 /*yield*/, fetch(request, opts)];
                case 4:
                    response = _a.sent();
                    responseClone = response.clone();
                    return [4 /*yield*/, response.json()];
                case 5:
                    data = _a.sent();
                    if (!(response.ok &&
                        ((0, validators_1.isValidBlockExplorerResponse)(data) || (0, validators_1.isValid4ByteResponse)(data)))) return [3 /*break*/, 7];
                    return [4 /*yield*/, cache.put(request, responseClone)];
                case 6:
                    _a.sent();
                    return [2 /*return*/, cache.match(request, opts)];
                case 7: return [2 /*return*/, response];
                case 8: return [3 /*break*/, 10];
                case 9: return [2 /*return*/, fetch(url, opts)];
                case 10: return [3 /*break*/, 12];
                case 11:
                    err_2 = _a.sent();
                    console.error(err_2);
                    throw err_2;
                case 12: return [2 /*return*/];
            }
        });
    });
}
function fetchSupportedChainData(address, supportedChain) {
    return __awaiter(this, void 0, void 0, function () {
        var url;
        return __generator(this, function (_a) {
            url = buildUrlForSupportedChainAndAddress({ address: address, supportedChain: supportedChain });
            return [2 /*return*/, fetchAndCache(url)
                    .then(function (res) { return res.json(); })
                    .then(function (body) {
                    if (body && body.result) {
                        return JSON.parse(body.result);
                    }
                    else {
                        throw new Error('Server response was malformed');
                    }
                })
                    .catch(function () {
                    throw new Error('Fetching data from external network failed');
                })];
        });
    });
}
function fetch4byteData(selector) {
    return __awaiter(this, void 0, void 0, function () {
        var url;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "https://www.4byte.directory/api/v1/signatures/?hex_signature=0x".concat(selector);
                    return [4 /*yield*/, fetch(url)
                            .then(function (res) { return res.json(); })
                            .then(function (body) {
                            if (body && body.results) {
                                return body.results;
                            }
                            else {
                                throw new Error('No results found');
                            }
                        })
                            .catch(function (err) {
                            throw new Error("Fetching data from 4byte failed: ".concat(err.message));
                        })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function encodeDef(def) {
    return Buffer.from((0, rlp_1.encode)(def));
}
/**
 * Post-process fetched ABI definition.
 * @param def - Calldata decoder data definition for calling function
 * @param calldata - Raw transaction calldata
 * @return - Updated `def`
 */
function postProcessDef(def, calldata) {
    var e_1, _a, e_2, _b;
    return __awaiter(this, void 0, void 0, function () {
        var nestedCalldata, nestedDefs, _c, _e, i, _f, _g, j, _h, _j, e_2_1, _k, _l, e_1_1, newDef;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    nestedCalldata = _1.Calldata.EVM.processors.getNestedCalldata(def, calldata);
                    return [4 /*yield*/, replaceNestedDefs(nestedCalldata)];
                case 1:
                    nestedDefs = _m.sent();
                    _m.label = 2;
                case 2:
                    _m.trys.push([2, 22, 23, 28]);
                    _c = __asyncValues(nestedDefs.entries());
                    _m.label = 3;
                case 3: return [4 /*yield*/, _c.next()];
                case 4:
                    if (!(_e = _m.sent(), !_e.done)) return [3 /*break*/, 21];
                    i = _e.value[0];
                    if (!(Array.isArray(nestedDefs[i]) && typeof nestedDefs[i][0] !== 'string')) return [3 /*break*/, 18];
                    _m.label = 5;
                case 5:
                    _m.trys.push([5, 11, 12, 17]);
                    _f = (e_2 = void 0, __asyncValues(nestedDefs[i].entries()));
                    _m.label = 6;
                case 6: return [4 /*yield*/, _f.next()];
                case 7:
                    if (!(_g = _m.sent(), !_g.done)) return [3 /*break*/, 10];
                    j = _g.value[0];
                    if (!(nestedDefs[i][j] !== null)) return [3 /*break*/, 9];
                    _h = nestedDefs[i];
                    _j = j;
                    return [4 /*yield*/, postProcessDef(nestedDefs[i][j], Buffer.from(nestedCalldata[i][j].slice(2), 'hex'))];
                case 8:
                    _h[_j] = _m.sent();
                    _m.label = 9;
                case 9: return [3 /*break*/, 6];
                case 10: return [3 /*break*/, 17];
                case 11:
                    e_2_1 = _m.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 17];
                case 12:
                    _m.trys.push([12, , 15, 16]);
                    if (!(_g && !_g.done && (_b = _f.return))) return [3 /*break*/, 14];
                    return [4 /*yield*/, _b.call(_f)];
                case 13:
                    _m.sent();
                    _m.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 16: return [7 /*endfinally*/];
                case 17: return [3 /*break*/, 20];
                case 18:
                    if (!(nestedDefs[i] !== null)) return [3 /*break*/, 20];
                    _k = nestedDefs;
                    _l = i;
                    return [4 /*yield*/, postProcessDef(nestedDefs[i], Buffer.from(nestedCalldata[i].slice(2), 'hex'))];
                case 19:
                    _k[_l] = _m.sent();
                    _m.label = 20;
                case 20: return [3 /*break*/, 3];
                case 21: return [3 /*break*/, 28];
                case 22:
                    e_1_1 = _m.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 28];
                case 23:
                    _m.trys.push([23, , 26, 27]);
                    if (!(_e && !_e.done && (_a = _c.return))) return [3 /*break*/, 25];
                    return [4 /*yield*/, _a.call(_c)];
                case 24:
                    _m.sent();
                    _m.label = 25;
                case 25: return [3 /*break*/, 27];
                case 26:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 27: return [7 /*endfinally*/];
                case 28:
                    newDef = _1.Calldata.EVM.processors.replaceNestedDefs(def, nestedDefs);
                    return [2 /*return*/, newDef];
            }
        });
    });
}
/**
 * Given a set of possible nested defs, slice out selectors and look up
 * definitions on 4byte.
 * @param possNestedDefs - result of `getPossibleNestedDefs` processor
 * @return Array containing calldata decoding data for each parameter
 *          that had a possible nested def. If there was no possible
 *          nested def or if a def could not be fetched from 4byte, the
 *          array item will be `null`. In the case of multiple possible
 *          defs behind one param (e.g. multicall pattern), ALL nested
 *          items must have defs associated or the item will map to a
 *          single `null` value in the return array.
 *
 */
function replaceNestedDefs(possNestedDefs) {
    var possNestedDefs_1, possNestedDefs_1_1;
    var e_3, _a, e_4, _b;
    return __awaiter(this, void 0, void 0, function () {
        var nestedDefs, d, _nestedDefs, shouldInclude, d_1, d_1_1, _d, _nestedSelector, _nestedAbi, _nestedDef, err_3, e_4_1, nestedSelector, nestedAbi, nestedDef, err_4, e_3_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    nestedDefs = [];
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 26, 27, 32]);
                    possNestedDefs_1 = __asyncValues(possNestedDefs);
                    _c.label = 2;
                case 2: return [4 /*yield*/, possNestedDefs_1.next()];
                case 3:
                    if (!(possNestedDefs_1_1 = _c.sent(), !possNestedDefs_1_1.done)) return [3 /*break*/, 25];
                    d = possNestedDefs_1_1.value;
                    if (!(d !== null)) return [3 /*break*/, 23];
                    if (!Array.isArray(d)) return [3 /*break*/, 19];
                    _nestedDefs = [];
                    shouldInclude = true;
                    _c.label = 4;
                case 4:
                    _c.trys.push([4, 12, 13, 18]);
                    d_1 = (e_4 = void 0, __asyncValues(d));
                    _c.label = 5;
                case 5: return [4 /*yield*/, d_1.next()];
                case 6:
                    if (!(d_1_1 = _c.sent(), !d_1_1.done)) return [3 /*break*/, 11];
                    _d = d_1_1.value;
                    _c.label = 7;
                case 7:
                    _c.trys.push([7, 9, , 10]);
                    _nestedSelector = _d.slice(2, 10);
                    return [4 /*yield*/, fetch4byteData(_nestedSelector)];
                case 8:
                    _nestedAbi = _c.sent();
                    _nestedDef = selectDefFrom4byteABI(_nestedAbi, _nestedSelector);
                    _nestedDefs.push(_nestedDef);
                    return [3 /*break*/, 10];
                case 9:
                    err_3 = _c.sent();
                    shouldInclude = false;
                    _nestedDefs.push(null);
                    return [3 /*break*/, 10];
                case 10: return [3 /*break*/, 5];
                case 11: return [3 /*break*/, 18];
                case 12:
                    e_4_1 = _c.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 18];
                case 13:
                    _c.trys.push([13, , 16, 17]);
                    if (!(d_1_1 && !d_1_1.done && (_b = d_1.return))) return [3 /*break*/, 15];
                    return [4 /*yield*/, _b.call(d_1)];
                case 14:
                    _c.sent();
                    _c.label = 15;
                case 15: return [3 /*break*/, 17];
                case 16:
                    if (e_4) throw e_4.error;
                    return [7 /*endfinally*/];
                case 17: return [7 /*endfinally*/];
                case 18:
                    if (shouldInclude) {
                        nestedDefs.push(_nestedDefs);
                    }
                    else {
                        nestedDefs.push(null);
                    }
                    return [3 /*break*/, 22];
                case 19:
                    _c.trys.push([19, 21, , 22]);
                    nestedSelector = d.slice(2, 10);
                    return [4 /*yield*/, fetch4byteData(nestedSelector)];
                case 20:
                    nestedAbi = _c.sent();
                    nestedDef = selectDefFrom4byteABI(nestedAbi, nestedSelector);
                    nestedDefs.push(nestedDef);
                    return [3 /*break*/, 22];
                case 21:
                    err_4 = _c.sent();
                    nestedDefs.push(null);
                    return [3 /*break*/, 22];
                case 22: return [3 /*break*/, 24];
                case 23:
                    nestedDefs.push(null);
                    _c.label = 24;
                case 24: return [3 /*break*/, 2];
                case 25: return [3 /*break*/, 32];
                case 26:
                    e_3_1 = _c.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 32];
                case 27:
                    _c.trys.push([27, , 30, 31]);
                    if (!(possNestedDefs_1_1 && !possNestedDefs_1_1.done && (_a = possNestedDefs_1.return))) return [3 /*break*/, 29];
                    return [4 /*yield*/, _a.call(possNestedDefs_1)];
                case 28:
                    _c.sent();
                    _c.label = 29;
                case 29: return [3 /*break*/, 31];
                case 30:
                    if (e_3) throw e_3.error;
                    return [7 /*endfinally*/];
                case 31: return [7 /*endfinally*/];
                case 32: 
                // For all nested defs, replace the 
                return [2 /*return*/, nestedDefs];
            }
        });
    });
}
//--------------------------------------------------
//--------------------------------------------------
// EXTERNAL UTILS
//--------------------------------------------------
//--------------------------------------------------
/**
 *  Fetches calldata from a remote scanner based on the transaction's `chainId`
 */
function fetchCalldataDecoder(_data, to, _chainId, recurse) {
    if (recurse === void 0) { recurse = true; }
    return __awaiter(this, void 0, void 0, function () {
        var isHexString, data, selector, chainId, cachedNetwork, supportedChain, _a, abi_1, parsedAbi, def_1, err_5, abi, def, err_6;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 15, , 16]);
                    // Exit if there is no data. The 2 comes from the 0x prefix, but a later
                    // check will confirm that there are at least 4 bytes of data in the buffer.
                    if (!_data || _data.length < 2) {
                        throw new Error('Data is either undefined or less than two bytes');
                    }
                    isHexString = typeof _data === 'string' && _data.slice(0, 2) === '0x';
                    data = isHexString ?
                        Buffer.from(_data.slice(2), 'hex') :
                        //@ts-expect-error - Buffer doesn't recognize Uint8Array type properly
                        Buffer.from(_data, 'hex');
                    if (data.length < 4) {
                        throw new Error('Data must contain at least 4 bytes of data to define the selector');
                    }
                    selector = Buffer.from(data.slice(0, 4)).toString('hex');
                    chainId = Number(_chainId);
                    cachedNetwork = constants_1.NETWORKS_BY_CHAIN_ID[chainId];
                    if (!cachedNetwork) return [3 /*break*/, 1];
                    _a = cachedNetwork;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, fetchExternalNetworkForChainId(chainId)];
                case 2:
                    _a = _b.sent();
                    _b.label = 3;
                case 3:
                    supportedChain = _a;
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 10, , 11]);
                    if (!supportedChain) return [3 /*break*/, 8];
                    return [4 /*yield*/, fetchSupportedChainData(to, supportedChain)];
                case 5:
                    abi_1 = _b.sent();
                    parsedAbi = _1.Calldata.EVM.parsers.parseSolidityJSONABI(selector, abi_1);
                    def_1 = parsedAbi.def;
                    if (!recurse) return [3 /*break*/, 7];
                    return [4 /*yield*/, postProcessDef(def_1, data)];
                case 6:
                    def_1 = _b.sent();
                    _b.label = 7;
                case 7: return [2 /*return*/, { abi: abi_1, def: encodeDef(def_1) }];
                case 8: throw new Error("Chain (id: ".concat(chainId, ") is not supported"));
                case 9: return [3 /*break*/, 11];
                case 10:
                    err_5 = _b.sent();
                    console.warn(err_5.message, '\n', 'Falling back to 4byte');
                    return [3 /*break*/, 11];
                case 11: return [4 /*yield*/, fetch4byteData(selector)];
                case 12:
                    abi = _b.sent();
                    def = selectDefFrom4byteABI(abi, selector);
                    if (!recurse) return [3 /*break*/, 14];
                    return [4 /*yield*/, postProcessDef(def, data)];
                case 13:
                    def = _b.sent();
                    _b.label = 14;
                case 14: return [2 /*return*/, { abi: abi, def: encodeDef(def) }];
                case 15:
                    err_6 = _b.sent();
                    console.warn("Fetching calldata failed: ".concat(err_6.message));
                    return [3 /*break*/, 16];
                case 16: return [2 /*return*/, { def: null, abi: null }];
            }
        });
    });
}
exports.fetchCalldataDecoder = fetchCalldataDecoder;
/**
 * Generates an application secret for use in maintaining connection to device.
 * @param deviceId - The device ID of the device you want to generate a token for.
 * @param password - The password entered when connecting to the device.
 * @param appName - The name of the application.
 * @returns an application secret as a Buffer
 * @public
 */
var generateAppSecret = function (deviceId, password, appName) {
    var deviceIdBuffer = typeof deviceId === 'string' ? Buffer.from(deviceId) : deviceId;
    var passwordBuffer = typeof password === 'string' ? Buffer.from(password) : password;
    var appNameBuffer = typeof appName === 'string' ? Buffer.from(appName) : appName;
    var preImage = Buffer.concat([
        deviceIdBuffer,
        passwordBuffer,
        appNameBuffer,
    ]);
    return Buffer.from((0, sha_1.sha256)().update(preImage).digest('hex'), 'hex');
};
exports.generateAppSecret = generateAppSecret;
/**
 * Generic signing does not return a `v` value like legacy ETH signing requests did.
 * Get the `v` component of the signature as well as an `initV`
 * parameter, which is what you need to use to re-create an `@ethereumjs/tx`
 * object. There is a lot of tech debt in `@ethereumjs/tx` which also
 * inherits the tech debt of ethereumjs-util.
 * 1.  The legacy `Transaction` type can call `_processSignature` with the regular
 *     `v` value.
 * 2.  Newer transaction types such as `FeeMarketEIP1559Transaction` will subtract
 *     27 from the `v` that gets passed in, so we need to add `27` to create `initV`
 * @param tx - An @ethereumjs/tx Transaction object or Buffer (serialized tx)
 * @param resp - response from Lattice. Can be either legacy or generic signing variety
 * @returns bn.js BN object containing the `v` param
 */
var getV = function (tx, resp) {
    var chainId, hash, type;
    var txIsBuf = Buffer.isBuffer(tx);
    if (txIsBuf) {
        hash = Buffer.from((0, js_sha3_1.keccak256)(tx), 'hex');
        try {
            var legacyTxArray = (0, rlp_1.decode)(tx);
            if (legacyTxArray.length === 6) {
                // Six item array means this is a pre-EIP155 transaction
                chainId = null;
            }
            else {
                // Otherwise the `v` param is the `chainId`
                chainId = new bn_js_1.BN(legacyTxArray[6]);
            }
            // Legacy tx = type 0
            type = 0;
        }
        catch (err) {
            // This is likely a typed transaction
            try {
                var txObj = tx_1.TransactionFactory.fromSerializedData(tx);
                //@ts-expect-error -- Accessing private property
                type = txObj._type;
            }
            catch (err) {
                // If we can't RLP decode and can't hydrate an @ethereumjs/tx object,
                // we don't know what this is and should abort.
                throw new Error('Could not recover V. Bad transaction data.');
            }
        }
    }
    else {
        // @ethereumjs/tx object passed in
        type = tx._type;
        hash = type ?
            tx.getMessageToSign(true) : // newer tx types
            (0, rlp_1.encode)(tx.getMessageToSign(false)); // legacy tx
        if (tx.supports(tx_1.Capability.EIP155ReplayProtection)) {
            chainId = tx.common.chainIdBN().toNumber();
        }
    }
    var rs = new Uint8Array(Buffer.concat([resp.sig.r, resp.sig.s]));
    var pubkey = new Uint8Array(resp.pubkey);
    var recovery0 = (0, secp256k1_1.ecdsaRecover)(rs, 0, hash, false);
    var recovery1 = (0, secp256k1_1.ecdsaRecover)(rs, 1, hash, false);
    var pubkeyStr = Buffer.from(pubkey).toString('hex');
    var recovery0Str = Buffer.from(recovery0).toString('hex');
    var recovery1Str = Buffer.from(recovery1).toString('hex');
    var recovery;
    if (pubkeyStr === recovery0Str) {
        recovery = 0;
    }
    else if (pubkeyStr === recovery1Str) {
        recovery = 1;
    }
    else {
        // If we fail a second time, exit here.
        throw new Error('Failed to recover V parameter. Bad signature or transaction data.');
    }
    // Newer transaction types just use the [0, 1] value
    if (type) {
        return new bn_js_1.BN(recovery);
    }
    // If there is no chain ID, this is a pre-EIP155 tx
    if (!chainId) {
        return new bn_js_1.BN(recovery).addn(27);
    }
    // EIP155 replay protection is included in the `v` param
    // and uses the chainId value.
    return chainId.muln(2).addn(35).addn(recovery);
};
exports.getV = getV;
/** @internal */
exports.EXTERNAL = {
    fetchCalldataDecoder: fetchCalldataDecoder,
    generateAppSecret: exports.generateAppSecret,
    getV: exports.getV,
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\util.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\gindex.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cgindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gindexChild = exports.gindexParent = exports.gindexSibling = exports.concatGindices = exports.getGindexBits = exports.gindexIterator = exports.getGindicesAtDepth = exports.iterateAtDepth = exports.countToDepth = exports.convertGindexToBitstring = exports.toGindexBitstring = exports.toGindex = exports.bitIndexBigInt = void 0;
function bitIndexBigInt(v) {
    return v.toString(2).length - 1;
}
exports.bitIndexBigInt = bitIndexBigInt;
function toGindex(depth, index) {
    const anchor = BigInt(1) << BigInt(depth);
    if (index >= anchor) {
        throw new Error(`index ${index} too large for depth ${depth}`);
    }
    return anchor | index;
}
exports.toGindex = toGindex;
function toGindexBitstring(depth, index) {
    const str = index ? Number(index).toString(2) : "";
    if (str.length > depth) {
        throw new Error("index too large for depth");
    }
    else {
        return "1" + str.padStart(depth, "0");
    }
}
exports.toGindexBitstring = toGindexBitstring;
function convertGindexToBitstring(gindex) {
    if (typeof gindex === "string") {
        if (gindex.length === 0) {
            throw new Error(ERR_INVALID_GINDEX);
        }
        return gindex;
    }
    else {
        if (gindex < 1) {
            throw new Error(ERR_INVALID_GINDEX);
        }
        return gindex.toString(2);
    }
}
exports.convertGindexToBitstring = convertGindexToBitstring;
// Get the depth (root starting at 0) necessary to cover a subtree of `count` elements.
// (in out): (0 0), (1 0), (2 1), (3 2), (4 2), (5 3), (6 3), (7 3), (8 3), (9 4)
function countToDepth(count) {
    if (count <= 1) {
        return 0;
    }
    return (count - BigInt(1)).toString(2).length;
}
exports.countToDepth = countToDepth;
/**
 * Iterate through Gindexes at a certain depth
 */
function iterateAtDepth(depth, startIndex, count) {
    const anchor = BigInt(1) << BigInt(depth);
    if (startIndex + count > anchor) {
        throw new Error("Too large for depth");
    }
    let i = toGindex(depth, startIndex);
    const last = i + count;
    return {
        [Symbol.iterator]() {
            return {
                next() {
                    if (i < last) {
                        const value = i;
                        i++;
                        return { done: false, value };
                    }
                    else {
                        return { done: true, value: undefined };
                    }
                },
            };
        },
    };
}
exports.iterateAtDepth = iterateAtDepth;
/**
 * Return Gindexes at a certain depth
 */
function getGindicesAtDepth(depth, startIndex, count) {
    const anchor = BigInt(1) << BigInt(depth);
    if (startIndex + count > anchor) {
        throw new Error("Too large for depth");
    }
    let gindex = toGindex(depth, BigInt(startIndex));
    const gindices = [];
    for (let i = 0; i < count; i++) {
        gindices.push(gindex++);
    }
    return gindices;
}
exports.getGindicesAtDepth = getGindicesAtDepth;
const ERR_INVALID_GINDEX = "Invalid gindex";
function gindexIterator(gindex) {
    let bitstring;
    if (typeof gindex === "string") {
        if (!gindex.length) {
            throw new Error(ERR_INVALID_GINDEX);
        }
        bitstring = gindex;
    }
    else {
        if (gindex < 1) {
            throw new Error(ERR_INVALID_GINDEX);
        }
        bitstring = gindex.toString(2);
    }
    let i = 1;
    const next = () => {
        if (i === bitstring.length) {
            return { done: true, value: undefined };
        }
        const bit = Number(bitstring[i]);
        i++;
        return { done: false, value: bit };
    };
    return {
        [Symbol.iterator]() {
            return { next };
        },
        remainingBitLength() {
            return bitstring.length - i;
        },
    };
}
exports.gindexIterator = gindexIterator;
function getGindexBits(gindex) {
    let bitstring;
    if (typeof gindex === "string") {
        if (!gindex.length) {
            throw new Error(ERR_INVALID_GINDEX);
        }
        bitstring = gindex;
    }
    else {
        if (gindex < 1) {
            throw new Error(ERR_INVALID_GINDEX);
        }
        bitstring = gindex.toString(2);
    }
    const bits = [];
    for (let i = 1; i < bitstring.length; i++) {
        bits.push(Number(bitstring[i]));
    }
    return bits;
}
exports.getGindexBits = getGindexBits;
/**
 * Concatenate Generalized Indices
 * Given generalized indices i1 for A -> B, i2 for B -> C .... i_n for Y -> Z, returns
 * the generalized index for A -> Z.
 */
function concatGindices(gindices) {
    return BigInt(gindices.reduce((acc, gindex) => acc + gindex.toString(2).slice(1), "0b1"));
}
exports.concatGindices = concatGindices;
function gindexSibling(gindex) {
    return gindex ^ BigInt(1);
}
exports.gindexSibling = gindexSibling;
function gindexParent(gindex) {
    return gindex / BigInt(2);
}
exports.gindexParent = gindexParent;
function gindexChild(gindex, rightChild) {
    return gindex * BigInt(2) + BigInt(rightChild);
}
exports.gindexChild = gindexChild;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\gindex.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\hash.js", {"@chainsafe/as-sha256":"F:\\metamask-extension\\node_modules\\browserify\\lib\\_empty.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Chash.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHashObject = exports.uint8ArrayToHashObject = exports.hashObjectToUint8Array = exports.hashTwoObjects = exports.hash = void 0;
const as_sha256_1 = require("@chainsafe/as-sha256");
const input = new Uint8Array(64);
/**
 * Hash two 32 byte arrays
 */
function hash(a, b) {
    input.set(a, 0);
    input.set(b, 32);
    return as_sha256_1.digest64(input);
}
exports.hash = hash;
/**
 * Hash 2 objects, each store 8 numbers (equivalent to Uint8Array(32))
 */
function hashTwoObjects(a, b) {
    return as_sha256_1.digest64HashObjects(a, b);
}
exports.hashTwoObjects = hashTwoObjects;
function hashObjectToUint8Array(obj) {
    const byteArr = new Uint8Array(32);
    as_sha256_1.hashObjectToByteArray(obj, byteArr, 0);
    return byteArr;
}
exports.hashObjectToUint8Array = hashObjectToUint8Array;
function uint8ArrayToHashObject(byteArr) {
    return as_sha256_1.byteArrayToHashObject(byteArr);
}
exports.uint8ArrayToHashObject = uint8ArrayToHashObject;
function isHashObject(hash) {
    // @ts-ignore
    return hash.length === undefined;
}
exports.isHashObject = isHashObject;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\hash.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js", {"./gindex":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\gindex.js","./hash":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\hash.js","./node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js","./packedNode":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\packedNode.js","./proof":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\index.js","./subtree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\subtree.js","./tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\tree.js","./zeroNode":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\zeroNode.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./gindex"), exports);
__exportStar(require("./hash"), exports);
__exportStar(require("./node"), exports);
__exportStar(require("./packedNode"), exports);
__exportStar(require("./proof"), exports);
__exportStar(require("./subtree"), exports);
__exportStar(require("./tree"), exports);
__exportStar(require("./zeroNode"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js", {"./hash":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\hash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cnode.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bitwiseOrNodeH = exports.setNodeH = exports.getNodeH = exports.compose = exports.identity = exports.LeafNode = exports.BranchNode = exports.Node = void 0;
const hash_1 = require("./hash");
const TWO_POWER_32 = 2 ** 32;
/**
 * An immutable binary merkle tree node
 */
class Node {
    constructor(h0, h1, h2, h3, h4, h5, h6, h7) {
        this.h0 = h0;
        this.h1 = h1;
        this.h2 = h2;
        this.h3 = h3;
        this.h4 = h4;
        this.h5 = h5;
        this.h6 = h6;
        this.h7 = h7;
    }
    applyHash(root) {
        this.h0 = root.h0;
        this.h1 = root.h1;
        this.h2 = root.h2;
        this.h3 = root.h3;
        this.h4 = root.h4;
        this.h5 = root.h5;
        this.h6 = root.h6;
        this.h7 = root.h7;
    }
}
exports.Node = Node;
/**
 * An immutable binary merkle tree node that has a `left` and `right` child
 */
class BranchNode extends Node {
    constructor(_left, _right) {
        // First null value is to save an extra variable to check if a node has a root or not
        super(null, 0, 0, 0, 0, 0, 0, 0);
        this._left = _left;
        this._right = _right;
        if (!_left) {
            throw new Error("Left node is undefined");
        }
        if (!_right) {
            throw new Error("Right node is undefined");
        }
    }
    get rootHashObject() {
        if (this.h0 === null) {
            super.applyHash(hash_1.hashTwoObjects(this.left.rootHashObject, this.right.rootHashObject));
        }
        return this;
    }
    get root() {
        return hash_1.hashObjectToUint8Array(this.rootHashObject);
    }
    isLeaf() {
        return false;
    }
    get left() {
        return this._left;
    }
    get right() {
        return this._right;
    }
}
exports.BranchNode = BranchNode;
/**
 * An immutable binary merkle tree node that has no children
 */
class LeafNode extends Node {
    static fromRoot(root) {
        return this.fromHashObject(hash_1.uint8ArrayToHashObject(root));
    }
    /**
     * New LeafNode from existing HashObject.
     */
    static fromHashObject(ho) {
        return new LeafNode(ho.h0, ho.h1, ho.h2, ho.h3, ho.h4, ho.h5, ho.h6, ho.h7);
    }
    /**
     * New LeafNode with its internal value set to zero. Consider using `zeroNode(0)` if you don't need to mutate.
     */
    static fromZero() {
        return new LeafNode(0, 0, 0, 0, 0, 0, 0, 0);
    }
    /**
     * LeafNode with HashObject `(uint32, 0, 0, 0, 0, 0, 0, 0)`.
     */
    static fromUint32(uint32) {
        return new LeafNode(uint32, 0, 0, 0, 0, 0, 0, 0);
    }
    /**
     * Create a new LeafNode with the same internal values. The returned instance is safe to mutate
     */
    clone() {
        return LeafNode.fromHashObject(this);
    }
    get rootHashObject() {
        return this;
    }
    get root() {
        return hash_1.hashObjectToUint8Array(this);
    }
    isLeaf() {
        return true;
    }
    get left() {
        throw Error("LeafNode has no left node");
    }
    get right() {
        throw Error("LeafNode has no right node");
    }
    writeToBytes(data, start, size) {
        // TODO: Optimize
        data.set(this.root.slice(0, size), start);
    }
    getUint(uintBytes, offsetBytes, clipInfinity) {
        const hIndex = Math.floor(offsetBytes / 4);
        // number has to be masked from an h value
        if (uintBytes < 4) {
            const bitIndex = (offsetBytes % 4) * 8;
            const h = getNodeH(this, hIndex);
            if (uintBytes === 1) {
                return 0xff & (h >> bitIndex);
            }
            else {
                return 0xffff & (h >> bitIndex);
            }
        }
        // number equals the h value
        else if (uintBytes === 4) {
            return getNodeH(this, hIndex) >>> 0;
        }
        // number spans 2 h values
        else if (uintBytes === 8) {
            const low = getNodeH(this, hIndex);
            const high = getNodeH(this, hIndex + 1);
            if (high === 0) {
                return low >>> 0;
            }
            else if (high === -1 && low === -1 && clipInfinity) {
                // Limit uint returns
                return Infinity;
            }
            else {
                return (low >>> 0) + (high >>> 0) * TWO_POWER_32;
            }
        }
        // Bigger uint can't be represented
        else {
            throw Error("uintBytes > 8");
        }
    }
    getUintBigint(uintBytes, offsetBytes) {
        const hIndex = Math.floor(offsetBytes / 4);
        // number has to be masked from an h value
        if (uintBytes < 4) {
            const bitIndex = (offsetBytes % 4) * 8;
            const h = getNodeH(this, hIndex);
            if (uintBytes === 1) {
                return BigInt(0xff & (h >> bitIndex));
            }
            else {
                return BigInt(0xffff & (h >> bitIndex));
            }
        }
        // number equals the h value
        else if (uintBytes === 4) {
            return BigInt(getNodeH(this, hIndex) >>> 0);
        }
        // number spans multiple h values
        else {
            const hRange = Math.ceil(uintBytes / 4);
            let v = BigInt(0);
            for (let i = 0; i < hRange; i++) {
                v += BigInt(getNodeH(this, hIndex + i) >>> 0) << BigInt(32 * i);
            }
            return v;
        }
    }
    setUint(uintBytes, offsetBytes, value, clipInfinity) {
        const hIndex = Math.floor(offsetBytes / 4);
        // number has to be masked from an h value
        if (uintBytes < 4) {
            const bitIndex = (offsetBytes % 4) * 8;
            let h = getNodeH(this, hIndex);
            if (uintBytes === 1) {
                h &= ~(0xff << bitIndex);
                h |= (0xff && value) << bitIndex;
            }
            else {
                h &= ~(0xffff << bitIndex);
                h |= (0xffff && value) << bitIndex;
            }
            setNodeH(this, hIndex, h);
        }
        // number equals the h value
        else if (uintBytes === 4) {
            setNodeH(this, hIndex, value);
        }
        // number spans 2 h values
        else if (uintBytes === 8) {
            if (value === Infinity && clipInfinity) {
                setNodeH(this, hIndex, -1);
                setNodeH(this, hIndex + 1, -1);
            }
            else {
                setNodeH(this, hIndex, value & 0xffffffff);
                setNodeH(this, hIndex + 1, (value / TWO_POWER_32) & 0xffffffff);
            }
        }
        // Bigger uint can't be represented
        else {
            throw Error("uintBytes > 8");
        }
    }
    setUintBigint(uintBytes, offsetBytes, valueBN) {
        const hIndex = Math.floor(offsetBytes / 4);
        // number has to be masked from an h value
        if (uintBytes < 4) {
            const value = Number(valueBN);
            const bitIndex = (offsetBytes % 4) * 8;
            let h = getNodeH(this, hIndex);
            if (uintBytes === 1) {
                h &= ~(0xff << bitIndex);
                h |= (0xff && value) << bitIndex;
            }
            else {
                h &= ~(0xffff << bitIndex);
                h |= (0xffff && value) << bitIndex;
            }
            setNodeH(this, hIndex, h);
        }
        // number equals the h value
        else if (uintBytes === 4) {
            setNodeH(this, hIndex, Number(valueBN));
        }
        // number spans multiple h values
        else {
            const hEnd = hIndex + Math.ceil(uintBytes / 4);
            for (let i = hIndex; i < hEnd; i++) {
                setNodeH(this, i, Number(valueBN & BigInt(0xffffffff)));
                valueBN = valueBN >> BigInt(32);
            }
        }
    }
    bitwiseOrUint(uintBytes, offsetBytes, value) {
        const hIndex = Math.floor(offsetBytes / 4);
        // number has to be masked from an h value
        if (uintBytes < 4) {
            const bitIndex = (offsetBytes % 4) * 8;
            bitwiseOrNodeH(this, hIndex, value << bitIndex);
        }
        // number equals the h value
        else if (uintBytes === 4) {
            bitwiseOrNodeH(this, hIndex, value);
        }
        // number spans multiple h values
        else {
            const hEnd = hIndex + Math.ceil(uintBytes / 4);
            for (let i = hIndex; i < hEnd; i++) {
                bitwiseOrNodeH(this, i, value & 0xffffffff);
                value >>= 32;
            }
        }
    }
}
exports.LeafNode = LeafNode;
function identity(n) {
    return n;
}
exports.identity = identity;
function compose(inner, outer) {
    return function (n) {
        return outer(inner(n));
    };
}
exports.compose = compose;
function getNodeH(node, hIndex) {
    if (hIndex === 0)
        return node.h0;
    else if (hIndex === 1)
        return node.h1;
    else if (hIndex === 2)
        return node.h2;
    else if (hIndex === 3)
        return node.h3;
    else if (hIndex === 4)
        return node.h4;
    else if (hIndex === 5)
        return node.h5;
    else if (hIndex === 6)
        return node.h6;
    else if (hIndex === 7)
        return node.h7;
    else
        throw Error("hIndex > 7");
}
exports.getNodeH = getNodeH;
function setNodeH(node, hIndex, value) {
    if (hIndex === 0)
        node.h0 = value;
    else if (hIndex === 1)
        node.h1 = value;
    else if (hIndex === 2)
        node.h2 = value;
    else if (hIndex === 3)
        node.h3 = value;
    else if (hIndex === 4)
        node.h4 = value;
    else if (hIndex === 5)
        node.h5 = value;
    else if (hIndex === 6)
        node.h6 = value;
    else if (hIndex === 7)
        node.h7 = value;
    else
        throw Error("hIndex > 7");
}
exports.setNodeH = setNodeH;
function bitwiseOrNodeH(node, hIndex, value) {
    if (hIndex === 0)
        node.h0 |= value;
    else if (hIndex === 1)
        node.h1 |= value;
    else if (hIndex === 2)
        node.h2 |= value;
    else if (hIndex === 3)
        node.h3 |= value;
    else if (hIndex === 4)
        node.h4 |= value;
    else if (hIndex === 5)
        node.h5 |= value;
    else if (hIndex === 6)
        node.h6 |= value;
    else if (hIndex === 7)
        node.h7 |= value;
    else
        throw Error("hIndex > 7");
}
exports.bitwiseOrNodeH = bitwiseOrNodeH;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\packedNode.js", {"./node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js","./subtree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\subtree.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5CpackedNode.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packedNodeRootsToBytes = exports.packedRootsBytesToLeafNodes = exports.packedRootsBytesToNode = void 0;
const subtree_1 = require("./subtree");
const node_1 = require("./node");
function packedRootsBytesToNode(depth, dataView, start, end) {
    const leafNodes = packedRootsBytesToLeafNodes(dataView, start, end);
    return subtree_1.subtreeFillToContents(leafNodes, depth);
}
exports.packedRootsBytesToNode = packedRootsBytesToNode;
/**
 * Optimized deserialization of linear bytes to consecutive leaf nodes
 */
function packedRootsBytesToLeafNodes(dataView, start, end) {
    const size = end - start;
    // If the offset in data is not a multiple of 4, Uint32Array can't be used
    // > start offset of Uint32Array should be a multiple of 4
    // NOTE: Performance tests show that using a DataView is as fast as Uint32Array
    const fullNodeCount = Math.floor(size / 32);
    const leafNodes = new Array(Math.ceil(size / 32));
    // Efficiently construct the tree writing to hashObjects directly
    // TODO: Optimize, with this approach each h property is written twice
    for (let i = 0; i < fullNodeCount; i++) {
        const offset = start + i * 32;
        leafNodes[i] = new node_1.LeafNode(dataView.getInt32(offset + 0, true), dataView.getInt32(offset + 4, true), dataView.getInt32(offset + 8, true), dataView.getInt32(offset + 12, true), dataView.getInt32(offset + 16, true), dataView.getInt32(offset + 20, true), dataView.getInt32(offset + 24, true), dataView.getInt32(offset + 28, true));
    }
    // Consider that the last node may only include partial data
    const remainderBytes = size % 32;
    // Last node
    if (remainderBytes > 0) {
        const node = new node_1.LeafNode(0, 0, 0, 0, 0, 0, 0, 0);
        leafNodes[fullNodeCount] = node;
        // Loop to dynamically copy the full h values
        const fullHCount = Math.floor(remainderBytes / 4);
        for (let h = 0; h < fullHCount; h++) {
            node_1.setNodeH(node, h, dataView.getInt32(start + fullNodeCount * 32 + h * 4, true));
        }
        const remainderUint32 = size % 4;
        if (remainderUint32 > 0) {
            let h = 0;
            for (let i = 0; i < remainderUint32; i++) {
                h |= dataView.getUint8(start + size - remainderUint32 + i) << (i * 8);
            }
            node_1.setNodeH(node, fullHCount, h);
        }
    }
    return leafNodes;
}
exports.packedRootsBytesToLeafNodes = packedRootsBytesToLeafNodes;
/**
 * Optimized serialization of consecutive leave nodes to linear bytes
 */
function packedNodeRootsToBytes(dataView, start, size, nodes) {
    // If the offset in data is not a multiple of 4, Uint32Array can't be used
    // > start offset of Uint32Array should be a multiple of 4
    // NOTE: Performance tests show that using a DataView is as fast as Uint32Array
    // Consider that the last node may only include partial data
    const remainderBytes = size % 32;
    // Full nodes
    // Efficiently get hashObjects data into data
    const fullNodeCount = Math.floor(size / 32);
    for (let i = 0; i < fullNodeCount; i++) {
        const node = nodes[i];
        const offset = start + i * 32;
        dataView.setInt32(offset + 0, node.h0, true);
        dataView.setInt32(offset + 4, node.h1, true);
        dataView.setInt32(offset + 8, node.h2, true);
        dataView.setInt32(offset + 12, node.h3, true);
        dataView.setInt32(offset + 16, node.h4, true);
        dataView.setInt32(offset + 20, node.h5, true);
        dataView.setInt32(offset + 24, node.h6, true);
        dataView.setInt32(offset + 28, node.h7, true);
    }
    // Last node
    if (remainderBytes > 0) {
        const node = nodes[fullNodeCount];
        // Loop to dynamically copy the full h values
        const fullHCount = Math.floor(remainderBytes / 4);
        for (let h = 0; h < fullHCount; h++) {
            dataView.setInt32(start + fullNodeCount * 32 + h * 4, node_1.getNodeH(node, h), true);
        }
        const remainderUint32 = size % 4;
        if (remainderUint32 > 0) {
            const h = node_1.getNodeH(node, fullHCount);
            for (let i = 0; i < remainderUint32; i++) {
                dataView.setUint8(start + size - remainderUint32 + i, (h >> (i * 8)) & 0xff);
            }
        }
    }
}
exports.packedNodeRootsToBytes = packedNodeRootsToBytes;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\packedNode.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\index.js", {"./multi":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\multi.js","./single":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\single.js","./treeOffset":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\treeOffset.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cproof%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeProof = exports.serializeProof = exports.createNodeFromProof = exports.createProof = exports.ProofTypeSerialized = exports.ProofType = void 0;
const multi_1 = require("./multi");
const single_1 = require("./single");
const treeOffset_1 = require("./treeOffset");
var ProofType;
(function (ProofType) {
    ProofType["single"] = "single";
    ProofType["treeOffset"] = "treeOffset";
    ProofType["multi"] = "multi";
})(ProofType = exports.ProofType || (exports.ProofType = {}));
/**
 * Serialized proofs are prepended with a single byte, denoting their type
 */
exports.ProofTypeSerialized = [
    ProofType.single,
    ProofType.treeOffset,
    ProofType.multi, // 2
];
function createProof(rootNode, input) {
    switch (input.type) {
        case ProofType.single: {
            const [leaf, witnesses] = single_1.createSingleProof(rootNode, input.gindex);
            return {
                type: ProofType.single,
                gindex: input.gindex,
                leaf,
                witnesses,
            };
        }
        case ProofType.treeOffset: {
            const [offsets, leaves] = treeOffset_1.createTreeOffsetProof(rootNode, input.gindices);
            return {
                type: ProofType.treeOffset,
                offsets,
                leaves,
            };
        }
        case ProofType.multi: {
            const [leaves, witnesses, gindices] = multi_1.createMultiProof(rootNode, input.gindices);
            return {
                type: ProofType.multi,
                leaves,
                witnesses,
                gindices,
            };
        }
        default:
            throw new Error("Invalid proof type");
    }
}
exports.createProof = createProof;
function createNodeFromProof(proof) {
    switch (proof.type) {
        case ProofType.single:
            return single_1.createNodeFromSingleProof(proof.gindex, proof.leaf, proof.witnesses);
        case ProofType.treeOffset:
            return treeOffset_1.createNodeFromTreeOffsetProof(proof.offsets, proof.leaves);
        case ProofType.multi:
            return multi_1.createNodeFromMultiProof(proof.leaves, proof.witnesses, proof.gindices);
        default:
            throw new Error("Invalid proof type");
    }
}
exports.createNodeFromProof = createNodeFromProof;
function serializeProof(proof) {
    switch (proof.type) {
        case ProofType.single:
        case ProofType.multi:
            throw new Error("Not implemented");
        case ProofType.treeOffset: {
            const output = new Uint8Array(1 + treeOffset_1.computeTreeOffsetProofSerializedLength(proof.offsets, proof.leaves));
            output[0] = exports.ProofTypeSerialized.indexOf(ProofType.treeOffset);
            treeOffset_1.serializeTreeOffsetProof(output, 1, proof.offsets, proof.leaves);
            return output;
        }
        default:
            throw new Error("Invalid proof type");
    }
}
exports.serializeProof = serializeProof;
function deserializeProof(data) {
    const proofType = exports.ProofTypeSerialized[data[0]];
    if (!proofType) {
        throw new Error("Invalid proof type");
    }
    switch (proofType) {
        case ProofType.single:
        case ProofType.multi:
            throw new Error("Not implemented");
        case ProofType.treeOffset: {
            const [offsets, leaves] = treeOffset_1.deserializeTreeOffsetProof(data, 1);
            return {
                type: ProofType.treeOffset,
                offsets,
                leaves,
            };
        }
        default:
            throw new Error("Invalid proof type");
    }
}
exports.deserializeProof = deserializeProof;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\multi.js", {"../node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js","../tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\tree.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cproof%5Cmulti.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeFromMultiProof = exports.createMultiProof = void 0;
const node_1 = require("../node");
const tree_1 = require("../tree");
const util_1 = require("./util");
/**
 * Create an multiproof
 *
 * See https://github.com/ethereum/consensus-specs/blob/dev/ssz/merkle-proofs.md#merkle-multiproofs
 *
 * @param rootNode the root node of the tree
 * @param gindices generalized indices of leaves to include in the proof
 */
function createMultiProof(rootNode, gindices) {
    const tree = new tree_1.Tree(rootNode);
    const witnessGindices = util_1.computeMultiProofBitstrings(gindices.map((gindex) => gindex.toString(2)), false, util_1.SortOrder.Decreasing);
    const leafGindices = gindices.slice().sort((a, b) => (a < b ? 1 : -1));
    const leaves = leafGindices.map((gindex) => tree.getRoot(gindex));
    const witnesses = witnessGindices.map((gindex) => tree.getRoot(gindex));
    return [leaves, witnesses, leafGindices];
}
exports.createMultiProof = createMultiProof;
/**
 * Recreate a `Node` given a multiproof
 *
 * See https://github.com/ethereum/consensus-specs/blob/dev/ssz/merkle-proofs.md#merkle-multiproofs
 *
 * @param leaves leaves of a EF multiproof
 * @param witnesses witnesses of a EF multiproof
 * @param gindices generalized indices of the leaves
 */
function createNodeFromMultiProof(leaves, witnesses, gindices) {
    if (leaves.length !== gindices.length) {
        throw new Error("Leaves length should equal gindices length");
    }
    const leafBitstrings = gindices.map((gindex) => gindex.toString(2));
    const witnessBitstrings = util_1.computeMultiProofBitstrings(leafBitstrings, false, util_1.SortOrder.Decreasing);
    if (witnessBitstrings.length !== witnesses.length) {
        throw new Error("Witnesses length should equal witnesses gindices length");
    }
    // Algorithm:
    // create an object which tracks key-values for each level
    // pre-load leaves and witnesses into the level object
    // level by level, starting from the bottom,
    // find the sibling, create the parent, store it in the next level up
    // the root is in level 1
    const maxLevel = Math.max(leafBitstrings[0]?.length ?? 0, witnessBitstrings[0]?.length ?? 0);
    const levels = Object.fromEntries(Array.from({ length: maxLevel }, (_, i) => [i + 1, {}]));
    // preload leaves and witnesses
    for (let i = 0; i < leafBitstrings.length; i++) {
        const leafBitstring = leafBitstrings[i];
        const leaf = leaves[i];
        levels[leafBitstring.length][leafBitstring] = node_1.LeafNode.fromRoot(leaf);
    }
    for (let i = 0; i < witnessBitstrings.length; i++) {
        const witnessBitstring = witnessBitstrings[i];
        const witness = witnesses[i];
        levels[witnessBitstring.length][witnessBitstring] = node_1.LeafNode.fromRoot(witness);
    }
    for (let i = maxLevel; i > 1; i--) {
        const level = levels[i];
        const parentLevel = levels[i - 1];
        for (const bitstring of Object.keys(level)) {
            const node = level[bitstring];
            // if the node doesn't exist, we've already processed its sibling
            if (!node) {
                continue;
            }
            const isLeft = bitstring[bitstring.length - 1] === "0";
            const parentBitstring = bitstring.substring(0, bitstring.length - 1);
            const siblingBitstring = parentBitstring + (isLeft ? "1" : "0");
            const siblingNode = level[siblingBitstring];
            if (!siblingNode) {
                throw new Error(`Sibling not found: ${siblingBitstring}`);
            }
            // store the parent node
            const parentNode = isLeft ? new node_1.BranchNode(node, siblingNode) : new node_1.BranchNode(siblingNode, node);
            parentLevel[parentBitstring] = parentNode;
            // delete the used nodes
            delete level[bitstring];
            delete level[siblingBitstring];
        }
    }
    const root = levels[1]["1"];
    if (!root) {
        throw new Error("Internal consistency error: no root found");
    }
    return root;
}
exports.createNodeFromMultiProof = createNodeFromMultiProof;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\multi.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\single.js", {"../gindex":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\gindex.js","../node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cproof%5Csingle.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeFromSingleProof = exports.createSingleProof = exports.ERR_INVALID_NAV = void 0;
const node_1 = require("../node");
const gindex_1 = require("../gindex");
exports.ERR_INVALID_NAV = "Invalid tree navigation";
function createSingleProof(rootNode, index) {
    const witnesses = [];
    let node = rootNode;
    for (const i of gindex_1.gindexIterator(index)) {
        if (i) {
            if (node.isLeaf())
                throw new Error(exports.ERR_INVALID_NAV);
            witnesses.push(node.left.root);
            node = node.right;
        }
        else {
            if (node.isLeaf())
                throw new Error(exports.ERR_INVALID_NAV);
            witnesses.push(node.right.root);
            node = node.left;
        }
    }
    return [node.root, witnesses.reverse()];
}
exports.createSingleProof = createSingleProof;
function createNodeFromSingleProof(gindex, leaf, witnesses) {
    let node = node_1.LeafNode.fromRoot(leaf);
    const w = witnesses.slice().reverse();
    while (gindex > 1) {
        const sibling = node_1.LeafNode.fromRoot(w.pop());
        if (gindex % BigInt(2) === BigInt(0)) {
            node = new node_1.BranchNode(node, sibling);
        }
        else {
            node = new node_1.BranchNode(sibling, node);
        }
        gindex = gindex / BigInt(2);
    }
    return node;
}
exports.createNodeFromSingleProof = createNodeFromSingleProof;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\single.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\treeOffset.js", {"../node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cproof%5CtreeOffset.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeTreeOffsetProof = exports.serializeTreeOffsetProof = exports.computeTreeOffsetProofSerializedLength = exports.createNodeFromTreeOffsetProof = exports.createTreeOffsetProof = exports.treeOffsetProofToNode = exports.nodeToTreeOffsetProof = void 0;
const node_1 = require("../node");
const util_1 = require("./util");
/**
 * Compute offsets and leaves of a tree-offset proof
 *
 * Recursive function
 *
 * See https://github.com/protolambda/eth-merkle-trees/blob/master/tree_offsets.md
 * @param node current node in the tree
 * @param gindex current generalized index in the tree
 * @param proofGindices generalized indices to left include in the proof - must be sorted in-order according to the tree
 */
function nodeToTreeOffsetProof(node, gindex, proofGindices) {
    if (!proofGindices.length || !proofGindices[0].startsWith(gindex)) {
        // there are no proof indices left OR the current subtree contains no remaining proof indices
        return [[], []];
    }
    else if (gindex === proofGindices[0]) {
        // the current node is at the next proof index
        proofGindices.shift();
        return [[], [node.root]];
    }
    else {
        // recursively compute offsets, leaves for the left and right subtree
        const [leftOffsets, leftLeaves] = nodeToTreeOffsetProof(node.left, gindex + "0", proofGindices);
        const [rightOffsets, rightLeaves] = nodeToTreeOffsetProof(node.right, gindex + "1", proofGindices);
        // the offset prepended to the list is # of leaves in the left subtree
        const pivot = leftLeaves.length;
        return [[pivot].concat(leftOffsets, rightOffsets), leftLeaves.concat(rightLeaves)];
    }
}
exports.nodeToTreeOffsetProof = nodeToTreeOffsetProof;
/**
 * Recreate a `Node` given offsets and leaves of a tree-offset proof
 *
 * Recursive definition
 *
 * See https://github.com/protolambda/eth-merkle-trees/blob/master/tree_offsets.md
 */
function treeOffsetProofToNode(offsets, leaves) {
    if (!leaves.length) {
        throw new Error("Proof must contain gt 0 leaves");
    }
    else if (leaves.length === 1) {
        return node_1.LeafNode.fromRoot(leaves[0]);
    }
    else {
        // the offset popped from the list is the # of leaves in the left subtree
        const pivot = offsets[0];
        return new node_1.BranchNode(treeOffsetProofToNode(offsets.slice(1, pivot), leaves.slice(0, pivot)), treeOffsetProofToNode(offsets.slice(pivot), leaves.slice(pivot)));
    }
}
exports.treeOffsetProofToNode = treeOffsetProofToNode;
/**
 * Create a tree-offset proof
 *
 * @param rootNode the root node of the tree
 * @param gindices generalized indices to include in the proof
 */
function createTreeOffsetProof(rootNode, gindices) {
    return nodeToTreeOffsetProof(rootNode, "1", util_1.computeMultiProofBitstrings(gindices.map((g) => g.toString(2))));
}
exports.createTreeOffsetProof = createTreeOffsetProof;
/**
 * Recreate a `Node` given a tree-offset proof
 *
 * @param offsets offsets of a tree-offset proof
 * @param leaves leaves of a tree-offset proof
 */
function createNodeFromTreeOffsetProof(offsets, leaves) {
    // TODO validation
    return treeOffsetProofToNode(offsets, leaves);
}
exports.createNodeFromTreeOffsetProof = createNodeFromTreeOffsetProof;
function computeTreeOffsetProofSerializedLength(offsets, leaves) {
    // add 1 for # of leaves
    return (offsets.length + 1) * 2 + leaves.length * 32;
}
exports.computeTreeOffsetProofSerializedLength = computeTreeOffsetProofSerializedLength;
// Serialized tree offset proof structure:
// # of leaves - 2 bytes
// offsets - 2 bytes each
// leaves - 32 bytes each
function serializeTreeOffsetProof(output, byteOffset, offsets, leaves) {
    const writer = new DataView(output.buffer, output.byteOffset, output.byteLength);
    // set # of leaves
    writer.setUint16(byteOffset, leaves.length, true);
    // set offsets
    const offsetsStartIndex = byteOffset + 2;
    for (let i = 0; i < offsets.length; i++) {
        writer.setUint16(i * 2 + offsetsStartIndex, offsets[i], true);
    }
    // set leaves
    const leavesStartIndex = offsetsStartIndex + offsets.length * 2;
    for (let i = 0; i < leaves.length; i++) {
        output.set(leaves[i], i * 32 + leavesStartIndex);
    }
}
exports.serializeTreeOffsetProof = serializeTreeOffsetProof;
function deserializeTreeOffsetProof(data, byteOffset) {
    const reader = new DataView(data.buffer, data.byteOffset, data.byteLength);
    // get # of leaves
    const leafCount = reader.getUint16(byteOffset, true);
    if (data.length < (leafCount - 1) * 2 + leafCount * 32) {
        throw new Error("Unable to deserialize tree offset proof: not enough bytes");
    }
    // get offsets
    const offsetsStartIndex = byteOffset + 2;
    const offsets = Array.from({ length: leafCount - 1 }, (_, i) => reader.getUint16(i * 2 + offsetsStartIndex, true));
    // get leaves
    const leavesStartIndex = offsetsStartIndex + offsets.length * 2;
    const leaves = Array.from({ length: leafCount }, (_, i) => data.subarray(i * 32 + leavesStartIndex, (i + 1) * 32 + leavesStartIndex));
    return [offsets, leaves];
}
exports.deserializeTreeOffsetProof = deserializeTreeOffsetProof;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\treeOffset.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\util.js", {"../gindex":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\gindex.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Cproof%5Cutil.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeMultiProofBitstrings = exports.SortOrder = exports.filterParentBitstrings = exports.sortDecreasingBitstrings = exports.sortInOrderBitstrings = exports.computeProofBitstrings = exports.computeProofGindices = void 0;
const gindex_1 = require("../gindex");
// Not currently in use, but simpler implementation useful for testing
/**
 * Compute both the path and branch indices
 *
 * Path indices are parent indices upwards toward the root
 * Branch indices are witnesses required for a merkle proof
 */
function computeProofGindices(gindex) {
    const path = new Set();
    const branch = new Set();
    let g = gindex;
    while (g > 1) {
        path.add(g);
        branch.add(gindex_1.gindexSibling(g));
        g = gindex_1.gindexParent(g);
    }
    return { path, branch };
}
exports.computeProofGindices = computeProofGindices;
/**
 * Compute both the path and branch indices
 *
 * Path indices are parent indices upwards toward the root
 * Branch indices are witnesses required for a merkle proof
 */
function computeProofBitstrings(gindex) {
    const path = new Set();
    const branch = new Set();
    let g = gindex;
    while (g.length > 1) {
        path.add(g);
        const lastBit = g[g.length - 1];
        const parent = g.substring(0, g.length - 1);
        branch.add(parent + (Number(lastBit) ^ 1));
        g = parent;
    }
    return { path, branch };
}
exports.computeProofBitstrings = computeProofBitstrings;
/**
 * Sort generalized indices in-order
 * @param bitLength maximum bit length of generalized indices to sort
 */
function sortInOrderBitstrings(gindices, bitLength) {
    if (!gindices.length) {
        return [];
    }
    return gindices
        .map((g) => g.padEnd(bitLength))
        .sort()
        .map((g) => g.trim());
}
exports.sortInOrderBitstrings = sortInOrderBitstrings;
/**
 * Sort generalized indices in decreasing order
 */
function sortDecreasingBitstrings(gindices) {
    if (!gindices.length) {
        return [];
    }
    return gindices.sort((a, b) => {
        if (a.length < b.length) {
            return 1;
        }
        else if (b.length < a.length) {
            return -1;
        }
        let aPos0 = a.indexOf("0");
        let bPos0 = b.indexOf("0");
        // eslint-disable-next-line no-constant-condition
        while (true) {
            if (aPos0 === -1) {
                return -1;
            }
            else if (bPos0 === -1) {
                return 1;
            }
            if (aPos0 < bPos0) {
                return 1;
            }
            else if (bPos0 < aPos0) {
                return -1;
            }
            aPos0 = a.indexOf("0", aPos0 + 1);
            bPos0 = b.indexOf("0", bPos0 + 1);
        }
    });
}
exports.sortDecreasingBitstrings = sortDecreasingBitstrings;
/**
 * Filter out parent generalized indices
 */
function filterParentBitstrings(gindices) {
    const sortedBitstrings = gindices.slice().sort((a, b) => a.length - b.length);
    const filtered = [];
    outer: for (let i = 0; i < sortedBitstrings.length; i++) {
        const bsA = sortedBitstrings[i];
        for (let j = i + 1; j < sortedBitstrings.length; j++) {
            const bsB = sortedBitstrings[j];
            if (bsB.startsWith(bsA)) {
                continue outer;
            }
        }
        filtered.push(bsA);
    }
    return filtered;
}
exports.filterParentBitstrings = filterParentBitstrings;
var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["InOrder"] = 0] = "InOrder";
    SortOrder[SortOrder["Decreasing"] = 1] = "Decreasing";
    SortOrder[SortOrder["Unsorted"] = 2] = "Unsorted";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
/**
 * Return the set of generalized indices required for a multiproof
 * This may include all leaves and any necessary witnesses
 * @param gindices leaves to include in proof
 * @returns all generalized indices required for a multiproof (leaves and witnesses), deduplicated and sorted
 */
function computeMultiProofBitstrings(gindices, includeLeaves = true, sortOrder = SortOrder.InOrder) {
    const leaves = filterParentBitstrings(gindices);
    // Maybe initialize the proof indices with the leaves
    const proof = new Set(includeLeaves ? leaves : []);
    const paths = new Set();
    const branches = new Set();
    // Collect all path indices and all branch indices
    let maxBitLength = 1;
    for (const gindex of leaves) {
        if (gindex.length > maxBitLength)
            maxBitLength = gindex.length;
        const { path, branch } = computeProofBitstrings(gindex);
        path.forEach((g) => paths.add(g));
        branch.forEach((g) => branches.add(g));
    }
    // Remove all branches that are included in the paths
    paths.forEach((g) => branches.delete(g));
    // Add all remaining branches to the leaves
    branches.forEach((g) => proof.add(g));
    switch (sortOrder) {
        case SortOrder.InOrder:
            return sortInOrderBitstrings(Array.from(proof), maxBitLength);
        case SortOrder.Decreasing:
            return sortDecreasingBitstrings(Array.from(proof));
        case SortOrder.Unsorted:
            return Array.from(proof);
    }
}
exports.computeMultiProofBitstrings = computeMultiProofBitstrings;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\util.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\subtree.js", {"./node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js","./zeroNode":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\zeroNode.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Csubtree.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subtreeFillToContents = exports.subtreeFillToLength = exports.subtreeFillToDepth = void 0;
const node_1 = require("./node");
const zeroNode_1 = require("./zeroNode");
function subtreeFillToDepth(bottom, depth) {
    let node = bottom;
    while (depth > 0) {
        node = new node_1.BranchNode(node, node);
        depth--;
    }
    return node;
}
exports.subtreeFillToDepth = subtreeFillToDepth;
function subtreeFillToLength(bottom, depth, length) {
    const maxLength = 1 << depth;
    if (length > maxLength)
        throw new Error("ERR_TOO_MANY_NODES");
    if (length === maxLength)
        return subtreeFillToDepth(bottom, depth);
    if (depth === 0) {
        if (length === 1)
            return bottom;
        else
            throw new Error("ERR_NAVIGATION");
    }
    if (depth === 1) {
        return new node_1.BranchNode(bottom, length > 1 ? bottom : zeroNode_1.zeroNode(0));
    }
    const pivot = maxLength >> 1;
    if (length <= pivot) {
        return new node_1.BranchNode(subtreeFillToLength(bottom, depth - 1, length), zeroNode_1.zeroNode(depth - 1));
    }
    else {
        return new node_1.BranchNode(subtreeFillToDepth(bottom, depth - 1), subtreeFillToLength(bottom, depth - 1, length - pivot));
    }
}
exports.subtreeFillToLength = subtreeFillToLength;
/**
 * WARNING: Mutates the provided nodes array.
 * TODO: Don't mutate the nodes array.
 */
function subtreeFillToContents(nodes, depth) {
    const maxLength = 2 ** depth;
    if (nodes.length > maxLength) {
        throw new Error(`nodes.length ${nodes.length} over maxIndex at depth ${depth}`);
    }
    if (nodes.length === 0) {
        return zeroNode_1.zeroNode(depth);
    }
    if (depth === 0) {
        return nodes[0];
    }
    if (depth === 1) {
        return nodes.length > 1
            ? // All nodes at depth 1 available
                new node_1.BranchNode(nodes[0], nodes[1])
            : // Pad with zero node
                new node_1.BranchNode(nodes[0], zeroNode_1.zeroNode(0));
    }
    let count = nodes.length;
    for (let d = depth; d > 0; d--) {
        const countRemainder = count % 2;
        const countEven = count - countRemainder;
        // For each depth level compute the new BranchNodes and overwrite the nodes array
        for (let i = 0; i < countEven; i += 2) {
            nodes[i / 2] = new node_1.BranchNode(nodes[i], nodes[i + 1]);
        }
        if (countRemainder > 0) {
            nodes[countEven / 2] = new node_1.BranchNode(nodes[countEven], zeroNode_1.zeroNode(depth - d));
        }
        // If there was remainer, 2 nodes are added to the count
        count = countEven / 2 + countRemainder;
    }
    return nodes[0];
}
exports.subtreeFillToContents = subtreeFillToContents;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\subtree.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\tree.js", {"./gindex":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\gindex.js","./node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js","./proof":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\index.js","./proof/single":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\proof\\single.js","./zeroNode":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\zeroNode.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5Ctree.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.treeZeroAfterIndex = exports.iterateNodesAtDepth = exports.getNodesAtDepth = exports.setNodesAtDepth = exports.setNodeAtDepth = exports.getNodeAtDepth = exports.setNodeWithFn = exports.setNode = exports.getNode = exports.Tree = void 0;
const zeroNode_1 = require("./zeroNode");
const gindex_1 = require("./gindex");
const node_1 = require("./node");
const proof_1 = require("./proof");
const single_1 = require("./proof/single");
/**
 * Binary merkle tree
 *
 * Wrapper around immutable `Node` to support mutability.
 *
 * Mutability between a parent tree and subtree is achieved by maintaining a `hook` callback, which updates the parent when the subtree is updated.
 */
class Tree {
    constructor(node, hook) {
        this._rootNode = node;
        if (hook) {
            if (typeof WeakRef === "undefined") {
                this.hook = hook;
            }
            else {
                this.hook = new WeakRef(hook);
            }
        }
    }
    /**
     * Create a `Tree` from a `Proof` object
     */
    static createFromProof(proof) {
        return new Tree(proof_1.createNodeFromProof(proof));
    }
    /**
     * The root node of the tree
     */
    get rootNode() {
        return this._rootNode;
    }
    /**
     *
     * Setting the root node will trigger a call to the tree's `hook` if it exists.
     */
    set rootNode(newRootNode) {
        this._rootNode = newRootNode;
        if (this.hook) {
            // WeakRef should not change status during a program's execution
            // So, use WeakRef feature detection to assume the type of this.hook
            // to minimize the memory footprint of Tree
            if (typeof WeakRef === "undefined") {
                this.hook(newRootNode);
            }
            else {
                const hookVar = this.hook.deref();
                if (hookVar) {
                    hookVar(newRootNode);
                }
                else {
                    // Hook has been garbage collected, no need to keep the hookRef
                    this.hook = undefined;
                }
            }
        }
    }
    /**
     * The root hash of the tree
     */
    get root() {
        return this.rootNode.root;
    }
    /**
     * Return a copy of the tree
     */
    clone() {
        return new Tree(this.rootNode);
    }
    /**
     * Return the subtree at the specified gindex.
     *
     * Note: The returned subtree will have a `hook` attached to the parent tree.
     * Updates to the subtree will result in updates to the parent.
     */
    getSubtree(index) {
        return new Tree(this.getNode(index), (node) => this.setNode(index, node));
    }
    /**
     * Return the node at the specified gindex.
     */
    getNode(gindex) {
        return getNode(this.rootNode, gindex);
    }
    /**
     * Return the node at the specified depth and index.
     *
     * Supports index up to `Number.MAX_SAFE_INTEGER`.
     */
    getNodeAtDepth(depth, index) {
        return getNodeAtDepth(this.rootNode, depth, index);
    }
    /**
     * Return the hash at the specified gindex.
     */
    getRoot(index) {
        return this.getNode(index).root;
    }
    /**
     * Set the node at at the specified gindex.
     */
    setNode(gindex, n) {
        this.rootNode = setNode(this.rootNode, gindex, n);
    }
    /**
     * Traverse to the node at the specified gindex,
     * then apply the function to get a new node and set the node at the specified gindex with the result.
     *
     * This is a convenient method to avoid traversing the tree 2 times to
     * get and set.
     */
    setNodeWithFn(gindex, getNewNode) {
        this.rootNode = setNodeWithFn(this.rootNode, gindex, getNewNode);
    }
    /**
     * Set the node at the specified depth and index.
     *
     * Supports index up to `Number.MAX_SAFE_INTEGER`.
     */
    setNodeAtDepth(depth, index, node) {
        this.rootNode = setNodeAtDepth(this.rootNode, depth, index, node);
    }
    /**
     * Set the hash at the specified gindex.
     *
     * Note: This will set a new `LeafNode` at the specified gindex.
     */
    setRoot(index, root) {
        this.setNode(index, node_1.LeafNode.fromRoot(root));
    }
    /**
     * Fast read-only iteration
     * In-order traversal of nodes at `depth`
     * starting from the `startIndex`-indexed node
     * iterating through `count` nodes
     *
     * Supports index up to `Number.MAX_SAFE_INTEGER`.
     */
    getNodesAtDepth(depth, startIndex, count) {
        return getNodesAtDepth(this.rootNode, depth, startIndex, count);
    }
    /**
     * Fast read-only iteration
     * In-order traversal of nodes at `depth`
     * starting from the `startIndex`-indexed node
     * iterating through `count` nodes
     *
     * Supports index up to `Number.MAX_SAFE_INTEGER`.
     */
    iterateNodesAtDepth(depth, startIndex, count) {
        return iterateNodesAtDepth(this.rootNode, depth, startIndex, count);
    }
    /**
     * Return a merkle proof for the node at the specified gindex.
     */
    getSingleProof(index) {
        return single_1.createSingleProof(this.rootNode, index)[1];
    }
    /**
     * Return a merkle proof for the proof input.
     *
     * This method can be used to create multiproofs.
     */
    getProof(input) {
        return proof_1.createProof(this.rootNode, input);
    }
}
exports.Tree = Tree;
/**
 * Return the node at the specified gindex.
 */
function getNode(rootNode, gindex) {
    const gindexBitstring = gindex_1.convertGindexToBitstring(gindex);
    let node = rootNode;
    for (let i = 1; i < gindexBitstring.length; i++) {
        if (node.isLeaf()) {
            throw new Error(`Invalid tree - found leaf at depth ${i}`);
        }
        // If bit is set, means navigate right
        node = gindexBitstring[i] === "1" ? node.right : node.left;
    }
    return node;
}
exports.getNode = getNode;
/**
 * Set the node at at the specified gindex.
 * Returns the new root node.
 */
function setNode(rootNode, gindex, n) {
    // Pre-compute entire bitstring instead of using an iterator (25% faster)
    const gindexBitstring = gindex_1.convertGindexToBitstring(gindex);
    const parentNodes = getParentNodes(rootNode, gindexBitstring);
    return rebindNodeToRoot(gindexBitstring, parentNodes, n);
}
exports.setNode = setNode;
/**
 * Traverse to the node at the specified gindex,
 * then apply the function to get a new node and set the node at the specified gindex with the result.
 *
 * This is a convenient method to avoid traversing the tree 2 times to
 * get and set.
 *
 * Returns the new root node.
 */
function setNodeWithFn(rootNode, gindex, getNewNode) {
    // Pre-compute entire bitstring instead of using an iterator (25% faster)
    const gindexBitstring = gindex_1.convertGindexToBitstring(gindex);
    const parentNodes = getParentNodes(rootNode, gindexBitstring);
    const lastParentNode = parentNodes[parentNodes.length - 1];
    const lastBit = gindexBitstring[gindexBitstring.length - 1];
    const oldNode = lastBit === "1" ? lastParentNode.right : lastParentNode.left;
    const newNode = getNewNode(oldNode);
    return rebindNodeToRoot(gindexBitstring, parentNodes, newNode);
}
exports.setNodeWithFn = setNodeWithFn;
/**
 * Traverse the tree from root node, ignore the last bit to get all parent nodes
 * of the specified bitstring.
 */
function getParentNodes(rootNode, bitstring) {
    let node = rootNode;
    // Keep a list of all parent nodes of node at gindex `index`. Then walk the list
    // backwards to rebind them "recursively" with the new nodes without using functions
    const parentNodes = [rootNode];
    // Ignore the first bit, left right directions are at bits [1,..]
    // Ignore the last bit, no need to push the target node to the parentNodes array
    for (let i = 1; i < bitstring.length - 1; i++) {
        // Compare to string directly to prevent unnecessary type conversions
        if (bitstring[i] === "1") {
            node = node.right;
        }
        else {
            node = node.left;
        }
        parentNodes.push(node);
    }
    return parentNodes;
}
/**
 * Build a new tree structure from bitstring, parentNodes and a new node.
 * Returns the new root node.
 */
function rebindNodeToRoot(bitstring, parentNodes, newNode) {
    let node = newNode;
    // Ignore the first bit, left right directions are at bits [1,..]
    // Iterate the list backwards including the last bit, but offset the parentNodes array
    // by one since the first bit in bitstring was ignored in the previous loop
    for (let i = bitstring.length - 1; i >= 1; i--) {
        if (bitstring[i] === "1") {
            node = new node_1.BranchNode(parentNodes[i - 1].left, node);
        }
        else {
            node = new node_1.BranchNode(node, parentNodes[i - 1].right);
        }
    }
    return node;
}
/**
 * Supports index up to `Number.MAX_SAFE_INTEGER`.
 */
function getNodeAtDepth(rootNode, depth, index) {
    if (depth === 0) {
        return rootNode;
    }
    if (depth === 1) {
        return index === 0 ? rootNode.left : rootNode.right;
    }
    // Ignore first bit "1", then substract 1 to get to the parent
    const depthiRoot = depth - 1;
    const depthiParent = 0;
    let node = rootNode;
    for (let d = depthiRoot; d >= depthiParent; d--) {
        node = isLeftNode(d, index) ? node.left : node.right;
    }
    return node;
}
exports.getNodeAtDepth = getNodeAtDepth;
/**
 * Supports index up to `Number.MAX_SAFE_INTEGER`.
 */
function setNodeAtDepth(rootNode, nodesDepth, index, nodeChanged) {
    // TODO: OPTIMIZE (if necessary)
    return setNodesAtDepth(rootNode, nodesDepth, [index], [nodeChanged]);
}
exports.setNodeAtDepth = setNodeAtDepth;
/**
 * Set multiple nodes in batch, editing and traversing nodes strictly once.
 *
 * - gindexes MUST be sorted in ascending order beforehand.
 * - All gindexes must be at the exact same depth.
 * - Depth must be > 0, if 0 just replace the root node.
 *
 * Strategy: for each gindex in `gindexes` navigate to the depth of its parent,
 * and create a new parent. Then calculate the closest common depth with the next
 * gindex and navigate upwards creating or caching nodes as necessary. Loop and repeat.
 *
 * Supports index up to `Number.MAX_SAFE_INTEGER`.
 */
function setNodesAtDepth(rootNode, nodesDepth, indexes, nodes) {
    // depth depthi   gindexes   indexes
    // 0     1           1          0
    // 1     0         2   3      0   1
    // 2     -        4 5 6 7    0 1 2 3
    // '10' means, at depth 1, node is at the left
    //
    // For index N check if the bit at position depthi is set to navigate right at depthi
    // ```
    // mask = 1 << depthi
    // goRight = (N & mask) == mask
    // ```
    // If depth is 0 there's only one node max and the optimization below will cause a navigation error.
    // For this case, check if there's a new root node and return it, otherwise the current rootNode.
    if (nodesDepth === 0) {
        return nodes.length > 0 ? nodes[0] : rootNode;
    }
    /**
     * Contiguous filled stack of parent nodes. It get filled in the first descent
     * Indexed by depthi
     */
    const parentNodeStack = new Array(nodesDepth);
    /**
     * Temp stack of left parent nodes, index by depthi.
     * Node leftParentNodeStack[depthi] is a node at d = depthi - 1, such that:
     * ```
     * parentNodeStack[depthi].left = leftParentNodeStack[depthi]
     * ```
     */
    const leftParentNodeStack = new Array(nodesDepth);
    // Ignore first bit "1", then substract 1 to get to the parent
    const depthiRoot = nodesDepth - 1;
    const depthiParent = 0;
    let depthi = depthiRoot;
    let node = rootNode;
    // Insert root node to make the loop below general
    parentNodeStack[depthiRoot] = rootNode;
    // TODO: Iterate to depth 32 to allow using bit ops
    // for (; depthi >= 32; depthi--) {
    //   node = node.left;
    // }
    for (let i = 0; i < indexes.length; i++) {
        const index = indexes[i];
        // Navigate down until parent depth, and store the chain of nodes
        //
        // Starts from latest common depth, so node is the parent node at `depthi`
        // When persisting the next node, store at the `d - 1` since its the child of node at `depthi`
        //
        // Stops at the level above depthiParent. For the re-binding routing below node must be at depthiParent
        for (let d = depthi; d > depthiParent; d--) {
            node = isLeftNode(d, index) ? node.left : node.right;
            parentNodeStack[d - 1] = node;
        }
        depthi = depthiParent;
        // If this is the left node, check first it the next node is on the right
        //
        //   -    If both nodes exist, create new
        //  / \
        // x   x
        //
        //   -    If only the left node exists, rebind left
        //  / \
        // x   -
        //
        //   -    If this is the right node, only the right node exists, rebind right
        //  / \
        // -   x
        // d = 0, mask = 1 << d = 1
        const isLeftLeafNode = (index & 1) !== 1;
        if (isLeftLeafNode) {
            // Next node is the very next to the right of current node
            if (index + 1 === indexes[i + 1]) {
                node = new node_1.BranchNode(nodes[i], nodes[i + 1]);
                // Move pointer one extra forward since node has consumed two nodes
                i++;
            }
            else {
                node = new node_1.BranchNode(nodes[i], node.right);
            }
        }
        else {
            node = new node_1.BranchNode(node.left, nodes[i]);
        }
        // Here `node` is the new BranchNode at depthi `depthiParent`
        // Now climb upwards until finding the common node with the next index
        // For the last iteration, climb to the root at `depthiRoot`
        const isLastIndex = i >= indexes.length - 1;
        const diffDepthi = isLastIndex ? depthiRoot : findDiffDepthi(index, indexes[i + 1]);
        // When climbing up from a left node there are two possible paths
        // 1. Go to the right of the parent: Store left node to rebind latter
        // 2. Go another level up: Will never visit the left node again, so must rebind now
        // 🡼 \     Rebind left only, will never visit this node again
        // 🡽 /\
        //
        //    / 🡽  Rebind left only (same as above)
        // 🡽 /\
        //
        // 🡽 /\ 🡾  Store left node to rebind the entire node when returning
        //
        // 🡼 \     Rebind right with left if exists, will never visit this node again
        //   /\ 🡼
        //
        //    / 🡽  Rebind right with left if exists (same as above)
        //   /\ 🡼
        for (let d = depthiParent + 1; d <= diffDepthi; d++) {
            // If node is on the left, store for latter
            // If node is on the right merge with stored left node
            if (isLeftNode(d, index)) {
                if (isLastIndex || d !== diffDepthi) {
                    // If it's last index, bind with parent since it won't navigate to the right anymore
                    // Also, if still has to move upwards, rebind since the node won't be visited anymore
                    node = new node_1.BranchNode(node, parentNodeStack[d].right);
                }
                else {
                    // Only store the left node if it's at d = diffDepth
                    leftParentNodeStack[d] = node;
                    node = parentNodeStack[d];
                }
            }
            else {
                const leftNode = leftParentNodeStack[d];
                if (leftNode !== undefined) {
                    node = new node_1.BranchNode(leftNode, node);
                    leftParentNodeStack[d] = undefined;
                }
                else {
                    node = new node_1.BranchNode(parentNodeStack[d].left, node);
                }
            }
        }
        // Prepare next loop
        // Go to the parent of the depth with diff, to switch branches to the right
        depthi = diffDepthi;
    }
    // Done, return new root node
    return node;
}
exports.setNodesAtDepth = setNodesAtDepth;
/**
 * Fast read-only iteration
 * In-order traversal of nodes at `depth`
 * starting from the `startIndex`-indexed node
 * iterating through `count` nodes
 *
 * **Strategy**
 * 1. Navigate down to parentDepth storing a stack of parents
 * 2. At target level push current node
 * 3. Go up to the first level that navigated left
 * 4. Repeat (1) for next index
 */
function getNodesAtDepth(rootNode, depth, startIndex, count) {
    // Optimized paths for short trees (x20 times faster)
    if (depth === 0) {
        return startIndex === 0 && count > 0 ? [rootNode] : [];
    }
    else if (depth === 1) {
        if (count === 0) {
            return [];
        }
        else if (count === 1) {
            return startIndex === 0 ? [rootNode.left] : [rootNode.right];
        }
        else {
            return [rootNode.left, rootNode.right];
        }
    }
    // Ignore first bit "1", then substract 1 to get to the parent
    const depthiRoot = depth - 1;
    const depthiParent = 0;
    let depthi = depthiRoot;
    let node = rootNode;
    // Contiguous filled stack of parent nodes. It get filled in the first descent
    // Indexed by depthi
    const parentNodeStack = new Array(depth);
    const isLeftStack = new Array(depth);
    const nodes = new Array(count);
    // Insert root node to make the loop below general
    parentNodeStack[depthiRoot] = rootNode;
    for (let i = 0; i < count; i++) {
        for (let d = depthi; d >= depthiParent; d--) {
            if (d !== depthi) {
                parentNodeStack[d] = node;
            }
            const isLeft = isLeftNode(d, startIndex + i);
            isLeftStack[d] = isLeft;
            node = isLeft ? node.left : node.right;
        }
        nodes[i] = node;
        // Find the first depth where navigation when left.
        // Store that height and go right from there
        for (let d = depthiParent; d <= depthiRoot; d++) {
            if (isLeftStack[d] === true) {
                depthi = d;
                break;
            }
        }
        node = parentNodeStack[depthi];
    }
    return nodes;
}
exports.getNodesAtDepth = getNodesAtDepth;
/**
 * @see getNodesAtDepth but instead of pushing to an array, it yields
 */
function* iterateNodesAtDepth(rootNode, depth, startIndex, count) {
    const endIndex = startIndex + count;
    // Ignore first bit "1", then substract 1 to get to the parent
    const depthiRoot = depth - 1;
    const depthiParent = 0;
    let depthi = depthiRoot;
    let node = rootNode;
    // Contiguous filled stack of parent nodes. It get filled in the first descent
    // Indexed by depthi
    const parentNodeStack = new Array(depth);
    const isLeftStack = new Array(depth);
    // Insert root node to make the loop below general
    parentNodeStack[depthiRoot] = rootNode;
    for (let index = startIndex; index < endIndex; index++) {
        for (let d = depthi; d >= depthiParent; d--) {
            if (d !== depthi) {
                parentNodeStack[d] = node;
            }
            const isLeft = isLeftNode(d, index);
            isLeftStack[d] = isLeft;
            node = isLeft ? node.left : node.right;
        }
        yield node;
        // Find the first depth where navigation when left.
        // Store that height and go right from there
        for (let d = depthiParent; d <= depthiRoot; d++) {
            if (isLeftStack[d] === true) {
                depthi = d;
                break;
            }
        }
        node = parentNodeStack[depthi];
    }
}
exports.iterateNodesAtDepth = iterateNodesAtDepth;
/**
 * Zero's all nodes right of index with constant depth of `nodesDepth`.
 *
 * For example, zero-ing this tree at depth 2 after index 0
 * ```
 *    X              X
 *  X   X    ->    X   0
 * X X X X        X 0 0 0
 * ```
 *
 * Or, zero-ing this tree at depth 3 after index 2
 * ```
 *        X                     X
 *    X       X             X       0
 *  X   X   X   X    ->   X   X   0   0
 * X X X X X X X X       X X X 0 0 0 0 0
 * ```
 *
 * The strategy is to first navigate down to `nodesDepth` and `index` and keep a stack of parents.
 * Then navigate up re-binding:
 * - If navigated to the left rebind with zeroNode()
 * - If navigated to the right rebind with parent.left from the stack
 */
function treeZeroAfterIndex(rootNode, nodesDepth, index) {
    // depth depthi   gindexes   indexes
    // 0     1           1          0
    // 1     0         2   3      0   1
    // 2     -        4 5 6 7    0 1 2 3
    // '10' means, at depth 1, node is at the left
    //
    // For index N check if the bit at position depthi is set to navigate right at depthi
    // ```
    // mask = 1 << depthi
    // goRight = (N & mask) == mask
    // ```
    // Degenerate case where tree is zero after a negative index (-1).
    // All positive indexes are zero, so the entire tree is zero. Return cached zero node as root.
    if (index < 0) {
        return zeroNode_1.zeroNode(nodesDepth);
    }
    /**
     * Contiguous filled stack of parent nodes. It get filled in the first descent
     * Indexed by depthi
     */
    const parentNodeStack = new Array(nodesDepth);
    // Ignore first bit "1", then substract 1 to get to the parent
    const depthiRoot = nodesDepth - 1;
    const depthiParent = 0;
    let depthi = depthiRoot;
    let node = rootNode;
    // Insert root node to make the loop below general
    parentNodeStack[depthiRoot] = rootNode;
    // Navigate down until parent depth, and store the chain of nodes
    //
    // Stops at the depthiParent level. To rebind below down to `nodesDepth`
    for (let d = depthi; d >= depthiParent; d--) {
        node = isLeftNode(d, index) ? node.left : node.right;
        parentNodeStack[d - 1] = node;
    }
    depthi = depthiParent;
    // Now climb up re-binding with either zero of existing tree.
    for (let d = depthiParent; d <= depthiRoot; d++) {
        if (isLeftNode(d, index)) {
            // If navigated to the left, then all the child nodes of the right node are NOT part of the new tree.
            // So re-bind new `node` with a zeroNode at the current depth.
            node = new node_1.BranchNode(node, zeroNode_1.zeroNode(d));
        }
        else {
            // If navigated to the right, then all the child nodes of the left node are part of the new tree.
            // So re-bind new `node` with the existing left node of the parent.
            node = new node_1.BranchNode(parentNodeStack[d].left, node);
        }
    }
    // Done, return new root node
    return node;
}
exports.treeZeroAfterIndex = treeZeroAfterIndex;
/**
 * Returns true if the `index` at `depth` is a left node, false if it is a right node.
 *
 * Supports index up to `Number.MAX_SAFE_INTEGER`.
 * In Eth2 case the biggest tree's index is 2**40 (VALIDATOR_REGISTRY_LIMIT)
 */
function isLeftNode(depthi, index) {
    if (depthi > 31) {
        // Javascript can only do bitwise ops with 32 bit numbers.
        // Shifting left 1 by 32 wraps around and becomes 1.
        // Get the high part of `index` and adjust depthi
        const indexHi = (index / 2 ** 32) >>> 0;
        const mask = 1 << (depthi - 32);
        return (indexHi & mask) !== mask;
    }
    const mask = 1 << depthi;
    return (index & mask) !== mask;
}
/**
 * depth depthi   gindexes   indexes
 * 0     1           1          0
 * 1     0         2   3      0   1
 * 2     -        4 5 6 7    0 1 2 3
 *
 * **Conditions**:
 * - `from` and `to` must not be equal
 *
 * @param from Index
 * @param to Index
 */
function findDiffDepthi(from, to) {
    return (
    // (0,0) -> 0 | (0,1) -> 1 | (0,2) -> 2
    Math.ceil(Math.log2(-~(from ^ to))) -
        // Must offset by one to match the depthi scale
        1);
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\tree.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\zeroNode.js", {"./node":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\node.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cpersistent-merkle-tree%5Clib%5CzeroNode.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zeroNode = void 0;
const node_1 = require("./node");
const zeroes = [node_1.LeafNode.fromZero()];
/**
 * Return the `Node` at a specified height from the merkle tree made of "zero data"
 * ```
 *           ...
 *          /
 *         x           <- height 2
 *      /     \
 *     x       x       <- height 1
 *   /  \      /  \
 * 0x0  0x0  0x0  0x0  <- height 0
 * ```
 */
function zeroNode(height) {
    if (height >= zeroes.length) {
        for (let i = zeroes.length; i <= height; i++) {
            zeroes[i] = new node_1.BranchNode(zeroes[i - 1], zeroes[i - 1]);
        }
    }
    return zeroes[height];
}
exports.zeroNode = zeroNode;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz>@chainsafe/persistent-merkle-tree",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\zeroNode.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\branchNodeStruct.js", {"@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CbranchNodeStruct.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BranchNodeStruct = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
/**
 * BranchNode whose children's data is represented as a struct, not a tree.
 *
 * This approach is usefull for memory efficiency of data that is not modified often, for example the validators
 * registry in Ethereum consensus `state.validators`. The tradeoff is that getting the hash, are proofs is more
 * expensive because the tree has to be recreated every time.
 */
class BranchNodeStruct extends persistent_merkle_tree_1.Node {
    constructor(valueToNode, value) {
        // First null value is to save an extra variable to check if a node has a root or not
        super(null, 0, 0, 0, 0, 0, 0, 0);
        this.valueToNode = valueToNode;
        this.value = value;
    }
    get rootHashObject() {
        if (this.h0 === null) {
            const node = this.valueToNode(this.value);
            super.applyHash(node.rootHashObject);
        }
        return this;
    }
    get root() {
        return persistent_merkle_tree_1.hashObjectToUint8Array(this.rootHashObject);
    }
    isLeaf() {
        return false;
    }
    get left() {
        return this.valueToNode(this.value).left;
    }
    get right() {
        return this.valueToNode(this.value).right;
    }
}
exports.BranchNodeStruct = BranchNodeStruct;
//# sourceMappingURL=branchNodeStruct.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\branchNodeStruct.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\index.js", {"./type/abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\abstract.js","./type/array":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js","./type/basic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js","./type/bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitArray.js","./type/bitList":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitList.js","./type/bitVector":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitVector.js","./type/boolean":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\boolean.js","./type/byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteArray.js","./type/byteList":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteList.js","./type/byteVector":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteVector.js","./type/composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./type/container":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\container.js","./type/containerNodeStruct":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\containerNodeStruct.js","./type/listBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\listBasic.js","./type/listComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\listComposite.js","./type/none":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\none.js","./type/uint":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\uint.js","./type/union":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\union.js","./type/vectorBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\vectorBasic.js","./type/vectorComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\vectorComposite.js","./util/byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\byteArray.js","./util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","./value/bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\value\\bitArray.js","./view/abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js","./viewDU/abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hash64 = exports.byteArrayEquals = exports.toHexString = exports.fromHexString = exports.getUint8ByteToBitBooleanArray = exports.BitArray = exports.TreeViewDU = exports.TreeView = exports.isCompositeType = exports.CompositeType = exports.isBasicType = exports.BasicType = exports.Type = exports.ByteArrayType = exports.BitArrayType = exports.ArrayType = exports.VectorCompositeType = exports.VectorBasicType = exports.UnionType = exports.UintNumberType = exports.UintBigintType = exports.NoneType = exports.ListCompositeType = exports.ListBasicType = exports.ContainerNodeStructType = exports.ContainerType = exports.ByteVectorType = exports.ByteListType = exports.BooleanType = exports.BitVectorType = exports.BitListType = void 0;
// Types
var bitList_1 = require("./type/bitList");
Object.defineProperty(exports, "BitListType", { enumerable: true, get: function () { return bitList_1.BitListType; } });
var bitVector_1 = require("./type/bitVector");
Object.defineProperty(exports, "BitVectorType", { enumerable: true, get: function () { return bitVector_1.BitVectorType; } });
var boolean_1 = require("./type/boolean");
Object.defineProperty(exports, "BooleanType", { enumerable: true, get: function () { return boolean_1.BooleanType; } });
var byteList_1 = require("./type/byteList");
Object.defineProperty(exports, "ByteListType", { enumerable: true, get: function () { return byteList_1.ByteListType; } });
var byteVector_1 = require("./type/byteVector");
Object.defineProperty(exports, "ByteVectorType", { enumerable: true, get: function () { return byteVector_1.ByteVectorType; } });
var container_1 = require("./type/container");
Object.defineProperty(exports, "ContainerType", { enumerable: true, get: function () { return container_1.ContainerType; } });
var containerNodeStruct_1 = require("./type/containerNodeStruct");
Object.defineProperty(exports, "ContainerNodeStructType", { enumerable: true, get: function () { return containerNodeStruct_1.ContainerNodeStructType; } });
var listBasic_1 = require("./type/listBasic");
Object.defineProperty(exports, "ListBasicType", { enumerable: true, get: function () { return listBasic_1.ListBasicType; } });
var listComposite_1 = require("./type/listComposite");
Object.defineProperty(exports, "ListCompositeType", { enumerable: true, get: function () { return listComposite_1.ListCompositeType; } });
var none_1 = require("./type/none");
Object.defineProperty(exports, "NoneType", { enumerable: true, get: function () { return none_1.NoneType; } });
var uint_1 = require("./type/uint");
Object.defineProperty(exports, "UintBigintType", { enumerable: true, get: function () { return uint_1.UintBigintType; } });
Object.defineProperty(exports, "UintNumberType", { enumerable: true, get: function () { return uint_1.UintNumberType; } });
var union_1 = require("./type/union");
Object.defineProperty(exports, "UnionType", { enumerable: true, get: function () { return union_1.UnionType; } });
var vectorBasic_1 = require("./type/vectorBasic");
Object.defineProperty(exports, "VectorBasicType", { enumerable: true, get: function () { return vectorBasic_1.VectorBasicType; } });
var vectorComposite_1 = require("./type/vectorComposite");
Object.defineProperty(exports, "VectorCompositeType", { enumerable: true, get: function () { return vectorComposite_1.VectorCompositeType; } });
// Base types
var array_1 = require("./type/array");
Object.defineProperty(exports, "ArrayType", { enumerable: true, get: function () { return array_1.ArrayType; } });
var bitArray_1 = require("./type/bitArray");
Object.defineProperty(exports, "BitArrayType", { enumerable: true, get: function () { return bitArray_1.BitArrayType; } });
var byteArray_1 = require("./type/byteArray");
Object.defineProperty(exports, "ByteArrayType", { enumerable: true, get: function () { return byteArray_1.ByteArrayType; } });
// Base type clases
var abstract_1 = require("./type/abstract");
Object.defineProperty(exports, "Type", { enumerable: true, get: function () { return abstract_1.Type; } });
var basic_1 = require("./type/basic");
Object.defineProperty(exports, "BasicType", { enumerable: true, get: function () { return basic_1.BasicType; } });
Object.defineProperty(exports, "isBasicType", { enumerable: true, get: function () { return basic_1.isBasicType; } });
var composite_1 = require("./type/composite");
Object.defineProperty(exports, "CompositeType", { enumerable: true, get: function () { return composite_1.CompositeType; } });
Object.defineProperty(exports, "isCompositeType", { enumerable: true, get: function () { return composite_1.isCompositeType; } });
var abstract_2 = require("./view/abstract");
Object.defineProperty(exports, "TreeView", { enumerable: true, get: function () { return abstract_2.TreeView; } });
var abstract_3 = require("./viewDU/abstract");
Object.defineProperty(exports, "TreeViewDU", { enumerable: true, get: function () { return abstract_3.TreeViewDU; } });
// Values
var bitArray_2 = require("./value/bitArray");
Object.defineProperty(exports, "BitArray", { enumerable: true, get: function () { return bitArray_2.BitArray; } });
Object.defineProperty(exports, "getUint8ByteToBitBooleanArray", { enumerable: true, get: function () { return bitArray_2.getUint8ByteToBitBooleanArray; } });
// Utils
var byteArray_2 = require("./util/byteArray");
Object.defineProperty(exports, "fromHexString", { enumerable: true, get: function () { return byteArray_2.fromHexString; } });
Object.defineProperty(exports, "toHexString", { enumerable: true, get: function () { return byteArray_2.toHexString; } });
Object.defineProperty(exports, "byteArrayEquals", { enumerable: true, get: function () { return byteArray_2.byteArrayEquals; } });
var merkleize_1 = require("./util/merkleize");
Object.defineProperty(exports, "hash64", { enumerable: true, get: function () { return merkleize_1.hash64; } });
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\abstract.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Cabstract.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
/**
 * An SSZ type provides the following operations:
 * - Serialization from/to bytes to either a value or a tree
 * - Merkelization to compute the hashTreeRoot of both a value and a tree
 * - Proof creation from trees
 * - Create a View and a ViewDU instance from a tree
 * - Manipulate views
 */
class Type {
    /** INTERNAL METHOD: Merkleize value to tree */
    value_toTree(value) {
        // TODO: Un-performant path but useful for prototyping. Overwrite in Type if performance is important
        const uint8Array = new Uint8Array(this.value_serializedSize(value));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);
        return this.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
    }
    /** INTERNAL METHOD: Un-merkleize tree to value */
    tree_toValue(node) {
        // TODO: Un-performant path but useful for prototyping. Overwrite in Type if performance is important
        const uint8Array = new Uint8Array(this.tree_serializedSize(node));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        this.tree_serializeToBytes({ uint8Array, dataView }, 0, node);
        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
    }
    /** Serialize a value to binary data */
    serialize(value) {
        const uint8Array = new Uint8Array(this.value_serializedSize(value));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);
        return uint8Array;
    }
    /** Deserialize binary data to value */
    deserialize(uint8Array) {
        // Buffer.prototype.slice does not copy memory, force use Uint8Array.prototype.slice https://github.com/nodejs/node/issues/28087
        // - Uint8Array.prototype.slice: Copy memory, safe to mutate
        // - Buffer.prototype.slice: Does NOT copy memory, mutation affects both views
        // We could ensure that all Buffer instances are converted to Uint8Array before calling value_deserializeFromBytes
        // However doing that in a browser friendly way is not easy. Downstream code uses `Uint8Array.prototype.slice.call`
        // to ensure Buffer.prototype.slice is never used. Unit tests also test non-mutability.
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
    }
}
exports.Type = Type;
//# sourceMappingURL=abstract.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\abstract.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js", {"./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js","./composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Carray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const composite_1 = require("./composite");
const arrayBasic_1 = require("./arrayBasic");
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * Array: ordered homogeneous collection
 */
class ArrayType extends composite_1.CompositeType {
    constructor(elementType) {
        super();
        this.elementType = elementType;
    }
    defaultValue() {
        return arrayBasic_1.value_defaultValueArray(this.elementType, this.defaultLen);
    }
    // Proofs
    getPropertyType() {
        return this.elementType;
    }
    getPropertyGindex(prop) {
        if (typeof prop !== "number") {
            throw Error(`Invalid array index: ${prop}`);
        }
        const chunkIdx = Math.floor(prop / this.itemsPerChunk);
        return persistent_merkle_tree_1.toGindex(this.depth, BigInt(chunkIdx));
    }
    getIndexProperty(index) {
        return index;
    }
    tree_getLeafGindices(rootGindex, rootNode) {
        let length;
        if (this.isList) {
            if (!rootNode) {
                throw new Error("List type requires tree argument to get leaves");
            }
            length = this.tree_getLength(rootNode);
        }
        else {
            // Vectors don't need a rootNode to return length
            length = this.tree_getLength(null);
        }
        const gindices = [];
        if (composite_1.isCompositeType(this.elementType)) {
            // Underlying elements exist one per chunk
            // Iterate through chunk gindices, recursively fetching leaf gindices from each chunk
            const startIndex = persistent_merkle_tree_1.toGindex(this.depth, BigInt(0));
            const endGindex = startIndex + BigInt(length);
            const extendedStartIndex = persistent_merkle_tree_1.concatGindices([rootGindex, startIndex]);
            if (this.elementType.fixedSize === null) {
                if (!rootNode) {
                    /* istanbul ignore next - unreachable code */
                    throw new Error("Array of variable size requires tree argument to get leaves");
                }
                // variable-length elements must pass the underlying subtrees to determine the length
                for (let gindex = startIndex, extendedGindex = extendedStartIndex; gindex < endGindex; gindex++, extendedGindex++) {
                    gindices.push(...this.elementType.tree_getLeafGindices(extendedGindex, persistent_merkle_tree_1.getNode(rootNode, gindex)));
                }
            }
            else {
                for (let i = 0, extendedGindex = extendedStartIndex; i < length; i++, extendedGindex++) {
                    gindices.push(...this.elementType.tree_getLeafGindices(extendedGindex));
                }
            }
        }
        // Basic
        else {
            const chunkCount = Math.ceil(length / this.itemsPerChunk);
            const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);
            const endGindex = startIndex + BigInt(chunkCount);
            for (let gindex = startIndex; gindex < endGindex; gindex++) {
                gindices.push(gindex);
            }
        }
        // include the length chunk
        if (this.isList) {
            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));
        }
        return gindices;
    }
    // JSON
    fromJson(json) {
        // TODO: Do a better typesafe approach, all final classes of ArrayType implement ArrayProps
        // There are multiple tests that cover this path for all clases
        return arrayBasic_1.value_fromJsonArray(this.elementType, json, this);
    }
    toJson(value) {
        return arrayBasic_1.value_toJsonArray(this.elementType, value, this);
    }
    clone(value) {
        return arrayBasic_1.value_cloneArray(this.elementType, value);
    }
    equals(a, b) {
        return arrayBasic_1.value_equals(this.elementType, a, b);
    }
}
exports.ArrayType = ArrayType;
//# sourceMappingURL=array.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js", {"@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CarrayBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertValidArrayLength = exports.value_defaultValueArray = exports.value_equals = exports.value_cloneArray = exports.value_toJsonArray = exports.value_fromJsonArray = exports.tree_deserializeFromBytesArrayBasic = exports.tree_serializeToBytesArrayBasic = exports.value_deserializeFromBytesArrayBasic = exports.value_serializeToBytesArrayBasic = exports.setChunksNode = exports.addLengthNode = exports.getChunksNodeFromRootNode = exports.getLengthFromRootNode = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
// There's a matrix of Array-ish types that require a combination of this functions.
// Regular class extends syntax doesn't work because it can only extend a single class.
//
// Type of array: List, Vector. Changes length property
// Type of element: Basic, Composite. Changes merkelization if packing or not.
// If Composite: Fixed len, Variable len. Changes the serialization requiring offsets.
/**
 * SSZ Lists (variable-length arrays) include the length of the list in the tree
 * This length is always in the same index in the tree
 * ```
 *   1
 *  / \
 * 2   3 // <-here
 * ```
 */
function getLengthFromRootNode(node) {
    // Length is represented as a Uint32 at the start of the chunk:
    // 4 = 4 bytes in Uint32
    // 0 = 0 offset bytes in Node's data
    return node.right.getUint(4, 0);
}
exports.getLengthFromRootNode = getLengthFromRootNode;
function getChunksNodeFromRootNode(node) {
    return node.left;
}
exports.getChunksNodeFromRootNode = getChunksNodeFromRootNode;
function addLengthNode(chunksNode, length) {
    return new persistent_merkle_tree_1.BranchNode(chunksNode, persistent_merkle_tree_1.LeafNode.fromUint32(length));
}
exports.addLengthNode = addLengthNode;
function setChunksNode(rootNode, chunksNode, newLength) {
    const lengthNode = newLength !== undefined
        ? // If newLength is set, create a new node for length
            persistent_merkle_tree_1.LeafNode.fromUint32(newLength)
        : // else re-use existing node
            rootNode.right;
    return new persistent_merkle_tree_1.BranchNode(chunksNode, lengthNode);
}
exports.setChunksNode = setChunksNode;
/**
 * @param length In List length = value.length, Vector length = fixed value
 */
function value_serializeToBytesArrayBasic(elementType, length, output, offset, value) {
    const elSize = elementType.byteLength;
    for (let i = 0; i < length; i++) {
        elementType.value_serializeToBytes(output, offset + i * elSize, value[i]);
    }
    return offset + length * elSize;
}
exports.value_serializeToBytesArrayBasic = value_serializeToBytesArrayBasic;
function value_deserializeFromBytesArrayBasic(elementType, data, start, end, arrayProps) {
    const elSize = elementType.byteLength;
    // Vector + List length validation
    const length = (end - start) / elSize;
    assertValidArrayLength(length, arrayProps, true);
    const values = new Array(length);
    for (let i = 0; i < length; i++) {
        // TODO: If faster, consider skipping size check for uint types
        values[i] = elementType.value_deserializeFromBytes(data, start + i * elSize, start + (i + 1) * elSize);
    }
    return values;
}
exports.value_deserializeFromBytesArrayBasic = value_deserializeFromBytesArrayBasic;
/**
 * @param length In List length = value.length, Vector length = fixed value
 */
function tree_serializeToBytesArrayBasic(elementType, length, depth, output, offset, node) {
    const size = elementType.byteLength * length;
    const chunkCount = Math.ceil(size / 32);
    const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, chunkCount);
    persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, size, nodes);
    return offset + size;
}
exports.tree_serializeToBytesArrayBasic = tree_serializeToBytesArrayBasic;
// List of basic elements will pack them in merkelized form
function tree_deserializeFromBytesArrayBasic(elementType, chunkDepth, data, start, end, arrayProps) {
    // Vector + List length validation
    const length = (end - start) / elementType.byteLength;
    assertValidArrayLength(length, arrayProps, true);
    // Abstract converting data to LeafNode to allow for custom data representation, such as the hashObject
    const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(chunkDepth, data.dataView, start, end);
    if (arrayProps.isList) {
        return addLengthNode(chunksNode, length);
    }
    else {
        return chunksNode;
    }
}
exports.tree_deserializeFromBytesArrayBasic = tree_deserializeFromBytesArrayBasic;
/**
 * @param length In List length = undefined, Vector length = fixed value
 */
function value_fromJsonArray(elementType, json, arrayProps) {
    if (!Array.isArray(json)) {
        throw Error("JSON is not an array");
    }
    assertValidArrayLength(json.length, arrayProps);
    const value = new Array(json.length);
    for (let i = 0; i < json.length; i++) {
        value[i] = elementType.fromJson(json[i]);
    }
    return value;
}
exports.value_fromJsonArray = value_fromJsonArray;
/**
 * @param length In List length = undefined, Vector length = fixed value
 */
function value_toJsonArray(elementType, value, arrayProps) {
    const length = arrayProps.isList ? value.length : arrayProps.length;
    const json = new Array(length);
    for (let i = 0; i < length; i++) {
        json[i] = elementType.toJson(value[i]);
    }
    return json;
}
exports.value_toJsonArray = value_toJsonArray;
/**
 * Clone recursively an array of basic or composite types
 */
function value_cloneArray(elementType, value) {
    const newValue = new Array(value.length);
    for (let i = 0; i < value.length; i++) {
        newValue[i] = elementType.clone(value[i]);
    }
    return newValue;
}
exports.value_cloneArray = value_cloneArray;
/**
 * Check recursively if a type is structuraly equal. Returns early
 */
function value_equals(elementType, a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (!elementType.equals(a[i], b[i])) {
            return false;
        }
    }
    return true;
}
exports.value_equals = value_equals;
function value_defaultValueArray(elementType, length) {
    const values = new Array(length);
    for (let i = 0; i < length; i++) {
        values[i] = elementType.defaultValue();
    }
    return values;
}
exports.value_defaultValueArray = value_defaultValueArray;
/**
 * @param checkNonDecimalLength Check that length is a multiple of element size.
 * Optional since it's not necessary in getOffsetsArrayComposite() fn.
 */
function assertValidArrayLength(length, arrayProps, checkNonDecimalLength) {
    if (checkNonDecimalLength && length % 1 !== 0) {
        throw Error("size not multiple of element fixedSize");
    }
    // Vector + List length validation
    if (arrayProps.isList) {
        if (length > arrayProps.limit) {
            throw new Error(`Invalid list length ${length} over limit ${arrayProps.limit}`);
        }
    }
    else {
        if (length !== arrayProps.length) {
            throw new Error(`Incorrect vector length ${length} expected ${arrayProps.length}`);
        }
    }
}
exports.assertValidArrayLength = assertValidArrayLength;
//# sourceMappingURL=arrayBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayComposite.js", {"./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CarrayComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.value_getRootsArrayComposite = exports.tree_deserializeFromBytesArrayComposite = exports.tree_serializeToBytesArrayComposite = exports.tree_serializedSizeArrayComposite = exports.value_deserializeFromBytesArrayComposite = exports.value_serializeToBytesArrayComposite = exports.value_serializedSizeArrayComposite = exports.maxSizeArrayComposite = exports.minSizeArrayComposite = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const arrayBasic_1 = require("./arrayBasic");
function minSizeArrayComposite(elementType, minCount) {
    // Variable Length
    if (elementType.fixedSize === null) {
        return minCount * (4 + elementType.minSize);
    }
    // Fixed length
    else {
        return minCount * elementType.minSize;
    }
}
exports.minSizeArrayComposite = minSizeArrayComposite;
function maxSizeArrayComposite(elementType, maxCount) {
    // Variable Length
    if (elementType.fixedSize === null) {
        return maxCount * (4 + elementType.maxSize);
    }
    // Fixed length
    else {
        return maxCount * elementType.maxSize;
    }
}
exports.maxSizeArrayComposite = maxSizeArrayComposite;
function value_serializedSizeArrayComposite(elementType, length, value) {
    // Variable Length
    if (elementType.fixedSize === null) {
        let size = 0;
        for (let i = 0; i < length; i++) {
            size += 4 + elementType.value_serializedSize(value[i]);
        }
        return size;
    }
    // Fixed length
    else {
        return length * elementType.fixedSize;
    }
}
exports.value_serializedSizeArrayComposite = value_serializedSizeArrayComposite;
/**
 * @param length In List length = value.length, Vector length = fixed value
 */
function value_serializeToBytesArrayComposite(elementType, length, output, offset, value) {
    // Variable length
    if (elementType.fixedSize === null) {
        let variableIndex = offset + length * 4;
        for (let i = 0; i < length; i++) {
            // write offset
            output.dataView.setUint32(offset + i * 4, variableIndex - offset, true);
            // write serialized element to variable section
            variableIndex = elementType.value_serializeToBytes(output, variableIndex, value[i]);
        }
        return variableIndex;
    }
    // Fixed length
    else {
        for (let i = 0; i < length; i++) {
            elementType.value_serializeToBytes(output, offset + i * elementType.fixedSize, value[i]);
        }
        return offset + length * elementType.fixedSize;
    }
}
exports.value_serializeToBytesArrayComposite = value_serializeToBytesArrayComposite;
function value_deserializeFromBytesArrayComposite(elementType, data, start, end, arrayProps) {
    const offsets = readOffsetsArrayComposite(elementType.fixedSize, data.dataView, start, end, arrayProps);
    const length = offsets.length; // Capture length before pushing end offset
    const values = new Array(length);
    // offests include the last element end
    for (let i = 0; i < length; i++) {
        // The offsets are relative to the start
        const startEl = start + offsets[i];
        const endEl = i === length - 1 ? end : start + offsets[i + 1];
        values[i] = elementType.value_deserializeFromBytes(data, startEl, endEl);
    }
    return values;
}
exports.value_deserializeFromBytesArrayComposite = value_deserializeFromBytesArrayComposite;
/**
 * @param length In List length = value.length, Vector length = fixed value
 */
function tree_serializedSizeArrayComposite(elementType, length, depth, node) {
    // Variable Length
    if (elementType.fixedSize === null) {
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, length);
        let size = 0;
        for (let i = 0; i < nodes.length; i++) {
            size += 4 + elementType.tree_serializedSize(nodes[i]);
        }
        return size;
    }
    // Fixed length
    else {
        return length * elementType.fixedSize;
    }
}
exports.tree_serializedSizeArrayComposite = tree_serializedSizeArrayComposite;
/**
 * @param length In List length = value.length, Vector length = fixed value
 */
function tree_serializeToBytesArrayComposite(elementType, length, depth, node, output, offset) {
    const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, length);
    // Variable Length
    // Indices contain offsets, which are indices deeper in the byte array
    if (elementType.fixedSize === null) {
        let variableIndex = offset + length * 4;
        const { dataView } = output;
        for (let i = 0; i < nodes.length; i++) {
            // write offset
            dataView.setUint32(offset + i * 4, variableIndex - offset, true);
            // write serialized element to variable section
            variableIndex = elementType.tree_serializeToBytes(output, variableIndex, nodes[i]);
        }
        return variableIndex;
    }
    // Fixed length
    else {
        for (let i = 0; i < nodes.length; i++) {
            offset = elementType.tree_serializeToBytes(output, offset, nodes[i]);
        }
        return offset;
    }
}
exports.tree_serializeToBytesArrayComposite = tree_serializeToBytesArrayComposite;
function tree_deserializeFromBytesArrayComposite(elementType, chunkDepth, data, start, end, arrayProps) {
    const offsets = readOffsetsArrayComposite(elementType.fixedSize, data.dataView, start, end, arrayProps);
    const length = offsets.length; // Capture length before pushing end offset
    const nodes = new Array(length);
    // offests include the last element end
    for (let i = 0; i < length; i++) {
        // The offsets are relative to the start
        const startEl = start + offsets[i];
        const endEl = i === length - 1 ? end : start + offsets[i + 1];
        nodes[i] = elementType.tree_deserializeFromBytes(data, startEl, endEl);
    }
    // Abstract converting data to LeafNode to allow for custom data representation, such as the hashObject
    const chunksNode = persistent_merkle_tree_1.subtreeFillToContents(nodes, chunkDepth);
    // TODO: Add LeafNode.fromUint()
    if (arrayProps.isList) {
        return arrayBasic_1.addLengthNode(chunksNode, length);
    }
    else {
        return chunksNode;
    }
}
exports.tree_deserializeFromBytesArrayComposite = tree_deserializeFromBytesArrayComposite;
/**
 * @param length In List length = value.length, Vector length = fixed value
 */
function value_getRootsArrayComposite(elementType, length, value) {
    const roots = new Array(length);
    for (let i = 0; i < length; i++) {
        roots[i] = elementType.hashTreeRoot(value[i]);
    }
    return roots;
}
exports.value_getRootsArrayComposite = value_getRootsArrayComposite;
function readOffsetsArrayComposite(elementFixedSize, data, start, end, arrayProps) {
    const size = end - start;
    let offsets;
    // Variable Length
    // Indices contain offsets, which are indices deeper in the byte array
    if (elementFixedSize === null) {
        offsets = readVariableOffsetsArrayComposite(data, start, size);
    }
    // Fixed length
    else {
        // There's no valid CompositeType with fixed size 0, it's un-rechable code. But prevents diving by zero
        /* istanbul ignore if */
        if (elementFixedSize === 0) {
            throw Error("element fixed length is 0");
        }
        if (size % elementFixedSize !== 0) {
            throw Error(`size ${size} is not multiple of element fixedSize ${elementFixedSize}`);
        }
        const length = size / elementFixedSize;
        offsets = new Uint32Array(length);
        for (let i = 0; i < length; i++) {
            offsets[i] = i * elementFixedSize;
        }
    }
    // Vector + List length validation
    arrayBasic_1.assertValidArrayLength(offsets.length, arrayProps);
    return offsets;
}
/**
 * Reads the values of contiguous variable offsets. Provided buffer includes offsets that point to position
 * within `size`. This function also validates that all offsets are in range.
 */
function readVariableOffsetsArrayComposite(dataView, start, size) {
    if (size === 0) {
        return new Uint32Array(0);
    }
    // all elements are variable-sized
    // indices contain offsets, which are indices deeper in the byte array
    // The serialized data will start with offsets of all the serialized objects (BYTES_PER_LENGTH_OFFSET bytes each)
    const firstOffset = dataView.getUint32(start, true);
    // Using the first offset, we can compute the length of the list (divide by BYTES_PER_LENGTH_OFFSET), as it gives
    // us the total number of bytes in the offset data
    const offsetDataLength = firstOffset;
    if (firstOffset === 0) {
        throw Error("First offset must be > 0");
    }
    if (offsetDataLength % 4 !== 0) {
        throw Error("Offset data length not multiple of 4");
    }
    const offsetCount = offsetDataLength / 4;
    const offsets = new Uint32Array(offsetCount);
    offsets[0] = firstOffset;
    // ArrayComposite has a contiguous section of offsets, then the data
    //
    //    [offset 1] [offset 2] [data 1 ..........] [data 2 ..]
    // 0x 08000000   0e000000   010002000300        01000200
    //
    // Ensure that:
    // - Offsets point to regions of > 0 bytes, i.e. are increasing
    // - Offsets don't point to bytes outside of the array's size
    //
    // In the example above the first offset is 8, so 8 / 4 = 2 offsets.
    // Then, read the rest of offsets to get offsets = [8, 14]
    for (let offsetIdx = 1; offsetIdx < offsetCount; offsetIdx++) {
        const offset = dataView.getUint32(start + offsetIdx * 4, true);
        offsets[offsetIdx] = offset;
        // Offsets must point to data within the Array bytes section
        if (offset > size) {
            throw new Error(`Offset out of bounds ${offset} > ${size}`);
        }
        if (offset < offsets[offsetIdx - 1]) {
            throw new Error(`Offsets must be increasing ${offset} < ${offsets[offsetIdx - 1]}`);
        }
    }
    return offsets;
}
//# sourceMappingURL=arrayComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Cbasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBasicType = exports.BasicType = void 0;
const abstract_1 = require("./abstract");
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * Represents a basic type as defined in the spec:
 * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types
 */
class BasicType extends abstract_1.Type {
    constructor() {
        super(...arguments);
        this.isBasic = true;
        // Basic types merkleize to exactly one chunk, thus depth of 0
        this.depth = 0;
        // Basic types merkleize to exactly one chunk
        this.maxChunkCount = 1;
    }
    value_serializedSize() {
        return this.byteLength;
    }
    tree_serializedSize() {
        return this.byteLength;
    }
    assertValidSize(size) {
        if (size !== this.byteLength) {
            throw Error(`BasicType invalid size ${size} expected ${this.byteLength}`);
        }
    }
    hashTreeRoot(value) {
        // TODO: Optimize
        const uint8Array = new Uint8Array(32);
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);
        return uint8Array;
    }
    clone(value) {
        // All basic types are represented by primitive Javascript types, don't require clone
        return value;
    }
    equals(a, b) {
        // All basic types are represented by primitive Javascript types, the operator === is sufficient
        return a === b;
    }
}
exports.BasicType = BasicType;
function isBasicType(type) {
    return type.isBasic;
}
exports.isBasicType = isBasicType;
//# sourceMappingURL=basic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitArray.js", {"../util/byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\byteArray.js","../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../view/bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\bitArray.js","../viewDU/bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\bitArray.js","./composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CbitArray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitArrayType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const byteArray_1 = require("../util/byteArray");
const merkleize_1 = require("../util/merkleize");
const composite_1 = require("./composite");
const bitArray_1 = require("../view/bitArray");
const bitArray_2 = require("../viewDU/bitArray");
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * BitArray: ordered array collection of boolean values
 * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance
 * - View: `BitArrayTreeView`
 * - ViewDU: `BitArrayTreeViewDU`
 */
class BitArrayType extends composite_1.CompositeType {
    constructor() {
        super(...arguments);
        this.isViewMutable = true;
    }
    getView(tree) {
        return new bitArray_1.BitArrayTreeView(this, tree);
    }
    getViewDU(node) {
        return new bitArray_2.BitArrayTreeViewDU(this, node);
    }
    commitView(view) {
        return view.node;
    }
    commitViewDU(view) {
        view.commit();
        return view.node;
    }
    cacheOfViewDU(view) {
        return view.cache;
    }
    // Merkleization
    getRoots(value) {
        return merkleize_1.splitIntoRootChunks(value.uint8Array);
    }
    // Proofs
    getPropertyGindex() {
        // Stop navigating below this type. Must only request complete data
        return null;
    }
    getPropertyType() {
        /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */
        throw Error("Must only request BitArray complete data");
    }
    getIndexProperty() {
        /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */
        throw Error("Must only request BitArray complete data");
    }
    tree_fromProofNode(node) {
        return { node, done: true };
    }
    tree_getLeafGindices(rootGindex, rootNode) {
        const byteLen = this.tree_getByteLen(rootNode);
        const chunkCount = Math.ceil(byteLen / 32);
        const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);
        const gindices = new Array(chunkCount);
        for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {
            gindices[i] = gindex;
        }
        // include the length chunk
        if (this.isList) {
            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));
        }
        return gindices;
    }
    // JSON
    fromJson(json) {
        const uint8Array = byteArray_1.fromHexString(json);
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        // value_deserializeFromBytes MUST validate length (limit, or length)
        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
    }
    toJson(value) {
        return byteArray_1.toHexString(this.serialize(value));
    }
    clone(value) {
        return value.clone();
    }
    equals(a, b) {
        return a.bitLen === b.bitLen && byteArray_1.byteArrayEquals(a.uint8Array, b.uint8Array);
    }
}
exports.BitArrayType = BitArrayType;
//# sourceMappingURL=bitArray.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitArray.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitList.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../value/bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\value\\bitArray.js","./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js","./bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitArray.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CbitList.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitListType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const arrayBasic_1 = require("./arrayBasic");
const bitArray_1 = require("../value/bitArray");
const bitArray_2 = require("./bitArray");
/**
 * BitList: ordered variable-length collection of boolean values, limited to N bits
 * - Notation `Bitlist[N]`
 * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance
 * - View: `BitArrayTreeView`
 * - ViewDU: `BitArrayTreeViewDU`
 */
class BitListType extends bitArray_2.BitArrayType {
    constructor(limitBits, opts) {
        super();
        this.limitBits = limitBits;
        this.fixedSize = null;
        this.minSize = 1; // +1 for the extra padding bit
        this.isList = true;
        if (limitBits === 0)
            throw Error("List limit must be > 0");
        this.typeName = opts?.typeName ?? `BitList[${limitBits}]`;
        // TODO Check that itemsPerChunk is an integer
        this.maxChunkCount = Math.ceil(this.limitBits / 8 / 32);
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        // Depth includes the extra level for the length node
        this.depth = 1 + this.chunkDepth;
        this.maxSize = Math.ceil(limitBits / 8) + 1; // +1 for the extra padding bit
    }
    static named(limitBits, opts) {
        return new (named_1.namedClass(BitListType, opts.typeName))(limitBits, opts);
    }
    defaultValue() {
        return bitArray_1.BitArray.fromBitLen(0);
    }
    // Views: inherited from BitArrayType
    // Serialization + deserialization
    value_serializedSize(value) {
        return bitLenToSerializedLength(value.bitLen);
    }
    value_serializeToBytes(output, offset, value) {
        output.uint8Array.set(value.uint8Array, offset);
        return applyPaddingBit(output.uint8Array, offset, value.bitLen);
    }
    value_deserializeFromBytes(data, start, end) {
        const { uint8Array, bitLen } = this.deserializeUint8ArrayBitListFromBytes(data.uint8Array, start, end);
        return new bitArray_1.BitArray(uint8Array, bitLen);
    }
    tree_serializedSize(node) {
        return bitLenToSerializedLength(arrayBasic_1.getLengthFromRootNode(node));
    }
    tree_serializeToBytes(output, offset, node) {
        const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);
        const bitLen = arrayBasic_1.getLengthFromRootNode(node);
        const byteLen = Math.ceil(bitLen / 8);
        const chunkLen = Math.ceil(byteLen / 32);
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);
        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);
        return applyPaddingBit(output.uint8Array, offset, bitLen);
    }
    tree_deserializeFromBytes(data, start, end) {
        const { uint8Array, bitLen } = this.deserializeUint8ArrayBitListFromBytes(data.uint8Array, start, end);
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, dataView, 0, uint8Array.length);
        return arrayBasic_1.addLengthNode(chunksNode, bitLen);
    }
    tree_getByteLen(node) {
        if (!node)
            throw new Error("BitListType requires a node to get leaves");
        return Math.ceil(arrayBasic_1.getLengthFromRootNode(node) / 8);
    }
    // Merkleization: inherited from BitArrayType
    hashTreeRoot(value) {
        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.bitLen);
    }
    // Proofs: inherited from BitArrayType
    // JSON: inherited from BitArrayType
    // Deserializer helpers
    deserializeUint8ArrayBitListFromBytes(data, start, end) {
        const { uint8Array, bitLen } = deserializeUint8ArrayBitListFromBytes(data, start, end);
        if (bitLen > this.limitBits) {
            throw Error(`bitLen over limit ${bitLen} > ${this.limitBits}`);
        }
        return { uint8Array, bitLen };
    }
}
exports.BitListType = BitListType;
function deserializeUint8ArrayBitListFromBytes(data, start, end) {
    if (end > data.length) {
        throw Error(`BitList attempting to read byte ${end} of data length ${data.length}`);
    }
    const lastByte = data[end - 1];
    const size = end - start;
    if (lastByte === 0) {
        throw new Error("Invalid deserialized bitlist, padding bit required");
    }
    if (lastByte === 1) {
        // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087
        const uint8Array = Uint8Array.prototype.slice.call(data, start, end - 1);
        const bitLen = (size - 1) * 8;
        return { uint8Array, bitLen };
    }
    // the last byte is > 1, so a padding bit will exist in the last byte and need to be removed
    // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087
    const uint8Array = Uint8Array.prototype.slice.call(data, start, end);
    // mask lastChunkByte
    const lastByteBitLength = lastByte.toString(2).length - 1;
    const bitLen = (size - 1) * 8 + lastByteBitLength;
    const mask = 0xff >> (8 - lastByteBitLength);
    uint8Array[size - 1] &= mask;
    return { uint8Array, bitLen };
}
function bitLenToSerializedLength(bitLen) {
    const bytes = Math.ceil(bitLen / 8);
    // +1 for the extra padding bit
    return bitLen % 8 === 0 ? bytes + 1 : bytes;
}
/**
 * Apply padding bit to a serialized BitList already written to `output` at `offset`
 * @returns New offset after (maybe) writting a padding bit.
 */
function applyPaddingBit(output, offset, bitLen) {
    const byteLen = Math.ceil(bitLen / 8);
    const newOffset = offset + byteLen;
    if (bitLen % 8 === 0) {
        output[newOffset] = 1;
        return newOffset + 1;
    }
    else {
        output[newOffset - 1] |= 1 << bitLen % 8;
        return newOffset;
    }
}
//# sourceMappingURL=bitList.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitList.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitVector.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../value/bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\value\\bitArray.js","./bitArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitArray.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CbitVector.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitVectorType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const bitArray_1 = require("../value/bitArray");
const bitArray_2 = require("./bitArray");
/**
 * BitVector: ordered fixed-length collection of boolean values, with N bits
 * - Notation: `Bitvector[N]`
 * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance
 * - View: `BitArrayTreeView`
 * - ViewDU: `BitArrayTreeViewDU`
 */
class BitVectorType extends bitArray_2.BitArrayType {
    constructor(lengthBits, opts) {
        super();
        this.lengthBits = lengthBits;
        this.isList = false;
        if (lengthBits === 0)
            throw Error("Vector length must be > 0");
        this.typeName = opts?.typeName ?? `BitVector[${lengthBits}]`;
        this.chunkCount = Math.ceil(this.lengthBits / 8 / 32);
        this.maxChunkCount = this.chunkCount;
        this.depth = merkleize_1.maxChunksToDepth(this.chunkCount);
        this.fixedSize = Math.ceil(this.lengthBits / 8);
        this.minSize = this.fixedSize;
        this.maxSize = this.fixedSize;
        // To cache mask for trailing zero bits validation
        this.zeroBitsMask = lengthBits % 8 === 0 ? 0 : 0xff & (0xff << lengthBits % 8);
    }
    static named(limitBits, opts) {
        return new (named_1.namedClass(BitVectorType, opts.typeName))(limitBits, opts);
    }
    defaultValue() {
        return bitArray_1.BitArray.fromBitLen(this.lengthBits);
    }
    // Views: inherited from BitArrayType
    // Serialization + deserialization
    value_serializedSize() {
        return this.fixedSize;
    }
    value_serializeToBytes(output, offset, value) {
        output.uint8Array.set(value.uint8Array, offset);
        return offset + this.fixedSize;
    }
    value_deserializeFromBytes(data, start, end) {
        this.assertValidLength(data.uint8Array, start, end);
        // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087
        return new bitArray_1.BitArray(Uint8Array.prototype.slice.call(data.uint8Array, start, end), this.lengthBits);
    }
    tree_serializedSize() {
        return this.fixedSize;
    }
    tree_serializeToBytes(output, offset, node) {
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.chunkCount);
        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, this.fixedSize, nodes);
        return offset + this.fixedSize;
    }
    tree_deserializeFromBytes(data, start, end) {
        this.assertValidLength(data.uint8Array, start, end);
        return persistent_merkle_tree_1.packedRootsBytesToNode(this.depth, data.dataView, start, end);
    }
    tree_getByteLen() {
        return this.fixedSize;
    }
    // Merkleization: inherited from BitArrayType
    // Proofs: inherited from BitArrayType
    // JSON: inherited from BitArrayType
    // Deserializer helpers
    assertValidLength(data, start, end) {
        const size = end - start;
        if (end - start !== this.fixedSize) {
            throw Error(`Invalid BitVector size ${size} != ${this.fixedSize}`);
        }
        // If lengthBits is not aligned to bytes, ensure trailing bits are zeroed
        if (
        // If zeroBitsMask == 0, then the BitVector uses full bytes only
        this.zeroBitsMask > 0 &&
            // if the last byte is partial, retrieve it and use the cached mask to check if trailing bits are zeroed
            (data[end - 1] & this.zeroBitsMask) > 0) {
            throw Error("BitVector: nonzero bits past length");
        }
    }
}
exports.BitVectorType = BitVectorType;
//# sourceMappingURL=bitVector.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\bitVector.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\boolean.js", {"../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","./basic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Cboolean.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BooleanType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const named_1 = require("../util/named");
const basic_1 = require("./basic");
/**
 * Boolean: True or False
 * - Notation: `boolean`
 */
class BooleanType extends basic_1.BasicType {
    constructor(opts) {
        super();
        this.byteLength = 1;
        this.itemsPerChunk = 32;
        this.fixedSize = 1;
        this.minSize = 1;
        this.maxSize = 1;
        this.typeName = opts?.typeName ?? "boolean";
    }
    static named(opts) {
        return new (named_1.namedClass(BooleanType, opts.typeName))(opts);
    }
    defaultValue() {
        return false;
    }
    // Serialization + deserialization
    value_serializeToBytes(output, offset, value) {
        output.uint8Array[offset] = value ? 1 : 0;
        return offset + 1;
    }
    value_deserializeFromBytes(data, start, end) {
        this.assertValidSize(end - start);
        switch (data.uint8Array[start]) {
            case 1:
                return true;
            case 0:
                return false;
            default:
                throw new Error(`Boolean: invalid value: ${data.uint8Array[start]}`);
        }
    }
    tree_serializeToBytes(output, offset, node) {
        // TODO: Assumes LeafNode has 4 byte uints are primary unit
        output.uint8Array[offset] = node.getUint(4, 0);
        return offset + 1;
    }
    tree_deserializeFromBytes(data, start, end) {
        this.assertValidSize(end - start);
        const value = data.uint8Array[start];
        if (value > 1) {
            throw Error(`Boolean: invalid value ${value}`);
        }
        return persistent_merkle_tree_1.LeafNode.fromUint32(value);
    }
    // Fast tree opts
    tree_getFromNode(leafNode) {
        return leafNode.getUint(4, 0) === 1;
    }
    tree_setToNode(leafNode, value) {
        leafNode.setUint(4, 0, value ? 1 : 0);
    }
    tree_getFromPackedNode(leafNode, index) {
        const offsetBytes = index % this.itemsPerChunk;
        return leafNode.getUint(1, offsetBytes) !== 0;
    }
    tree_setToPackedNode(leafNode, index, value) {
        const offsetBytes = index % this.itemsPerChunk;
        leafNode.setUint(1, offsetBytes, value ? 1 : 0);
    }
    // JSON
    fromJson(json) {
        if (typeof json !== "boolean") {
            throw Error(`JSON invalid type ${typeof json} expected boolean`);
        }
        return json;
    }
    toJson(value) {
        return value;
    }
}
exports.BooleanType = BooleanType;
//# sourceMappingURL=boolean.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\boolean.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteArray.js", {"../util/byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\byteArray.js","../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","./composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CbyteArray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ByteArrayType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const byteArray_1 = require("../util/byteArray");
const merkleize_1 = require("../util/merkleize");
const composite_1 = require("./composite");
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * ByteArray: ordered array collection of byte values
 * - Value: `Uint8Array`
 * - View: `Uint8Array`
 * - ViewDU: `Uint8Array`
 *
 * ByteArray is an immutable value which is represented by a Uint8Array for memory efficiency and performance.
 * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteArray.
 */
class ByteArrayType extends composite_1.CompositeType {
    constructor() {
        super(...arguments);
        this.isViewMutable = false;
    }
    defaultValue() {
        // Since it's a byte array the minSize is bytes is the default size
        return new Uint8Array(this.minSize);
    }
    getView(tree) {
        return this.getViewDU(tree.rootNode);
    }
    getViewDU(node) {
        return this.tree_toValue(node);
    }
    commitView(view) {
        return this.commitViewDU(view);
    }
    commitViewDU(view) {
        const uint8Array = new Uint8Array(this.value_serializedSize(view));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        this.value_serializeToBytes({ uint8Array, dataView }, 0, view);
        return this.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
    }
    cacheOfViewDU() {
        return;
    }
    // Over-write to prevent serialize + deserialize
    toView(value) {
        return value;
    }
    toViewDU(value) {
        return value;
    }
    // Serialization + deserialization (only value is generic)
    value_serializeToBytes(output, offset, value) {
        output.uint8Array.set(value, offset);
        return offset + value.length;
    }
    value_deserializeFromBytes(data, start, end) {
        this.assertValidSize(end - start);
        return Uint8Array.prototype.slice.call(data.uint8Array, start, end);
    }
    // Merkleization
    getRoots(value) {
        return merkleize_1.splitIntoRootChunks(value);
    }
    // Proofs
    getPropertyGindex() {
        // Stop navigating below this type. Must only request complete data
        return null;
    }
    getPropertyType() {
        throw Error("Must only request ByteArray complete data");
    }
    getIndexProperty() {
        throw Error("Must only request ByteArray complete data");
    }
    tree_fromProofNode(node) {
        return { node, done: true };
    }
    tree_getLeafGindices(rootGindex, rootNode) {
        const byteLen = this.tree_getByteLen(rootNode);
        const chunkCount = Math.ceil(byteLen / 32);
        const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);
        const gindices = new Array(chunkCount);
        for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {
            gindices[i] = gindex;
        }
        // include the length chunk
        if (this.isList) {
            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));
        }
        return gindices;
    }
    // JSON
    fromJson(json) {
        const value = byteArray_1.fromHexString(json);
        this.assertValidSize(value.length);
        return value;
    }
    toJson(value) {
        return byteArray_1.toHexString(value);
    }
    // ByteArray is immutable
    clone(value) {
        return value;
    }
    equals(a, b) {
        return byteArray_1.byteArrayEquals(a, b);
    }
}
exports.ByteArrayType = ByteArrayType;
//# sourceMappingURL=byteArray.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteArray.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteList.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js","./byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteArray.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CbyteList.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ByteListType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const arrayBasic_1 = require("./arrayBasic");
const byteArray_1 = require("./byteArray");
/**
 * ByteList: Immutable alias of List[byte, N]
 * - Notation: `ByteList[N]`
 * - Value: `Uint8Array`
 * - View: `Uint8Array`
 * - ViewDU: `Uint8Array`
 *
 * ByteList is an immutable value which is represented by a Uint8Array for memory efficiency and performance.
 * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteList.
 *
 * For a `ByteListType` with mutability, use `ListBasicType(byteType)`
 */
class ByteListType extends byteArray_1.ByteArrayType {
    constructor(limitBytes, opts) {
        super();
        this.limitBytes = limitBytes;
        this.fixedSize = null;
        this.isList = true;
        if (limitBytes === 0)
            throw Error("List limit must be > 0");
        this.typeName = opts?.typeName ?? `ByteList[${limitBytes}]`;
        this.maxChunkCount = Math.ceil(this.limitBytes / 32);
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        this.depth = 1 + this.chunkDepth;
        this.minSize = 0;
        this.maxSize = this.limitBytes;
    }
    static named(limitBits, opts) {
        return new (named_1.namedClass(ByteListType, opts.typeName))(limitBits, opts);
    }
    // Views: inherited from ByteArrayType
    // Serialization + deserialization
    value_serializedSize(value) {
        return value.length;
    }
    // value_* inherited from ByteArrayType
    tree_serializedSize(node) {
        return arrayBasic_1.getLengthFromRootNode(node);
    }
    tree_serializeToBytes(output, offset, node) {
        const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);
        const byteLen = arrayBasic_1.getLengthFromRootNode(node);
        const chunkLen = Math.ceil(byteLen / 32);
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);
        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);
        return offset + byteLen;
    }
    tree_deserializeFromBytes(data, start, end) {
        this.assertValidSize(end - start);
        const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);
        return arrayBasic_1.addLengthNode(chunksNode, end - start);
    }
    tree_getByteLen(node) {
        if (!node)
            throw new Error("ByteListType requires a node to get leaves");
        return arrayBasic_1.getLengthFromRootNode(node);
    }
    // Merkleization: inherited from ByteArrayType
    hashTreeRoot(value) {
        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);
    }
    // Proofs: inherited from BitArrayType
    // JSON: inherited from ByteArrayType
    assertValidSize(size) {
        if (size > this.limitBytes) {
            throw Error(`ByteList invalid size ${size} limit ${this.limitBytes}`);
        }
    }
}
exports.ByteListType = ByteListType;
//# sourceMappingURL=byteList.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteList.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteVector.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","./byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteArray.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CbyteVector.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ByteVectorType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const byteArray_1 = require("./byteArray");
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * ByteVector: Immutable alias of Vector[byte, N]
 * - Notation: `ByteVector[N]`
 * - Value: `Uint8Array`
 * - View: `Uint8Array`
 * - ViewDU: `Uint8Array`
 *
 * ByteVector is an immutable value which is represented by a Uint8Array for memory efficiency and performance.
 * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteVector.
 *
 * For a `ByteVectorType` with mutability, use `VectorBasicType(byteType)`
 */
class ByteVectorType extends byteArray_1.ByteArrayType {
    constructor(lengthBytes, opts) {
        super();
        this.lengthBytes = lengthBytes;
        this.isList = false;
        if (lengthBytes === 0)
            throw Error("Vector length must be > 0");
        this.typeName = opts?.typeName ?? `ByteVector[${lengthBytes}]`;
        this.maxChunkCount = Math.ceil(this.lengthBytes / 32);
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        this.depth = this.chunkDepth;
        this.fixedSize = this.lengthBytes;
        this.minSize = this.fixedSize;
        this.maxSize = this.fixedSize;
    }
    static named(limitBits, opts) {
        return new (named_1.namedClass(ByteVectorType, opts.typeName))(limitBits, opts);
    }
    // Views: inherited from ByteArrayType
    // Serialization + deserialization
    value_serializedSize() {
        return this.fixedSize;
    }
    // value_* inherited from ByteArrayType
    tree_serializedSize() {
        return this.fixedSize;
    }
    tree_serializeToBytes(output, offset, node) {
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.chunkDepth, 0, this.maxChunkCount);
        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, this.fixedSize, nodes);
        return offset + this.fixedSize;
    }
    tree_deserializeFromBytes(data, start, end) {
        this.assertValidSize(end - start);
        return persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);
    }
    tree_getByteLen() {
        return this.lengthBytes;
    }
    // Merkleization: inherited from ByteArrayType
    // Proofs: inherited from BitArrayType
    // JSON: inherited from ByteArrayType
    assertValidSize(size) {
        if (size !== this.lengthBytes) {
            throw Error(`ByteVector invalid size ${size} expected ${this.lengthBytes}`);
        }
    }
}
exports.ByteVectorType = ByteVectorType;
//# sourceMappingURL=byteVector.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\byteVector.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js", {"../util/byteArray":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\byteArray.js","../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/proof/treePostProcessFromProofNode":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\proof\\treePostProcessFromProofNode.js","./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Ccomposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCompositeType = exports.CompositeType = exports.LENGTH_GINDEX = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const byteArray_1 = require("../util/byteArray");
const merkleize_1 = require("../util/merkleize");
const treePostProcessFromProofNode_1 = require("../util/proof/treePostProcessFromProofNode");
const abstract_1 = require("./abstract");
exports.LENGTH_GINDEX = BigInt(3);
/** Dedicated property to cache hashTreeRoot of immutable CompositeType values */
const symbolCachedPermanentRoot = Symbol("ssz_cached_permanent_root");
/* eslint-disable @typescript-eslint/member-ordering  */
/**
 * Represents a composite type as defined in the spec:
 * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#composite-types
 */
class CompositeType extends abstract_1.Type {
    constructor(
    /**
     * Caches `hashTreeRoot()` result for struct values.
     *
     * WARNING: Must only be used for immutable values. The cached root is never discarded
     */
    cachePermanentRootStruct) {
        super();
        this.cachePermanentRootStruct = cachePermanentRootStruct;
        this.isBasic = false;
    }
    /** New instance of a recursive zero'ed value converted to Tree View */
    defaultView() {
        return this.toView(this.defaultValue());
    }
    /** New instance of a recursive zero'ed value converted to Deferred Update Tree View */
    defaultViewDU() {
        return this.toViewDU(this.defaultValue());
    }
    /**
     * Deserialize binary data to a Tree View.
     * @see {@link CompositeType.getView}
     */
    deserializeToView(data) {
        const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);
        const node = this.tree_deserializeFromBytes({ uint8Array: data, dataView }, 0, data.length);
        return this.getView(new persistent_merkle_tree_1.Tree(node));
    }
    /**
     * Deserialize binary data to a Deferred Update Tree View.
     * @see {@link CompositeType.getViewDU}
     */
    deserializeToViewDU(data) {
        const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);
        const node = this.tree_deserializeFromBytes({ uint8Array: data, dataView }, 0, data.length);
        return this.getViewDU(node);
    }
    /**
     * Transform value to a View.
     * @see {@link CompositeType.getView}
     */
    toView(value) {
        const node = this.value_toTree(value);
        return this.getView(new persistent_merkle_tree_1.Tree(node));
    }
    /**
     * Transform value to a ViewDU.
     * @see {@link CompositeType.getViewDU}
     */
    toViewDU(value) {
        const node = this.value_toTree(value);
        return this.getViewDU(node);
    }
    /**
     * Transform value to a View.
     * @see {@link CompositeType.getView}
     */
    toValueFromView(view) {
        const node = this.commitView(view);
        return this.tree_toValue(node);
    }
    /**
     * Transform value to a ViewDU.
     * @see {@link CompositeType.getViewDU}
     */
    toValueFromViewDU(view) {
        const node = this.commitViewDU(view);
        return this.tree_toValue(node);
    }
    /**
     * Transform a ViewDU to a View.
     * @see {@link CompositeType.getView} and {@link CompositeType.getViewDU}
     */
    toViewFromViewDU(view) {
        const node = this.commitViewDU(view);
        return this.getView(new persistent_merkle_tree_1.Tree(node));
    }
    /**
     * Transform a View to a ViewDU.
     * @see {@link CompositeType.getView} and {@link CompositeType.getViewDU}
     */
    toViewDUFromView(view) {
        const node = this.commitView(view);
        return this.getViewDU(node);
    }
    // Merkleize API
    hashTreeRoot(value) {
        // Return cached mutable root if any
        if (this.cachePermanentRootStruct) {
            const cachedRoot = value[symbolCachedPermanentRoot];
            if (cachedRoot) {
                return cachedRoot;
            }
        }
        const root = merkleize_1.merkleize(this.getRoots(value), this.maxChunkCount);
        if (this.cachePermanentRootStruct) {
            value[symbolCachedPermanentRoot] = root;
        }
        return root;
    }
    // For debugging and testing this feature
    getCachedPermanentRoot(value) {
        return value[symbolCachedPermanentRoot];
    }
    // Proofs API
    /**
     * Create a Tree View from a Proof. Verifies that the Proof is correct against `root`.
     * @see {@link CompositeType.getView}
     */
    createFromProof(proof, root) {
        const rootNodeFromProof = persistent_merkle_tree_1.Tree.createFromProof(proof).rootNode;
        const rootNode = treePostProcessFromProofNode_1.treePostProcessFromProofNode(rootNodeFromProof, this);
        if (root !== undefined && !byteArray_1.byteArrayEquals(rootNode.root, root)) {
            throw new Error("Proof does not match trusted root");
        }
        return this.getView(new persistent_merkle_tree_1.Tree(rootNode));
    }
    /** INTERNAL METHOD: For view's API, create proof from a tree */
    tree_createProof(node, jsonPaths) {
        const gindexes = this.tree_createProofGindexes(node, jsonPaths);
        return persistent_merkle_tree_1.createProof(node, {
            type: persistent_merkle_tree_1.ProofType.treeOffset,
            gindices: gindexes,
        });
    }
    /** INTERNAL METHOD: For view's API, create proof from a tree */
    tree_createProofGindexes(node, jsonPaths) {
        const gindexes = [];
        for (const jsonPath of jsonPaths) {
            const { type, gindex } = this.getPathInfo(jsonPath);
            if (!isCompositeType(type)) {
                gindexes.push(gindex);
            }
            else {
                // if the path subtype is composite, include the gindices of all the leaves
                const leafGindexes = type.tree_getLeafGindices(gindex, type.fixedSize === null ? persistent_merkle_tree_1.getNode(node, gindex) : undefined);
                for (const gindex of leafGindexes) {
                    gindexes.push(gindex);
                }
            }
        }
        return gindexes;
    }
    /**
     * Navigate to a subtype & gindex using a path
     */
    getPathInfo(path) {
        const gindices = [];
        let type = this;
        for (const prop of path) {
            if (type.isBasic) {
                throw new Error("Invalid path: cannot navigate beyond a basic type");
            }
            const gindex = type.getPropertyGindex(prop);
            // else stop navigating
            if (gindex !== null) {
                gindices.push(gindex);
                type = type.getPropertyType(prop);
            }
        }
        return {
            type,
            gindex: persistent_merkle_tree_1.concatGindices(gindices),
        };
    }
    /**
     * INTERNAL METHOD: post process `Ǹode` instance created from a proof and return either the same node,
     * and a new node representing the same data is a different `Node` instance. Currently used exclusively
     * by ContainerNodeStruct to convert `BranchNode` into `BranchNodeStruct`.
     */
    tree_fromProofNode(node) {
        return { node, done: false };
    }
}
exports.CompositeType = CompositeType;
function isCompositeType(type) {
    return !type.isBasic;
}
exports.isCompositeType = isCompositeType;
//# sourceMappingURL=composite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\container.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../view/container":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\container.js","../viewDU/container":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\container.js","./composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js","case":"F:\\metamask-extension\\node_modules\\case\\dist\\Case.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Ccontainer.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderContainerTypeName = exports.precomputeJsonKey = exports.ContainerType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const case_1 = __importDefault(require("case"));
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const composite_1 = require("./composite");
const container_1 = require("../view/container");
const container_2 = require("../viewDU/container");
/**
 * Container: ordered heterogeneous collection of values
 * - Notation: Custom name per instance
 */
class ContainerType extends composite_1.CompositeType {
    constructor(fields, opts) {
        super(opts?.cachePermanentRootStruct);
        this.fields = fields;
        this.opts = opts;
        this.isList = false;
        this.isViewMutable = true;
        // Render detailed typeName. Consumers should overwrite since it can get long
        this.typeName = opts?.typeName ?? renderContainerTypeName(fields);
        this.maxChunkCount = Object.keys(fields).length;
        this.depth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        // Precalculated data for faster serdes
        this.fieldsEntries = [];
        for (const fieldName of Object.keys(fields)) {
            this.fieldsEntries.push({
                fieldName,
                fieldType: this.fields[fieldName],
                jsonKey: precomputeJsonKey(fieldName, opts?.casingMap, opts?.jsonCase),
                gindex: persistent_merkle_tree_1.toGindex(this.depth, BigInt(this.fieldsEntries.length)),
            });
        }
        if (this.fieldsEntries.length === 0) {
            throw Error("Container must have > 0 fields");
        }
        // Precalculate for Proofs API
        this.fieldsGindex = {};
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            this.fieldsGindex[this.fieldsEntries[i].fieldName] = persistent_merkle_tree_1.toGindex(this.depth, BigInt(i));
        }
        // To resolve JSON paths in fieldName notation and jsonKey notation
        this.jsonKeyToFieldName = {};
        for (const { fieldName, jsonKey } of this.fieldsEntries) {
            this.jsonKeyToFieldName[jsonKey] = fieldName;
        }
        const { minLen, maxLen, fixedSize } = precomputeSizes(fields);
        this.minSize = minLen;
        this.maxSize = maxLen;
        this.fixedSize = fixedSize;
        const { isFixedLen, fieldRangesFixedLen, variableOffsetsPosition, fixedEnd } = precomputeSerdesData(fields);
        this.isFixedLen = isFixedLen;
        this.fieldRangesFixedLen = fieldRangesFixedLen;
        this.variableOffsetsPosition = variableOffsetsPosition;
        this.fixedEnd = fixedEnd;
        // TODO: This options are necessary for ContainerNodeStruct to override this.
        // Refactor this constructor to allow customization without pollutin the options
        this.TreeView = opts?.getContainerTreeViewClass?.(this) ?? container_1.getContainerTreeViewClass(this);
        this.TreeViewDU = opts?.getContainerTreeViewDUClass?.(this) ?? container_2.getContainerTreeViewDUClass(this);
    }
    static named(fields, opts) {
        return new (named_1.namedClass(ContainerType, opts.typeName))(fields, opts);
    }
    defaultValue() {
        const value = {};
        for (const { fieldName, fieldType } of this.fieldsEntries) {
            value[fieldName] = fieldType.defaultValue();
        }
        return value;
    }
    getView(tree) {
        return new this.TreeView(this, tree);
    }
    getViewDU(node, cache) {
        return new this.TreeViewDU(this, node, cache);
    }
    cacheOfViewDU(view) {
        return view.cache;
    }
    commitView(view) {
        return view.node;
    }
    commitViewDU(view) {
        view.commit();
        return view.node;
    }
    // Serialization + deserialization
    // -------------------------------
    // Containers can mix fixed length and variable length data.
    //
    // Fixed part                         Variable part
    // [field1 offset][field2 data       ][field1 data               ]
    // [0x000000c]    [0xaabbaabbaabbaabb][0xffffffffffffffffffffffff]
    value_serializedSize(value) {
        let totalSize = 0;
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            // Offset (4 bytes) + size
            totalSize +=
                fieldType.fixedSize === null ? 4 + fieldType.value_serializedSize(value[fieldName]) : fieldType.fixedSize;
        }
        return totalSize;
    }
    value_serializeToBytes(output, offset, value) {
        let fixedIndex = offset;
        let variableIndex = offset + this.fixedEnd;
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            if (fieldType.fixedSize === null) {
                // write offset
                output.dataView.setUint32(fixedIndex, variableIndex - offset, true);
                fixedIndex += 4;
                // write serialized element to variable section
                variableIndex = fieldType.value_serializeToBytes(output, variableIndex, value[fieldName]);
            }
            else {
                fixedIndex = fieldType.value_serializeToBytes(output, fixedIndex, value[fieldName]);
            }
        }
        return variableIndex;
    }
    value_deserializeFromBytes(data, start, end) {
        const fieldRanges = this.getFieldRanges(data.dataView, start, end);
        const value = {};
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            const fieldRange = fieldRanges[i];
            value[fieldName] = fieldType.value_deserializeFromBytes(data, start + fieldRange.start, start + fieldRange.end);
        }
        return value;
    }
    tree_serializedSize(node) {
        let totalSize = 0;
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.fieldsEntries.length);
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldType } = this.fieldsEntries[i];
            const node = nodes[i];
            // Offset (4 bytes) + size
            totalSize += fieldType.fixedSize === null ? 4 + fieldType.tree_serializedSize(node) : fieldType.fixedSize;
        }
        return totalSize;
    }
    tree_serializeToBytes(output, offset, node) {
        let fixedIndex = offset;
        let variableIndex = offset + this.fixedEnd;
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.fieldsEntries.length);
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldType } = this.fieldsEntries[i];
            const node = nodes[i];
            if (fieldType.fixedSize === null) {
                // write offset
                output.dataView.setUint32(fixedIndex, variableIndex - offset, true);
                fixedIndex += 4;
                // write serialized element to variable section
                variableIndex = fieldType.tree_serializeToBytes(output, variableIndex, node);
            }
            else {
                fixedIndex = fieldType.tree_serializeToBytes(output, fixedIndex, node);
            }
        }
        return variableIndex;
    }
    tree_deserializeFromBytes(data, start, end) {
        const fieldRanges = this.getFieldRanges(data.dataView, start, end);
        const nodes = new Array(this.fieldsEntries.length);
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldType } = this.fieldsEntries[i];
            const fieldRange = fieldRanges[i];
            nodes[i] = fieldType.tree_deserializeFromBytes(data, start + fieldRange.start, start + fieldRange.end);
        }
        return persistent_merkle_tree_1.subtreeFillToContents(nodes, this.depth);
    }
    // Merkleization
    getRoots(struct) {
        const roots = new Array(this.fieldsEntries.length);
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            roots[i] = fieldType.hashTreeRoot(struct[fieldName]);
        }
        return roots;
    }
    // Proofs
    // getPropertyGindex
    // getPropertyType
    // tree_getLeafGindices
    getPropertyGindex(prop) {
        const gindex = this.fieldsGindex[prop] ?? this.fieldsGindex[this.jsonKeyToFieldName[prop]];
        if (gindex === undefined)
            throw Error(`Unknown container property ${prop}`);
        return gindex;
    }
    getPropertyType(prop) {
        const type = this.fields[prop] ?? this.fields[this.jsonKeyToFieldName[prop]];
        if (type === undefined)
            throw Error(`Unknown container property ${prop}`);
        return type;
    }
    getIndexProperty(index) {
        if (index >= this.fieldsEntries.length) {
            return null;
        }
        return this.fieldsEntries[index].fieldName;
    }
    tree_getLeafGindices(rootGindex, rootNode) {
        const gindices = [];
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            const fieldGindex = this.fieldsGindex[fieldName];
            const fieldGindexFromRoot = persistent_merkle_tree_1.concatGindices([rootGindex, fieldGindex]);
            if (fieldType.isBasic) {
                gindices.push(fieldGindexFromRoot);
            }
            else {
                const compositeType = fieldType;
                if (fieldType.fixedSize === null) {
                    if (!rootNode) {
                        throw new Error("variable type requires tree argument to get leaves");
                    }
                    gindices.push(...compositeType.tree_getLeafGindices(fieldGindexFromRoot, persistent_merkle_tree_1.getNode(rootNode, fieldGindex)));
                }
                else {
                    gindices.push(...compositeType.tree_getLeafGindices(fieldGindexFromRoot));
                }
            }
        }
        return gindices;
    }
    // JSON
    fromJson(json) {
        if (typeof json !== "object") {
            throw Error("JSON must be of type object");
        }
        if (json === null) {
            throw Error("JSON must not be null");
        }
        const value = {};
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType, jsonKey } = this.fieldsEntries[i];
            const jsonValue = json[jsonKey];
            if (jsonValue === undefined) {
                throw Error(`JSON expected key ${jsonKey} is undefined`);
            }
            value[fieldName] = fieldType.fromJson(jsonValue);
        }
        return value;
    }
    toJson(value) {
        const json = {};
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType, jsonKey } = this.fieldsEntries[i];
            json[jsonKey] = fieldType.toJson(value[fieldName]);
        }
        return json;
    }
    clone(value) {
        const newValue = {};
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            newValue[fieldName] = fieldType.clone(value[fieldName]);
        }
        return newValue;
    }
    equals(a, b) {
        for (let i = 0; i < this.fieldsEntries.length; i++) {
            const { fieldName, fieldType } = this.fieldsEntries[i];
            if (!fieldType.equals(a[fieldName], b[fieldName])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Deserializer helper: Returns the bytes ranges of all fields, both variable and fixed size.
     * Fields may not be contiguous in the serialized bytes, so the returned ranges are [start, end].
     * - For fixed size fields re-uses the pre-computed values this.fieldRangesFixedLen
     * - For variable size fields does a first pass over the fixed section to read offsets
     */
    getFieldRanges(data, start, end) {
        if (this.variableOffsetsPosition.length === 0) {
            // Validate fixed length container
            const size = end - start;
            if (size !== this.fixedEnd) {
                throw Error(`${this.typeName} size ${size} not equal fixed size ${this.fixedEnd}`);
            }
            return this.fieldRangesFixedLen;
        }
        // Read offsets in one pass
        const offsets = readVariableOffsets(data, start, end, this.fixedEnd, this.variableOffsetsPosition);
        offsets.push(end - start); // The offsets are relative to the start
        // Merge fieldRangesFixedLen + offsets in one array
        let variableIdx = 0;
        let fixedIdx = 0;
        const fieldRanges = new Array(this.isFixedLen.length);
        for (let i = 0; i < this.isFixedLen.length; i++) {
            if (this.isFixedLen[i]) {
                // push from fixLen ranges ++
                fieldRanges[i] = this.fieldRangesFixedLen[fixedIdx++];
            }
            else {
                // push from varLen ranges ++
                fieldRanges[i] = { start: offsets[variableIdx], end: offsets[variableIdx + 1] };
                variableIdx++;
            }
        }
        return fieldRanges;
    }
}
exports.ContainerType = ContainerType;
/**
 * Returns the byte ranges of all variable size fields.
 */
function readVariableOffsets(data, start, end, fixedEnd, variableOffsetsPosition) {
    // Since variable-sized values can be interspersed with fixed-sized values, we precalculate
    // the offset indices so we can more easily deserialize the fields in once pass first we get the fixed sizes
    // Note: `fixedSizes[i] = null` if that field has variable length
    const size = end - start;
    // with the fixed sizes, we can read the offsets, and store for our single pass
    const offsets = new Array(variableOffsetsPosition.length);
    for (let i = 0; i < variableOffsetsPosition.length; i++) {
        const offset = data.getUint32(start + variableOffsetsPosition[i], true);
        // Validate offsets. If the list is empty the offset points to the end of the buffer, offset == size
        if (offset > size) {
            throw new Error(`Offset out of bounds ${offset} > ${size}`);
        }
        if (i === 0) {
            if (offset !== fixedEnd) {
                throw new Error(`First offset must equal to fixedEnd ${offset} != ${fixedEnd}`);
            }
        }
        else {
            if (offset < offsets[i - 1]) {
                throw new Error(`Offsets must be increasing ${offset} < ${offsets[i - 1]}`);
            }
        }
        offsets[i] = offset;
    }
    return offsets;
}
/**
 * Precompute fixed and variable offsets position for faster deserialization.
 * @returns Does a single pass over all fields and returns:
 * - isFixedLen: If field index [i] is fixed length
 * - fieldRangesFixedLen: For fields with fixed length, their range of bytes
 * - variableOffsetsPosition: Position of the 4 bytes offset for variable size fields
 * - fixedEnd: End of the fixed size range
 * -
 */
function precomputeSerdesData(fields) {
    const isFixedLen = [];
    const fieldRangesFixedLen = [];
    const variableOffsetsPosition = [];
    let pointerFixed = 0;
    for (const fieldType of Object.values(fields)) {
        isFixedLen.push(fieldType.fixedSize !== null);
        if (fieldType.fixedSize === null) {
            // Variable length
            variableOffsetsPosition.push(pointerFixed);
            pointerFixed += 4;
        }
        else {
            fieldRangesFixedLen.push({ start: pointerFixed, end: pointerFixed + fieldType.fixedSize });
            pointerFixed += fieldType.fixedSize;
        }
    }
    return {
        isFixedLen,
        fieldRangesFixedLen,
        variableOffsetsPosition,
        fixedEnd: pointerFixed,
    };
}
/**
 * Precompute sizes of the Container doing one pass over fields
 */
function precomputeSizes(fields) {
    let minLen = 0;
    let maxLen = 0;
    let fixedSize = 0;
    for (const fieldType of Object.values(fields)) {
        minLen += fieldType.minSize;
        maxLen += fieldType.maxSize;
        if (fieldType.fixedSize === null) {
            // +4 for the offset
            minLen += 4;
            maxLen += 4;
            fixedSize = null;
        }
        else if (fixedSize !== null) {
            fixedSize += fieldType.fixedSize;
        }
    }
    return { minLen, maxLen, fixedSize };
}
/**
 * Compute the JSON key for each fieldName. There will exist a single JSON representation for each type.
 * To transform JSON payloads to a casing that is different from the type's defined use external tooling.
 */
function precomputeJsonKey(fieldName, casingMap, jsonCase) {
    if (casingMap) {
        const keyFromCaseMap = casingMap[fieldName];
        if (keyFromCaseMap === undefined) {
            throw Error(`casingMap[${fieldName}] not defined`);
        }
        return keyFromCaseMap;
    }
    else if (jsonCase) {
        if (jsonCase === "eth2") {
            const snake = case_1.default.snake(fieldName);
            return snake.replace(/(\d)$/, "_$1");
        }
        else {
            return case_1.default[jsonCase](fieldName);
        }
    }
    else {
        return fieldName;
    }
}
exports.precomputeJsonKey = precomputeJsonKey;
/**
 * Render field typeNames for a detailed typeName of this Container
 */
function renderContainerTypeName(fields, prefix = "Container") {
    const fieldNames = Object.keys(fields);
    const fieldTypeNames = fieldNames.map((fieldName) => `${fieldName}: ${fields[fieldName].typeName}`).join(", ");
    return `${prefix}({${fieldTypeNames}})`;
}
exports.renderContainerTypeName = renderContainerTypeName;
//# sourceMappingURL=container.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\container.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\containerNodeStruct.js", {"../branchNodeStruct":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\branchNodeStruct.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../view/containerNodeStruct":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\containerNodeStruct.js","../viewDU/containerNodeStruct":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\containerNodeStruct.js","./composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./container":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CcontainerNodeStruct.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerNodeStructType = void 0;
const composite_1 = require("./composite");
const container_1 = require("./container");
const named_1 = require("../util/named");
const containerNodeStruct_1 = require("../view/containerNodeStruct");
const containerNodeStruct_2 = require("../viewDU/containerNodeStruct");
const branchNodeStruct_1 = require("../branchNodeStruct");
/**
 * ContainerNodeStruct: ordered heterogeneous collection of values.
 * - Notation: Custom name per instance
 *
 * A ContainerNodeStruct is identical to a Container type except that it represents tree data with a custom
 * BranchNodeStruct node. This special branch node represents the data of its entire sub tree as a value, instead
 * of a tree of nodes. This approach is a tradeoff:
 *
 * - More memory efficient
 * - Faster reads, since it doesn't require parsing merkleized data
 * - Slower hashing, since it has to merkleize the entire value everytime and has not intermediary hashing cache
 *
 * This tradeoff is good for data that is read often, written rarely, and consumes a lot of memory (i.e. Validator)
 */
class ContainerNodeStructType extends container_1.ContainerType {
    constructor(fields, opts) {
        super(fields, {
            // Overwrite default "Container" typeName
            // Render detailed typeName. Consumers should overwrite since it can get long
            typeName: opts?.typeName ?? container_1.renderContainerTypeName(fields, "ContainerNodeStruct"),
            ...opts,
            getContainerTreeViewClass: containerNodeStruct_1.getContainerTreeViewClass,
            getContainerTreeViewDUClass: containerNodeStruct_2.getContainerTreeViewDUClass,
        });
        this.fields = fields;
        // ContainerNodeStructType TreeViews don't handle recursive mutable TreeViews like ContainerType does.
        // Using ContainerNodeStructType for fields that have mutable views (like a ListBasic), will result in
        // unnexpected behaviour if those child views are mutated.
        //
        // For example, this example below won't persist the pushed values to the list:
        // ```ts
        // const type = ContainerNodeStructType({a: new ListBasicType(byteType, 1)});
        // const view = type.defaultViewDU();
        // view.a.push(0)
        // ```
        // because the ListBasicViewDU in view.a will never propagate the changes upwards to its ContainerNodeStructType.
        for (const { fieldName, fieldType } of this.fieldsEntries) {
            if (composite_1.isCompositeType(fieldType) && fieldType.isViewMutable) {
                throw Error(`ContainerNodeStructType field '${fieldName}' ${fieldType.typeName} view is mutable`);
            }
        }
    }
    static named(fields, opts) {
        return new (named_1.namedClass(container_1.ContainerType, opts.typeName))(fields, opts);
    }
    tree_serializedSize(node) {
        return this.value_serializedSize(node.value);
    }
    tree_serializeToBytes(output, offset, node) {
        const { value } = node;
        return this.value_serializeToBytes(output, offset, value);
    }
    tree_deserializeFromBytes(data, start, end) {
        const value = this.value_deserializeFromBytes(data, start, end);
        return new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value);
    }
    // Proofs
    // ContainerNodeStructType can only parse proofs that contain all the data.
    // TODO: Support converting a partial tree to a partial value
    getPropertyGindex() {
        return null;
    }
    // Post process tree to convert regular BranchNode to BranchNodeStruct
    // TODO: Optimize conversions
    tree_fromProofNode(node) {
        // TODO: Figure out from `node` alone if it contains complete data.
        // Otherwise throw a nice error "ContainerNodeStruct type requires proofs for all its data"
        const uint8Array = new Uint8Array(super.tree_serializedSize(node));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        super.tree_serializeToBytes({ uint8Array, dataView }, 0, node);
        const value = this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
        return {
            node: new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value),
            done: true,
        };
    }
    // Overwrites for fast conversion node <-> value
    tree_toValue(node) {
        return node.value;
    }
    value_toTree(value) {
        return new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value);
    }
    // TODO: Optimize conversion
    valueToTree(value) {
        const uint8Array = new Uint8Array(this.value_serializedSize(value));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);
        return super.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);
    }
}
exports.ContainerNodeStructType = ContainerNodeStructType;
//# sourceMappingURL=containerNodeStruct.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\containerNodeStruct.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\listBasic.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../view/listBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\listBasic.js","../viewDU/listBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\listBasic.js","./array":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js","./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5ClistBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBasicType = void 0;
const arrayBasic_1 = require("./arrayBasic");
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const listBasic_1 = require("../view/listBasic");
const listBasic_2 = require("../viewDU/listBasic");
const array_1 = require("./array");
/**
 * List: ordered variable-length homogeneous collection, limited to N values
 *
 * Array of Basic type:
 * - Basic types are max 32 bytes long so multiple values may be packed in the same node.
 * - Basic types are never returned in a view wrapper, but their value representation
 */
class ListBasicType extends array_1.ArrayType {
    constructor(elementType, limit, opts) {
        super(elementType);
        this.elementType = elementType;
        this.limit = limit;
        this.fixedSize = null;
        this.isList = true;
        this.isViewMutable = true;
        this.defaultLen = 0;
        if (!elementType.isBasic)
            throw Error("elementType must be basic");
        if (limit === 0)
            throw Error("List limit must be > 0");
        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;
        // TODO Check that itemsPerChunk is an integer
        this.itemsPerChunk = 32 / elementType.byteLength;
        this.maxChunkCount = Math.ceil((this.limit * elementType.byteLength) / 32);
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        // Depth includes the extra level for the length node
        this.depth = this.chunkDepth + 1;
        this.minSize = 0;
        this.maxSize = this.limit * elementType.maxSize;
    }
    static named(elementType, limit, opts) {
        return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);
    }
    getView(tree) {
        return new listBasic_1.ListBasicTreeView(this, tree);
    }
    getViewDU(node, cache) {
        // cache type should be validated (if applicate) in the view
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new listBasic_2.ListBasicTreeViewDU(this, node, cache);
    }
    commitView(view) {
        return view.node;
    }
    commitViewDU(view) {
        view.commit();
        return view.node;
    }
    cacheOfViewDU(view) {
        return view.cache;
    }
    // Serialization + deserialization
    value_serializedSize(value) {
        return value.length * this.elementType.byteLength;
    }
    value_serializeToBytes(output, offset, value) {
        return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);
    }
    value_deserializeFromBytes(data, start, end) {
        return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);
    }
    tree_serializedSize(node) {
        return this.tree_getLength(node) * this.elementType.byteLength;
    }
    tree_serializeToBytes(output, offset, node) {
        const chunksNode = this.tree_getChunksNode(node);
        const length = this.tree_getLength(node);
        return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);
    }
    tree_deserializeFromBytes(data, start, end) {
        return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);
    }
    // Helpers for TreeView
    tree_getLength(node) {
        return node.right.getUint(4, 0);
    }
    tree_setLength(tree, length) {
        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);
    }
    tree_getChunksNode(node) {
        return node.left;
    }
    tree_setChunksNode(rootNode, chunksNode, newLength) {
        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);
    }
    // Merkleization
    hashTreeRoot(value) {
        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);
    }
    getRoots(value) {
        const uint8Array = new Uint8Array(this.value_serializedSize(value));
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, { uint8Array, dataView }, 0, value);
        return merkleize_1.splitIntoRootChunks(uint8Array);
    }
}
exports.ListBasicType = ListBasicType;
//# sourceMappingURL=listBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\listBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\listComposite.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../view/listComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\listComposite.js","../viewDU/listComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\listComposite.js","./array":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js","./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js","./arrayComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayComposite.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5ClistComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCompositeType = void 0;
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const arrayBasic_1 = require("./arrayBasic");
const arrayComposite_1 = require("./arrayComposite");
const listComposite_1 = require("../view/listComposite");
const listComposite_2 = require("../viewDU/listComposite");
const array_1 = require("./array");
/**
 * List: ordered variable-length homogeneous collection, limited to N values
 *
 * Array of Composite type:
 * - Composite types always take at least one chunk
 * - Composite types are always returned as views
 */
class ListCompositeType extends array_1.ArrayType {
    constructor(elementType, limit, opts) {
        super(elementType);
        this.elementType = elementType;
        this.limit = limit;
        this.itemsPerChunk = 1;
        this.fixedSize = null;
        this.isList = true;
        this.isViewMutable = true;
        this.defaultLen = 0;
        if (elementType.isBasic)
            throw Error("elementType must not be basic");
        if (limit === 0)
            throw Error("List limit must be > 0");
        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;
        this.maxChunkCount = this.limit;
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        // Depth includes the extra level for the length node
        this.depth = this.chunkDepth + 1;
        this.minSize = 0;
        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static named(elementType, limit, opts) {
        return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);
    }
    getView(tree) {
        return new listComposite_1.ListCompositeTreeView(this, tree);
    }
    getViewDU(node, cache) {
        // cache type should be validated (if applicate) in the view
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);
    }
    commitView(view) {
        return view.node;
    }
    commitViewDU(view) {
        view.commit();
        return view.node;
    }
    cacheOfViewDU(view) {
        return view.cache;
    }
    // Serialization + deserialization
    value_serializedSize(value) {
        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);
    }
    value_serializeToBytes(output, offset, value) {
        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);
    }
    value_deserializeFromBytes(data, start, end) {
        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);
    }
    tree_serializedSize(node) {
        const chunksNode = this.tree_getChunksNode(node);
        const length = this.tree_getLength(node);
        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);
    }
    tree_serializeToBytes(output, offset, node) {
        const chunksNode = this.tree_getChunksNode(node);
        const length = this.tree_getLength(node);
        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);
    }
    tree_deserializeFromBytes(data, start, end) {
        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);
    }
    // Helpers for TreeView
    tree_getLength(node) {
        return arrayBasic_1.getLengthFromRootNode(node);
    }
    tree_setLength(tree, length) {
        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);
    }
    tree_getChunksNode(node) {
        return node.left;
    }
    tree_setChunksNode(rootNode, chunksNode, newLength) {
        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);
    }
    // Merkleization
    hashTreeRoot(value) {
        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);
    }
    getRoots(value) {
        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);
    }
}
exports.ListCompositeType = ListCompositeType;
//# sourceMappingURL=listComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\listComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\none.js", {"./basic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Cnone.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoneType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const basic_1 = require("./basic");
/* eslint-disable @typescript-eslint/member-ordering */
/* eslint-disable @typescript-eslint/no-unused-vars */
class NoneType extends basic_1.BasicType {
    constructor() {
        super(...arguments);
        this.typeName = "none";
        this.byteLength = 0;
        this.itemsPerChunk = 32;
        this.fixedSize = 0;
        this.minSize = 0;
        this.maxSize = 0;
    }
    defaultValue() {
        return null;
    }
    // bytes serdes
    value_serializeToBytes(output, offset, value) {
        return offset;
    }
    value_deserializeFromBytes(data, start) {
        return null;
    }
    tree_serializeToBytes(output, offset, node) {
        return offset;
    }
    tree_deserializeFromBytes(data, start, end) {
        return persistent_merkle_tree_1.zeroNode(0);
    }
    // Fast tree opts
    tree_getFromNode(leafNode) {
        return null;
    }
    tree_setToNode(leafNode, value) {
        return;
    }
    tree_getFromPackedNode(leafNode, index) {
        return null;
    }
    tree_setToPackedNode(leafNode, index, value) {
        return;
    }
    // JSON
    fromJson(json) {
        if (json !== null) {
            throw Error("JSON invalid type none must be null");
        }
        return null;
    }
    toJson(value) {
        return null;
    }
}
exports.NoneType = NoneType;
//# sourceMappingURL=none.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\none.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\uint.js", {"../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","./basic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Cuint.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UintBigintType = exports.UintNumberType = exports.uintBigintByteLens = exports.uintNumberByteLens = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const named_1 = require("../util/named");
const basic_1 = require("./basic");
/* eslint-disable @typescript-eslint/member-ordering */
const MAX_SAFE_INTEGER_BN = BigInt(Number.MAX_SAFE_INTEGER);
const BIGINT_2_POW_64 = BigInt(2) ** BigInt(64);
const BIGINT_2_POW_128 = BigInt(2) ** BigInt(128);
const BIGINT_2_POW_192 = BigInt(2) ** BigInt(192);
// const BIGINT_64_MAX = BigInt("0xffffffffffffffff");
const NUMBER_2_POW_32 = 2 ** 32;
const NUMBER_32_MAX = 0xffffffff;
exports.uintNumberByteLens = [1, 2, 4, 8];
exports.uintBigintByteLens = [1, 2, 4, 8, 16, 32];
/**
 * Uint: N-bit unsigned integer (where N in [8, 16, 32, 64, 128, 256])
 * - Notation: uintN
 *
 * UintNumber is represented as the Javascript primitive value 'Number'.
 *
 * The Number type is a double-precision 64-bit binary format IEEE 754 value (numbers between -(2^53 − 1) and
 * 2^53 − 1). It also has the symbolic value: +Infinity.
 *
 * As of 2021 performance of 'Number' is extremely faster than 'BigInt'. Some values are spec'ed as Uint64 but
 * practically they will never exceed 53 bits, such as any unit time or simple counters. This type is an optimization
 * for these cases, as UintNumber64 can represent any value between 0 and 2^53−1 as well as the max value 2^64-1.
 */
class UintNumberType extends basic_1.BasicType {
    constructor(byteLength, opts) {
        super();
        this.byteLength = byteLength;
        if (byteLength > 8) {
            throw Error("UintNumber byteLength limit is 8");
        }
        if (Math.log2(byteLength) % 1 !== 0) {
            throw Error("byteLength must be a power of 2");
        }
        this.typeName = opts?.typeName ?? `uint${byteLength * 8}`;
        if (opts?.clipInfinity)
            this.typeName += "Inf";
        if (opts?.setBitwiseOR)
            this.typeName += "OR";
        this.itemsPerChunk = 32 / this.byteLength;
        this.fixedSize = byteLength;
        this.minSize = byteLength;
        this.maxSize = byteLength;
        this.maxDecimalStr = (BigInt(2) ** BigInt(this.byteLength * 8) - BigInt(1)).toString(10);
        this.clipInfinity = opts?.clipInfinity === true;
        this.setBitwiseOR = opts?.setBitwiseOR === true;
    }
    static named(byteLength, opts) {
        return new (named_1.namedClass(UintNumberType, opts.typeName))(byteLength, opts);
    }
    defaultValue() {
        return 0;
    }
    // Serialization + deserialization
    value_serializeToBytes({ dataView }, offset, value) {
        switch (this.byteLength) {
            case 1:
                dataView.setInt8(offset, value);
                break;
            case 2:
                dataView.setUint16(offset, value, true);
                break;
            case 4:
                dataView.setUint32(offset, value, true);
                break;
            case 8:
                if (value === Infinity) {
                    // TODO: Benchmark if it's faster to set BIGINT_64_MAX once
                    dataView.setUint32(offset, 0xffffffff);
                    dataView.setUint32(offset + 4, 0xffffffff);
                }
                else {
                    dataView.setUint32(offset, value & 0xffffffff, true);
                    dataView.setUint32(offset + 4, (value / NUMBER_2_POW_32) & 0xffffffff, true);
                }
                break;
        }
        return offset + this.byteLength;
    }
    value_deserializeFromBytes({ dataView }, start, end) {
        this.assertValidSize(end - start);
        switch (this.byteLength) {
            case 1:
                return dataView.getUint8(start);
            case 2:
                return dataView.getUint16(start, true);
            case 4:
                return dataView.getUint32(start, true);
            case 8: {
                const a = dataView.getUint32(start, true);
                const b = dataView.getUint32(start + 4, true);
                if (b === NUMBER_32_MAX && a === NUMBER_32_MAX && this.clipInfinity) {
                    return Infinity;
                }
                else {
                    return b * NUMBER_2_POW_32 + a;
                }
            }
        }
    }
    tree_serializeToBytes(output, offset, node) {
        const value = node.getUint(this.byteLength, 0, this.clipInfinity);
        this.value_serializeToBytes(output, offset, value);
        return offset + this.byteLength;
    }
    tree_deserializeFromBytes(data, start, end) {
        this.assertValidSize(end - start);
        const value = this.value_deserializeFromBytes(data, start, end);
        const node = persistent_merkle_tree_1.LeafNode.fromZero();
        node.setUint(this.byteLength, 0, value, this.clipInfinity);
        return node;
    }
    // Fast Tree access
    tree_getFromNode(leafNode) {
        return leafNode.getUint(this.byteLength, 0, this.clipInfinity);
    }
    tree_setToNode(leafNode, value) {
        this.tree_setToPackedNode(leafNode, 0, value);
    }
    tree_getFromPackedNode(leafNode, index) {
        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);
        return leafNode.getUint(this.byteLength, offsetBytes, this.clipInfinity);
    }
    tree_setToPackedNode(leafNode, index, value) {
        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);
        // TODO: Benchmark the cost of this if, and consider using a different class
        if (this.setBitwiseOR) {
            leafNode.bitwiseOrUint(this.byteLength, offsetBytes, value);
        }
        else {
            leafNode.setUint(this.byteLength, offsetBytes, value, this.clipInfinity);
        }
    }
    // JSON
    fromJson(json) {
        if (typeof json === "number") {
            return json;
        }
        else if (typeof json === "string") {
            if (this.clipInfinity && json === this.maxDecimalStr) {
                // Allow to handle max possible number
                return Infinity;
            }
            else {
                const num = parseInt(json, 10);
                if (isNaN(num)) {
                    throw Error("JSON invalid number isNaN");
                }
                else if (num > Number.MAX_SAFE_INTEGER) {
                    // Throw to prevent decimal precision errors downstream
                    throw Error("JSON invalid number > MAX_SAFE_INTEGER");
                }
                else {
                    return num;
                }
            }
        }
        else if (typeof json === "bigint") {
            if (json > MAX_SAFE_INTEGER_BN) {
                // Throw to prevent decimal precision errors downstream
                throw Error("JSON invalid number > MAX_SAFE_INTEGER_BN");
            }
            else {
                return Number(json);
            }
        }
        else {
            throw Error(`JSON invalid type ${typeof json} expected number`);
        }
    }
    toJson(value) {
        if (value === Infinity) {
            return this.maxDecimalStr;
        }
        else {
            return value.toString(10);
        }
    }
}
exports.UintNumberType = UintNumberType;
/**
 * Uint: N-bit unsigned integer (where N in [8, 16, 32, 64, 128, 256])
 * - Notation: uintN
 *
 * UintBigint is represented as the Javascript primitive value 'BigInt'.
 *
 * The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision.
 * With BigInts, you can safely store and operate on large integers even beyond the safe integer limit for Numbers.
 *
 * As of 2021 performance of 'Number' is extremely faster than 'BigInt'. For Uint values under 53 bits use UintNumber.
 * For other values that may exceed 53 bits, use UintBigint.
 */
class UintBigintType extends basic_1.BasicType {
    constructor(byteLength, opts) {
        super();
        this.byteLength = byteLength;
        if (byteLength > 32) {
            throw Error("UintBigint byteLength limit is 32");
        }
        if (Math.log2(byteLength) % 1 !== 0) {
            throw Error("byteLength must be a power of 2");
        }
        this.typeName = opts?.typeName ?? `uintBigint${byteLength * 8}`;
        this.byteLength = byteLength;
        this.itemsPerChunk = 32 / this.byteLength;
        this.fixedSize = byteLength;
        this.minSize = byteLength;
        this.maxSize = byteLength;
    }
    static named(byteLength, opts) {
        return new (named_1.namedClass(UintBigintType, opts.typeName))(byteLength, opts);
    }
    defaultValue() {
        return BigInt(0);
    }
    // Serialization + deserialization
    value_serializeToBytes({ dataView }, offset, value) {
        switch (this.byteLength) {
            case 1:
                dataView.setInt8(offset, Number(value));
                break;
            case 2:
                dataView.setUint16(offset, Number(value), true);
                break;
            case 4:
                dataView.setUint32(offset, Number(value), true);
                break;
            case 8:
                dataView.setBigUint64(offset, value, true);
                break;
            default: {
                for (let i = 0; i < this.byteLength; i += 8) {
                    if (i > 0)
                        value = value / BIGINT_2_POW_64;
                    const lo = BigInt.asUintN(64, value);
                    dataView.setBigUint64(offset + i, lo, true);
                }
            }
        }
        return offset + this.byteLength;
    }
    value_deserializeFromBytes({ dataView }, start, end) {
        const size = end - start;
        if (size !== this.byteLength) {
            throw Error(`Invalid size ${size} expected ${this.byteLength}`);
        }
        // Note: pre-assigning the right function at the constructor to avoid this switch is not faster
        switch (this.byteLength) {
            case 1:
                return BigInt(dataView.getUint8(start));
            case 2:
                return BigInt(dataView.getUint16(start, true));
            case 4:
                return BigInt(dataView.getUint32(start, true));
            case 8:
                return dataView.getBigUint64(start, true);
            case 16: {
                const a = dataView.getBigUint64(start, true);
                const b = dataView.getBigUint64(start + 8, true);
                return b * BIGINT_2_POW_64 + a;
            }
            case 32: {
                const a = dataView.getBigUint64(start, true);
                const b = dataView.getBigUint64(start + 8, true);
                const c = dataView.getBigUint64(start + 16, true);
                const d = dataView.getBigUint64(start + 24, true);
                return d * BIGINT_2_POW_192 + c * BIGINT_2_POW_128 + b * BIGINT_2_POW_64 + a;
            }
        }
    }
    tree_serializeToBytes(output, offset, node) {
        const value = node.getUintBigint(this.byteLength, 0);
        this.value_serializeToBytes(output, offset, value);
        return offset + this.byteLength;
    }
    tree_deserializeFromBytes(data, start, end) {
        const size = end - start;
        if (size !== this.byteLength) {
            throw Error(`Invalid size ${size} expected ${this.byteLength}`);
        }
        const value = this.value_deserializeFromBytes(data, start, end);
        const node = persistent_merkle_tree_1.LeafNode.fromZero();
        node.setUintBigint(this.byteLength, 0, value);
        return node;
    }
    // Fast Tree access
    tree_getFromNode(leafNode) {
        return leafNode.getUintBigint(this.byteLength, 0);
    }
    /** Mutates node to set value */
    tree_setToNode(leafNode, value) {
        this.tree_setToPackedNode(leafNode, 0, value);
    }
    /** EXAMPLE of `tree_getFromNode` */
    tree_getFromPackedNode(leafNode, index) {
        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);
        return leafNode.getUintBigint(this.byteLength, offsetBytes);
    }
    /** Mutates node to set value */
    tree_setToPackedNode(leafNode, index, value) {
        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);
        // TODO: Not-optimized, copy pasted from UintNumberType
        leafNode.setUintBigint(this.byteLength, offsetBytes, value);
    }
    // JSON
    fromJson(json) {
        if (typeof json === "bigint") {
            return json;
        }
        else if (typeof json === "string" || typeof json === "number") {
            return BigInt(json);
        }
        else {
            throw Error(`JSON invalid type ${typeof json} expected bigint`);
        }
    }
    toJson(value) {
        return value.toString(10);
    }
}
exports.UintBigintType = UintBigintType;
//# sourceMappingURL=uint.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\uint.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\union.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js","./composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./none":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\none.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5Cunion.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnionType = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const composite_1 = require("./composite");
const arrayBasic_1 = require("./arrayBasic");
const none_1 = require("./none");
const VALUE_GINDEX = BigInt(2);
const SELECTOR_GINDEX = BigInt(3);
/**
 * Union: union type containing one of the given subtypes
 * - Notation: Union[type_0, type_1, ...], e.g. union[None, uint64, uint32]
 */
class UnionType extends composite_1.CompositeType {
    constructor(types, opts) {
        super();
        this.types = types;
        this.depth = 1;
        this.maxChunkCount = 1;
        this.fixedSize = null;
        this.isList = true;
        this.isViewMutable = true;
        if (types.length >= 128) {
            throw Error("Must have less than 128 types");
        }
        if (types.length === 0) {
            throw Error("Must have at least 1 type option");
        }
        if (types[0] instanceof none_1.NoneType && types.length < 2) {
            throw Error("Must have at least 2 type options if the first is None");
        }
        for (let i = 1; i < types.length; i++) {
            if (types[i] instanceof none_1.NoneType) {
                throw Error("None may only be the first option");
            }
        }
        this.typeName = opts?.typeName ?? `Union[${types.map((t) => t.typeName).join(",")}]`;
        const minLens = [];
        const maxLens = [];
        for (const _type of types) {
            minLens.push(_type.minSize);
            maxLens.push(_type.maxSize);
        }
        this.minSize = 1 + Math.min(...minLens);
        this.maxSize = 1 + Math.max(...maxLens);
        this.maxSelector = this.types.length - 1;
    }
    static named(types, opts) {
        return new (named_1.namedClass(UnionType, opts.typeName))(types, opts);
    }
    defaultValue() {
        return {
            selector: 0,
            value: this.types[0].defaultValue(),
        };
    }
    getView(tree) {
        return this.tree_toValue(tree.rootNode);
    }
    getViewDU(node) {
        return this.tree_toValue(node);
    }
    cacheOfViewDU() {
        return;
    }
    commitView(view) {
        return this.value_toTree(view);
    }
    commitViewDU(view) {
        return this.value_toTree(view);
    }
    value_serializedSize(value) {
        return 1 + this.types[value.selector].value_serializedSize(value.value);
    }
    value_serializeToBytes(output, offset, value) {
        output.uint8Array[offset] = value.selector;
        return this.types[value.selector].value_serializeToBytes(output, offset + 1, value.value);
    }
    value_deserializeFromBytes(data, start, end) {
        const selector = data.uint8Array[start];
        if (selector > this.maxSelector) {
            throw Error(`Invalid selector ${selector}`);
        }
        return {
            selector,
            value: this.types[selector].value_deserializeFromBytes(data, start + 1, end),
        };
    }
    tree_serializedSize(node) {
        const selector = arrayBasic_1.getLengthFromRootNode(node);
        const valueNode = node.left;
        return 1 + this.types[selector].value_serializedSize(valueNode);
    }
    tree_serializeToBytes(output, offset, node) {
        const selector = arrayBasic_1.getLengthFromRootNode(node);
        const valueNode = node.left;
        output.uint8Array[offset] = selector;
        return this.types[selector].tree_serializeToBytes(output, offset + 1, valueNode);
    }
    tree_deserializeFromBytes(data, start, end) {
        const selector = data.uint8Array[start];
        if (selector > this.maxSelector) {
            throw Error(`Invalid selector ${selector}`);
        }
        const valueNode = this.types[selector].tree_deserializeFromBytes(data, start + 1, end);
        return arrayBasic_1.addLengthNode(valueNode, selector);
    }
    // Merkleization
    hashTreeRoot(value) {
        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.selector);
    }
    getRoots(value) {
        const valueRoot = this.types[value.selector].hashTreeRoot(value.value);
        return [valueRoot];
    }
    // Proofs
    getPropertyGindex(prop) {
        switch (prop) {
            case "value":
                return VALUE_GINDEX;
            case "selector":
                return SELECTOR_GINDEX;
            default:
                throw new Error(`Invalid Union type property ${prop}`);
        }
    }
    getPropertyType() {
        // a Union has multiple types
        throw new Error("Not applicable for Union type");
    }
    getIndexProperty(index) {
        if (index === 0)
            return "value";
        if (index === 1)
            return "selector";
        throw Error("Union index of out bounds");
    }
    tree_getLeafGindices(rootGindex, rootNode) {
        if (!rootNode) {
            throw Error("rootNode required");
        }
        const gindices = [persistent_merkle_tree_1.concatGindices([rootGindex, SELECTOR_GINDEX])];
        const selector = arrayBasic_1.getLengthFromRootNode(rootNode);
        const type = this.types[selector];
        const extendedFieldGindex = persistent_merkle_tree_1.concatGindices([rootGindex, VALUE_GINDEX]);
        if (composite_1.isCompositeType(type)) {
            gindices.push(...type.tree_getLeafGindices(extendedFieldGindex, persistent_merkle_tree_1.getNode(rootNode, VALUE_GINDEX)));
        }
        else {
            gindices.push(extendedFieldGindex);
        }
        return gindices;
    }
    // JSON
    fromJson(json) {
        if (typeof json !== "object") {
            throw new Error("JSON must be of type object");
        }
        const union = json;
        if (typeof union.selector !== "number") {
            throw new Error("Invalid JSON Union selector must be number");
        }
        const type = this.types[union.selector];
        if (!type) {
            throw new Error("Invalid JSON Union selector out of range");
        }
        return {
            selector: union.selector,
            value: type.toJson(union.value),
        };
    }
    toJson(value) {
        return {
            selector: value.selector,
            value: this.types[value.selector].toJson(value.value),
        };
    }
    clone(value) {
        return {
            selector: value.selector,
            value: this.types[value.selector].clone(value.value),
        };
    }
    equals(a, b) {
        if (a.selector !== b.selector) {
            return false;
        }
        return this.types[a.selector].equals(a.value, b.value);
    }
}
exports.UnionType = UnionType;
//# sourceMappingURL=union.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\union.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\vectorBasic.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../view/arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayBasic.js","../viewDU/arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayBasic.js","./array":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js","./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayBasic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CvectorBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorBasicType = void 0;
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const arrayBasic_1 = require("./arrayBasic");
const arrayBasic_2 = require("../view/arrayBasic");
const arrayBasic_3 = require("../viewDU/arrayBasic");
const array_1 = require("./array");
/**
 * Vector: Ordered fixed-length homogeneous collection, with N values
 *
 * Array of Basic type:
 * - Basic types are max 32 bytes long so multiple values may be packed in the same node.
 * - Basic types are never returned in a view wrapper, but their value representation
 */
class VectorBasicType extends array_1.ArrayType {
    constructor(elementType, length, opts) {
        super(elementType);
        this.elementType = elementType;
        this.length = length;
        this.isList = false;
        this.isViewMutable = true;
        if (!elementType.isBasic)
            throw Error("elementType must be basic");
        if (length === 0)
            throw Error("Vector length must be > 0");
        this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;
        // TODO Check that itemsPerChunk is an integer
        this.itemsPerChunk = 32 / elementType.byteLength;
        this.maxChunkCount = Math.ceil((length * elementType.byteLength) / 32);
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        this.depth = this.chunkDepth;
        this.fixedSize = length * elementType.byteLength;
        this.minSize = this.fixedSize;
        this.maxSize = this.fixedSize;
        this.defaultLen = length;
    }
    static named(elementType, limit, opts) {
        return new (named_1.namedClass(VectorBasicType, opts.typeName))(elementType, limit, opts);
    }
    getView(tree) {
        return new arrayBasic_2.ArrayBasicTreeView(this, tree);
    }
    getViewDU(node, cache) {
        // cache type should be validated (if applicate) in the view
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new arrayBasic_3.ArrayBasicTreeViewDU(this, node, cache);
    }
    commitView(view) {
        return view.node;
    }
    commitViewDU(view) {
        view.commit();
        return view.node;
    }
    cacheOfViewDU(view) {
        return view.cache;
    }
    // Serialization + deserialization
    value_serializedSize() {
        return this.fixedSize;
    }
    value_serializeToBytes(output, offset, value) {
        return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, output, offset, value);
    }
    value_deserializeFromBytes(data, start, end) {
        return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);
    }
    tree_serializedSize() {
        return this.fixedSize;
    }
    tree_serializeToBytes(output, offset, node) {
        return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, this.length, this.depth, output, offset, node);
    }
    tree_deserializeFromBytes(data, start, end) {
        return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.depth, data, start, end, this);
    }
    // Helpers for TreeView
    tree_getLength() {
        return this.length;
    }
    tree_setLength() {
        // Vector's length is immutable, ignore this call
    }
    tree_getChunksNode(node) {
        return node;
    }
    tree_setChunksNode(rootNode, chunksNode) {
        return chunksNode;
    }
    // Merkleization
    getRoots(value) {
        const uint8Array = new Uint8Array(this.fixedSize);
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);
        arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, { uint8Array, dataView }, 0, value);
        return merkleize_1.splitIntoRootChunks(uint8Array);
    }
}
exports.VectorBasicType = VectorBasicType;
//# sourceMappingURL=vectorBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\vectorBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\vectorComposite.js", {"../util/merkleize":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js","../util/named":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js","../view/arrayComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayComposite.js","../viewDU/arrayComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayComposite.js","./array":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\array.js","./arrayComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\arrayComposite.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Ctype%5CvectorComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorCompositeType = void 0;
const merkleize_1 = require("../util/merkleize");
const named_1 = require("../util/named");
const arrayComposite_1 = require("./arrayComposite");
const arrayComposite_2 = require("../view/arrayComposite");
const arrayComposite_3 = require("../viewDU/arrayComposite");
const array_1 = require("./array");
/**
 * Vector: Ordered fixed-length homogeneous collection, with N values
 *
 * Array of Composite type:
 * - Composite types always take at least one chunk
 * - Composite types are always returned as views
 */
class VectorCompositeType extends array_1.ArrayType {
    constructor(elementType, length, opts) {
        super(elementType);
        this.elementType = elementType;
        this.length = length;
        this.itemsPerChunk = 1;
        this.isList = false;
        this.isViewMutable = true;
        if (elementType.isBasic)
            throw Error("elementType must not be basic");
        if (length === 0)
            throw Error("Vector length must be > 0");
        this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;
        this.maxChunkCount = length;
        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);
        this.depth = this.chunkDepth;
        this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;
        this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);
        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);
        this.defaultLen = length;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static named(elementType, limit, opts) {
        return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);
    }
    getView(tree) {
        return new arrayComposite_2.ArrayCompositeTreeView(this, tree);
    }
    getViewDU(node, cache) {
        // cache type should be validated (if applicate) in the view
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);
    }
    commitView(view) {
        return view.node;
    }
    commitViewDU(view) {
        view.commit();
        return view.node;
    }
    cacheOfViewDU(view) {
        return view.cache;
    }
    // Serialization + deserialization
    value_serializedSize(value) {
        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);
    }
    value_serializeToBytes(output, offset, value) {
        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);
    }
    value_deserializeFromBytes(data, start, end) {
        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);
    }
    tree_serializedSize(node) {
        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);
    }
    tree_serializeToBytes(output, offset, node) {
        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);
    }
    tree_deserializeFromBytes(data, start, end) {
        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);
    }
    // Helpers for TreeView
    tree_getLength() {
        return this.length;
    }
    tree_setLength() {
        // Vector's length is immutable, ignore this call
    }
    tree_getChunksNode(node) {
        return node;
    }
    tree_setChunksNode(rootNode, chunksNode) {
        return chunksNode;
    }
    // Merkleization
    getRoots(value) {
        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);
    }
}
exports.VectorCompositeType = VectorCompositeType;
//# sourceMappingURL=vectorComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\vectorComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\byteArray.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cutil%5CbyteArray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.byteArrayEquals = exports.fromHexString = exports.toHexString = void 0;
// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6
const hexByByte = new Array(256);
function toHexString(bytes) {
    let hex = "0x";
    for (const byte of bytes) {
        if (!hexByByte[byte]) {
            hexByByte[byte] = byte < 16 ? "0" + byte.toString(16) : byte.toString(16);
        }
        hex += hexByByte[byte];
    }
    return hex;
}
exports.toHexString = toHexString;
function fromHexString(hex) {
    if (typeof hex !== "string") {
        throw new Error(`hex argument type ${typeof hex} must be of type string`);
    }
    if (hex.startsWith("0x")) {
        hex = hex.slice(2);
    }
    if (hex.length % 2 !== 0) {
        throw new Error(`hex string length ${hex.length} must be multiple of 2`);
    }
    const byteLen = hex.length / 2;
    const bytes = new Uint8Array(byteLen);
    for (let i = 0; i < byteLen; i++) {
        const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);
        bytes[i] = byte;
    }
    return bytes;
}
exports.fromHexString = fromHexString;
function byteArrayEquals(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
exports.byteArrayEquals = byteArrayEquals;
//# sourceMappingURL=byteArray.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\byteArray.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js", {"./zeros":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\zeros.js","@chainsafe/as-sha256":"F:\\metamask-extension\\node_modules\\browserify\\lib\\_empty.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cutil%5Cmerkleize.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextPowerOf2 = exports.maxChunksToDepth = exports.bitLength = exports.mixInLength = exports.splitIntoRootChunks = exports.merkleize = exports.hash64 = void 0;
const as_sha256_1 = require("@chainsafe/as-sha256");
const zeros_1 = require("./zeros");
function hash64(bytes32A, bytes32B) {
    return as_sha256_1.digest2Bytes32(bytes32A, bytes32B);
}
exports.hash64 = hash64;
function merkleize(chunks, padFor) {
    const layerCount = bitLength(nextPowerOf2(padFor) - 1);
    if (chunks.length == 0) {
        return zeros_1.zeroHash(layerCount);
    }
    let chunkCount = chunks.length;
    // Instead of pushing on all padding zero chunks at the leaf level
    // we push on zero hash chunks at the highest possible level to avoid over-hashing
    for (let l = 0; l < layerCount; l++) {
        const padCount = chunkCount % 2;
        const paddedChunkCount = chunkCount + padCount;
        // if the chunks.length is odd
        // we need to push on the zero-hash of that level to merkleize that level
        for (let i = 0; i < padCount; i++) {
            chunks[chunkCount + i] = zeros_1.zeroHash(l);
        }
        for (let i = 0; i < paddedChunkCount; i += 2) {
            chunks[i / 2] = hash64(chunks[i], chunks[i + 1]);
        }
        chunkCount = paddedChunkCount / 2;
    }
    return chunks[0];
}
exports.merkleize = merkleize;
/**
 * Split a long Uint8Array into Uint8Array of exactly 32 bytes
 */
function splitIntoRootChunks(longChunk) {
    const chunkCount = Math.ceil(longChunk.length / 32);
    const chunks = new Array(chunkCount);
    for (let i = 0; i < chunkCount; i++) {
        const chunk = new Uint8Array(32);
        chunk.set(longChunk.slice(i * 32, (i + 1) * 32));
        chunks[i] = chunk;
    }
    return chunks;
}
exports.splitIntoRootChunks = splitIntoRootChunks;
/** @ignore */
function mixInLength(root, length) {
    const lengthBuf = Buffer.alloc(32);
    lengthBuf.writeUIntLE(length, 0, 6);
    return hash64(root, lengthBuf);
}
exports.mixInLength = mixInLength;
// x2 faster than bitLengthStr() which uses Number.toString(2)
function bitLength(i) {
    if (i === 0) {
        return 0;
    }
    return Math.floor(Math.log2(i)) + 1;
}
exports.bitLength = bitLength;
/**
 * Given maxChunkCount return the chunkDepth
 * ```
 * n: [0,1,2,3,4,5,6,7,8,9]
 * d: [0,0,1,2,2,3,3,3,3,4]
 * ```
 */
function maxChunksToDepth(n) {
    if (n === 0)
        return 0;
    return Math.ceil(Math.log2(n));
}
exports.maxChunksToDepth = maxChunksToDepth;
/** @ignore */
function nextPowerOf2(n) {
    return n <= 0 ? 1 : Math.pow(2, bitLength(n - 1));
}
exports.nextPowerOf2 = nextPowerOf2;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\merkleize.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cutil%5Cnamed.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.namedClass = void 0;
function namedClass(superClass, className) {
    return new Function("superClass", `return class ${className} extends superClass {}`)(superClass);
}
exports.namedClass = namedClass;
//# sourceMappingURL=named.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\named.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\proof\\treePostProcessFromProofNode.js", {"@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cutil%5Cproof%5CtreePostProcessFromProofNode.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.treePostProcessFromProofNode = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
/** Duplicated partial declaration to break circular dependency with CompositeType */
function isCompositeType(type) {
    return !type.isBasic;
}
/**
 * Navigates and mutates nodes to post process a tree created with `Tree.createFromProof`.
 * Tree returns regular a tree with only BranchNode and LeafNode instances. However, SSZ features
 * non-standard nodes that make proofs for those types to be un-usable. This include:
 * - BranchNodeStruct: Must contain complete data `tree_fromProofNode` transforms a BranchNode and
 *   all of its data into a single BranchNodeStruct instance.
 *
 * @param bitstring Bitstring without the leading "1", since it's only used to compute horizontal indexes.
 */
function treePostProcessFromProofNode(node, type, bitstring = "", currentDepth = 0) {
    // Must run tree_fromProofNode on the first received node (i.e. Validator object)
    if (currentDepth === 0) {
        const nodePost = type.tree_fromProofNode(node);
        if (nodePost.done) {
            return nodePost.node;
        }
        else {
            node = nodePost.node;
        }
    }
    const atTypeDepth = type.depth === currentDepth;
    if (node.isLeaf()) {
        if (atTypeDepth) {
            const jsonPathProp = type.getIndexProperty(bitstringToIndex(bitstring));
            if (jsonPathProp === null) {
                // bitstring is out of bounds, witness node
                return node;
            }
            const childType = type.getPropertyType(jsonPathProp);
            // If this type merkleized fits in a single chunk then this LeafNode includes all data
            if (childType.maxChunkCount === 1 && isCompositeType(childType)) {
                return childType.tree_fromProofNode(node).node;
            }
            // Witness node
            else {
                return node;
            }
        }
        // LeafNode not at type depth is a witness or a length / selector nodes
        else {
            return node;
        }
    }
    else {
        if (atTypeDepth) {
            const jsonPathProp = type.getIndexProperty(bitstringToIndex(bitstring));
            if (jsonPathProp === null) {
                // bitstring is out of bounds, witness node
                return node;
            }
            const childType = type.getPropertyType(jsonPathProp);
            if (!isCompositeType(childType)) {
                throw Error("BranchNode does not map to CompositeType");
            }
            const nodePost = childType.tree_fromProofNode(node);
            // If tree_fromProofNode is the identity function, keep going, otherwise stop navigating
            if (nodePost.done) {
                return nodePost.node;
            }
            else {
                return treePostProcessFromProofNode(nodePost.node, childType);
            }
        }
        // BranchNode at not type depth, keep navigating
        else {
            const leftNode = treePostProcessFromProofNode(node.left, type, bitstring + "0", currentDepth + 1);
            const rightNode = treePostProcessFromProofNode(node.right, type, bitstring + "1", currentDepth + 1);
            if (leftNode === node.left && rightNode === node.right) {
                return node;
            }
            else {
                return new persistent_merkle_tree_1.BranchNode(leftNode, rightNode);
            }
        }
    }
}
exports.treePostProcessFromProofNode = treePostProcessFromProofNode;
/** Return the node horizontal index given a bitstring without the leading "1" */
function bitstringToIndex(bitstring) {
    if (bitstring === "")
        return 0;
    return parseInt(bitstring, 2);
}
//# sourceMappingURL=treePostProcessFromProofNode.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\proof\\treePostProcessFromProofNode.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\zeros.js", {"@chainsafe/as-sha256":"F:\\metamask-extension\\node_modules\\browserify\\lib\\_empty.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cutil%5Czeros.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zeroHash = void 0;
const as_sha256_1 = require("@chainsafe/as-sha256");
// create array of "zero hashes", successively hashed zero chunks
const zeroHashes = [new Uint8Array(32)];
function zeroHash(depth) {
    if (depth >= zeroHashes.length) {
        for (let i = zeroHashes.length; i <= depth; i++) {
            zeroHashes[i] = as_sha256_1.digest2Bytes32(zeroHashes[i - 1], zeroHashes[i - 1]);
        }
    }
    return zeroHashes[depth];
}
exports.zeroHash = zeroHash;
//# sourceMappingURL=zeros.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\util\\zeros.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\value\\bitArray.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cvalue%5CbitArray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUint8ByteToBitBooleanArray = exports.BitArray = void 0;
/** Globally cache this information. @see getUint8ByteToBitBooleanArray */
const uint8ByteToBitBooleanArrays = new Array(256);
/**
 * BitArray may be represented as an array of bits or compressed into an array of bytes.
 *
 * **Array of bits**:
 * Require 8.87 bytes per bit, so for 512 bits = 4500 bytes.
 * Are 'faster' to iterate with native tooling but are as fast as array of bytes with precomputed caches.
 *
 * **Array of bytes**:
 * Require an average cost of Uint8Array in JS = 220 bytes for 32 bytes, so for 512 bits = 220 bytes.
 * With precomputed boolean arrays per bytes value are as fast to iterate as an array of bits above.
 *
 * This BitArray implementation will represent data as a Uint8Array since it's very cheap to deserialize and can be as
 * fast to iterate as a native array of booleans, precomputing boolean arrays (total memory cost of 16000 bytes).
 */
class BitArray {
    constructor(
    /** Underlying BitArray Uint8Array data */
    uint8Array, 
    /** Immutable bitLen of this BitArray */
    bitLen) {
        this.uint8Array = uint8Array;
        this.bitLen = bitLen;
        if (uint8Array.length !== Math.ceil(bitLen / 8)) {
            throw Error("BitArray uint8Array length does not match bitLen");
        }
    }
    /** Returns a zero'ed BitArray of `bitLen` */
    static fromBitLen(bitLen) {
        return new BitArray(new Uint8Array(Math.ceil(bitLen / 8)), bitLen);
    }
    /** Returns a BitArray of `bitLen` with a single bit set to true at position `bitIndex` */
    static fromSingleBit(bitLen, bitIndex) {
        const bitArray = BitArray.fromBitLen(bitLen);
        bitArray.set(bitIndex, true);
        return bitArray;
    }
    /** Returns a BitArray from an array of booleans representation */
    static fromBoolArray(bitBoolArr) {
        const bitArray = BitArray.fromBitLen(bitBoolArr.length);
        for (let i = 0; i < bitBoolArr.length; i++) {
            if (bitBoolArr[i] === true) {
                bitArray.set(i, true);
            }
        }
        return bitArray;
    }
    clone() {
        // TODO: Benchmark if Uint8Array.slice(0) is the fastest way to copy data here
        // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087
        return new BitArray(Uint8Array.prototype.slice.call(this.uint8Array, 0), this.bitLen);
    }
    /**
     * Get bit value at index `bitIndex`
     */
    get(bitIndex) {
        const byteIdx = Math.floor(bitIndex / 8);
        const bitInBit = bitIndex % 8;
        const mask = 1 << bitInBit;
        return (this.uint8Array[byteIdx] & mask) === mask;
    }
    /**
     * Set bit value at index `bitIndex`
     */
    set(bitIndex, bit) {
        if (bitIndex >= this.bitLen) {
            throw Error(`BitArray set bitIndex ${bitIndex} beyond bitLen ${this.bitLen}`);
        }
        const byteIdx = Math.floor(bitIndex / 8);
        const bitInBit = bitIndex % 8;
        const mask = 1 << bitInBit;
        let byte = this.uint8Array[byteIdx];
        if (bit) {
            // For bit in byte, 1,0 OR 1 = 1
            // byte 100110
            // mask 010000
            // res  110110
            byte |= mask;
            this.uint8Array[byteIdx] = byte;
        }
        else {
            // For bit in byte, 1,0 OR 1 = 0
            if ((byte & mask) === mask) {
                // byte 110110
                // mask 010000
                // res  100110
                byte ^= mask;
                this.uint8Array[byteIdx] = byte;
            }
            else {
                // Ok, bit is already 0
            }
        }
    }
    /** Merge two BitArray bitfields with OR. Must have the same bitLen */
    mergeOrWith(bitArray2) {
        if (bitArray2.bitLen !== this.bitLen) {
            throw Error("Must merge BitArrays of same bitLen");
        }
        // Merge bitFields
        for (let i = 0; i < this.uint8Array.length; i++) {
            this.uint8Array[i] = this.uint8Array[i] | bitArray2.uint8Array[i];
        }
    }
    /**
     * Returns an array with the indexes which have a bit set to true
     */
    intersectValues(values) {
        const yes = [];
        if (values.length !== this.bitLen) {
            throw Error(`Must not intersect values of length ${values.length} != bitLen ${this.bitLen}`);
        }
        const fullByteLen = Math.floor(this.bitLen / 8);
        const remainderBits = this.bitLen % 8;
        // Iterate over each byte of bits
        const bytes = this.uint8Array;
        for (let iByte = 0; iByte < fullByteLen; iByte++) {
            // Get the precomputed boolean array for this byte
            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[iByte]);
            // For each bit in the byte check participation and add to indexesSelected array
            for (let iBit = 0; iBit < 8; iBit++) {
                if (booleansInByte[iBit]) {
                    yes.push(values[iByte * 8 + iBit]);
                }
            }
        }
        if (remainderBits > 0) {
            // Get the precomputed boolean array for this byte
            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[fullByteLen]);
            // For each bit in the byte check participation and add to indexesSelected array
            for (let iBit = 0; iBit < remainderBits; iBit++) {
                if (booleansInByte[iBit]) {
                    yes.push(values[fullByteLen * 8 + iBit]);
                }
            }
        }
        return yes;
    }
    /**
     * Returns the positions of all bits that are set to true
     */
    getTrueBitIndexes() {
        const indexes = [];
        // Iterate over each byte of bits
        const bytes = this.uint8Array;
        for (let iByte = 0, byteLen = bytes.length; iByte < byteLen; iByte++) {
            // Get the precomputed boolean array for this byte
            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[iByte]);
            // For each bit in the byte check participation and add to indexesSelected array
            for (let iBit = 0; iBit < 8; iBit++) {
                if (booleansInByte[iBit]) {
                    indexes.push(iByte * 8 + iBit);
                }
            }
        }
        return indexes;
    }
    /**
     * Return the position of a single bit set. If no bit set or more than 1 bit set, throws.
     * @returns
     *  - number: if there's a single bit set, the number it the single bit set position
     *  - null: if ERROR_MORE_THAN_ONE_BIT_SET or ERROR_NO_BIT_SET
     * @throws
     *  - ERROR_MORE_THAN_ONE_BIT_SET
     *  - ERROR_NO_BIT_SET
     */
    getSingleTrueBit() {
        let index = null;
        const bytes = this.uint8Array;
        // Iterate over each byte of bits
        for (let iByte = 0, byteLen = bytes.length; iByte < byteLen; iByte++) {
            // If it's exactly zero, there won't be any indexes, continue early
            if (bytes[iByte] === 0) {
                continue;
            }
            // Get the precomputed boolean array for this byte
            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[iByte]);
            // For each bit in the byte check participation and add to indexesSelected array
            for (let iBit = 0; iBit < 8; iBit++) {
                if (booleansInByte[iBit] === true) {
                    if (index !== null) {
                        // ERROR_MORE_THAN_ONE_BIT_SET
                        return null;
                    }
                    index = iByte * 8 + iBit;
                }
            }
        }
        if (index === null) {
            // ERROR_NO_BIT_SET
            return null;
        }
        else {
            return index;
        }
    }
    toBoolArray() {
        const bitBoolArr = new Array(this.bitLen);
        for (let i = 0; i < this.bitLen; i++) {
            bitBoolArr[i] = this.get(i);
        }
        return bitBoolArr;
    }
}
exports.BitArray = BitArray;
/**
 * Given a byte (0 -> 255), return a Array of boolean with length = 8, big endian.
 * Ex: 1 => [true false false false false false false false]
 *     5 => [true false true false false fase false false]
 */
function getUint8ByteToBitBooleanArray(byte) {
    if (!uint8ByteToBitBooleanArrays[byte]) {
        uint8ByteToBitBooleanArrays[byte] = computeUint8ByteToBitBooleanArray(byte);
    }
    return uint8ByteToBitBooleanArrays[byte];
}
exports.getUint8ByteToBitBooleanArray = getUint8ByteToBitBooleanArray;
/** @see getUint8ByteToBitBooleanArray */
function computeUint8ByteToBitBooleanArray(byte) {
    // this returns little endian
    const binaryStr = byte.toString(2);
    const binaryLength = binaryStr.length;
    const bits = new Array(8);
    for (let i = 0; i < 8; i++) {
        bits[i] =
            i < binaryLength
                ? //
                    binaryStr[binaryLength - i - 1] === "1"
                : false;
    }
    return bits;
}
//# sourceMappingURL=bitArray.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\value\\bitArray.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js", {"../view/abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5Cabstract.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeViewDU = void 0;
const abstract_1 = require("../view/abstract");
/* eslint-disable @typescript-eslint/member-ordering  */
/**
 * A Deferred Update Tree View (`ViewDU`) is a wrapper around a type and
 * a SSZ Node that contains:
 * - data merkleized
 * - some arbitrary caches to speed up data manipulation required by the type
 *
 * **ViewDU**
 * - Best for complex usage where performance is important
 * - Defers changes to when commit is called
 * - Does NOT have a reference to the parent ViewDU
 * - Has caches for fast get / set ops
 */
class TreeViewDU extends abstract_1.TreeView {
    /**
     * Merkleize view and compute its hashTreeRoot.
     * Commits any pending changes before computing the root.
     *
     * See spec for definition of hashTreeRoot:
     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization
     */
    hashTreeRoot() {
        this.commit();
        return super.hashTreeRoot();
    }
    /**
     * Serialize view to binary data.
     * Commits any pending changes before computing the root.
     */
    serialize() {
        this.commit();
        return super.serialize();
    }
    /**
     * Return a new ViewDU instance referencing the same internal `Node`.
     *
     * By default it will transfer the cache of this ViewDU to the new cloned instance. Set `dontTransferCache` to true
     * to NOT transfer the cache to the cloned instance.
     */
    clone(dontTransferCache) {
        if (dontTransferCache) {
            return this.type.getViewDU(this.node);
        }
        else {
            const cache = this.cache;
            this.clearCache();
            return this.type.getViewDU(this.node, cache);
        }
    }
}
exports.TreeViewDU = TreeViewDU;
//# sourceMappingURL=abstract.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayBasic.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5CarrayBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayBasicTreeViewDU = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const abstract_1 = require("./abstract");
class ArrayBasicTreeViewDU extends abstract_1.TreeViewDU {
    constructor(type, _rootNode, cache) {
        super();
        this.type = type;
        this._rootNode = _rootNode;
        this.nodesChanged = new Set();
        this.dirtyLength = false;
        if (cache) {
            this.nodes = cache.nodes;
            this._length = cache.length;
            this.nodesPopulated = cache.nodesPopulated;
        }
        else {
            this.nodes = [];
            this._length = this.type.tree_getLength(_rootNode);
            this.nodesPopulated = false;
        }
    }
    /**
     * Number of elements in the array. Equal to un-commited length of the array
     */
    get length() {
        return this._length;
    }
    get node() {
        return this._rootNode;
    }
    get cache() {
        return {
            nodes: this.nodes,
            length: this._length,
            nodesPopulated: this.nodesPopulated,
        };
    }
    /**
     * Get element at `index`. Returns the Basic element type value directly
     */
    get(index) {
        // First walk through the tree to get the root node for that index
        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);
        let node = this.nodes[chunkIndex];
        if (node === undefined) {
            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, chunkIndex);
            this.nodes[chunkIndex] = node;
        }
        return this.type.elementType.tree_getFromPackedNode(node, index);
    }
    /**
     * Set Basic element type `value` at `index`
     */
    set(index, value) {
        if (index >= this._length) {
            throw Error(`Error setting index over length ${index} > ${this._length}`);
        }
        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);
        // Create new node if current leafNode is not dirty
        let nodeChanged;
        if (this.nodesChanged.has(chunkIndex)) {
            // TODO: This assumes that node has already been populated
            nodeChanged = this.nodes[chunkIndex];
        }
        else {
            const nodePrev = (this.nodes[chunkIndex] ??
                persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, chunkIndex));
            nodeChanged = nodePrev.clone();
            // Store the changed node in the nodes cache
            this.nodes[chunkIndex] = nodeChanged;
            this.nodesChanged.add(chunkIndex);
        }
        this.type.elementType.tree_setToPackedNode(nodeChanged, index, value);
    }
    /**
     * Get all values of this array as Basic element type values, from index zero to `this.length - 1`
     */
    getAll() {
        if (!this.nodesPopulated) {
            const nodesPrev = this.nodes;
            const chunksNode = this.type.tree_getChunksNode(this.node);
            const chunkCount = Math.ceil(this._length / this.type.itemsPerChunk);
            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);
            // Re-apply changed nodes
            for (const index of this.nodesChanged) {
                this.nodes[index] = nodesPrev[index];
            }
            this.nodesPopulated = true;
        }
        const values = new Array(this._length);
        const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below
        const lenFullNodes = Math.floor(this._length / itemsPerChunk);
        const remainder = this._length % itemsPerChunk;
        // TODO Optimize: caching the variables used in the loop above it
        for (let n = 0; n < lenFullNodes; n++) {
            const leafNode = this.nodes[n];
            // TODO: Implement add a fast bulk packed element reader in the elementType
            // ```
            // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;
            // ```
            // if performance here is a problem
            for (let i = 0; i < itemsPerChunk; i++) {
                values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);
            }
        }
        if (remainder > 0) {
            const leafNode = this.nodes[lenFullNodes];
            for (let i = 0; i < remainder; i++) {
                values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);
            }
        }
        return values;
    }
    commit() {
        if (this.nodesChanged.size === 0) {
            return;
        }
        // Numerical sort ascending
        const indexes = Array.from(this.nodesChanged.keys()).sort((a, b) => a - b);
        const nodes = new Array(indexes.length);
        for (let i = 0; i < indexes.length; i++) {
            nodes[i] = this.nodes[indexes[i]];
        }
        const chunksNode = this.type.tree_getChunksNode(this._rootNode);
        // TODO: Ensure fast setNodesAtDepth() method is correct
        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);
        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);
        this.nodesChanged.clear();
        this.dirtyLength = false;
    }
    clearCache() {
        this.nodes = [];
        this.nodesPopulated = false;
        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there
        this.nodesChanged.clear();
        // Reset cached length only if it has been mutated
        if (this.dirtyLength) {
            this._length = this.type.tree_getLength(this._rootNode);
            this.dirtyLength = false;
        }
    }
}
exports.ArrayBasicTreeViewDU = ArrayBasicTreeViewDU;
//# sourceMappingURL=arrayBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayComposite.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5CarrayComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayCompositeTreeViewDU = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const abstract_1 = require("./abstract");
class ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {
    constructor(type, _rootNode, cache) {
        super();
        this.type = type;
        this._rootNode = _rootNode;
        this.viewsChanged = new Map();
        // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.
        // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that
        // mutations affect the cache already found in the parent object
        this.dirtyLength = false;
        if (cache) {
            this.nodes = cache.nodes;
            this.caches = cache.caches;
            this._length = cache.length;
            this.nodesPopulated = cache.nodesPopulated;
        }
        else {
            this.nodes = [];
            this.caches = [];
            this._length = this.type.tree_getLength(_rootNode);
            // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array
            this.nodesPopulated = this._length === 0;
        }
    }
    /**
     * Number of elements in the array. Equal to un-commited length of the array
     */
    get length() {
        return this._length;
    }
    get node() {
        return this._rootNode;
    }
    get cache() {
        return {
            nodes: this.nodes,
            caches: this.caches,
            length: this._length,
            nodesPopulated: this.nodesPopulated,
        };
    }
    /**
     * Get element at `index`. Returns a view of the Composite element type.
     *
     * NOTE: Assumes that any view created here will change and will call .commit() on it.
     * .get() should be used only for cases when something may mutate. To get all items without
     * triggering a .commit() in all them use .getAllReadOnly().
     */
    get(index) {
        const viewChanged = this.viewsChanged.get(index);
        if (viewChanged) {
            return viewChanged;
        }
        let node = this.nodes[index];
        if (node === undefined) {
            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);
            this.nodes[index] = node;
        }
        // Keep a reference to the new view to call .commit on it latter, only if mutable
        const view = this.type.elementType.getViewDU(node, this.caches[index]);
        if (this.type.elementType.isViewMutable) {
            this.viewsChanged.set(index, view);
        }
        // No need to persist the child's view cache since a second get returns this view instance.
        // The cache is only persisted on commit where the viewsChanged map is dropped.
        return view;
    }
    /**
     * Get element at `index`. Returns a view of the Composite element type.
     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.
     */
    getReadonly(index) {
        const viewChanged = this.viewsChanged.get(index);
        if (viewChanged) {
            return viewChanged;
        }
        let node = this.nodes[index];
        if (node === undefined) {
            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);
            this.nodes[index] = node;
        }
        return this.type.elementType.getViewDU(node, this.caches[index]);
    }
    // Did not implemented
    // `getReadonlyValue(index: number): ValueOf<ElementType>`
    // because it can break in unexpected ways if there are pending changes in this.viewsChanged.
    // This function could first check if `this.viewsChanged` has a view for `index` and commit it,
    // but that would be pretty slow, and the same result can be achieved with
    // `this.getReadonly(index).toValue()`
    /**
     * Set Composite element type `view` at `index`
     */
    set(index, view) {
        if (index >= this._length) {
            throw Error(`Error setting index over length ${index} > ${this._length}`);
        }
        // When setting a view:
        // - Not necessary to commit node
        // - Not necessary to persist cache
        // Just keeping a reference to the view in this.viewsChanged ensures consistency
        this.viewsChanged.set(index, view);
    }
    /**
     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand
     */
    getAllReadonly() {
        this.populateAllNodes();
        const views = new Array(this._length);
        for (let i = 0; i < this._length; i++) {
            views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);
        }
        return views;
    }
    /**
     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand
     */
    getAllReadonlyValues() {
        this.populateAllNodes();
        const values = new Array(this._length);
        for (let i = 0; i < this._length; i++) {
            values[i] = this.type.elementType.tree_toValue(this.nodes[i]);
        }
        return values;
    }
    commit() {
        if (this.viewsChanged.size === 0) {
            return;
        }
        const nodesChanged = [];
        for (const [index, view] of this.viewsChanged) {
            const node = this.type.elementType.commitViewDU(view);
            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal
            this.nodes[index] = node;
            nodesChanged.push({ index, node });
            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'
            const cache = this.type.elementType.cacheOfViewDU(view);
            if (cache)
                this.caches[index] = cache;
        }
        // TODO: Optimize to loop only once, Numerical sort ascending
        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);
        const indexes = nodesChangedSorted.map((entry) => entry.index);
        const nodes = nodesChangedSorted.map((entry) => entry.node);
        const chunksNode = this.type.tree_getChunksNode(this._rootNode);
        // TODO: Ensure fast setNodesAtDepth() method is correct
        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);
        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);
        this.viewsChanged.clear();
        this.dirtyLength = false;
    }
    clearCache() {
        this.nodes = [];
        this.caches = [];
        this.nodesPopulated = false;
        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.
        // However preserving _SOME_ caches results in a very unpredictable experience.
        this.viewsChanged.clear();
        // Reset cached length only if it has been mutated
        if (this.dirtyLength) {
            this._length = this.type.tree_getLength(this._rootNode);
            this.dirtyLength = false;
        }
    }
    populateAllNodes() {
        // If there's uncommited changes it may break.
        // this.length can be increased but this._rootNode doesn't have that item
        if (this.viewsChanged.size > 0) {
            throw Error("Must commit changes before reading all nodes");
        }
        if (!this.nodesPopulated) {
            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);
            this.nodesPopulated = true;
        }
    }
}
exports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;
//# sourceMappingURL=arrayComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\bitArray.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5CbitArray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitArrayTreeViewDU = void 0;
const abstract_1 = require("./abstract");
/**
 * Thin wrapper around BitArray to upstream changes after `this.commit()`
 */
class BitArrayTreeViewDU extends abstract_1.TreeViewDU {
    constructor(type, _rootNode) {
        super();
        this.type = type;
        this._rootNode = _rootNode;
        /** Cached BitArray instance computed only on demand */
        this._bitArray = null;
    }
    get node() {
        return this._rootNode;
    }
    get cache() {
        return;
    }
    commit() {
        if (this._bitArray !== null) {
            this._rootNode = this.type.value_toTree(this._bitArray);
        }
    }
    // Wrapped API from BitArray
    /** @see BitArray.uint8Array */
    get uint8Array() {
        return this.bitArray.uint8Array;
    }
    /** @see BitArray.bitLen */
    get bitLen() {
        return this.bitArray.bitLen;
    }
    /** @see BitArray.get */
    get(bitIndex) {
        return this.bitArray.get(bitIndex);
    }
    /** @see BitArray.set */
    set(bitIndex, bit) {
        this.bitArray.set(bitIndex, bit);
    }
    /** @see BitArray.mergeOrWith */
    mergeOrWith(bitArray2) {
        this.bitArray.mergeOrWith(bitArray2);
    }
    /** @see BitArray.intersectValues */
    intersectValues(values) {
        return this.bitArray.intersectValues(values);
    }
    /** @see BitArray.getTrueBitIndexes */
    getTrueBitIndexes() {
        return this.bitArray.getTrueBitIndexes();
    }
    /** @see BitArray.getSingleTrueBit */
    getSingleTrueBit() {
        return this.bitArray.getSingleTrueBit();
    }
    /** @see BitArray.toBoolArray */
    toBoolArray() {
        return this.bitArray.toBoolArray();
    }
    /** Lazily computed bitArray instance */
    get bitArray() {
        if (this._bitArray === null) {
            this._bitArray = this.type.tree_toValue(this._rootNode);
        }
        return this._bitArray;
    }
    clearCache() {
        this._bitArray = null;
    }
}
exports.BitArrayTreeViewDU = BitArrayTreeViewDU;
//# sourceMappingURL=bitArray.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\bitArray.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\container.js", {"../type/basic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js","../type/composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5Ccontainer.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContainerTreeViewDUClass = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const basic_1 = require("../type/basic");
const composite_1 = require("../type/composite");
const abstract_1 = require("./abstract");
class ContainerTreeViewDU extends abstract_1.TreeViewDU {
    constructor(type, _rootNode, cache) {
        super();
        this.type = type;
        this._rootNode = _rootNode;
        this.nodes = [];
        this.nodesChanged = new Set();
        this.viewsChanged = new Map();
        if (cache) {
            this.nodes = cache.nodes;
            this.caches = cache.caches;
            this.nodesPopulated = cache.nodesPopulated;
        }
        else {
            this.nodes = [];
            this.caches = [];
            this.nodesPopulated = false;
        }
    }
    get node() {
        return this._rootNode;
    }
    get cache() {
        return {
            nodes: this.nodes,
            caches: this.caches,
            nodesPopulated: this.nodesPopulated,
        };
    }
    commit() {
        if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {
            return;
        }
        const nodesChanged = [];
        for (const [index, view] of this.viewsChanged) {
            const fieldType = this.type.fieldsEntries[index].fieldType;
            const node = fieldType.commitViewDU(view);
            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal
            this.nodes[index] = node;
            nodesChanged.push({ index, node });
            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'
            const cache = fieldType.cacheOfViewDU(view);
            if (cache)
                this.caches[index] = cache;
        }
        for (const index of this.nodesChanged) {
            nodesChanged.push({ index, node: this.nodes[index] });
        }
        // TODO: Optimize to loop only once, Numerical sort ascending
        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);
        const indexes = nodesChangedSorted.map((entry) => entry.index);
        const nodes = nodesChangedSorted.map((entry) => entry.node);
        this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);
        this.nodesChanged.clear();
        this.viewsChanged.clear();
    }
    clearCache() {
        this.nodes = [];
        this.caches = [];
        this.nodesPopulated = false;
        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there
        this.nodesChanged.clear();
        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.
        // However preserving _SOME_ caches results in a very unpredictable experience.
        this.viewsChanged.clear();
    }
}
function getContainerTreeViewDUClass(type) {
    class CustomContainerTreeViewDU extends ContainerTreeViewDU {
    }
    // Dynamically define prototype methods
    for (let index = 0; index < type.fieldsEntries.length; index++) {
        const { fieldName, fieldType } = type.fieldsEntries[index];
        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).
        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,
        // and use the cached views array to store the new node.
        if (basic_1.isBasicType(fieldType)) {
            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // TODO: Review the memory cost of this closures
                get: function () {
                    // First walk through the tree to get the root node for that index
                    let node = this.nodes[index];
                    if (node === undefined) {
                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);
                        this.nodes[index] = node;
                    }
                    return fieldType.tree_getFromNode(node);
                },
                set: function (value) {
                    // Create new node if current leafNode is not dirty
                    let nodeChanged;
                    if (this.nodesChanged.has(index)) {
                        // TODO: This assumes that node has already been populated
                        nodeChanged = this.nodes[index];
                    }
                    else {
                        const nodePrev = (this.nodes[index] ?? persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index));
                        nodeChanged = nodePrev.clone();
                        // Store the changed node in the nodes cache
                        this.nodes[index] = nodeChanged;
                        this.nodesChanged.add(index);
                    }
                    fieldType.tree_setToNode(nodeChanged, value);
                },
            });
        }
        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must
        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to
        // set it to the parent tree in the field gindex.
        else if (composite_1.isCompositeType(fieldType)) {
            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // Returns TreeViewDU of fieldName
                get: function () {
                    const viewChanged = this.viewsChanged.get(index);
                    if (viewChanged) {
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                        return viewChanged;
                    }
                    let node = this.nodes[index];
                    if (node === undefined) {
                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);
                        this.nodes[index] = node;
                    }
                    // Keep a reference to the new view to call .commit on it latter, only if mutable
                    const view = fieldType.getViewDU(node, this.caches[index]);
                    if (fieldType.isViewMutable) {
                        this.viewsChanged.set(index, view);
                    }
                    // No need to persist the child's view cache since a second get returns this view instance.
                    // The cache is only persisted on commit where the viewsChanged map is dropped.
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return view;
                },
                // Expects TreeViewDU of fieldName
                set: function (view) {
                    // When setting a view:
                    // - Not necessary to commit node
                    // - Not necessary to persist cache
                    // Just keeping a reference to the view in this.viewsChanged ensures consistency
                    this.viewsChanged.set(index, view);
                },
            });
        }
        // Should never happen
        else {
            /* istanbul ignore next - unreachable code */
            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);
        }
    }
    // Change class name
    Object.defineProperty(CustomContainerTreeViewDU, "name", { value: type.typeName, writable: false });
    return CustomContainerTreeViewDU;
}
exports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;
//# sourceMappingURL=container.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\container.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\containerNodeStruct.js", {"../type/composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5CcontainerNodeStruct.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContainerTreeViewDUClass = void 0;
const composite_1 = require("../type/composite");
const abstract_1 = require("./abstract");
/* eslint-disable @typescript-eslint/member-ordering */
class ContainerTreeViewDU extends abstract_1.TreeViewDU {
    constructor(type, node) {
        super();
        this.type = type;
        this.valueChanged = null;
        this._rootNode = node;
    }
    get node() {
        return this._rootNode;
    }
    get cache() {
        return;
    }
    commit() {
        if (this.valueChanged === null) {
            return;
        }
        const value = this.valueChanged;
        this.valueChanged = null;
        this._rootNode = this.type.value_toTree(value);
    }
    clearCache() {
        this.valueChanged = null;
    }
}
function getContainerTreeViewDUClass(type) {
    class CustomContainerTreeViewDU extends ContainerTreeViewDU {
    }
    // Dynamically define prototype methods
    for (let index = 0; index < type.fieldsEntries.length; index++) {
        const { fieldName, fieldType } = type.fieldsEntries[index];
        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).
        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,
        // and use the cached views array to store the new node.
        if (fieldType.isBasic) {
            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // TODO: Review the memory cost of this closures
                get: function () {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return (this.valueChanged || this._rootNode.value)[fieldName];
                },
                set: function (value) {
                    if (this.valueChanged === null) {
                        this.valueChanged = this.type.clone(this._rootNode.value);
                    }
                    this.valueChanged[fieldName] = value;
                },
            });
        }
        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must
        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to
        // set it to the parent tree in the field gindex.
        else if (composite_1.isCompositeType(fieldType)) {
            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // Returns TreeViewDU of fieldName
                get: function () {
                    const value = this.valueChanged || this._rootNode.value;
                    return fieldType.toViewDU(value[fieldName]);
                },
                // Expects TreeViewDU of fieldName
                set: function (view) {
                    if (this.valueChanged === null) {
                        this.valueChanged = this.type.clone(this._rootNode.value);
                    }
                    const value = fieldType.toValueFromViewDU(view);
                    this.valueChanged[fieldName] = value;
                },
            });
        }
        // Should never happen
        else {
            /* istanbul ignore next - unreachable code */
            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);
        }
    }
    // Change class name
    Object.defineProperty(CustomContainerTreeViewDU, "name", { value: type.typeName, writable: false });
    return CustomContainerTreeViewDU;
}
exports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;
//# sourceMappingURL=containerNodeStruct.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\containerNodeStruct.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\listBasic.js", {"./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayBasic.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5ClistBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBasicTreeViewDU = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const arrayBasic_1 = require("./arrayBasic");
class ListBasicTreeViewDU extends arrayBasic_1.ArrayBasicTreeViewDU {
    constructor(type, _rootNode, cache) {
        super(type, _rootNode, cache);
        this.type = type;
        this._rootNode = _rootNode;
    }
    /**
     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length
     */
    push(value) {
        if (this._length >= this.type.limit) {
            throw Error("Error pushing over limit");
        }
        // Mutate length before .set()
        this.dirtyLength = true;
        const index = this._length++;
        // If in new node..
        if (index % this.type.itemsPerChunk === 0) {
            // Set a zero node to the nodes array to avoid a navigation downwards in .set()
            const chunkIndex = Math.floor(index / this.type.itemsPerChunk);
            this.nodes[chunkIndex] = persistent_merkle_tree_1.zeroNode(0);
        }
        this.set(index, value);
    }
}
exports.ListBasicTreeViewDU = ListBasicTreeViewDU;
//# sourceMappingURL=listBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\listBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\listComposite.js", {"./arrayComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\arrayComposite.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5CviewDU%5ClistComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCompositeTreeViewDU = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const arrayComposite_1 = require("./arrayComposite");
class ListCompositeTreeViewDU extends arrayComposite_1.ArrayCompositeTreeViewDU {
    constructor(type, _rootNode, cache) {
        super(type, _rootNode, cache);
        this.type = type;
        this._rootNode = _rootNode;
    }
    /**
     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length
     */
    push(view) {
        if (this._length >= this.type.limit) {
            throw Error("Error pushing over limit");
        }
        this.dirtyLength = true;
        const index = this._length++;
        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeViewDU.set() doesn't do a get node
        this.set(index, view);
    }
    /**
     * Returns a new ListCompositeTreeViewDU instance with the values from 0 to `index`.
     * The new list is equivalent to (pseudo-code):
     *
     * ```ts
     * const nodes = getChunkNodes()
     * return listFromChunkNodes(nodes.slice(0, index + 1))
     * ```
     *
     * To achieve it, rebinds the underlying tree zero-ing all nodes right of `index`.
     *
     * Note: Using index = -1, returns an empty list of length 0.
     */
    sliceTo(index) {
        // Commit before getting rootNode to ensure all pending data is in the rootNode
        this.commit();
        const rootNode = this._rootNode;
        const length = this.type.tree_getLength(rootNode);
        // All nodes beyond length are already zero
        // Array of length 2: [X,X,0,0], for index >= 1 no action needed
        if (index >= length - 1) {
            return this;
        }
        // Since this is a List, do the treeZeroAfterIndex operation on the chunks tree
        const chunksNode = this.type.tree_getChunksNode(rootNode);
        const newChunksNode = persistent_merkle_tree_1.treeZeroAfterIndex(chunksNode, this.type.chunkDepth, index);
        // Must set new length and commit to tree to restore the same tree at that index
        const newLength = index + 1;
        const newRootNode = this.type.tree_setChunksNode(rootNode, newChunksNode, newLength);
        return this.type.getViewDU(newRootNode);
    }
}
exports.ListCompositeTreeViewDU = ListCompositeTreeViewDU;
//# sourceMappingURL=listComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\viewDU\\listComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js", {"@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5Cabstract.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeView = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
/**
 * A Tree View is a wrapper around a type and an SSZ Tree that contains:
 * - data merkleized
 * - a hook to its parent Tree to propagate changes upwards
 *
 * **View**
 * - Best for simple usage where performance is NOT important
 * - Applies changes immediately
 * - Has reference to parent tree
 * - Does NOT have caches for fast get / set ops
 */
class TreeView {
    /** Serialize view to binary data */
    serialize() {
        const output = new Uint8Array(this.type.tree_serializedSize(this.node));
        const dataView = new DataView(output.buffer, output.byteOffset, output.byteLength);
        this.type.tree_serializeToBytes({ uint8Array: output, dataView }, 0, this.node);
        return output;
    }
    /**
     * Merkleize view and compute its hashTreeRoot.
     *
     * See spec for definition of hashTreeRoot:
     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization
     */
    hashTreeRoot() {
        return this.node.root;
    }
    /**
     * Create a Merkle multiproof on this view's data.
     * A `path` is an array of 'JSON' paths into the data
     * @example
     * ```ts
     * state.createProof([
     *   ["validators", 1234, "slashed"],
     *   ["genesisTime"]
     * ])
     * ```
     *
     * See spec for definition of merkle multiproofs:
     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/merkle-proofs.md#merkle-multiproofs
     */
    createProof(paths) {
        return this.type.tree_createProof(this.node, paths);
    }
    /**
     * Transform the view into a value, from the current node instance.
     * For ViewDU returns the value of the committed data, so call .commit() before if there are pending changes.
     */
    toValue() {
        return this.type.tree_toValue(this.node);
    }
    /** Return a new Tree View instance referencing the same internal `Node`. Drops its existing `Tree` hook if any */
    clone() {
        return this.type.getView(new persistent_merkle_tree_1.Tree(this.node));
    }
}
exports.TreeView = TreeView;
//# sourceMappingURL=abstract.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayBasic.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5CarrayBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayBasicTreeView = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const abstract_1 = require("./abstract");
class ArrayBasicTreeView extends abstract_1.TreeView {
    constructor(type, tree) {
        super();
        this.type = type;
        this.tree = tree;
    }
    /**
     * Number of elements in the array. Equal to the Uint32 value of the Tree's length node
     */
    get length() {
        return this.type.tree_getLength(this.tree.rootNode);
    }
    get node() {
        return this.tree.rootNode;
    }
    /**
     * Get element at `index`. Returns the Basic element type value directly
     */
    get(index) {
        // First walk through the tree to get the root node for that index
        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);
        const leafNode = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return this.type.elementType.tree_getFromPackedNode(leafNode, index);
    }
    /**
     * Set Basic element type `value` at `index`
     */
    set(index, value) {
        const length = this.length;
        if (index >= length) {
            throw Error(`Error setting index over length ${index} > ${length}`);
        }
        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);
        const leafNodePrev = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);
        // Create a new node to preserve immutability
        const leafNode = leafNodePrev.clone();
        this.type.elementType.tree_setToPackedNode(leafNode, index, value);
        // Commit immediately
        this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);
    }
    /**
     * Get all values of this array as Basic element type values, from index zero to `this.length - 1`
     */
    getAll() {
        const length = this.length;
        const chunksNode = this.type.tree_getChunksNode(this.node);
        const chunkCount = Math.ceil(length / this.type.itemsPerChunk);
        const leafNodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);
        const values = new Array(length);
        const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below
        const lenFullNodes = Math.floor(length / itemsPerChunk);
        const remainder = length % itemsPerChunk;
        for (let n = 0; n < lenFullNodes; n++) {
            const leafNode = leafNodes[n];
            // TODO: Implement add a fast bulk packed element reader in the elementType
            // ```
            // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;
            // ```
            // if performance here is a problem
            for (let i = 0; i < itemsPerChunk; i++) {
                values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);
            }
        }
        if (remainder > 0) {
            const leafNode = leafNodes[lenFullNodes];
            for (let i = 0; i < remainder; i++) {
                values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);
            }
        }
        return values;
    }
}
exports.ArrayBasicTreeView = ArrayBasicTreeView;
//# sourceMappingURL=arrayBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayComposite.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5CarrayComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayCompositeTreeView = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const abstract_1 = require("./abstract");
class ArrayCompositeTreeView extends abstract_1.TreeView {
    constructor(type, tree) {
        super();
        this.type = type;
        this.tree = tree;
    }
    /**
     * Number of elements in the array. Equal to the Uint32 value of the Tree's length node
     */
    get length() {
        return this.type.tree_getLength(this.tree.rootNode);
    }
    /**
     * Returns the View's Tree rootNode
     */
    get node() {
        return this.tree.rootNode;
    }
    /**
     * Get element at `index`. Returns a view of the Composite element type
     */
    get(index) {
        // TODO: Optimize without bitstring
        const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);
        const subtree = this.tree.getSubtree(gindex);
        return this.type.elementType.getView(subtree);
    }
    /**
     * Get element at `index`. Returns a view of the Composite element type.
     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.
     */
    getReadonly(index) {
        // TODO: Optimize without bitstring
        const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);
        // tree.getSubtree but without the hook
        const subtree = new persistent_merkle_tree_1.Tree(this.tree.getNode(gindex));
        return this.type.elementType.getView(subtree);
    }
    /**
     * Set Composite element type `view` at `index`
     */
    set(index, view) {
        const length = this.length;
        if (index >= length) {
            throw Error(`Error setting index over length ${index} > ${length}`);
        }
        const node = this.type.elementType.commitView(view);
        this.tree.setNodeAtDepth(this.type.depth, index, node);
    }
    /**
     * Returns an array of views of all elements in the array, from index zero to `this.length - 1`.
     * The returned views don't have a parent hook to this View's Tree, so changes in the returned views won't be
     * propagated upwards. To get linked element Views use `this.get()`
     */
    getAllReadonly() {
        const length = this.length;
        const chunksNode = this.type.tree_getChunksNode(this.node);
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, length);
        const views = new Array(length);
        for (let i = 0; i < length; i++) {
            // TODO: Optimize
            views[i] = this.type.elementType.getView(new persistent_merkle_tree_1.Tree(nodes[i]));
        }
        return views;
    }
    /**
     * Returns an array of values of all elements in the array, from index zero to `this.length - 1`.
     * The returned values are not Views so any changes won't be propagated upwards.
     * To get linked element Views use `this.get()`
     */
    getAllReadonlyValues() {
        const length = this.length;
        const chunksNode = this.type.tree_getChunksNode(this.node);
        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, length);
        const values = new Array(length);
        for (let i = 0; i < length; i++) {
            values[i] = this.type.elementType.tree_toValue(nodes[i]);
        }
        return values;
    }
}
exports.ArrayCompositeTreeView = ArrayCompositeTreeView;
//# sourceMappingURL=arrayComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\bitArray.js", {"./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5CbitArray.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitArrayTreeView = void 0;
const abstract_1 = require("./abstract");
/**
 * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`
 */
class BitArrayTreeView extends abstract_1.TreeView {
    constructor(type, tree) {
        super();
        this.type = type;
        this.tree = tree;
        this.bitArray = type.tree_toValue(tree.rootNode);
    }
    get node() {
        return this.tree.rootNode;
    }
    // Wrapped API from BitArray
    /** @see BitArray.uint8Array */
    get uint8Array() {
        return this.bitArray.uint8Array;
    }
    /** @see BitArray.bitLen */
    get bitLen() {
        return this.bitArray.bitLen;
    }
    /** @see BitArray.get */
    get(bitIndex) {
        return this.bitArray.get(bitIndex);
    }
    /** @see BitArray.set */
    set(bitIndex, bit) {
        this.bitArray.set(bitIndex, bit);
        // Upstream changes
        this.tree.rootNode = this.type.value_toTree(this.bitArray);
    }
    /** @see BitArray.mergeOrWith */
    mergeOrWith(bitArray2) {
        this.bitArray.mergeOrWith(bitArray2);
    }
    /** @see BitArray.intersectValues */
    intersectValues(values) {
        return this.bitArray.intersectValues(values);
    }
    /** @see BitArray.getTrueBitIndexes */
    getTrueBitIndexes() {
        return this.bitArray.getTrueBitIndexes();
    }
    /** @see BitArray.getSingleTrueBit */
    getSingleTrueBit() {
        return this.bitArray.getSingleTrueBit();
    }
    /** @see BitArray.toBoolArray */
    toBoolArray() {
        return this.bitArray.toBoolArray();
    }
}
exports.BitArrayTreeView = BitArrayTreeView;
//# sourceMappingURL=bitArray.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\bitArray.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\container.js", {"../type/basic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\basic.js","../type/composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5Ccontainer.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContainerTreeViewClass = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const basic_1 = require("../type/basic");
const composite_1 = require("../type/composite");
const abstract_1 = require("./abstract");
/**
 * Intented usage:
 *
 * - Get initial BeaconState from disk.
 * - Before applying next block, switch to mutable
 * - Get some field, create a view in mutable mode
 * - Do modifications of the state in the state transition function
 * - When done, commit and apply new root node once to og BeaconState
 * - However, keep all the caches and transfer them to the new BeaconState
 *
 * Questions:
 * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively
 *   iterate the entire data structure and views
 *
 */
class ContainerTreeView extends abstract_1.TreeView {
    constructor(type, tree) {
        super();
        this.type = type;
        this.tree = tree;
    }
    get node() {
        return this.tree.rootNode;
    }
}
function getContainerTreeViewClass(type) {
    class CustomContainerTreeView extends ContainerTreeView {
    }
    // Dynamically define prototype methods
    for (let index = 0; index < type.fieldsEntries.length; index++) {
        const { fieldName, fieldType } = type.fieldsEntries[index];
        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).
        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,
        // and use the cached views array to store the new node.
        if (basic_1.isBasicType(fieldType)) {
            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // TODO: Review the memory cost of this closures
                get: function () {
                    const leafNode = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);
                    return fieldType.tree_getFromNode(leafNode);
                },
                set: function (value) {
                    const leafNodePrev = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);
                    const leafNode = leafNodePrev.clone();
                    fieldType.tree_setToNode(leafNode, value);
                    this.tree.setNodeAtDepth(this.type.depth, index, leafNode);
                },
            });
        }
        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must
        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to
        // set it to the parent tree in the field gindex.
        else if (composite_1.isCompositeType(fieldType)) {
            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // Returns TreeView of fieldName
                get: function () {
                    const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);
                    return fieldType.getView(this.tree.getSubtree(gindex));
                },
                // Expects TreeView of fieldName
                set: function (value) {
                    const node = fieldType.commitView(value);
                    this.tree.setNodeAtDepth(this.type.depth, index, node);
                },
            });
        }
        // Should never happen
        else {
            /* istanbul ignore next - unreachable code */
            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);
        }
    }
    // Change class name
    Object.defineProperty(CustomContainerTreeView, "name", { value: type.typeName, writable: false });
    return CustomContainerTreeView;
}
exports.getContainerTreeViewClass = getContainerTreeViewClass;
//# sourceMappingURL=container.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\container.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\containerNodeStruct.js", {"../branchNodeStruct":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\branchNodeStruct.js","../type/composite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\type\\composite.js","./abstract":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\abstract.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5CcontainerNodeStruct.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContainerTreeViewClass = void 0;
const composite_1 = require("../type/composite");
const branchNodeStruct_1 = require("../branchNodeStruct");
const abstract_1 = require("./abstract");
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * Intented usage:
 *
 * - Get initial BeaconState from disk.
 * - Before applying next block, switch to mutable
 * - Get some field, create a view in mutable mode
 * - Do modifications of the state in the state transition function
 * - When done, commit and apply new root node once to og BeaconState
 * - However, keep all the caches and transfer them to the new BeaconState
 *
 * Questions:
 * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively
 *   iterate the entire data structure and views
 *
 */
class ContainerTreeView extends abstract_1.TreeView {
    constructor(type, tree) {
        super();
        this.type = type;
        this.tree = tree;
    }
    get node() {
        return this.tree.rootNode;
    }
}
function getContainerTreeViewClass(type) {
    class CustomContainerTreeView extends ContainerTreeView {
    }
    // Dynamically define prototype methods
    for (let index = 0; index < type.fieldsEntries.length; index++) {
        const { fieldName, fieldType } = type.fieldsEntries[index];
        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).
        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,
        // and use the cached views array to store the new node.
        if (fieldType.isBasic) {
            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // TODO: Review the memory cost of this closures
                get: function () {
                    return this.tree.rootNode.value[fieldName];
                },
                set: function (value) {
                    const node = this.tree.rootNode;
                    const newNodeValue = this.type.clone(node.value);
                    // TODO: Should this check for valid field name? Benchmark the cost
                    newNodeValue[fieldName] = value;
                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node["valueToNode"], newNodeValue);
                },
            });
        }
        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must
        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to
        // set it to the parent tree in the field gindex.
        else if (composite_1.isCompositeType(fieldType)) {
            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {
                configurable: false,
                enumerable: true,
                // Returns TreeView of fieldName
                get: function () {
                    const { value } = this.tree.rootNode;
                    return fieldType.toView(value[fieldName]);
                },
                // Expects TreeView of fieldName
                set: function (view) {
                    const node = this.tree.rootNode;
                    const newNodeValue = this.type.clone(node.value);
                    // TODO: Should this check for valid field name? Benchmark the cost
                    newNodeValue[fieldName] = fieldType.toValueFromView(view);
                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node["valueToNode"], newNodeValue);
                },
            });
        }
        // Should never happen
        else {
            /* istanbul ignore next - unreachable code */
            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);
        }
    }
    // Change class name
    Object.defineProperty(CustomContainerTreeView, "name", { value: type.typeName, writable: false });
    return CustomContainerTreeView;
}
exports.getContainerTreeViewClass = getContainerTreeViewClass;
//# sourceMappingURL=containerNodeStruct.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\containerNodeStruct.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\listBasic.js", {"./arrayBasic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayBasic.js","@chainsafe/persistent-merkle-tree":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\persistent-merkle-tree\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5ClistBasic.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBasicTreeView = void 0;
const persistent_merkle_tree_1 = require("@chainsafe/persistent-merkle-tree");
const arrayBasic_1 = require("./arrayBasic");
class ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {
    constructor(type, tree) {
        super(type, tree);
        this.type = type;
        this.tree = tree;
    }
    /**
     * Adds one value element at the end of the array and adds 1 to the current Tree length.
     */
    push(value) {
        const length = this.length;
        if (length >= this.type.limit) {
            throw Error("Error pushing over limit");
        }
        this.type.tree_setLength(this.tree, length + 1);
        // If in new node..
        if (length % this.type.itemsPerChunk === 0) {
            // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()
            // Benchmark the cost of that navigation vs the extra math here
            // TODO: Optimize: prevent double initialization
            const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();
            this.type.elementType.tree_setToPackedNode(leafNode, length, value);
            // Commit immediately
            const chunkIndex = Math.floor(length / this.type.itemsPerChunk);
            this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);
        }
        else {
            // Re-use .set() since no new node is added
            this.set(length, value);
        }
    }
}
exports.ListBasicTreeView = ListBasicTreeView;
//# sourceMappingURL=listBasic.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\listBasic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\listComposite.js", {"./arrayComposite":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\arrayComposite.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@chainsafe%5Cssz%5Clib%5Cview%5ClistComposite.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCompositeTreeView = void 0;
const arrayComposite_1 = require("./arrayComposite");
class ListCompositeTreeView extends arrayComposite_1.ArrayCompositeTreeView {
    constructor(type, tree) {
        super(type, tree);
        this.type = type;
        this.tree = tree;
    }
    /**
     * Adds one view element at the end of the array and adds 1 to the current Tree length.
     */
    push(view) {
        const length = this.length;
        if (length >= this.type.limit) {
            throw Error("Error pushing over limit");
        }
        this.type.tree_setLength(this.tree, length + 1);
        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeView.set() doesn't do a get node
        this.set(length, view);
    }
}
exports.ListCompositeTreeView = ListCompositeTreeView;
//# sourceMappingURL=listComposite.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@chainsafe/ssz",file:"node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\view\\listComposite.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\goerli.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Cgoerli.json
      return function (require, module, exports) {
module.exports={
    "name": "goerli",
    "chainId": 5,
    "networkId": 5,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "Cross-client PoA test network",
    "url": "https://github.com/goerli/testnet",
    "genesis": {
        "timestamp": "0x5c51a607",
        "gasLimit": 10485760,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "istanbul",
            "block": 1561651,
            "forkHash": "0xc25efa5c"
        },
        {
            "name": "berlin",
            "block": 4460644,
            "forkHash": "0x757a1c47"
        },
        {
            "name": "london",
            "block": 5062605,
            "forkHash": "0xb8c6299d"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818",
            "name": "merge",
            "ttd": "10790000",
            "block": 7382819,
            "forkHash": "0xb8c6299d"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "51.141.78.53",
            "port": 30303,
            "id": "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
            "location": "",
            "comment": "Upstream bootnode 1"
        },
        {
            "ip": "13.93.54.137",
            "port": 30303,
            "id": "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
            "location": "",
            "comment": "Upstream bootnode 2"
        },
        {
            "ip": "94.237.54.114",
            "port": 30313,
            "id": "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
            "location": "",
            "comment": "Upstream bootnode 3"
        },
        {
            "ip": "18.218.250.66",
            "port": 30313,
            "id": "b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",
            "location": "",
            "comment": "Upstream bootnode 4"
        },
        {
            "ip": "3.11.147.67",
            "port": 30303,
            "id": "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
            "location": "",
            "comment": "Ethereum Foundation bootnode"
        },
        {
            "ip": "51.15.116.226",
            "port": 30303,
            "id": "a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        },
        {
            "ip": "51.15.119.157",
            "port": 30303,
            "id": "807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        },
        {
            "ip": "51.15.119.157",
            "port": 40303,
            "id": "a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\goerli.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\mainnet.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Cmainnet.json
      return function (require, module, exports) {
module.exports={
    "name": "mainnet",
    "chainId": 1,
    "networkId": 1,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "The Ethereum main chain",
    "url": "https://ethstats.net/",
    "genesis": {
        "gasLimit": 5000,
        "difficulty": 17179869184,
        "nonce": "0x0000000000000042",
        "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfc64ec04"
        },
        {
            "name": "homestead",
            "block": 1150000,
            "forkHash": "0x97c2c34c"
        },
        {
            "name": "dao",
            "block": 1920000,
            "forkHash": "0x91d1f948"
        },
        {
            "name": "tangerineWhistle",
            "block": 2463000,
            "forkHash": "0x7a64da13"
        },
        {
            "name": "spuriousDragon",
            "block": 2675000,
            "forkHash": "0x3edd5b10"
        },
        {
            "name": "byzantium",
            "block": 4370000,
            "forkHash": "0xa00bc324"
        },
        {
            "name": "constantinople",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "petersburg",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "istanbul",
            "block": 9069000,
            "forkHash": "0x879d6e30"
        },
        {
            "name": "muirGlacier",
            "block": 9200000,
            "forkHash": "0xe029e991"
        },
        {
            "name": "berlin",
            "block": 12244000,
            "forkHash": "0x0eb440f6"
        },
        {
            "name": "london",
            "block": 12965000,
            "forkHash": "0xb715077d"
        },
        {
            "name": "arrowGlacier",
            "block": 13773000,
            "forkHash": "0x20c327fc"
        },
        {
            "name": "grayGlacier",
            "block": 15050000,
            "forkHash": "0xf0afd0e3"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393",
            "name": "merge",
            "ttd": "58750000000000000000000",
            "block": 15537394,
            "forkHash": "0xf0afd0e3"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "18.138.108.67",
            "port": 30303,
            "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
            "location": "ap-southeast-1-001",
            "comment": "bootnode-aws-ap-southeast-1-001"
        },
        {
            "ip": "3.209.45.79",
            "port": 30303,
            "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
            "location": "us-east-1-001",
            "comment": "bootnode-aws-us-east-1-001"
        },
        {
            "ip": "34.255.23.113",
            "port": 30303,
            "id": "ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758",
            "location": "eu-west-1-001",
            "comment": "bootnode-aws-eu-west-1-001"
        },
        {
            "ip": "35.158.244.151",
            "port": 30303,
            "id": "279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8",
            "location": "eu-central-1-001",
            "comment": "bootnode-aws-eu-central-1-001"
        },
        {
            "ip": "52.187.207.27",
            "port": 30303,
            "id": "8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a",
            "location": "australiaeast-001",
            "comment": "bootnode-azure-australiaeast-001"
        },
        {
            "ip": "191.234.162.198",
            "port": 30303,
            "id": "103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1",
            "location": "brazilsouth-001",
            "comment": "bootnode-azure-brazilsouth-001"
        },
        {
            "ip": "52.231.165.108",
            "port": 30303,
            "id": "715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8",
            "location": "koreasouth-001",
            "comment": "bootnode-azure-koreasouth-001"
        },
        {
            "ip": "104.42.217.25",
            "port": 30303,
            "id": "5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f",
            "location": "westus-001",
            "comment": "bootnode-azure-westus-001"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\mainnet.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\rinkeby.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Crinkeby.json
      return function (require, module, exports) {
module.exports={
    "name": "rinkeby",
    "chainId": 4,
    "networkId": 4,
    "defaultHardfork": "london",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "PoA test network",
    "url": "https://www.rinkeby.io",
    "genesis": {
        "timestamp": "0x58ee40ba",
        "gasLimit": 4700000,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x3b8e0691"
        },
        {
            "name": "homestead",
            "block": 1,
            "forkHash": "0x60949295"
        },
        {
            "name": "tangerineWhistle",
            "block": 2,
            "forkHash": "0x8bde40dd"
        },
        {
            "name": "spuriousDragon",
            "block": 3,
            "forkHash": "0xcb3a64bb"
        },
        {
            "name": "byzantium",
            "block": 1035301,
            "forkHash": "0x8d748b57"
        },
        {
            "name": "constantinople",
            "block": 3660663,
            "forkHash": "0xe49cab14"
        },
        {
            "name": "petersburg",
            "block": 4321234,
            "forkHash": "0xafec6b27"
        },
        {
            "name": "istanbul",
            "block": 5435345,
            "forkHash": "0xcbdb8838"
        },
        {
            "name": "berlin",
            "block": 8290928,
            "forkHash": "0x6910c8bd"
        },
        {
            "name": "london",
            "block": 8897988,
            "forkHash": "0x8e29f2f3"
        },
        {
            "name": "merge",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "52.169.42.101",
            "port": 30303,
            "id": "a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",
            "location": "",
            "comment": "IE"
        },
        {
            "ip": "52.3.158.184",
            "port": 30303,
            "id": "343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",
            "location": "",
            "comment": "INFURA"
        },
        {
            "ip": "159.89.28.211",
            "port": 30303,
            "id": "b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",
            "location": "",
            "comment": "AKASHA"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\rinkeby.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\ropsten.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Cropsten.json
      return function (require, module, exports) {
module.exports={
    "name": "ropsten",
    "chainId": 3,
    "networkId": 3,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "PoW test network",
    "url": "https://github.com/ethereum/ropsten",
    "genesis": {
        "gasLimit": 16777216,
        "difficulty": 1048576,
        "nonce": "0x0000000000000042",
        "extraData": "0x3535353535353535353535353535353535353535353535353535353535353535"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "spuriousDragon",
            "block": 10,
            "forkHash": "0x63760190"
        },
        {
            "name": "byzantium",
            "block": 1700000,
            "forkHash": "0x3ea159c7"
        },
        {
            "name": "constantinople",
            "block": 4230000,
            "forkHash": "0x97b544f3"
        },
        {
            "name": "petersburg",
            "block": 4939394,
            "forkHash": "0xd6e2149b"
        },
        {
            "name": "istanbul",
            "block": 6485846,
            "forkHash": "0x4bc66396"
        },
        {
            "name": "muirGlacier",
            "block": 7117117,
            "forkHash": "0x6727ef90"
        },
        {
            "name": "berlin",
            "block": 9812189,
            "forkHash": "0xa157d377"
        },
        {
            "name": "london",
            "block": 10499401,
            "forkHash": "0x7119b6b3"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge",
            "name": "merge",
            "ttd": "50000000000000000",
            "block": null,
            "forkHash": "0x7119b6b3"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "52.176.7.10",
            "port": 30303,
            "id": "30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",
            "location": "",
            "comment": "US-Azure geth"
        },
        {
            "ip": "52.176.100.77",
            "port": 30303,
            "id": "865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",
            "location": "",
            "comment": "US-Azure parity"
        },
        {
            "ip": "52.232.243.152",
            "port": 30303,
            "id": "6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",
            "location": "",
            "comment": "Parity"
        },
        {
            "ip": "192.81.208.223",
            "port": 30303,
            "id": "94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",
            "location": "",
            "comment": "@gpip"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\ropsten.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\sepolia.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Csepolia.json
      return function (require, module, exports) {
module.exports={
    "name": "sepolia",
    "chainId": 11155111,
    "networkId": 11155111,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "PoW test network to replace Ropsten",
    "url": "https://github.com/ethereum/go-ethereum/pull/23730",
    "genesis": {
        "timestamp": "0x6159af19",
        "gasLimit": 30000000,
        "difficulty": 131072,
        "nonce": "0x0000000000000000",
        "extraData": "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "istanbul",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "muirGlacier",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "berlin",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "london",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408",
            "name": "merge",
            "ttd": "17000000000000000",
            "block": 1450409,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "mergeForkIdTransition",
            "block": 1735371,
            "forkHash": "0xb96cbd13"
        },
        {
            "name": "shanghai",
            "block": null,
            "timestamp": "1677557088",
            "forkHash": "0xf7f9bc08"
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "18.168.182.86",
            "port": 30303,
            "id": "9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066",
            "location": "",
            "comment": "geth"
        },
        {
            "ip": "52.14.151.177",
            "port": 30303,
            "id": "ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7",
            "location": "",
            "comment": "besu"
        },
        {
            "ip": "165.22.196.173",
            "port": 30303,
            "id": "ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6",
            "location": "",
            "comment": "EF"
        },
        {
            "ip": "65.108.95.67",
            "port": 30303,
            "id": "075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6",
            "location": "",
            "comment": "lodestar"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\sepolia.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\common.js", {"./chains/goerli.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\goerli.json","./chains/mainnet.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\mainnet.json","./chains/rinkeby.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\rinkeby.json","./chains/ropsten.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\ropsten.json","./chains/sepolia.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\chains\\sepolia.json","./eips":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\index.js","./enums":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\enums.js","./hardforks":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\index.js","./utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\utils.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","crc-32":"F:\\metamask-extension\\node_modules\\crc-32\\crc32.js","events":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ccommon.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Common = void 0;
const util_1 = require("@ethereumjs/util");
const crc_32_1 = require("crc-32");
const events_1 = require("events");
const goerli = require("./chains/goerli.json");
const mainnet = require("./chains/mainnet.json");
const rinkeby = require("./chains/rinkeby.json");
const ropsten = require("./chains/ropsten.json");
const sepolia = require("./chains/sepolia.json");
const eips_1 = require("./eips");
const enums_1 = require("./enums");
const hardforks_1 = require("./hardforks");
const utils_1 = require("./utils");
/**
 * Common class to access chain and hardfork parameters and to provide
 * a unified and shared view on the network and hardfork state.
 *
 * Use the {@link Common.custom} static constructor for creating simple
 * custom chain {@link Common} objects (more complete custom chain setups
 * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
 */
class Common extends events_1.EventEmitter {
    constructor(opts) {
        super();
        this._eips = [];
        this._customChains = opts.customChains ?? [];
        this._chainParams = this.setChain(opts.chain);
        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? enums_1.Hardfork.Merge;
        // Assign hardfork changes in the sequence of the applied hardforks
        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [
            hf.name,
            hardforks_1.hardforks[hf.name],
        ]);
        this._hardfork = this.DEFAULT_HARDFORK;
        if (opts.hardfork !== undefined) {
            this.setHardfork(opts.hardfork);
        }
        if (opts.eips) {
            this.setEIPs(opts.eips);
        }
    }
    /**
     * Creates a {@link Common} object for a custom chain, based on a standard one.
     *
     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
     * in a provided {@link chainParamsOrName} dictionary. Some usage example:
     *
     * ```javascript
     * Common.custom({chainId: 123})
     * ```
     *
     * There are also selected supported custom chains which can be initialized by using one of the
     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
     *
     * ```javascript
     * Common.custom(CustomChains.MaticMumbai)
     * ```
     *
     * Note that these supported custom chains only provide some base parameters (usually the chain and
     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
     * the `@ethereumjs/tx` library to a Layer-2 chain).
     *
     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
     */
    static custom(chainParamsOrName, opts = {}) {
        const baseChain = opts.baseChain ?? 'mainnet';
        const standardChainParams = { ...Common._getChainParams(baseChain) };
        standardChainParams['name'] = 'custom-chain';
        if (typeof chainParamsOrName !== 'string') {
            return new Common({
                chain: {
                    ...standardChainParams,
                    ...chainParamsOrName,
                },
                ...opts,
            });
        }
        else {
            if (chainParamsOrName === enums_1.CustomChain.PolygonMainnet) {
                return Common.custom({
                    name: enums_1.CustomChain.PolygonMainnet,
                    chainId: 137,
                    networkId: 137,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.PolygonMumbai) {
                return Common.custom({
                    name: enums_1.CustomChain.PolygonMumbai,
                    chainId: 80001,
                    networkId: 80001,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.ArbitrumRinkebyTestnet) {
                return Common.custom({
                    name: enums_1.CustomChain.ArbitrumRinkebyTestnet,
                    chainId: 421611,
                    networkId: 421611,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.ArbitrumOne) {
                return Common.custom({
                    name: enums_1.CustomChain.ArbitrumOne,
                    chainId: 42161,
                    networkId: 42161,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.xDaiChain) {
                return Common.custom({
                    name: enums_1.CustomChain.xDaiChain,
                    chainId: 100,
                    networkId: 100,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.OptimisticKovan) {
                return Common.custom({
                    name: enums_1.CustomChain.OptimisticKovan,
                    chainId: 69,
                    networkId: 69,
                }, 
                // Optimism has not implemented the London hardfork yet (targeting Q1.22)
                { hardfork: enums_1.Hardfork.Berlin, ...opts });
            }
            if (chainParamsOrName === enums_1.CustomChain.OptimisticEthereum) {
                return Common.custom({
                    name: enums_1.CustomChain.OptimisticEthereum,
                    chainId: 10,
                    networkId: 10,
                }, 
                // Optimism has not implemented the London hardfork yet (targeting Q1.22)
                { hardfork: enums_1.Hardfork.Berlin, ...opts });
            }
            throw new Error(`Custom chain ${chainParamsOrName} not supported`);
        }
    }
    /**
     * Static method to load and set common from a geth genesis json
     * @param genesisJson json of geth configuration
     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
     * @returns Common
     */
    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {
        const genesisParams = (0, utils_1.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);
        const common = new Common({
            chain: genesisParams.name ?? 'custom',
            customChains: [genesisParams],
            eips,
            hardfork: hardfork ?? genesisParams.hardfork,
        });
        if (genesisHash !== undefined) {
            common.setForkHashes(genesisHash);
        }
        return common;
    }
    /**
     * Static method to determine if a {@link chainId} is supported as a standard chain
     * @param chainId bigint id (`1`) of a standard chain
     * @returns boolean
     */
    static isSupportedChainId(chainId) {
        const initializedChains = this._getInitializedChains();
        return Boolean(initializedChains['names'][chainId.toString()]);
    }
    static _getChainParams(chain, customChains) {
        const initializedChains = this._getInitializedChains(customChains);
        if (typeof chain === 'number' || typeof chain === 'bigint') {
            chain = chain.toString();
            if (initializedChains['names'][chain]) {
                const name = initializedChains['names'][chain];
                return initializedChains[name];
            }
            throw new Error(`Chain with ID ${chain} not supported`);
        }
        if (initializedChains[chain] !== undefined) {
            return initializedChains[chain];
        }
        throw new Error(`Chain with name ${chain} not supported`);
    }
    /**
     * Sets the chain
     * @param chain String ('mainnet') or Number (1) chain representation.
     *              Or, a Dictionary of chain parameters for a private network.
     * @returns The dictionary with parameters set as chain
     */
    setChain(chain) {
        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {
            this._chainParams = Common._getChainParams(chain, this._customChains);
        }
        else if (typeof chain === 'object') {
            if (this._customChains.length > 0) {
                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');
            }
            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
            for (const param of required) {
                if (!(param in chain)) {
                    throw new Error(`Missing required chain parameter: ${param}`);
                }
            }
            this._chainParams = chain;
        }
        else {
            throw new Error('Wrong input format');
        }
        for (const hf of this.hardforks()) {
            if (hf.block === undefined) {
                throw new Error(`Hardfork cannot have undefined block number`);
            }
        }
        return this._chainParams;
    }
    /**
     * Sets the hardfork to get params for
     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
     */
    setHardfork(hardfork) {
        let existing = false;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if (hfChanges[0] === hardfork) {
                if (this._hardfork !== hardfork) {
                    this._hardfork = hardfork;
                    this.emit('hardforkChanged', hardfork);
                }
                existing = true;
            }
        }
        if (!existing) {
            throw new Error(`Hardfork with name ${hardfork} not supported`);
        }
    }
    /**
     * Returns the hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)
     * @param timestamp: timestamp in seconds at which block was/is to be minted
     * @returns The name of the HF
     */
    getHardforkByBlockNumber(blockNumber, td, timestamp) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        td = (0, util_1.toType)(td, util_1.TypeOutput.BigInt);
        timestamp = (0, util_1.toType)(timestamp, util_1.TypeOutput.Number);
        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)
        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);
        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
        const doubleTTDHF = hfs
            .slice(mergeIndex + 1)
            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
        if (doubleTTDHF >= 0) {
            throw Error(`More than one merge hardforks found with ttd specified`);
        }
        // Find the first hardfork that has a block number greater than `blockNumber`
        // (skips the merge hardfork since it cannot have a block number specified).
        // If timestamp is not provided, it also skips timestamps hardforks to continue
        // discovering/checking number hardforks.
        let hfIndex = hfs.findIndex((hf) => (hf.block !== null && hf.block > blockNumber) ||
            (timestamp !== undefined && Number(hf.timestamp) > timestamp));
        if (hfIndex === -1) {
            // all hardforks apply, set hfIndex to the last one as that's the candidate
            hfIndex = hfs.length;
        }
        else if (hfIndex === 0) {
            // cannot have a case where a block number is before all applied hardforks
            // since the chain has to start with a hardfork
            throw Error('Must have at least one hardfork at block 0');
        }
        // If timestamp is not provided, we need to rollback to the last hf with block or ttd
        if (timestamp === undefined) {
            const stepBack = hfs
                .slice(0, hfIndex)
                .reverse()
                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);
            hfIndex = hfIndex - stepBack;
        }
        // Move hfIndex one back to arrive at candidate hardfork
        hfIndex = hfIndex - 1;
        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number
        // hardforks. so it will now be needed to rollback
        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {
            // We're on the merge hardfork.  Let's check the TTD
            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {
                // Merge ttd greater than current td so we're on hardfork before merge
                hfIndex -= 1;
            }
        }
        else {
            if (mergeIndex >= 0 && td !== undefined && td !== null) {
                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {
                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');
                }
                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {
                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');
                }
            }
        }
        const hfStartIndex = hfIndex;
        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp
        // This won't anyway be the case with Merge hfs
        for (; hfIndex < hfs.length - 1; hfIndex++) {
            // break out if hfIndex + 1 is not scheduled at hfIndex
            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||
                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {
                break;
            }
        }
        if (timestamp) {
            const minTimeStamp = hfs
                .slice(0, hfStartIndex)
                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);
            if (minTimeStamp > timestamp) {
                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
            }
            const maxTimeStamp = hfs
                .slice(hfIndex + 1)
                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), timestamp);
            if (maxTimeStamp < timestamp) {
                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
            }
        }
        const hardfork = hfs[hfIndex];
        return hardfork.name;
    }
    /**
     * Sets a new hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td
     * @param timestamp
     * @returns The name of the HF set
     */
    setHardforkByBlockNumber(blockNumber, td, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
        this.setHardfork(hardfork);
        return hardfork;
    }
    /**
     * Internal helper function, returns the params for the given hardfork for the chain set
     * @param hardfork Hardfork name
     * @returns Dictionary with hardfork params or null if hardfork not on chain
     */
    _getHardfork(hardfork) {
        const hfs = this.hardforks();
        for (const hf of hfs) {
            if (hf['name'] === hardfork)
                return hf;
        }
        return null;
    }
    /**
     * Sets the active EIPs
     * @param eips
     */
    setEIPs(eips = []) {
        for (const eip of eips) {
            if (!(eip in eips_1.EIPs)) {
                throw new Error(`${eip} not supported`);
            }
            const minHF = this.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);
            if (!minHF) {
                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
            }
            if (eips_1.EIPs[eip].requiredEIPs !== undefined) {
                for (const elem of eips_1.EIPs[eip].requiredEIPs) {
                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);
                    }
                }
            }
        }
        this._eips = eips;
    }
    /**
     * Returns a parameter for the current chain setup
     *
     * If the parameter is present in an EIP, the EIP always takes precedence.
     * Otherwise the parameter if taken from the latest applied HF with
     * a change on the respective parameter.
     *
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @returns The value requested or `BigInt(0)` if not found
     */
    param(topic, name) {
        // TODO: consider the case that different active EIPs
        // can change the same parameter
        let value;
        for (const eip of this._eips) {
            value = this.paramByEIP(topic, name, eip);
            if (value !== undefined)
                return value;
        }
        return this.paramByHardfork(topic, name, this._hardfork);
    }
    /**
     * Returns the parameter corresponding to a hardfork
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param hardfork Hardfork name
     * @returns The value requested or `BigInt(0)` if not found
     */
    paramByHardfork(topic, name, hardfork) {
        let value = null;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            // EIP-referencing HF file (e.g. berlin.json)
            if ('eips' in hfChanges[1]) {
                const hfEIPs = hfChanges[1]['eips'];
                for (const eip of hfEIPs) {
                    const valueEIP = this.paramByEIP(topic, name, eip);
                    value = typeof valueEIP === 'bigint' ? valueEIP : value;
                }
                // Parameter-inlining HF file (e.g. istanbul.json)
            }
            else {
                if (hfChanges[1][topic] === undefined) {
                    throw new Error(`Topic ${topic} not defined`);
                }
                if (hfChanges[1][topic][name] !== undefined) {
                    value = hfChanges[1][topic][name].v;
                }
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return BigInt(value ?? 0);
    }
    /**
     * Returns a parameter corresponding to an EIP
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param eip Number of the EIP
     * @returns The value requested or `undefined` if not found
     */
    paramByEIP(topic, name, eip) {
        if (!(eip in eips_1.EIPs)) {
            throw new Error(`${eip} not supported`);
        }
        const eipParams = eips_1.EIPs[eip];
        if (!(topic in eipParams)) {
            throw new Error(`Topic ${topic} not defined`);
        }
        if (eipParams[topic][name] === undefined) {
            return undefined;
        }
        const value = eipParams[topic][name].v;
        return BigInt(value);
    }
    /**
     * Returns a parameter for the hardfork active on block number or
     * optional provided total difficulty (Merge HF)
     * @param topic Parameter topic
     * @param name Parameter name
     * @param blockNumber Block number
     * @param td Total difficulty
     *    * @returns The value requested or `BigInt(0)` if not found
     */
    paramByBlock(topic, name, blockNumber, td, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
        return this.paramByHardfork(topic, name, hardfork);
    }
    /**
     * Checks if an EIP is activated by either being included in the EIPs
     * manually passed in with the {@link CommonOpts.eips} or in a
     * hardfork currently being active
     *
     * Note: this method only works for EIPs being supported
     * by the {@link CommonOpts.eips} constructor option
     * @param eip
     */
    isActivatedEIP(eip) {
        if (this.eips().includes(eip)) {
            return true;
        }
        for (const hfChanges of this.HARDFORK_CHANGES) {
            const hf = hfChanges[1];
            if (this.gteHardfork(hf['name']) && 'eips' in hf) {
                if (hf['eips'].includes(eip)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Checks if set or provided hardfork is active on block number
     * @param hardfork Hardfork name or null (for HF set)
     * @param blockNumber
     * @returns True if HF is active on block number
     */
    hardforkIsActiveOnBlock(hardfork, blockNumber) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const hfBlock = this.hardforkBlock(hardfork);
        if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {
            return true;
        }
        return false;
    }
    /**
     * Alias to hardforkIsActiveOnBlock when hardfork is set
     * @param blockNumber
     * @returns True if HF is active on block number
     */
    activeOnBlock(blockNumber) {
        return this.hardforkIsActiveOnBlock(null, blockNumber);
    }
    /**
     * Sequence based check if given or set HF1 is greater than or equal HF2
     * @param hardfork1 Hardfork name or null (if set)
     * @param hardfork2 Hardfork name
     * @param opts Hardfork options
     * @returns True if HF1 gte HF2
     */
    hardforkGteHardfork(hardfork1, hardfork2) {
        hardfork1 = hardfork1 ?? this._hardfork;
        const hardforks = this.hardforks();
        let posHf1 = -1, posHf2 = -1;
        let index = 0;
        for (const hf of hardforks) {
            if (hf['name'] === hardfork1)
                posHf1 = index;
            if (hf['name'] === hardfork2)
                posHf2 = index;
            index += 1;
        }
        return posHf1 >= posHf2 && posHf2 !== -1;
    }
    /**
     * Alias to hardforkGteHardfork when hardfork is set
     * @param hardfork Hardfork name
     * @returns True if hardfork set is greater than hardfork provided
     */
    gteHardfork(hardfork) {
        return this.hardforkGteHardfork(null, hardfork);
    }
    /**
     * Returns the hardfork change block for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if unscheduled
     */
    hardforkBlock(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const block = this._getHardfork(hardfork)?.['block'];
        if (block === undefined || block === null) {
            return null;
        }
        return BigInt(block);
    }
    hardforkTimestamp(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const timestamp = this._getHardfork(hardfork)?.['timestamp'];
        if (timestamp === undefined || timestamp === null) {
            return null;
        }
        return BigInt(timestamp);
    }
    /**
     * Returns the hardfork change block for eip
     * @param eip EIP number
     * @returns Block number or null if unscheduled
     */
    eipBlock(eip) {
        for (const hfChanges of this.HARDFORK_CHANGES) {
            const hf = hfChanges[1];
            if ('eips' in hf) {
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                if (hf['eips'].includes(eip)) {
                    return this.hardforkBlock(hfChanges[0]);
                }
            }
        }
        return null;
    }
    /**
     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Total difficulty or null if no set
     */
    hardforkTTD(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const ttd = this._getHardfork(hardfork)?.['ttd'];
        if (ttd === undefined || ttd === null) {
            return null;
        }
        return BigInt(ttd);
    }
    /**
     * True if block number provided is the hardfork (given or set) change block
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     * @deprecated
     */
    isHardforkBlock(blockNumber, hardfork) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const block = this.hardforkBlock(hardfork);
        return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block timestamp, number or null if not available
     */
    nextHardforkBlockOrTimestamp(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const hfs = this.hardforks();
        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);
        // If the current hardfork is merge, go one behind as merge hf is not part of these
        // calcs even if the merge hf block is set
        if (hardfork === enums_1.Hardfork.Merge) {
            hfIndex -= 1;
        }
        // Hardfork not found
        if (hfIndex < 0) {
            return null;
        }
        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;
        currHfTimeOrBlock =
            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined
                ? Number(currHfTimeOrBlock)
                : null;
        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {
            let hfTimeOrBlock = hf.timestamp ?? hf.block;
            hfTimeOrBlock =
                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;
            return (hf.name !== enums_1.Hardfork.Merge &&
                hfTimeOrBlock !== null &&
                hfTimeOrBlock !== undefined &&
                hfTimeOrBlock !== currHfTimeOrBlock);
        });
        // If no next hf found with valid block or timestamp return null
        if (nextHf === undefined) {
            return null;
        }
        const nextHfBlock = nextHf.timestamp ?? nextHf.block;
        if (nextHfBlock === null || nextHfBlock === undefined) {
            return null;
        }
        return BigInt(nextHfBlock);
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if not available
     * @deprecated
     */
    nextHardforkBlock(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        let hfBlock = this.hardforkBlock(hardfork);
        // If this is a merge hardfork with block not set, then we fallback to previous hardfork
        // to find the nextHardforkBlock
        if (hfBlock === null && hardfork === enums_1.Hardfork.Merge) {
            const hfs = this.hardforks();
            const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
            if (mergeIndex < 0) {
                throw Error(`Merge hardfork should have been found`);
            }
            hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);
        }
        if (hfBlock === null) {
            return null;
        }
        // Next fork block number or null if none available
        // Logic: if accumulator is still null and on the first occurrence of
        // a block greater than the current hfBlock set the accumulator,
        // pass on the accumulator as the final result from this time on
        const nextHfBlock = this.hardforks().reduce((acc, hf) => {
            // We need to ignore the merge block in our next hardfork calc
            const block = BigInt(hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block);
            // Typescript can't seem to follow that the hfBlock is not null at this point
            return block > hfBlock && acc === null ? block : acc;
        }, null);
        return nextHfBlock;
    }
    /**
     * True if block number provided is the hardfork change block following the hardfork given or set
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     * @deprecated
     */
    isNextHardforkBlock(blockNumber, hardfork) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const nextHardforkBlock = this.nextHardforkBlock(hardfork);
        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;
    }
    /**
     * Internal helper function to calculate a fork hash
     * @param hardfork Hardfork name
     * @param genesisHash Genesis block hash of the chain
     * @returns Fork hash as hex string
     */
    _calcForkHash(hardfork, genesisHash) {
        let hfBuffer = Buffer.alloc(0);
        let prevBlockOrTime = 0;
        for (const hf of this.hardforks()) {
            const { block, timestamp, name } = hf;
            // Timestamp to be used for timestamp based hfs even if we may bundle
            // block number with them retrospectively
            let blockOrTime = timestamp ?? block;
            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
            // Skip for chainstart (0), not applied HFs (null) and
            // when already applied on same blockOrTime HFs
            // and on the merge since forkhash doesn't change on merge hf
            if (typeof blockOrTime === 'number' &&
                blockOrTime !== 0 &&
                blockOrTime !== prevBlockOrTime &&
                name !== enums_1.Hardfork.Merge) {
                const hfBlockBuffer = Buffer.from(blockOrTime.toString(16).padStart(16, '0'), 'hex');
                hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);
                prevBlockOrTime = blockOrTime;
            }
            if (hf.name === hardfork)
                break;
        }
        const inputBuffer = Buffer.concat([genesisHash, hfBuffer]);
        // CRC32 delivers result as signed (negative) 32-bit integer,
        // convert to hex string
        const forkhash = (0, util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');
        return `0x${forkhash}`;
    }
    /**
     * Returns an eth/64 compliant fork hash (EIP-2124)
     * @param hardfork Hardfork name, optional if HF set
     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
     */
    forkHash(hardfork, genesisHash) {
        hardfork = hardfork ?? this._hardfork;
        const data = this._getHardfork(hardfork);
        if (data === null ||
            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {
            const msg = 'No fork hash calculation possible for future hardfork';
            throw new Error(msg);
        }
        if (data?.forkHash !== null && data?.forkHash !== undefined) {
            return data.forkHash;
        }
        if (!genesisHash)
            throw new Error('genesisHash required for forkHash calculation');
        return this._calcForkHash(hardfork, genesisHash);
    }
    /**
     *
     * @param forkHash Fork hash as a hex string
     * @returns Array with hardfork data (name, block, forkHash)
     */
    hardforkForForkHash(forkHash) {
        const resArray = this.hardforks().filter((hf) => {
            return hf.forkHash === forkHash;
        });
        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
    }
    /**
     * Sets any missing forkHashes on the passed-in {@link Common} instance
     * @param common The {@link Common} to set the forkHashes for
     * @param genesisHash The genesis block hash
     */
    setForkHashes(genesisHash) {
        for (const hf of this.hardforks()) {
            const blockOrTime = hf.timestamp ?? hf.block;
            if ((hf.forkHash === null || hf.forkHash === undefined) &&
                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {
                hf.forkHash = this.forkHash(hf.name, genesisHash);
            }
        }
    }
    /**
     * Returns the Genesis parameters of the current chain
     * @returns Genesis dictionary
     */
    genesis() {
        return this._chainParams.genesis;
    }
    /**
     * Returns the hardforks for current chain
     * @returns {Array} Array with arrays of hardforks
     */
    hardforks() {
        return this._chainParams.hardforks;
    }
    /**
     * Returns bootstrap nodes for the current chain
     * @returns {Dictionary} Dict with bootstrap nodes
     */
    bootstrapNodes() {
        return this._chainParams.bootstrapNodes;
    }
    /**
     * Returns DNS networks for the current chain
     * @returns {String[]} Array of DNS ENR urls
     */
    dnsNetworks() {
        return this._chainParams.dnsNetworks;
    }
    /**
     * Returns the hardfork set
     * @returns Hardfork name
     */
    hardfork() {
        return this._hardfork;
    }
    /**
     * Returns the Id of current chain
     * @returns chain Id
     */
    chainId() {
        return BigInt(this._chainParams.chainId);
    }
    /**
     * Returns the name of current chain
     * @returns chain name (lower case)
     */
    chainName() {
        return this._chainParams.name;
    }
    /**
     * Returns the Id of current network
     * @returns network Id
     */
    networkId() {
        return BigInt(this._chainParams.networkId);
    }
    /**
     * Returns the active EIPs
     * @returns List of EIPs
     */
    eips() {
        return this._eips;
    }
    /**
     * Returns the consensus type of the network
     * Possible values: "pow"|"poa"|"pos"
     *
     * Note: This value can update along a Hardfork.
     */
    consensusType() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                value = hfChanges[1]['consensus']['type'];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return value ?? this._chainParams['consensus']['type'];
    }
    /**
     * Returns the concrete consensus implementation
     * algorithm or protocol for the network
     * e.g. "ethash" for "pow" consensus type,
     * "clique" for "poa" consensus type or
     * "casper" for "pos" consensus type.
     *
     * Note: This value can update along a Hardfork.
     */
    consensusAlgorithm() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                value = hfChanges[1]['consensus']['algorithm'];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return value ?? this._chainParams['consensus']['algorithm'];
    }
    /**
     * Returns a dictionary with consensus configuration
     * parameters based on the consensus algorithm
     *
     * Expected returns (parameters must be present in
     * the respective chain json files):
     *
     * ethash: empty object
     * clique: period, epoch
     * casper: empty object
     *
     * Note: This value can update along a Hardfork.
     */
    consensusConfig() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                // The config parameter is named after the respective consensus algorithm
                value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});
    }
    /**
     * Returns a deep copy of this {@link Common} instance.
     */
    copy() {
        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        copy.removeAllListeners();
        return copy;
    }
    static _getInitializedChains(customChains) {
        const names = {};
        for (const [name, id] of Object.entries(enums_1.Chain)) {
            names[id] = name.toLowerCase();
        }
        const chains = { mainnet, ropsten, rinkeby, goerli, sepolia };
        if (customChains) {
            for (const chain of customChains) {
                const { name } = chain;
                names[chain.chainId.toString()] = name;
                chains[name] = chain;
            }
        }
        chains.names = names;
        return chains;
    }
}
exports.Common = Common;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\common.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\1153.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C1153.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-1153",
    "number": 1153,
    "comment": "Transient Storage",
    "url": "https://eips.ethereum.org/EIPS/eip-1153",
    "status": "Review",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "tstore": {
            "v": 100,
            "d": "Base fee of the TSTORE opcode"
        },
        "tload": {
            "v": 100,
            "d": "Base fee of the TLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\1153.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\1559.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C1559.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-1559",
    "number": 1559,
    "comment": "Fee market change for ETH 1.0 chain",
    "url": "https://eips.ethereum.org/EIPS/eip-1559",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [2930],
    "gasConfig": {
        "baseFeeMaxChangeDenominator": {
            "v": 8,
            "d": "Maximum base fee change denominator"
        },
        "elasticityMultiplier": {
            "v": 2,
            "d": "Maximum block gas target elasticity"
        },
        "initialBaseFee": {
            "v": 1000000000,
            "d": "Initial base fee on first EIP1559 block"
        }
    },
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\1559.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2315.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2315.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2315",
    "number": 2315,
    "comment": "Simple subroutines for the EVM",
    "url": "https://eips.ethereum.org/EIPS/eip-2315",
    "status": "Draft",
    "minimumHardfork": "istanbul",
    "gasConfig": {},
    "gasPrices": {
        "beginsub": {
            "v": 2,
            "d": "Base fee of the BEGINSUB opcode"
        },
        "returnsub": {
            "v": 5,
            "d": "Base fee of the RETURNSUB opcode"
        },
        "jumpsub": {
            "v": 10,
            "d": "Base fee of the JUMPSUB opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2315.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2537.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2537.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2537",
    "number": 2537,
    "comment": "BLS12-381 precompiles",
    "url": "https://eips.ethereum.org/EIPS/eip-2537",
    "status": "Draft",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "Bls12381G1AddGas": {
            "v": 600,
            "d": "Gas cost of a single BLS12-381 G1 addition precompile-call"
        },
        "Bls12381G1MulGas": {
            "v": 12000,
            "d": "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
        },
        "Bls12381G2AddGas": {
            "v": 4500,
            "d": "Gas cost of a single BLS12-381 G2 addition precompile-call"
        },
        "Bls12381G2MulGas": {
            "v": 55000,
            "d": "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
        },
        "Bls12381PairingBaseGas": {
            "v": 115000,
            "d": "Base gas cost of BLS12-381 pairing check"
        },
        "Bls12381PairingPerPairGas": {
            "v": 23000,
            "d": "Per-pair gas cost of BLS12-381 pairing check"
        },
        "Bls12381MapG1Gas": {
            "v": 5500,
            "d": "Gas cost of BLS12-381 map field element to G1"
        },
        "Bls12381MapG2Gas": {
            "v": 110000,
            "d": "Gas cost of BLS12-381 map field element to G2"
        },
        "Bls12381MultiExpGasDiscount": {
            "v": [
                [1, 1200],
                [2, 888],
                [3, 764],
                [4, 641],
                [5, 594],
                [6, 547],
                [7, 500],
                [8, 453],
                [9, 438],
                [10, 423],
                [11, 408],
                [12, 394],
                [13, 379],
                [14, 364],
                [15, 349],
                [16, 334],
                [17, 330],
                [18, 326],
                [19, 322],
                [20, 318],
                [21, 314],
                [22, 310],
                [23, 306],
                [24, 302],
                [25, 298],
                [26, 294],
                [27, 289],
                [28, 285],
                [29, 281],
                [30, 277],
                [31, 273],
                [32, 269],
                [33, 268],
                [34, 266],
                [35, 265],
                [36, 263],
                [37, 262],
                [38, 260],
                [39, 259],
                [40, 257],
                [41, 256],
                [42, 254],
                [43, 253],
                [44, 251],
                [45, 250],
                [46, 248],
                [47, 247],
                [48, 245],
                [49, 244],
                [50, 242],
                [51, 241],
                [52, 239],
                [53, 238],
                [54, 236],
                [55, 235],
                [56, 233],
                [57, 232],
                [58, 231],
                [59, 229],
                [60, 228],
                [61, 226],
                [62, 225],
                [63, 223],
                [64, 222],
                [65, 221],
                [66, 220],
                [67, 219],
                [68, 219],
                [69, 218],
                [70, 217],
                [71, 216],
                [72, 216],
                [73, 215],
                [74, 214],
                [75, 213],
                [76, 213],
                [77, 212],
                [78, 211],
                [79, 211],
                [80, 210],
                [81, 209],
                [82, 208],
                [83, 208],
                [84, 207],
                [85, 206],
                [86, 205],
                [87, 205],
                [88, 204],
                [89, 203],
                [90, 202],
                [91, 202],
                [92, 201],
                [93, 200],
                [94, 199],
                [95, 199],
                [96, 198],
                [97, 197],
                [98, 196],
                [99, 196],
                [100, 195],
                [101, 194],
                [102, 193],
                [103, 193],
                [104, 192],
                [105, 191],
                [106, 191],
                [107, 190],
                [108, 189],
                [109, 188],
                [110, 188],
                [111, 187],
                [112, 186],
                [113, 185],
                [114, 185],
                [115, 184],
                [116, 183],
                [117, 182],
                [118, 182],
                [119, 181],
                [120, 180],
                [121, 179],
                [122, 179],
                [123, 178],
                [124, 177],
                [125, 176],
                [126, 176],
                [127, 175],
                [128, 174]
            ],
            "d": "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2537.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2565.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2565.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2565",
    "number": 2565,
    "comment": "ModExp gas cost",
    "url": "https://eips.ethereum.org/EIPS/eip-2565",
    "status": "Final",
    "minimumHardfork": "byzantium",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 3,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2565.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2718.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2718.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2718",
    "comment": "Typed Transaction Envelope",
    "url": "https://eips.ethereum.org/EIPS/eip-2718",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2718.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2929.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2929.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2929",
    "comment": "Gas cost increases for state access opcodes",
    "url": "https://eips.ethereum.org/EIPS/eip-2929",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "coldsload": {
            "v": 2100,
            "d": "Gas cost of the first read of storage from a given location (per transaction)"
        },
        "coldaccountaccess": {
            "v": 2600,
            "d": "Gas cost of the first read of a given address (per transaction)"
        },
        "warmstorageread": {
            "v": 100,
            "d": "Gas cost of reading storage locations which have already loaded 'cold'"
        },
        "sstoreCleanGasEIP2200": {
            "v": 2900,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreNoopGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19900,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4900,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "call": {
            "v": 0,
            "d": "Base fee of the CALL opcode"
        },
        "callcode": {
            "v": 0,
            "d": "Base fee of the CALLCODE opcode"
        },
        "delegatecall": {
            "v": 0,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "staticcall": {
            "v": 0,
            "d": "Base fee of the STATICCALL opcode"
        },
        "balance": {
            "v": 0,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodesize": {
            "v": 0,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 0,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "extcodehash": {
            "v": 0,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "sload": {
            "v": 0,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2929.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2930.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2930.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2930",
    "comment": "Optional access lists",
    "url": "https://eips.ethereum.org/EIPS/eip-2930",
    "status": "Final",
    "minimumHardfork": "istanbul",
    "requiredEIPs": [2718, 2929],
    "gasConfig": {},
    "gasPrices": {
        "accessListStorageKeyCost": {
            "v": 1900,
            "d": "Gas cost per storage key in an Access List transaction"
        },
        "accessListAddressCost": {
            "v": 2400,
            "d": "Gas cost per storage key in an Access List transaction"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2930.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3074.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3074.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3074",
    "number": 3074,
    "comment": "AUTH and AUTHCALL opcodes",
    "url": "https://eips.ethereum.org/EIPS/eip-3074",
    "status": "Review",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {
        "auth": {
            "v": 3100,
            "d": "Gas cost of the AUTH opcode"
        },
        "authcall": {
            "v": 0,
            "d": "Gas cost of the AUTHCALL opcode"
        },
        "authcallValueTransfer": {
            "v": 6700,
            "d": "Paid for CALL when the value transfer is non-zero"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3074.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3198.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3198.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3198",
    "number": 3198,
    "comment": "BASEFEE opcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3198",
    "status": "Final",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {
        "basefee": {
            "v": 2,
            "d": "Gas cost of the BASEFEE opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3198.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3529.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3529.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3529",
    "comment": "Reduction in refunds",
    "url": "https://eips.ethereum.org/EIPS/eip-3529",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [2929],
    "gasConfig": {
        "maxRefundQuotient": {
            "v": 5,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "selfdestructRefund": {
            "v": 0,
            "d": "Refunded following a selfdestruct operation"
        },
        "sstoreClearRefundEIP2200": {
            "v": 4800,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3529.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3540.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3540.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3540",
    "number": 3540,
    "comment": "EVM Object Format (EOF) v1",
    "url": "https://eips.ethereum.org/EIPS/eip-3540",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [3541],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3540.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3541.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3541.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3541",
    "comment": "Reject new contracts starting with the 0xEF byte",
    "url": "https://eips.ethereum.org/EIPS/eip-3541",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3541.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3554.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3554.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3554",
    "comment": "Reduction in refunds",
    "url": "Difficulty Bomb Delay to December 1st 2021",
    "status": "Final",
    "minimumHardfork": "muirGlacier",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9500000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3554.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3607.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3607.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3607",
    "number": 3607,
    "comment": "Reject transactions from senders with deployed code",
    "url": "https://eips.ethereum.org/EIPS/eip-3607",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3607.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3651.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3651.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3651",
    "number": 3198,
    "comment": "Warm COINBASE",
    "url": "https://eips.ethereum.org/EIPS/eip-3651",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [2929],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3651.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3670.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3670.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3670",
    "number": 3670,
    "comment": "EOF - Code Validation",
    "url": "https://eips.ethereum.org/EIPS/eip-3670",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [3540],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3670.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3675.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3675.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3675",
    "number": 3675,
    "comment": "Upgrade consensus to Proof-of-Stake",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Final",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3675.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3855.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3855.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3855",
    "number": 3855,
    "comment": "PUSH0 instruction",
    "url": "https://eips.ethereum.org/EIPS/eip-3855",
    "status": "Review",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "push0": {
            "v": 2,
            "d": "Base fee of the PUSH0 opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3855.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3860.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3860.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3860",
    "number": 3860,
    "comment": "Limit and meter initcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3860",
    "status": "Review",
    "minimumHardfork": "spuriousDragon",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "initCodeWordCost": {
            "v": 2,
            "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract"
        }
    },
    "vm": {
        "maxInitCodeSize": {
            "v": 49152,
            "d": "Maximum length of initialization code when creating a contract"
        }
    },
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3860.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4345.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4345.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4345",
    "number": 4345,
    "comment": "Difficulty Bomb Delay to June 2022",
    "url": "https://eips.ethereum.org/EIPS/eip-4345",
    "status": "Final",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 10700000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4345.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4399.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4399.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4399",
    "number": 4399,
    "comment": "Supplant DIFFICULTY opcode with PREVRANDAO",
    "url": "https://eips.ethereum.org/EIPS/eip-4399",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4399.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4844.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4844.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4844",
    "number": 4844,
    "comment": "Shard Blob Transactions",
    "url": "https://eips.ethereum.org/EIPS/eip-4844",
    "status": "Draft",
    "minimumHardfork": "merge",
    "requiredEIPs": [1559, 2718, 2930, 4895],
    "gasConfig": {
        "dataGasPerBlob": {
            "v": 131072,
            "d": "The base fee for data gas per blob"
        },
        "targetDataGasPerBlock": {
            "v": 262144,
            "d": "The target data gas consumed per block"
        },
        "maxDataGasPerBlock": {
            "v": 524288,
            "d": "The max data gas allowable per block"
        },
        "dataGasPriceUpdateFraction": {
            "v": 2225652,
            "d": "The denominator used in the exponential when calculating a data gas price"
        }
    },
    "gasPrices": {
        "simpleGasPerBlob": {
            "v": 12000,
            "d": "The basic gas fee for each blob"
        },
        "minDataGasPrice": {
            "v": 1,
            "d": "The minimum fee per data gas"
        },
        "kzgPointEvaluationGasPrecompilePrice": {
            "v": 50000,
            "d": "The fee associated with the point evaluation precompile"
        },
        "datahash": {
            "v": 3,
            "d": "Base fee of the DATAHASH opcode"
        }
    },
    "sharding": {
        "blobCommitmentVersionKzg": {
            "v": 1,
            "d": "The number indicated a versioned hash is a KZG commitment"
        },
        "fieldElementsPerBlob": {
            "v": 4096,
            "d": "The number of field elements allowed per blob"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4844.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4895.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4895.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4895",
    "number": 4895,
    "comment": "Beacon chain push withdrawals as operations",
    "url": "https://eips.ethereum.org/EIPS/eip-4895",
    "status": "Review",
    "minimumHardfork": "merge",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4895.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\5133.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C5133.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-5133",
    "number": 5133,
    "comment": "Delaying Difficulty Bomb to mid-September 2022",
    "url": "https://eips.ethereum.org/EIPS/eip-5133",
    "status": "Draft",
    "minimumHardfork": "grayGlacier",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 11400000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\5133.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\index.js", {"./1153.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\1153.json","./1559.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\1559.json","./2315.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2315.json","./2537.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2537.json","./2565.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2565.json","./2718.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2718.json","./2929.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2929.json","./2930.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\2930.json","./3074.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3074.json","./3198.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3198.json","./3529.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3529.json","./3540.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3540.json","./3541.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3541.json","./3554.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3554.json","./3607.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3607.json","./3651.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3651.json","./3670.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3670.json","./3675.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3675.json","./3855.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3855.json","./3860.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\3860.json","./4345.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4345.json","./4399.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4399.json","./4844.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4844.json","./4895.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\4895.json","./5133.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\5133.json"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIPs = void 0;
exports.EIPs = {
    1153: require('./1153.json'),
    1559: require('./1559.json'),
    2315: require('./2315.json'),
    2537: require('./2537.json'),
    2565: require('./2565.json'),
    2718: require('./2718.json'),
    2929: require('./2929.json'),
    2930: require('./2930.json'),
    3074: require('./3074.json'),
    3198: require('./3198.json'),
    3529: require('./3529.json'),
    3540: require('./3540.json'),
    3541: require('./3541.json'),
    3554: require('./3554.json'),
    3607: require('./3607.json'),
    3651: require('./3651.json'),
    3670: require('./3670.json'),
    3675: require('./3675.json'),
    3855: require('./3855.json'),
    3860: require('./3860.json'),
    4345: require('./4345.json'),
    4399: require('./4399.json'),
    4844: require('./4844.json'),
    4895: require('./4895.json'),
    5133: require('./5133.json'),
};
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\eips\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\enums.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cenums.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomChain = exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = void 0;
var Chain;
(function (Chain) {
    Chain[Chain["Mainnet"] = 1] = "Mainnet";
    Chain[Chain["Ropsten"] = 3] = "Ropsten";
    Chain[Chain["Rinkeby"] = 4] = "Rinkeby";
    Chain[Chain["Goerli"] = 5] = "Goerli";
    Chain[Chain["Sepolia"] = 11155111] = "Sepolia";
})(Chain = exports.Chain || (exports.Chain = {}));
var Hardfork;
(function (Hardfork) {
    Hardfork["Chainstart"] = "chainstart";
    Hardfork["Homestead"] = "homestead";
    Hardfork["Dao"] = "dao";
    Hardfork["TangerineWhistle"] = "tangerineWhistle";
    Hardfork["SpuriousDragon"] = "spuriousDragon";
    Hardfork["Byzantium"] = "byzantium";
    Hardfork["Constantinople"] = "constantinople";
    Hardfork["Petersburg"] = "petersburg";
    Hardfork["Istanbul"] = "istanbul";
    Hardfork["MuirGlacier"] = "muirGlacier";
    Hardfork["Berlin"] = "berlin";
    Hardfork["London"] = "london";
    Hardfork["ArrowGlacier"] = "arrowGlacier";
    Hardfork["GrayGlacier"] = "grayGlacier";
    Hardfork["MergeForkIdTransition"] = "mergeForkIdTransition";
    Hardfork["Merge"] = "merge";
    Hardfork["Shanghai"] = "shanghai";
    Hardfork["ShardingForkDev"] = "shardingFork";
})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));
var ConsensusType;
(function (ConsensusType) {
    ConsensusType["ProofOfStake"] = "pos";
    ConsensusType["ProofOfWork"] = "pow";
    ConsensusType["ProofOfAuthority"] = "poa";
})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));
var ConsensusAlgorithm;
(function (ConsensusAlgorithm) {
    ConsensusAlgorithm["Ethash"] = "ethash";
    ConsensusAlgorithm["Clique"] = "clique";
    ConsensusAlgorithm["Casper"] = "casper";
})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));
var CustomChain;
(function (CustomChain) {
    /**
     * Polygon (Matic) Mainnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */
    CustomChain["PolygonMainnet"] = "polygon-mainnet";
    /**
     * Polygon (Matic) Mumbai Testnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */
    CustomChain["PolygonMumbai"] = "polygon-mumbai";
    /**
     * Arbitrum Rinkeby Testnet
     *
     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)
     */
    CustomChain["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
    /**
     * Arbitrum One - mainnet for Arbitrum roll-up
     *
     * - [Documentation](https://developer.offchainlabs.com/public-chains)
     */
    CustomChain["ArbitrumOne"] = "arbitrum-one";
    /**
     * xDai EVM sidechain with a native stable token
     *
     * - [Documentation](https://www.xdaichain.com/)
     */
    CustomChain["xDaiChain"] = "x-dai-chain";
    /**
     * Optimistic Kovan - testnet for Optimism roll-up
     *
     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
     */
    CustomChain["OptimisticKovan"] = "optimistic-kovan";
    /**
     * Optimistic Ethereum - mainnet for Optimism roll-up
     *
     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
     */
    CustomChain["OptimisticEthereum"] = "optimistic-ethereum";
})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));
//# sourceMappingURL=enums.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\enums.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\arrowGlacier.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CarrowGlacier.json
      return function (require, module, exports) {
module.exports={
    "name": "arrowGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
    "status": "Final",
    "eips": [4345],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\arrowGlacier.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\berlin.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cberlin.json
      return function (require, module, exports) {
module.exports={
    "name": "berlin",
    "comment": "HF targeted for July 2020 following the Muir Glacier HF",
    "url": "https://eips.ethereum.org/EIPS/eip-2070",
    "status": "Final",
    "eips": [2565, 2929, 2718, 2930]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\berlin.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\byzantium.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cbyzantium.json
      return function (require, module, exports) {
module.exports={
    "name": "byzantium",
    "comment": "Hardfork with new precompiles, instructions and other protocol changes",
    "url": "https://eips.ethereum.org/EIPS/eip-609",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 20,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        },
        "ecAdd": {
            "v": 500,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 40000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 100000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 80000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "revert": {
            "v": 0,
            "d": "Base fee of the REVERT opcode"
        },
        "staticcall": {
            "v": 700,
            "d": "Base fee of the STATICCALL opcode"
        },
        "returndatasize": {
            "v": 2,
            "d": "Base fee of the RETURNDATASIZE opcode"
        },
        "returndatacopy": {
            "v": 3,
            "d": "Base fee of the RETURNDATACOPY opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "3000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 3000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\byzantium.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\chainstart.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cchainstart.json
      return function (require, module, exports) {
module.exports={
    "name": "chainstart",
    "comment": "Start of the Ethereum main chain",
    "url": "",
    "status": "",
    "gasConfig": {
        "minGasLimit": {
            "v": 5000,
            "d": "Minimum the gas limit may ever be"
        },
        "gasLimitBoundDivisor": {
            "v": 1024,
            "d": "The bound divisor of the gas limit, used in update calculations"
        },
        "maxRefundQuotient": {
            "v": 2,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "base": {
            "v": 2,
            "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
        },
        "tierStep": {
            "v": [0, 2, 3, 5, 8, 10, 20],
            "d": "Once per operation, for a selection of them"
        },
        "exp": {
            "v": 10,
            "d": "Base fee of the EXP opcode"
        },
        "expByte": {
            "v": 10,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        },
        "sha3": {
            "v": 30,
            "d": "Base fee of the SHA3 opcode"
        },
        "sha3Word": {
            "v": 6,
            "d": "Once per word of the SHA3 operation's data"
        },
        "sload": {
            "v": 50,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstoreSet": {
            "v": 20000,
            "d": "Once per SSTORE operation if the zeroness changes from zero"
        },
        "sstoreReset": {
            "v": 5000,
            "d": "Once per SSTORE operation if the zeroness does not change from zero"
        },
        "sstoreRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation if the zeroness changes to zero"
        },
        "jumpdest": {
            "v": 1,
            "d": "Base fee of the JUMPDEST opcode"
        },
        "log": {
            "v": 375,
            "d": "Base fee of the LOG opcode"
        },
        "logData": {
            "v": 8,
            "d": "Per byte in a LOG* operation's data"
        },
        "logTopic": {
            "v": 375,
            "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
        },
        "create": {
            "v": 32000,
            "d": "Base fee of the CREATE opcode"
        },
        "call": {
            "v": 40,
            "d": "Base fee of the CALL opcode"
        },
        "callStipend": {
            "v": 2300,
            "d": "Free gas given at beginning of call"
        },
        "callValueTransfer": {
            "v": 9000,
            "d": "Paid for CALL when the value transfor is non-zero"
        },
        "callNewAccount": {
            "v": 25000,
            "d": "Paid for CALL when the destination address didn't exist prior"
        },
        "selfdestructRefund": {
            "v": 24000,
            "d": "Refunded following a selfdestruct operation"
        },
        "memory": {
            "v": 3,
            "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
        },
        "quadCoeffDiv": {
            "v": 512,
            "d": "Divisor for the quadratic particle of the memory cost equation"
        },
        "createData": {
            "v": 200,
            "d": ""
        },
        "tx": {
            "v": 21000,
            "d": "Per transaction. NOTE: Not payable on data of calls between transactions"
        },
        "txCreation": {
            "v": 32000,
            "d": "The cost of creating a contract via tx"
        },
        "txDataZero": {
            "v": 4,
            "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
        },
        "txDataNonZero": {
            "v": 68,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "copy": {
            "v": 3,
            "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
        },
        "ecRecover": {
            "v": 3000,
            "d": ""
        },
        "sha256": {
            "v": 60,
            "d": ""
        },
        "sha256Word": {
            "v": 12,
            "d": ""
        },
        "ripemd160": {
            "v": 600,
            "d": ""
        },
        "ripemd160Word": {
            "v": 120,
            "d": ""
        },
        "identity": {
            "v": 15,
            "d": ""
        },
        "identityWord": {
            "v": 3,
            "d": ""
        },
        "stop": {
            "v": 0,
            "d": "Base fee of the STOP opcode"
        },
        "add": {
            "v": 3,
            "d": "Base fee of the ADD opcode"
        },
        "mul": {
            "v": 5,
            "d": "Base fee of the MUL opcode"
        },
        "sub": {
            "v": 3,
            "d": "Base fee of the SUB opcode"
        },
        "div": {
            "v": 5,
            "d": "Base fee of the DIV opcode"
        },
        "sdiv": {
            "v": 5,
            "d": "Base fee of the SDIV opcode"
        },
        "mod": {
            "v": 5,
            "d": "Base fee of the MOD opcode"
        },
        "smod": {
            "v": 5,
            "d": "Base fee of the SMOD opcode"
        },
        "addmod": {
            "v": 8,
            "d": "Base fee of the ADDMOD opcode"
        },
        "mulmod": {
            "v": 8,
            "d": "Base fee of the MULMOD opcode"
        },
        "signextend": {
            "v": 5,
            "d": "Base fee of the SIGNEXTEND opcode"
        },
        "lt": {
            "v": 3,
            "d": "Base fee of the LT opcode"
        },
        "gt": {
            "v": 3,
            "d": "Base fee of the GT opcode"
        },
        "slt": {
            "v": 3,
            "d": "Base fee of the SLT opcode"
        },
        "sgt": {
            "v": 3,
            "d": "Base fee of the SGT opcode"
        },
        "eq": {
            "v": 3,
            "d": "Base fee of the EQ opcode"
        },
        "iszero": {
            "v": 3,
            "d": "Base fee of the ISZERO opcode"
        },
        "and": {
            "v": 3,
            "d": "Base fee of the AND opcode"
        },
        "or": {
            "v": 3,
            "d": "Base fee of the OR opcode"
        },
        "xor": {
            "v": 3,
            "d": "Base fee of the XOR opcode"
        },
        "not": {
            "v": 3,
            "d": "Base fee of the NOT opcode"
        },
        "byte": {
            "v": 3,
            "d": "Base fee of the BYTE opcode"
        },
        "address": {
            "v": 2,
            "d": "Base fee of the ADDRESS opcode"
        },
        "balance": {
            "v": 20,
            "d": "Base fee of the BALANCE opcode"
        },
        "origin": {
            "v": 2,
            "d": "Base fee of the ORIGIN opcode"
        },
        "caller": {
            "v": 2,
            "d": "Base fee of the CALLER opcode"
        },
        "callvalue": {
            "v": 2,
            "d": "Base fee of the CALLVALUE opcode"
        },
        "calldataload": {
            "v": 3,
            "d": "Base fee of the CALLDATALOAD opcode"
        },
        "calldatasize": {
            "v": 2,
            "d": "Base fee of the CALLDATASIZE opcode"
        },
        "calldatacopy": {
            "v": 3,
            "d": "Base fee of the CALLDATACOPY opcode"
        },
        "codesize": {
            "v": 2,
            "d": "Base fee of the CODESIZE opcode"
        },
        "codecopy": {
            "v": 3,
            "d": "Base fee of the CODECOPY opcode"
        },
        "gasprice": {
            "v": 2,
            "d": "Base fee of the GASPRICE opcode"
        },
        "extcodesize": {
            "v": 20,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 20,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "blockhash": {
            "v": 20,
            "d": "Base fee of the BLOCKHASH opcode"
        },
        "coinbase": {
            "v": 2,
            "d": "Base fee of the COINBASE opcode"
        },
        "timestamp": {
            "v": 2,
            "d": "Base fee of the TIMESTAMP opcode"
        },
        "number": {
            "v": 2,
            "d": "Base fee of the NUMBER opcode"
        },
        "difficulty": {
            "v": 2,
            "d": "Base fee of the DIFFICULTY opcode"
        },
        "gaslimit": {
            "v": 2,
            "d": "Base fee of the GASLIMIT opcode"
        },
        "pop": {
            "v": 2,
            "d": "Base fee of the POP opcode"
        },
        "mload": {
            "v": 3,
            "d": "Base fee of the MLOAD opcode"
        },
        "mstore": {
            "v": 3,
            "d": "Base fee of the MSTORE opcode"
        },
        "mstore8": {
            "v": 3,
            "d": "Base fee of the MSTORE8 opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        },
        "jump": {
            "v": 8,
            "d": "Base fee of the JUMP opcode"
        },
        "jumpi": {
            "v": 10,
            "d": "Base fee of the JUMPI opcode"
        },
        "pc": {
            "v": 2,
            "d": "Base fee of the PC opcode"
        },
        "msize": {
            "v": 2,
            "d": "Base fee of the MSIZE opcode"
        },
        "gas": {
            "v": 2,
            "d": "Base fee of the GAS opcode"
        },
        "push": {
            "v": 3,
            "d": "Base fee of the PUSH opcode"
        },
        "dup": {
            "v": 3,
            "d": "Base fee of the DUP opcode"
        },
        "swap": {
            "v": 3,
            "d": "Base fee of the SWAP opcode"
        },
        "callcode": {
            "v": 40,
            "d": "Base fee of the CALLCODE opcode"
        },
        "return": {
            "v": 0,
            "d": "Base fee of the RETURN opcode"
        },
        "invalid": {
            "v": 0,
            "d": "Base fee of the INVALID opcode"
        },
        "selfdestruct": {
            "v": 0,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {
        "stackLimit": {
            "v": 1024,
            "d": "Maximum size of VM stack allowed"
        },
        "callCreateDepth": {
            "v": 1024,
            "d": "Maximum depth of call/create stack"
        },
        "maxExtraDataSize": {
            "v": 32,
            "d": "Maximum size extra data may be after Genesis"
        }
    },
    "pow": {
        "minimumDifficulty": {
            "v": 131072,
            "d": "The minimum that the difficulty may ever be"
        },
        "difficultyBoundDivisor": {
            "v": 2048,
            "d": "The bound divisor of the difficulty, used in the update calculations"
        },
        "durationLimit": {
            "v": 13,
            "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
        },
        "epochDuration": {
            "v": 30000,
            "d": "Duration between proof-of-work epochs"
        },
        "timebombPeriod": {
            "v": 100000,
            "d": "Exponential difficulty timebomb period"
        },
        "minerReward": {
            "v": "5000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 0,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\chainstart.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\constantinople.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cconstantinople.json
      return function (require, module, exports) {
module.exports={
    "name": "constantinople",
    "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
    "url": "https://eips.ethereum.org/EIPS/eip-1013",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": 200,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "netSstoreInitGas": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero"
        },
        "netSstoreCleanGas": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero"
        },
        "netSstoreDirtyGas": {
            "v": 200,
            "d": "Once per SSTORE operation from dirty"
        },
        "netSstoreClearRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "netSstoreResetRefund": {
            "v": 4800,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "netSstoreResetClearRefund": {
            "v": 19800,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "shl": {
            "v": 3,
            "d": "Base fee of the SHL opcode"
        },
        "shr": {
            "v": 3,
            "d": "Base fee of the SHR opcode"
        },
        "sar": {
            "v": 3,
            "d": "Base fee of the SAR opcode"
        },
        "extcodehash": {
            "v": 400,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "create2": {
            "v": 32000,
            "d": "Base fee of the CREATE2 opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "2000000000000000000",
            "d": "The amount a miner gets rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 5000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\constantinople.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\dao.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cdao.json
      return function (require, module, exports) {
module.exports={
    "name": "dao",
    "comment": "DAO rescue hardfork",
    "url": "https://eips.ethereum.org/EIPS/eip-779",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\dao.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\grayGlacier.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CgrayGlacier.json
      return function (require, module, exports) {
module.exports={
    "name": "grayGlacier",
    "comment": "Delaying the difficulty bomb to Mid September 2022",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
    "status": "Draft",
    "eips": [5133],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\grayGlacier.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\homestead.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Chomestead.json
      return function (require, module, exports) {
module.exports={
    "name": "homestead",
    "comment": "Homestead hardfork with protocol and network changes",
    "url": "https://eips.ethereum.org/EIPS/eip-606",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "delegatecall": {
            "v": 40,
            "d": "Base fee of the DELEGATECALL opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\homestead.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\index.js", {"./arrowGlacier.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\arrowGlacier.json","./berlin.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\berlin.json","./byzantium.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\byzantium.json","./chainstart.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\chainstart.json","./constantinople.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\constantinople.json","./dao.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\dao.json","./grayGlacier.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\grayGlacier.json","./homestead.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\homestead.json","./istanbul.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\istanbul.json","./london.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\london.json","./merge.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\merge.json","./mergeForkIdTransition.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\mergeForkIdTransition.json","./muirGlacier.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\muirGlacier.json","./petersburg.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\petersburg.json","./shanghai.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\shanghai.json","./sharding.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\sharding.json","./spuriousDragon.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\spuriousDragon.json","./tangerineWhistle.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\tangerineWhistle.json"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hardforks = void 0;
exports.hardforks = {
    chainstart: require('./chainstart.json'),
    homestead: require('./homestead.json'),
    dao: require('./dao.json'),
    tangerineWhistle: require('./tangerineWhistle.json'),
    spuriousDragon: require('./spuriousDragon.json'),
    byzantium: require('./byzantium.json'),
    constantinople: require('./constantinople.json'),
    petersburg: require('./petersburg.json'),
    istanbul: require('./istanbul.json'),
    muirGlacier: require('./muirGlacier.json'),
    berlin: require('./berlin.json'),
    london: require('./london.json'),
    shanghai: require('./shanghai.json'),
    arrowGlacier: require('./arrowGlacier.json'),
    grayGlacier: require('./grayGlacier.json'),
    mergeForkIdTransition: require('./mergeForkIdTransition.json'),
    merge: require('./merge.json'),
    shardingFork: require('./sharding.json'),
};
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\istanbul.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cistanbul.json
      return function (require, module, exports) {
module.exports={
    "name": "istanbul",
    "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
    "url": "https://eips.ethereum.org/EIPS/eip-1679",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "blake2Round": {
            "v": 1,
            "d": "Gas cost per round for the Blake2 F precompile"
        },
        "ecAdd": {
            "v": 150,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 6000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 45000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 34000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "txDataNonZero": {
            "v": 16,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "sstoreSentryGasEIP2200": {
            "v": 2300,
            "d": "Minimum gas required to be present for an SSTORE call, not consumed"
        },
        "sstoreNoopGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitGasEIP2200": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero to non-zero"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19200,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanGasEIP2200": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4200,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "sstoreClearRefundEIP2200": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "balance": {
            "v": 700,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodehash": {
            "v": 700,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "chainid": {
            "v": 2,
            "d": "Base fee of the CHAINID opcode"
        },
        "selfbalance": {
            "v": 5,
            "d": "Base fee of the SELFBALANCE opcode"
        },
        "sload": {
            "v": 800,
            "d": "Base fee of the SLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\istanbul.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\london.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Clondon.json
      return function (require, module, exports) {
module.exports={
    "name": "london",
    "comment": "HF targeted for July 2021 following the Berlin fork",
    "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
    "status": "Final",
    "eips": [1559, 3198, 3529, 3541]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\london.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\merge.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cmerge.json
      return function (require, module, exports) {
module.exports={
    "name": "merge",
    "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
    "status": "Final",
    "consensus": {
        "type": "pos",
        "algorithm": "casper",
        "casper": {}
    },
    "eips": [3675, 4399]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\merge.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\mergeForkIdTransition.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CmergeForkIdTransition.json
      return function (require, module, exports) {
module.exports={
    "name": "mergeForkIdTransition",
    "comment": "Pre-merge hardfork to fork off non-upgraded clients",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Draft",
    "eips": []
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\mergeForkIdTransition.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\muirGlacier.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CmuirGlacier.json
      return function (require, module, exports) {
module.exports={
    "name": "muirGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://eips.ethereum.org/EIPS/eip-2384",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\muirGlacier.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\petersburg.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cpetersburg.json
      return function (require, module, exports) {
module.exports={
    "name": "petersburg",
    "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
    "url": "https://eips.ethereum.org/EIPS/eip-1716",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreInitGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreCleanGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreDirtyGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\petersburg.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\shanghai.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cshanghai.json
      return function (require, module, exports) {
module.exports={
    "name": "shanghai",
    "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
    "status": "Final",
    "eips": [3651, 3855, 3860, 4895]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\shanghai.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\sharding.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Csharding.json
      return function (require, module, exports) {
module.exports={
    "name": "shardingFork",
    "comment": "Internal hardfork to test proto-danksharding (do not use in production)",
    "url": "https://eips.ethereum.org/EIPS/eip-4844",
    "status": "Experimental",
    "eips": [4844]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\sharding.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\spuriousDragon.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CspuriousDragon.json
      return function (require, module, exports) {
module.exports={
    "name": "spuriousDragon",
    "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
    "url": "https://eips.ethereum.org/EIPS/eip-607",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "expByte": {
            "v": 50,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        }
    },
    "vm": {
        "maxCodeSize": {
            "v": 24576,
            "d": "Maximum length of contract code"
        }
    },
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\spuriousDragon.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\tangerineWhistle.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CtangerineWhistle.json
      return function (require, module, exports) {
module.exports={
    "name": "tangerineWhistle",
    "comment": "Hardfork with gas cost changes for IO-heavy operations",
    "url": "https://eips.ethereum.org/EIPS/eip-608",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "sload": {
            "v": 200,
            "d": "Once per SLOAD operation"
        },
        "call": {
            "v": 700,
            "d": "Once per CALL operation & message call transaction"
        },
        "extcodesize": {
            "v": 700,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 700,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "balance": {
            "v": 400,
            "d": "Base fee of the BALANCE opcode"
        },
        "delegatecall": {
            "v": 700,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "callcode": {
            "v": 700,
            "d": "Base fee of the CALLCODE opcode"
        },
        "selfdestruct": {
            "v": 5000,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\tangerineWhistle.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\index.js", {"./common":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\common.js","./enums":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\enums.js","./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\types.js","./utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\utils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./common"), exports);
__exportStar(require("./enums"), exports);
__exportStar(require("./types"), exports);
__exportStar(require("./utils"), exports);
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\types.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ctypes.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\types.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\utils.js", {"./enums":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\enums.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cutils.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGethGenesis = void 0;
const util_1 = require("@ethereumjs/util");
const enums_1 = require("./enums");
/**
 * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally
 * @param nonce string parsed from the Geth genesis file
 * @returns nonce as a 0x-prefixed 8 byte string
 */
function formatNonce(nonce) {
    if (!nonce || nonce === '0x0') {
        return '0x0000000000000000';
    }
    if ((0, util_1.isHexPrefixed)(nonce)) {
        return '0x' + (0, util_1.stripHexPrefix)(nonce).padStart(16, '0');
    }
    return '0x' + nonce.padStart(16, '0');
}
/**
 * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object
 * @param json object representing the Geth genesis file
 * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition
 * hardfork, which by default is post merge as with the merged eth networks but could also come
 * before merge like in kiln genesis
 * @returns genesis parameters in a `CommonOpts` compliant object
 */
function parseGethParams(json, mergeForkIdPostMerge = true) {
    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, } = json;
    let { extraData, timestamp, nonce } = json;
    const genesisTimestamp = Number(timestamp);
    const { chainId } = config;
    // geth is not strictly putting empty fields with a 0x prefix
    if (extraData === '') {
        extraData = '0x';
    }
    // geth may use number for timestamp
    if (!(0, util_1.isHexPrefixed)(timestamp)) {
        timestamp = (0, util_1.intToHex)(parseInt(timestamp));
    }
    // geth may not give us a nonce strictly formatted to an 8 byte hex string
    if (nonce.length !== 18) {
        nonce = formatNonce(nonce);
    }
    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time
    // but have different configuration parameters in geth genesis parameters
    if (config.eip155Block !== config.eip158Block) {
        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');
    }
    const params = {
        name,
        chainId,
        networkId: chainId,
        genesis: {
            timestamp,
            gasLimit: parseInt(gasLimit),
            difficulty: parseInt(difficulty),
            nonce,
            extraData,
            mixHash,
            coinbase,
            baseFeePerGas,
        },
        hardfork: undefined,
        hardforks: [],
        bootstrapNodes: [],
        consensus: config.clique !== undefined
            ? {
                type: 'poa',
                algorithm: 'clique',
                clique: {
                    // The recent geth genesis seems to be using blockperiodseconds
                    // and epochlength for clique specification
                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
                    period: config.clique.period ?? config.clique.blockperiodseconds,
                    epoch: config.clique.epoch ?? config.clique.epochlength,
                },
            }
            : {
                type: 'pow',
                algorithm: 'ethash',
                ethash: {},
            },
    };
    const forkMap = {
        [enums_1.Hardfork.Homestead]: { name: 'homesteadBlock' },
        [enums_1.Hardfork.Dao]: { name: 'daoForkBlock' },
        [enums_1.Hardfork.TangerineWhistle]: { name: 'eip150Block' },
        [enums_1.Hardfork.SpuriousDragon]: { name: 'eip155Block' },
        [enums_1.Hardfork.Byzantium]: { name: 'byzantiumBlock' },
        [enums_1.Hardfork.Constantinople]: { name: 'constantinopleBlock' },
        [enums_1.Hardfork.Petersburg]: { name: 'petersburgBlock' },
        [enums_1.Hardfork.Istanbul]: { name: 'istanbulBlock' },
        [enums_1.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },
        [enums_1.Hardfork.Berlin]: { name: 'berlinBlock' },
        [enums_1.Hardfork.London]: { name: 'londonBlock' },
        [enums_1.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },
        [enums_1.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },
        [enums_1.Hardfork.ShardingForkDev]: { name: 'shardingForkTime', postMerge: true, isTimestamp: true },
    };
    // forkMapRev is the map from config field name to Hardfork
    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
        acc[forkMap[elem].name] = elem;
        return acc;
    }, {});
    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);
    params.hardforks = configHardforkNames
        .map((nameBlock) => ({
        name: forkMapRev[nameBlock],
        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'
            ? null
            : config[nameBlock],
        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'
            ? config[nameBlock]
            : undefined,
    }))
        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);
    params.hardforks.sort(function (a, b) {
        return (a.block ?? Infinity) - (b.block ?? Infinity);
    });
    params.hardforks.sort(function (a, b) {
        return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp);
    });
    if (config.terminalTotalDifficulty !== undefined) {
        // Following points need to be considered for placement of merge hf
        // - Merge hardfork can't be placed at genesis
        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals
        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL
        //   necessary for e.g. withdrawals
        const mergeConfig = {
            name: enums_1.Hardfork.Merge,
            ttd: config.terminalTotalDifficulty,
            block: null,
        };
        // Merge hardfork has to be placed before first hardfork that is dependent on merge
        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);
        if (postMergeIndex !== -1) {
            params.hardforks.splice(postMergeIndex, 0, mergeConfig);
        }
        else {
            params.hardforks.push(mergeConfig);
        }
    }
    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;
    params.hardfork = latestHardfork?.name;
    params.hardforks.unshift({ name: enums_1.Hardfork.Chainstart, block: 0 });
    return params;
}
/**
 * Parses a genesis.json exported from Geth into parameters for Common instance
 * @param json representing the Geth genesis file
 * @param name optional chain name
 * @returns parsed params
 */
function parseGethGenesis(json, name, mergeForkIdPostMerge) {
    try {
        if (['config', 'difficulty', 'gasLimit', 'alloc'].some((field) => !(field in json))) {
            throw new Error('Invalid format, expected geth genesis fields missing');
        }
        if (name !== undefined) {
            json.name = name;
        }
        return parseGethParams(json, mergeForkIdPostMerge);
    }
    catch (e) {
        throw new Error(`Error parsing parameters file: ${e.message}`);
    }
}
exports.parseGethGenesis = parseGethGenesis;
//# sourceMappingURL=utils.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\common\\dist\\utils.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\baseTransaction.js", {"./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js","@ethereumjs/common":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\index.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5CbaseTransaction.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransaction = void 0;
const common_1 = require("@ethereumjs/common");
const util_1 = require("@ethereumjs/util");
const types_1 = require("./types");
/**
 * This base class will likely be subject to further
 * refactoring along the introduction of additional tx types
 * on the Ethereum network.
 *
 * It is therefore not recommended to use directly.
 */
class BaseTransaction {
    constructor(txData, opts) {
        this.cache = {
            hash: undefined,
            dataFee: undefined,
        };
        /**
         * List of tx type defining EIPs,
         * e.g. 1559 (fee market) and 2930 (access lists)
         * for FeeMarketEIP1559Transaction objects
         */
        this.activeCapabilities = [];
        /**
         * The default chain the tx falls back to if no Common
         * is provided and if the chain can't be derived from
         * a passed in chainId (only EIP-2718 typed txs) or
         * EIP-155 signature (legacy txs).
         *
         * @hidden
         */
        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */
        this.DEFAULT_HARDFORK = common_1.Hardfork.Merge;
        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;
        this._type = Number((0, util_1.bufferToBigInt)((0, util_1.toBuffer)(type)));
        this.txOptions = opts;
        const toB = (0, util_1.toBuffer)(to === '' ? '0x' : to);
        const vB = (0, util_1.toBuffer)(v === '' ? '0x' : v);
        const rB = (0, util_1.toBuffer)(r === '' ? '0x' : r);
        const sB = (0, util_1.toBuffer)(s === '' ? '0x' : s);
        this.nonce = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(nonce === '' ? '0x' : nonce));
        this.gasLimit = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));
        this.to = toB.length > 0 ? new util_1.Address(toB) : undefined;
        this.value = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(value === '' ? '0x' : value));
        this.data = (0, util_1.toBuffer)(data === '' ? '0x' : data);
        this.v = vB.length > 0 ? (0, util_1.bufferToBigInt)(vB) : undefined;
        this.r = rB.length > 0 ? (0, util_1.bufferToBigInt)(rB) : undefined;
        this.s = sB.length > 0 ? (0, util_1.bufferToBigInt)(sB) : undefined;
        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });
        // geth limits gasLimit to 2^64-1
        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)
        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
    }
    /**
     * Returns the transaction type.
     *
     * Note: legacy txs will return tx type `0`.
     */
    get type() {
        return this._type;
    }
    /**
     * Checks if a tx type defining capability is active
     * on a tx, for example the EIP-1559 fee market mechanism
     * or the EIP-2930 access list feature.
     *
     * Note that this is different from the tx type itself,
     * so EIP-2930 access lists can very well be active
     * on an EIP-1559 tx for example.
     *
     * This method can be useful for feature checks if the
     * tx type is unknown (e.g. when instantiated with
     * the tx factory).
     *
     * See `Capabilites` in the `types` module for a reference
     * on all supported capabilities.
     */
    supports(capability) {
        return this.activeCapabilities.includes(capability);
    }
    validate(stringError = false) {
        const errors = [];
        if (this.getBaseFee() > this.gasLimit) {
            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);
        }
        if (this.isSigned() && !this.verifySignature()) {
            errors.push('Invalid Signature');
        }
        return stringError ? errors : errors.length === 0;
    }
    _validateYParity() {
        const { v } = this;
        if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {
            const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');
            throw new Error(msg);
        }
    }
    /**
     * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.
     * Reasoning: https://ethereum.stackexchange.com/a/55728
     */
    _validateHighS() {
        const { s } = this;
        if (this.common.gteHardfork('homestead') && s !== undefined && s > util_1.SECP256K1_ORDER_DIV_2) {
            const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
            throw new Error(msg);
        }
    }
    /**
     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     */
    getBaseFee() {
        const txFee = this.common.param('gasPrices', 'tx');
        let fee = this.getDataFee();
        if (txFee)
            fee += txFee;
        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {
            const txCreationFee = this.common.param('gasPrices', 'txCreation');
            if (txCreationFee)
                fee += txCreationFee;
        }
        return fee;
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        const txDataZero = this.common.param('gasPrices', 'txDataZero');
        const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');
        let cost = BigInt(0);
        for (let i = 0; i < this.data.length; i++) {
            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);
        }
        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {
            const dataLength = BigInt(Math.ceil(this.data.length / 32));
            const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;
            cost += initCodeCost;
        }
        return cost;
    }
    /**
     * If the tx's `to` is to the creation address
     */
    toCreationAddress() {
        return this.to === undefined || this.to.buf.length === 0;
    }
    isSigned() {
        const { v, r, s } = this;
        if (v === undefined || r === undefined || s === undefined) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * Determines if the signature is valid
     */
    verifySignature() {
        try {
            // Main signature verification is done in `getSenderPublicKey()`
            const publicKey = this.getSenderPublicKey();
            return (0, util_1.unpadBuffer)(publicKey).length !== 0;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Returns the sender's address
     */
    getSenderAddress() {
        return new util_1.Address((0, util_1.publicToAddress)(this.getSenderPublicKey()));
    }
    /**
     * Signs a transaction.
     *
     * Note that the signed tx is returned as a new object,
     * use as follows:
     * ```javascript
     * const signedTx = tx.sign(privateKey)
     * ```
     */
    sign(privateKey) {
        if (privateKey.length !== 32) {
            const msg = this._errorMsg('Private key must be 32 bytes in length.');
            throw new Error(msg);
        }
        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature
        // and want to recreate a signature (where EIP155 should be applied)
        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail
        // 2021-06-23
        let hackApplied = false;
        if (this.type === 0 &&
            this.common.gteHardfork('spuriousDragon') &&
            !this.supports(types_1.Capability.EIP155ReplayProtection)) {
            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
            hackApplied = true;
        }
        const msgHash = this.getMessageToSign(true);
        const { v, r, s } = (0, util_1.ecsign)(msgHash, privateKey);
        const tx = this._processSignature(v, r, s);
        // Hack part 2
        if (hackApplied) {
            const index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);
            if (index > -1) {
                this.activeCapabilities.splice(index, 1);
            }
        }
        return tx;
    }
    /**
     * Does chain ID checks on common and returns a common
     * to be used on instantiation
     * @hidden
     *
     * @param common - {@link Common} instance from tx options
     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
     */
    _getCommon(common, chainId) {
        // Chain ID provided
        if (chainId !== undefined) {
            const chainIdBigInt = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(chainId));
            if (common) {
                if (common.chainId() !== chainIdBigInt) {
                    const msg = this._errorMsg('The chain ID does not match the chain ID of Common');
                    throw new Error(msg);
                }
                // Common provided, chain ID does match
                // -> Return provided Common
                return common.copy();
            }
            else {
                if (common_1.Common.isSupportedChainId(chainIdBigInt)) {
                    // No Common, chain ID supported by Common
                    // -> Instantiate Common with chain ID
                    return new common_1.Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });
                }
                else {
                    // No Common, chain ID not supported by Common
                    // -> Instantiate custom Common derived from DEFAULT_CHAIN
                    return common_1.Common.custom({
                        name: 'custom-chain',
                        networkId: chainIdBigInt,
                        chainId: chainIdBigInt,
                    }, { baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
                }
            }
        }
        else {
            // No chain ID provided
            // -> return Common provided or create new default Common
            return (common?.copy() ?? new common_1.Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));
        }
    }
    /**
     * Validates that an object with BigInt values cannot exceed the specified bit limit.
     * @param values Object containing string keys and BigInt values
     * @param bits Number of bits to check (64 or 256)
     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value
     */
    _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {
        for (const [key, value] of Object.entries(values)) {
            switch (bits) {
                case 64:
                    if (cannotEqual) {
                        if (value !== undefined && value >= util_1.MAX_UINT64) {
                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    else {
                        if (value !== undefined && value > util_1.MAX_UINT64) {
                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    break;
                case 256:
                    if (cannotEqual) {
                        if (value !== undefined && value >= util_1.MAX_INTEGER) {
                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    else {
                        if (value !== undefined && value > util_1.MAX_INTEGER) {
                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    break;
                default: {
                    const msg = this._errorMsg('unimplemented bits value');
                    throw new Error(msg);
                }
            }
        }
    }
    static _validateNotArray(values) {
        const txDataKeys = [
            'nonce',
            'gasPrice',
            'gasLimit',
            'to',
            'value',
            'data',
            'v',
            'r',
            's',
            'type',
            'baseFee',
            'maxFeePerGas',
            'chainId',
        ];
        for (const [key, value] of Object.entries(values)) {
            if (txDataKeys.includes(key)) {
                if (Array.isArray(value)) {
                    throw new Error(`${key} cannot be an array`);
                }
            }
        }
    }
    /**
     * Returns the shared error postfix part for _error() method
     * tx type implementations.
     */
    _getSharedErrorPostfix() {
        let hash = '';
        try {
            hash = this.isSigned() ? (0, util_1.bufferToHex)(this.hash()) : 'not available (unsigned)';
        }
        catch (e) {
            hash = 'error';
        }
        let isSigned = '';
        try {
            isSigned = this.isSigned().toString();
        }
        catch (e) {
            hash = 'error';
        }
        let hf = '';
        try {
            hf = this.common.hardfork();
        }
        catch (e) {
            hf = 'error';
        }
        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;
        postfix += `signed=${isSigned} hf=${hf}`;
        return postfix;
    }
}
exports.BaseTransaction = BaseTransaction;
//# sourceMappingURL=baseTransaction.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\baseTransaction.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Cconstants.js
      return function (require, module, exports) {
"use strict";
/** EIP4844 constants */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BYTES_PER_FIELD_ELEMENT = exports.FIELD_ELEMENTS_PER_BLOB = exports.MAX_TX_WRAP_KZG_COMMITMENTS = exports.LIMIT_BLOBS_PER_TX = exports.MAX_VERSIONED_HASHES_LIST_SIZE = exports.MAX_ACCESS_LIST_SIZE = exports.MAX_CALLDATA_SIZE = void 0;
exports.MAX_CALLDATA_SIZE = 16777216; // 2 ** 24
exports.MAX_ACCESS_LIST_SIZE = 16777216; // 2 ** 24
exports.MAX_VERSIONED_HASHES_LIST_SIZE = 16777216; // 2 ** 24
exports.LIMIT_BLOBS_PER_TX = 16777216; // 2 ** 24
exports.MAX_TX_WRAP_KZG_COMMITMENTS = 16777216; // 2 ** 24
exports.FIELD_ELEMENTS_PER_BLOB = 4096; // This is also in the Common 4844 parameters but needed here since types can't access Common params
exports.BYTES_PER_FIELD_ELEMENT = 32;
//# sourceMappingURL=constants.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\constants.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip1559Transaction.js", {"./baseTransaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\baseTransaction.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\util.js","@ethereumjs/rlp":"F:\\metamask-extension\\node_modules\\@ethereumjs\\rlp\\dist\\index.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/keccak":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\keccak.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Ceip1559Transaction.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeMarketEIP1559Transaction = void 0;
const rlp_1 = require("@ethereumjs/rlp");
const util_1 = require("@ethereumjs/util");
const keccak_1 = require("ethereum-cryptography/keccak");
const baseTransaction_1 = require("./baseTransaction");
const util_2 = require("./util");
const TRANSACTION_TYPE = 2;
const TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');
/**
 * Typed transaction with a new gas fee market mechanism
 *
 * - TransactionType: 2
 * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)
 */
class FeeMarketEIP1559Transaction extends baseTransaction_1.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: TRANSACTION_TYPE }, opts);
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */
        this.DEFAULT_HARDFORK = 'london';
        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (this.common.isActivatedEIP(1559) === false) {
            throw new Error('EIP-1559 not enabled on Common');
        }
        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);
        // Populate the access list fields
        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_2.AccessLists.verifyAccessList(this.accessList);
        this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));
        this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));
        this._validateCannotExceedMaxInteger({
            maxFeePerGas: this.maxFeePerGas,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
        });
        baseTransaction_1.BaseTransaction._validateNotArray(txData);
        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {
            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');
            throw new Error(msg);
        }
        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');
            throw new Error(msg);
        }
        this._validateYParity();
        this._validateHighS();
        if (this.common.isActivatedEIP(3860)) {
            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);
        }
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */
    static fromTxData(txData, opts = {}) {
        return new FeeMarketEIP1559Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized
                .slice(0, 1)
                .toString('hex')}`);
        }
        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(serialized.slice(1)));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     */
    static fromValuesArray(values, opts = {}) {
        if (values.length !== 9 && values.length !== 12) {
            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');
        }
        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;
        this._validateNotArray({ chainId, v });
        (0, util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });
        return new FeeMarketEIP1559Transaction({
            chainId: (0, util_1.bufferToBigInt)(chainId),
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList ?? [],
            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,
            r,
            s,
        }, opts);
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
            return this.cache.dataFee.value;
        }
        let cost = super.getDataFee();
        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
        if (Object.isFrozen(this)) {
            this.cache.dataFee = {
                value: cost,
                hardfork: this.common.hardfork(),
            };
        }
        return cost;
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     * @param baseFee The base fee of the block (will be set to 0 if not provided)
     */
    getUpfrontCost(baseFee = BigInt(0)) {
        const prio = this.maxPriorityFeePerGas;
        const maxBase = this.maxFeePerGas - baseFee;
        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
        const gasPrice = inclusionFeePerGas + baseFee;
        return this.gasLimit * gasPrice + this.value;
    }
    /**
     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     *
     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Buffer values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),
            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),
            (0, util_1.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),
            (0, util_1.bigIntToUnpaddedBuffer)(this.maxFeePerGas),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, util_1.bigIntToUnpaddedBuffer)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),
            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),
            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-1559 transaction.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    serialize() {
        const base = this.raw();
        return Buffer.concat([
            TRANSACTION_TYPE_BUFFER,
            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),
        ]);
    }
    /**
     * Returns the serialized unsigned tx (hashed or raw), which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
     * ```
     *
     * @param hashMessage - Return hashed message if set to true (default: true)
     */
    getMessageToSign(hashMessage = true) {
        const base = this.raw().slice(0, 9);
        const message = Buffer.concat([
            TRANSACTION_TYPE_BUFFER,
            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),
        ]);
        if (hashMessage) {
            return Buffer.from((0, keccak_1.keccak256)(message));
        }
        else {
            return message;
        }
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');
            throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) {
                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));
            }
            return this.cache.hash;
        }
        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    getMessageToVerifySignature() {
        return this.getMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('Cannot call this method if transaction is not signed');
            throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign
            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));
        }
        catch (e) {
            const msg = this._errorMsg('Invalid Signature');
            throw new Error(msg);
        }
    }
    _processSignature(v, r, s) {
        const opts = { ...this.txOptions, common: this.common };
        return FeeMarketEIP1559Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: v - BigInt(27),
            r: (0, util_1.bufferToBigInt)(r),
            s: (0, util_1.bufferToBigInt)(s),
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */
    toJSON() {
        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);
        return {
            chainId: (0, util_1.bigIntToHex)(this.chainId),
            nonce: (0, util_1.bigIntToHex)(this.nonce),
            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),
            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),
            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, util_1.bigIntToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,
        };
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
}
exports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip1559Transaction.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip2930Transaction.js", {"./baseTransaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\baseTransaction.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\util.js","@ethereumjs/rlp":"F:\\metamask-extension\\node_modules\\@ethereumjs\\rlp\\dist\\index.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/keccak":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\keccak.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Ceip2930Transaction.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessListEIP2930Transaction = void 0;
const rlp_1 = require("@ethereumjs/rlp");
const util_1 = require("@ethereumjs/util");
const keccak_1 = require("ethereum-cryptography/keccak");
const baseTransaction_1 = require("./baseTransaction");
const util_2 = require("./util");
const TRANSACTION_TYPE = 1;
const TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');
/**
 * Typed transaction with optional access lists
 *
 * - TransactionType: 1
 * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)
 */
class AccessListEIP2930Transaction extends baseTransaction_1.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: TRANSACTION_TYPE }, opts);
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */
        this.DEFAULT_HARDFORK = 'berlin';
        const { chainId, accessList, gasPrice } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        // EIP-2718 check is done in Common
        if (!this.common.isActivatedEIP(2930)) {
            throw new Error('EIP-2930 not enabled on Common');
        }
        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);
        // Populate the access list fields
        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_2.AccessLists.verifyAccessList(this.accessList);
        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));
        this._validateCannotExceedMaxInteger({
            gasPrice: this.gasPrice,
        });
        baseTransaction_1.BaseTransaction._validateNotArray(txData);
        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {
            const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');
            throw new Error(msg);
        }
        this._validateYParity();
        this._validateHighS();
        if (this.common.isActivatedEIP(3860)) {
            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);
        }
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */
    static fromTxData(txData, opts = {}) {
        return new AccessListEIP2930Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized
                .slice(0, 1)
                .toString('hex')}`);
        }
        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized.slice(1))));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return AccessListEIP2930Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     */
    static fromValuesArray(values, opts = {}) {
        if (values.length !== 8 && values.length !== 11) {
            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');
        }
        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;
        this._validateNotArray({ chainId, v });
        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
        const emptyAccessList = [];
        return new AccessListEIP2930Transaction({
            chainId: (0, util_1.bufferToBigInt)(chainId),
            nonce,
            gasPrice,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList ?? emptyAccessList,
            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,
            r,
            s,
        }, opts);
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
            return this.cache.dataFee.value;
        }
        let cost = super.getDataFee();
        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
        if (Object.isFrozen(this)) {
            this.cache.dataFee = {
                value: cost,
                hardfork: this.common.hardfork(),
            };
        }
        return cost;
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     */
    getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
    }
    /**
     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     *
     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Buffer values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),
            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, util_1.bigIntToUnpaddedBuffer)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),
            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),
            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-2930 transaction.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    serialize() {
        const base = this.raw();
        return Buffer.concat([
            TRANSACTION_TYPE_BUFFER,
            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),
        ]);
    }
    /**
     * Returns the serialized unsigned tx (hashed or raw), which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
     * ```
     *
     * @param hashMessage - Return hashed message if set to true (default: true)
     */
    getMessageToSign(hashMessage = true) {
        const base = this.raw().slice(0, 8);
        const message = Buffer.concat([
            TRANSACTION_TYPE_BUFFER,
            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),
        ]);
        if (hashMessage) {
            return Buffer.from((0, keccak_1.keccak256)(message));
        }
        else {
            return message;
        }
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');
            throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) {
                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));
            }
            return this.cache.hash;
        }
        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    getMessageToVerifySignature() {
        return this.getMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('Cannot call this method if transaction is not signed');
            throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign
            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));
        }
        catch (e) {
            const msg = this._errorMsg('Invalid Signature');
            throw new Error(msg);
        }
    }
    _processSignature(v, r, s) {
        const opts = { ...this.txOptions, common: this.common };
        return AccessListEIP2930Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: v - BigInt(27),
            r: (0, util_1.bufferToBigInt)(r),
            s: (0, util_1.bufferToBigInt)(s),
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */
    toJSON() {
        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);
        return {
            chainId: (0, util_1.bigIntToHex)(this.chainId),
            nonce: (0, util_1.bigIntToHex)(this.nonce),
            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),
            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, util_1.bigIntToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,
        };
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail
        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
}
exports.AccessListEIP2930Transaction = AccessListEIP2930Transaction;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip2930Transaction.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip4844Transaction.js", {"./baseTransaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\baseTransaction.js","./constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\constants.js","./kzg/kzg":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\kzg\\kzg.js","./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\util.js","./utils/blobHelpers":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\utils\\blobHelpers.js","@chainsafe/ssz":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\index.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/keccak":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\keccak.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Ceip4844Transaction.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobEIP4844Transaction = void 0;
const ssz_1 = require("@chainsafe/ssz");
const util_1 = require("@ethereumjs/util");
const keccak_1 = require("ethereum-cryptography/keccak");
const baseTransaction_1 = require("./baseTransaction");
const constants_1 = require("./constants");
const kzg_1 = require("./kzg/kzg");
const types_1 = require("./types");
const util_2 = require("./util");
const blobHelpers_1 = require("./utils/blobHelpers");
const TRANSACTION_TYPE = 0x05;
const TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');
const validateBlobTransactionNetworkWrapper = (versionedHashes, blobs, commitments, kzgProof, version) => {
    if (!(versionedHashes.length === blobs.length && blobs.length === commitments.length)) {
        throw new Error('Number of versionedHashes, blobs, and commitments not all equal');
    }
    try {
        kzg_1.kzg.verifyAggregateKzgProof(blobs, commitments, kzgProof);
    }
    catch (e) {
        throw new Error('KZG proof cannot be verified from blobs/commitments');
    }
    for (let x = 0; x < versionedHashes.length; x++) {
        const computedVersionedHash = (0, blobHelpers_1.computeVersionedHash)(commitments[x], version);
        if (!(0, ssz_1.byteArrayEquals)(computedVersionedHash, versionedHashes[x])) {
            throw new Error(`commitment for blob at index ${x} does not match versionedHash`);
        }
    }
};
/**
 * Typed transaction with a new gas fee market mechanism for transactions that include "blobs" of data
 *
 * - TransactionType: 5
 * - EIP: [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)
 */
class BlobEIP4844Transaction extends baseTransaction_1.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static constructors or factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: TRANSACTION_TYPE }, opts);
        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas, maxFeePerDataGas } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (this.common.isActivatedEIP(1559) === false) {
            throw new Error('EIP-1559 not enabled on Common');
        }
        if (this.common.isActivatedEIP(4844) === false) {
            throw new Error('EIP-4844 not enabled on Common');
        }
        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);
        // Populate the access list fields
        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_2.AccessLists.verifyAccessList(this.accessList);
        this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));
        this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));
        this._validateCannotExceedMaxInteger({
            maxFeePerGas: this.maxFeePerGas,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
        });
        baseTransaction_1.BaseTransaction._validateNotArray(txData);
        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {
            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');
            throw new Error(msg);
        }
        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');
            throw new Error(msg);
        }
        this.maxFeePerDataGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)((maxFeePerDataGas ?? '') === '' ? '0x' : maxFeePerDataGas));
        this.versionedHashes = (txData.versionedHashes ?? []).map((vh) => (0, util_1.toBuffer)(vh));
        this._validateYParity();
        this._validateHighS();
        if (this.common.isActivatedEIP(3860)) {
            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);
        }
        for (const hash of this.versionedHashes) {
            if (hash.length !== 32) {
                const msg = this._errorMsg('versioned hash is invalid length');
                throw new Error(msg);
            }
            if (BigInt(hash[0]) !== this.common.paramByEIP('sharding', 'blobCommitmentVersionKzg', 4844)) {
                const msg = this._errorMsg('versioned hash does not start with KZG commitment version');
                throw new Error(msg);
            }
        }
        if (this.versionedHashes.length > constants_1.LIMIT_BLOBS_PER_TX) {
            const msg = this._errorMsg(`tx can contain at most ${constants_1.LIMIT_BLOBS_PER_TX} blobs`);
            throw new Error(msg);
        }
        this.blobs = txData.blobs?.map((blob) => (0, util_1.toBuffer)(blob));
        this.kzgCommitments = txData.kzgCommitments?.map((commitment) => (0, util_1.toBuffer)(commitment));
        this.aggregateKzgProof = (0, util_1.toBuffer)(txData.kzgProof);
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    static fromTxData(txData, opts) {
        return new BlobEIP4844Transaction(txData, opts);
    }
    /**
     * Creates the minimal representation of a blob transaction from the network wrapper version.
     * The minimal representation is used when adding transactions to an execution payload/block
     * @param txData a {@link BlobEIP4844Transaction} containing optional blobs/kzg commitments
     * @param opts - dictionary of {@link TxOptions}
     * @returns the "minimal" representation of a BlobEIP4844Transaction (i.e. transaction object minus blobs and kzg commitments)
     */
    static minimalFromNetworkWrapper(txData, opts) {
        const tx = BlobEIP4844Transaction.fromTxData({
            ...txData,
            ...{ blobs: undefined, kzgCommitments: undefined, kzgProof: undefined },
        }, opts);
        return tx;
    }
    /**
     * Creates a transaction from the network encoding of a blob transaction (with blobs/commitments/proof)
     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper
     * @param opts any TxOptions defined
     * @returns a BlobEIP4844Transaction
     * @throws if no KZG library is loaded -- using the `initKzg` helper method -- or if `opts.common` not provided
     */
    static fromSerializedBlobTxNetworkWrapper(serialized, opts) {
        if (!opts || !opts.common) {
            throw new Error('common instance required to validate versioned hashes');
        }
        // Validate network wrapper
        const wrapper = types_1.BlobNetworkTransactionWrapper.deserialize(serialized.slice(1));
        const decodedTx = wrapper.tx.message;
        const version = Number(opts.common.paramByEIP('sharding', 'blobCommitmentVersionKzg', 4844));
        validateBlobTransactionNetworkWrapper(decodedTx.blobVersionedHashes, wrapper.blobs, wrapper.blobKzgs, wrapper.kzgAggregatedProof, version);
        const accessList = [];
        for (const listItem of decodedTx.accessList) {
            const address = Buffer.from(listItem.address);
            const storageKeys = listItem.storageKeys.map((key) => Buffer.from(key));
            const accessListItem = [address, storageKeys];
            accessList.push(accessListItem);
        }
        const to = decodedTx.to.value === null
            ? undefined
            : util_1.Address.fromString((0, util_1.bufferToHex)(Buffer.from(decodedTx.to.value)));
        const versionedHashes = decodedTx.blobVersionedHashes.map((el) => Buffer.from(el));
        const commitments = wrapper.blobKzgs.map((el) => Buffer.from(el));
        const blobs = wrapper.blobs.map((el) => Buffer.from(el));
        const txData = {
            ...decodedTx,
            ...{
                versionedHashes,
                accessList,
                to,
                blobs,
                kzgCommitments: commitments,
                kzgProof: Buffer.from(wrapper.kzgAggregatedProof),
                r: wrapper.tx.signature.r,
                s: wrapper.tx.signature.s,
                v: BigInt(wrapper.tx.signature.yParity),
                gasLimit: decodedTx.gas,
                maxFeePerGas: decodedTx.maxFeePerGas,
                maxPriorityFeePerGas: decodedTx.maxPriorityFeePerGas,
            },
        };
        return new BlobEIP4844Transaction(txData, opts);
    }
    /**
     * Creates a transaction from the "minimal" encoding of a blob transaction (without blobs/commitments/kzg proof)
     * @param serialized a buffer representing a serialized signed blob transaction
     * @param opts any TxOptions defined
     * @returns a BlobEIP4844Transaction
     */
    static fromSerializedTx(serialized, opts) {
        const decoded = types_1.SignedBlobTransactionType.deserialize(serialized.slice(1));
        const tx = decoded.message;
        const accessList = [];
        for (const listItem of tx.accessList) {
            const address = Buffer.from(listItem.address);
            const storageKeys = listItem.storageKeys.map((key) => Buffer.from(key));
            const accessListItem = [address, storageKeys];
            accessList.push(accessListItem);
        }
        const to = tx.to.value === null ? undefined : util_1.Address.fromString((0, util_1.bufferToHex)(Buffer.from(tx.to.value)));
        const versionedHashes = tx.blobVersionedHashes.map((el) => Buffer.from(el));
        const txData = {
            ...tx,
            ...{
                versionedHashes,
                to,
                accessList,
                r: decoded.signature.r,
                s: decoded.signature.s,
                v: BigInt(decoded.signature.yParity),
                gasLimit: decoded.message.gas,
            },
        };
        return new BlobEIP4844Transaction(txData, opts);
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     * @param baseFee The base fee of the block (will be set to 0 if not provided)
     */
    getUpfrontCost(baseFee = BigInt(0)) {
        const prio = this.maxPriorityFeePerGas;
        const maxBase = this.maxFeePerGas - baseFee;
        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
        const gasPrice = inclusionFeePerGas + baseFee;
        return this.gasLimit * gasPrice + this.value;
    }
    /**
     * This method is not implemented for blob transactions as the `raw` method is used exclusively with
     * rlp encoding and these transactions use SSZ for serialization.
     */
    raw() {
        throw new Error('Method not implemented.');
    }
    toValue() {
        const to = {
            selector: this.to !== undefined ? 1 : 0,
            value: this.to?.toBuffer() ?? null,
        };
        return {
            message: {
                chainId: this.common.chainId(),
                nonce: this.nonce,
                maxPriorityFeePerGas: this.maxPriorityFeePerGas,
                maxFeePerGas: this.maxFeePerGas,
                gas: this.gasLimit,
                to,
                value: this.value,
                data: this.data,
                accessList: this.accessList.map((listItem) => {
                    return { address: listItem[0], storageKeys: listItem[1] };
                }),
                blobVersionedHashes: this.versionedHashes,
                maxFeePerDataGas: this.maxFeePerDataGas,
            },
            // TODO: Decide how to serialize an unsigned transaction
            signature: {
                r: this.r ?? BigInt(0),
                s: this.s ?? BigInt(0),
                yParity: this.v === BigInt(1) ? true : false,
            },
        };
    }
    /**
     * Serialize a blob transaction to the execution payload variant
     * @returns the minimum (execution payload) serialization of a signed transaction
     */
    serialize() {
        const sszEncodedTx = types_1.SignedBlobTransactionType.serialize(this.toValue());
        return Buffer.concat([TRANSACTION_TYPE_BUFFER, sszEncodedTx]);
    }
    /**
     * @returns the serialized form of a blob transaction in the network wrapper format (used for gossipping mempool transactions over devp2p)
     */
    serializeNetworkWrapper() {
        if (this.blobs === undefined ||
            this.kzgCommitments === undefined ||
            this.aggregateKzgProof === undefined) {
            throw new Error('cannot serialize network wrapper without blobs, KZG commitments and aggregate KZG proof provided');
        }
        const to = {
            selector: this.to !== undefined ? 1 : 0,
            value: this.to?.toBuffer() ?? null,
        };
        const blobArrays = this.blobs?.map((blob) => Uint8Array.from(blob)) ?? [];
        const serializedTxWrapper = types_1.BlobNetworkTransactionWrapper.serialize({
            blobs: blobArrays,
            blobKzgs: this.kzgCommitments?.map((commitment) => Uint8Array.from(commitment)) ?? [],
            tx: { ...(0, util_2.blobTxToNetworkWrapperDataFormat)(this), ...to },
            kzgAggregatedProof: Uint8Array.from(this.aggregateKzgProof ?? []),
        });
        return Buffer.concat([Buffer.from([0x05]), serializedTxWrapper]);
    }
    getMessageToSign(_hashMessage) {
        return this.unsignedHash();
    }
    /**
     * Returns the hash of a blob transaction
     */
    unsignedHash() {
        const serializedTx = types_1.BlobTransactionType.serialize(this.toValue().message);
        return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([TRANSACTION_TYPE_BUFFER, serializedTx])));
    }
    hash() {
        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));
    }
    getMessageToVerifySignature() {
        return this.getMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('Cannot call this method if transaction is not signed');
            throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign
            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));
        }
        catch (e) {
            const msg = this._errorMsg('Invalid Signature');
            throw new Error(msg);
        }
    }
    toJSON() {
        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);
        return {
            chainId: (0, util_1.bigIntToHex)(this.chainId),
            nonce: (0, util_1.bigIntToHex)(this.nonce),
            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),
            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),
            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, util_1.bigIntToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,
            maxFeePerDataGas: (0, util_1.bigIntToHex)(this.maxFeePerDataGas),
            versionedHashes: this.versionedHashes.map((hash) => (0, util_1.bufferToHex)(hash)),
        };
    }
    _processSignature(v, r, s) {
        const opts = { ...this.txOptions, common: this.common };
        return BlobEIP4844Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: v - BigInt(27),
            r: (0, util_1.bufferToBigInt)(r),
            s: (0, util_1.bufferToBigInt)(s),
            maxFeePerDataGas: this.maxFeePerDataGas,
            versionedHashes: this.versionedHashes,
            blobs: this.blobs,
            kzgCommitments: this.kzgCommitments,
            kzgProof: this.aggregateKzgProof,
        }, opts);
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
    /**
     * @returns the number of blobs included with this transaction
     */
    numBlobs() {
        return this.versionedHashes.length;
    }
}
exports.BlobEIP4844Transaction = BlobEIP4844Transaction;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip4844Transaction.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\fromRpc.js", {"@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5CfromRpc.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeTxParams = void 0;
const util_1 = require("@ethereumjs/util");
const normalizeTxParams = (_txParams) => {
    const txParams = Object.assign({}, _txParams);
    txParams.gasLimit = (0, util_1.toType)(txParams.gasLimit ?? txParams.gas, util_1.TypeOutput.BigInt);
    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;
    // check and convert gasPrice and value params
    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;
    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;
    // strict byte length checking
    txParams.to =
        txParams.to !== null && txParams.to !== undefined
            ? (0, util_1.setLengthLeft)((0, util_1.toBuffer)(txParams.to), 20)
            : null;
    txParams.v = (0, util_1.toType)(txParams.v, util_1.TypeOutput.BigInt);
    return txParams;
};
exports.normalizeTxParams = normalizeTxParams;
//# sourceMappingURL=fromRpc.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\fromRpc.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\index.js", {"./eip1559Transaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip1559Transaction.js","./eip2930Transaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip2930Transaction.js","./eip4844Transaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip4844Transaction.js","./kzg/kzg":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\kzg\\kzg.js","./legacyTransaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\legacyTransaction.js","./transactionFactory":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\transactionFactory.js","./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js","./utils/blobHelpers":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\utils\\blobHelpers.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeVersionedHash = exports.TransactionFactory = exports.Transaction = exports.kzg = exports.initKZG = exports.BlobEIP4844Transaction = exports.AccessListEIP2930Transaction = exports.FeeMarketEIP1559Transaction = void 0;
var eip1559Transaction_1 = require("./eip1559Transaction");
Object.defineProperty(exports, "FeeMarketEIP1559Transaction", { enumerable: true, get: function () { return eip1559Transaction_1.FeeMarketEIP1559Transaction; } });
var eip2930Transaction_1 = require("./eip2930Transaction");
Object.defineProperty(exports, "AccessListEIP2930Transaction", { enumerable: true, get: function () { return eip2930Transaction_1.AccessListEIP2930Transaction; } });
var eip4844Transaction_1 = require("./eip4844Transaction");
Object.defineProperty(exports, "BlobEIP4844Transaction", { enumerable: true, get: function () { return eip4844Transaction_1.BlobEIP4844Transaction; } });
var kzg_1 = require("./kzg/kzg");
Object.defineProperty(exports, "initKZG", { enumerable: true, get: function () { return kzg_1.initKZG; } });
Object.defineProperty(exports, "kzg", { enumerable: true, get: function () { return kzg_1.kzg; } });
var legacyTransaction_1 = require("./legacyTransaction");
Object.defineProperty(exports, "Transaction", { enumerable: true, get: function () { return legacyTransaction_1.Transaction; } });
var transactionFactory_1 = require("./transactionFactory");
Object.defineProperty(exports, "TransactionFactory", { enumerable: true, get: function () { return transactionFactory_1.TransactionFactory; } });
__exportStar(require("./types"), exports);
var blobHelpers_1 = require("./utils/blobHelpers");
Object.defineProperty(exports, "computeVersionedHash", { enumerable: true, get: function () { return blobHelpers_1.computeVersionedHash; } });
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\kzg\\kzg.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Ckzg%5Ckzg.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initKZG = exports.kzg = void 0;
function kzgNotLoaded() {
    throw Error('kzg library not loaded');
}
// eslint-disable-next-line import/no-mutable-exports
exports.kzg = {
    freeTrustedSetup: kzgNotLoaded,
    loadTrustedSetup: kzgNotLoaded,
    blobToKzgCommitment: kzgNotLoaded,
    computeAggregateKzgProof: kzgNotLoaded,
    verifyKzgProof: kzgNotLoaded,
    verifyAggregateKzgProof: kzgNotLoaded,
};
/**
 * @param kzgLib a KZG implementation (defaults to c-kzg)
 * @param trustedSetupPath the full path (e.g. "/home/linux/devnet4.txt") to a kzg trusted setup text file
 */
function initKZG(kzgLib, trustedSetupPath) {
    exports.kzg = kzgLib;
    exports.kzg.loadTrustedSetup(trustedSetupPath);
}
exports.initKZG = initKZG;
//# sourceMappingURL=kzg.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\kzg\\kzg.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\legacyTransaction.js", {"./baseTransaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\baseTransaction.js","./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js","./util":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\util.js","@ethereumjs/rlp":"F:\\metamask-extension\\node_modules\\@ethereumjs\\rlp\\dist\\index.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/keccak":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\keccak.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5ClegacyTransaction.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const rlp_1 = require("@ethereumjs/rlp");
const util_1 = require("@ethereumjs/util");
const keccak_1 = require("ethereum-cryptography/keccak");
const baseTransaction_1 = require("./baseTransaction");
const types_1 = require("./types");
const util_2 = require("./util");
const TRANSACTION_TYPE = 0;
function meetsEIP155(_v, chainId) {
    const v = Number(_v);
    const chainIdDoubled = Number(chainId) * 2;
    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;
}
/**
 * An Ethereum non-typed (legacy) transaction
 */
class Transaction extends baseTransaction_1.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: TRANSACTION_TYPE }, opts);
        this.common = this._validateTxV(this.v, opts.common);
        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));
        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {
            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');
            throw new Error(msg);
        }
        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });
        baseTransaction_1.BaseTransaction._validateNotArray(txData);
        if (this.common.gteHardfork('spuriousDragon')) {
            if (!this.isSigned()) {
                this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
            }
            else {
                // EIP155 spec:
                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36
                // then when computing the hash of a transaction for purposes of signing or recovering
                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)
                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.
                // v and chain ID meet EIP-155 conditions
                if (meetsEIP155(this.v, this.common.chainId())) {
                    this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
                }
            }
        }
        if (this.common.isActivatedEIP(3860)) {
            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);
        }
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
     *
     * Notes:
     * - All parameters are optional and have some basic default values
     */
    static fromTxData(txData, opts = {}) {
        return new Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input. Must be array');
        }
        return this.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     */
    static fromValuesArray(values, opts = {}) {
        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction
        // This happens if you get the RLP data from `raw()`
        if (values.length !== 6 && values.length !== 9) {
            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');
        }
        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;
        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
        return new Transaction({
            nonce,
            gasPrice,
            gasLimit,
            to,
            value,
            data,
            v,
            r,
            s,
        }, opts);
    }
    /**
     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     *
     * For legacy txs this is also the correct format to add transactions
     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method
     * for typed txs).
     *
     * For an unsigned tx this method returns the empty Buffer values
     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
     * representation have a look at {@link Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, util_1.bigIntToUnpaddedBuffer)(this.value),
            this.data,
            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),
            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),
            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),
        ];
    }
    /**
     * Returns the serialized encoding of the legacy transaction.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     *
     * For an unsigned tx this method uses the empty Buffer values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link Transaction.getMessageToSign}.
     */
    serialize() {
        return Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw())));
    }
    _getMessageToSign() {
        const values = [
            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),
            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, util_1.bigIntToUnpaddedBuffer)(this.value),
            this.data,
        ];
        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
            values.push((0, util_1.toBuffer)(this.common.chainId()));
            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));
            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));
        }
        return values;
    }
    getMessageToSign(hashMessage = true) {
        const message = this._getMessageToSign();
        if (hashMessage) {
            return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));
        }
        else {
            return message;
        }
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
            return this.cache.dataFee.value;
        }
        if (Object.isFrozen(this)) {
            this.cache.dataFee = {
                value: super.getDataFee(),
                hardfork: this.common.hardfork(),
            };
        }
        return super.getDataFee();
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     */
    getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');
            throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) {
                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));
            }
            return this.cache.hash;
        }
        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    getMessageToVerifySignature() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('This transaction is not signed');
            throw new Error(msg);
        }
        const message = this._getMessageToSign();
        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, util_1.ecrecover)(msgHash, v, (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);
        }
        catch (e) {
            const msg = this._errorMsg('Invalid Signature');
            throw new Error(msg);
        }
    }
    /**
     * Process the v, r, s values from the `sign` method of the base transaction.
     */
    _processSignature(v, r, s) {
        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
            v += this.common.chainId() * BigInt(2) + BigInt(8);
        }
        const opts = { ...this.txOptions, common: this.common };
        return Transaction.fromTxData({
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            v,
            r: (0, util_1.bufferToBigInt)(r),
            s: (0, util_1.bufferToBigInt)(s),
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction.
     */
    toJSON() {
        return {
            nonce: (0, util_1.bigIntToHex)(this.nonce),
            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),
            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, util_1.bigIntToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,
        };
    }
    /**
     * Validates tx's `v` value
     */
    _validateTxV(_v, common) {
        let chainIdBigInt;
        const v = _v !== undefined ? Number(_v) : undefined;
        // Check for valid v values in the scope of a signed legacy tx
        if (v !== undefined) {
            // v is 1. not matching the EIP-155 chainId included case and...
            // v is 2. not matching the classic v=27 or v=28 case
            if (v < 37 && v !== 27 && v !== 28) {
                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);
            }
        }
        // No unsigned tx and EIP-155 activated and chain ID included
        if (v !== undefined &&
            v !== 0 &&
            (!common || common.gteHardfork('spuriousDragon')) &&
            v !== 27 &&
            v !== 28) {
            if (common) {
                if (!meetsEIP155(BigInt(v), common.chainId())) {
                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);
                }
            }
            else {
                // Derive the original chain ID
                let numSub;
                if ((v - 35) % 2 === 0) {
                    numSub = 35;
                }
                else {
                    numSub = 36;
                }
                // Use derived chain ID to create a proper Common
                chainIdBigInt = BigInt(v - numSub) / BigInt(2);
            }
        }
        return this._getCommon(common, chainIdBigInt);
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` gasPrice=${this.gasPrice}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
}
exports.Transaction = Transaction;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\legacyTransaction.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\transactionFactory.js", {"../../../../../is-buffer/index.js":"F:\\metamask-extension\\node_modules\\is-buffer\\index.js","./eip1559Transaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip1559Transaction.js","./eip2930Transaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip2930Transaction.js","./eip4844Transaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\eip4844Transaction.js","./fromRpc":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\fromRpc.js","./legacyTransaction":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\legacyTransaction.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","@ethersproject/providers":"F:\\metamask-extension\\node_modules\\@ethersproject\\providers\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5CtransactionFactory.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionFactory = void 0;
const util_1 = require("@ethereumjs/util");
const providers_1 = require("@ethersproject/providers");
const eip1559Transaction_1 = require("./eip1559Transaction");
const eip2930Transaction_1 = require("./eip2930Transaction");
const eip4844Transaction_1 = require("./eip4844Transaction");
const fromRpc_1 = require("./fromRpc");
const legacyTransaction_1 = require("./legacyTransaction");
class TransactionFactory {
    // It is not possible to instantiate a TransactionFactory object.
    constructor() { }
    /**
     * Create a transaction from a `txData` object
     *
     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
     * @param txOptions - Options to pass on to the constructor of the transaction
     */
    static fromTxData(txData, txOptions = {}) {
        if (!('type' in txData) || txData.type === undefined) {
            // Assume legacy transaction
            return legacyTransaction_1.Transaction.fromTxData(txData, txOptions);
        }
        else {
            const txType = Number((0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.type)));
            if (txType === 0) {
                return legacyTransaction_1.Transaction.fromTxData(txData, txOptions);
            }
            else if (txType === 1) {
                return eip2930Transaction_1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);
            }
            else if (txType === 2) {
                return eip1559Transaction_1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);
            }
            else if (txType === 5) {
                return eip4844Transaction_1.BlobEIP4844Transaction.fromTxData(txData, txOptions);
            }
            else {
                throw new Error(`Tx instantiation with type ${txType} not supported`);
            }
        }
    }
    /**
     * This method tries to decode serialized data.
     *
     * @param data - The data Buffer
     * @param txOptions - The transaction options
     */
    static fromSerializedData(data, txOptions = {}) {
        if (data[0] <= 0x7f) {
            // Determine the type.
            switch (data[0]) {
                case 1:
                    return eip2930Transaction_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
                case 2:
                    return eip1559Transaction_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
                case 5:
                    return eip4844Transaction_1.BlobEIP4844Transaction.fromSerializedTx(data, txOptions);
                default:
                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);
            }
        }
        else {
            return legacyTransaction_1.Transaction.fromSerializedTx(data, txOptions);
        }
    }
    /**
     * When decoding a BlockBody, in the transactions field, a field is either:
     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
     * A Buffer[] (Legacy Transaction)
     * This method returns the right transaction.
     *
     * @param data - A Buffer or Buffer[]
     * @param txOptions - The transaction options
     */
    static fromBlockBodyData(data, txOptions = {}) {
        if (Buffer.isBuffer(data)) {
            return this.fromSerializedData(data, txOptions);
        }
        else if (Array.isArray(data)) {
            // It is a legacy transaction
            return legacyTransaction_1.Transaction.fromValuesArray(data, txOptions);
        }
        else {
            throw new Error('Cannot decode transaction: unknown type input');
        }
    }
    /**
     *  Method to retrieve a transaction from the provider
     * @param provider - An Ethers JsonRPCProvider
     * @param txHash - Transaction hash
     * @param txOptions - The transaction options
     * @returns the transaction specified by `txHash`
     */
    static async fromEthersProvider(provider, txHash, txOptions) {
        const prov = typeof provider === 'string' ? new providers_1.JsonRpcProvider(provider) : provider;
        const txData = await prov.send('eth_getTransactionByHash', [txHash]);
        const normedTx = (0, fromRpc_1.normalizeTxParams)(txData);
        return TransactionFactory.fromTxData(normedTx, txOptions);
    }
}
exports.TransactionFactory = TransactionFactory;

}).call(this)}).call(this,{"isBuffer":require("../../../../../is-buffer/index.js")})

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\transactionFactory.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js", {"./constants":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\constants.js","@chainsafe/ssz":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@chainsafe\\ssz\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Ctypes.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobNetworkTransactionWrapper = exports.KZGProofType = exports.KZGCommitmentType = exports.SignedBlobTransactionType = exports.ECDSASignatureType = exports.BlobTransactionType = exports.AccessTupleType = exports.AddressType = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;
const ssz_1 = require("@chainsafe/ssz");
const constants_1 = require("./constants");
const Bytes20 = new ssz_1.ByteVectorType(20);
const Bytes32 = new ssz_1.ByteVectorType(32);
const Bytes48 = new ssz_1.ByteVectorType(48);
const Uint64 = new ssz_1.UintBigintType(8);
const Uint256 = new ssz_1.UintBigintType(32);
/**
 * Can be used in conjunction with {@link Transaction.supports}
 * to query on tx capabilities
 */
var Capability;
(function (Capability) {
    /**
     * Tx supports EIP-155 replay protection
     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP
     */
    Capability[Capability["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
    /**
     * Tx supports EIP-1559 gas fee market mechanism
     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP
     */
    Capability[Capability["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
    /**
     * Tx is a typed transaction as defined in EIP-2718
     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP
     */
    Capability[Capability["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
    /**
     * Tx supports access list generation as defined in EIP-2930
     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP
     */
    Capability[Capability["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
})(Capability = exports.Capability || (exports.Capability = {}));
function isAccessListBuffer(input) {
    if (input.length === 0) {
        return true;
    }
    const firstItem = input[0];
    if (Array.isArray(firstItem)) {
        return true;
    }
    return false;
}
exports.isAccessListBuffer = isAccessListBuffer;
function isAccessList(input) {
    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.
}
exports.isAccessList = isAccessList;
/** EIP4844 types */
exports.AddressType = Bytes20; // SSZ encoded address
// SSZ encoded container for address and storage keys
exports.AccessTupleType = new ssz_1.ContainerType({
    address: exports.AddressType,
    storageKeys: new ssz_1.ListCompositeType(Bytes32, constants_1.MAX_VERSIONED_HASHES_LIST_SIZE),
});
// SSZ encoded blob transaction
exports.BlobTransactionType = new ssz_1.ContainerType({
    chainId: Uint256,
    nonce: Uint64,
    maxPriorityFeePerGas: Uint256,
    maxFeePerGas: Uint256,
    gas: Uint64,
    to: new ssz_1.UnionType([new ssz_1.NoneType(), exports.AddressType]),
    value: Uint256,
    data: new ssz_1.ByteListType(constants_1.MAX_CALLDATA_SIZE),
    accessList: new ssz_1.ListCompositeType(exports.AccessTupleType, constants_1.MAX_ACCESS_LIST_SIZE),
    maxFeePerDataGas: Uint256,
    blobVersionedHashes: new ssz_1.ListCompositeType(Bytes32, constants_1.MAX_VERSIONED_HASHES_LIST_SIZE),
});
// SSZ encoded ECDSA Signature
exports.ECDSASignatureType = new ssz_1.ContainerType({
    yParity: new ssz_1.BooleanType(),
    r: Uint256,
    s: Uint256,
});
// SSZ encoded signed blob transaction
exports.SignedBlobTransactionType = new ssz_1.ContainerType({
    message: exports.BlobTransactionType,
    signature: exports.ECDSASignatureType,
});
// SSZ encoded KZG Commitment/Proof (48 bytes)
exports.KZGCommitmentType = Bytes48;
exports.KZGProofType = exports.KZGCommitmentType;
// SSZ encoded blob network transaction wrapper
exports.BlobNetworkTransactionWrapper = new ssz_1.ContainerType({
    tx: exports.SignedBlobTransactionType,
    blobKzgs: new ssz_1.ListCompositeType(exports.KZGCommitmentType, constants_1.MAX_TX_WRAP_KZG_COMMITMENTS),
    blobs: new ssz_1.ListCompositeType(new ssz_1.ByteVectorType(constants_1.FIELD_ELEMENTS_PER_BLOB * constants_1.BYTES_PER_FIELD_ELEMENT), constants_1.LIMIT_BLOBS_PER_TX),
    kzgAggregatedProof: exports.KZGProofType,
});
//# sourceMappingURL=types.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\util.js", {"./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\types.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Cutil.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.blobTxToNetworkWrapperDataFormat = exports.AccessLists = exports.checkMaxInitCodeSize = void 0;
const util_1 = require("@ethereumjs/util");
const types_1 = require("./types");
function checkMaxInitCodeSize(common, length) {
    const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');
    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {
        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);
    }
}
exports.checkMaxInitCodeSize = checkMaxInitCodeSize;
class AccessLists {
    static getAccessListData(accessList) {
        let AccessListJSON;
        let bufferAccessList;
        if ((0, types_1.isAccessList)(accessList)) {
            AccessListJSON = accessList;
            const newAccessList = [];
            for (let i = 0; i < accessList.length; i++) {
                const item = accessList[i];
                const addressBuffer = (0, util_1.toBuffer)(item.address);
                const storageItems = [];
                for (let index = 0; index < item.storageKeys.length; index++) {
                    storageItems.push((0, util_1.toBuffer)(item.storageKeys[index]));
                }
                newAccessList.push([addressBuffer, storageItems]);
            }
            bufferAccessList = newAccessList;
        }
        else {
            bufferAccessList = accessList ?? [];
            // build the JSON
            const json = [];
            for (let i = 0; i < bufferAccessList.length; i++) {
                const data = bufferAccessList[i];
                const address = (0, util_1.bufferToHex)(data[0]);
                const storageKeys = [];
                for (let item = 0; item < data[1].length; item++) {
                    storageKeys.push((0, util_1.bufferToHex)(data[1][item]));
                }
                const jsonItem = {
                    address,
                    storageKeys,
                };
                json.push(jsonItem);
            }
            AccessListJSON = json;
        }
        return {
            AccessListJSON,
            accessList: bufferAccessList,
        };
    }
    static verifyAccessList(accessList) {
        for (let key = 0; key < accessList.length; key++) {
            const accessListItem = accessList[key];
            const address = accessListItem[0];
            const storageSlots = accessListItem[1];
            if (accessListItem[2] !== undefined) {
                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');
            }
            if (address.length !== 20) {
                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');
            }
            for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {
                if (storageSlots[storageSlot].length !== 32) {
                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');
                }
            }
        }
    }
    static getAccessListJSON(accessList) {
        const accessListJSON = [];
        for (let index = 0; index < accessList.length; index++) {
            const item = accessList[index];
            const JSONItem = {
                address: '0x' + (0, util_1.setLengthLeft)(item[0], 20).toString('hex'),
                storageKeys: [],
            };
            const storageSlots = item[1];
            for (let slot = 0; slot < storageSlots.length; slot++) {
                const storageSlot = storageSlots[slot];
                JSONItem.storageKeys.push('0x' + (0, util_1.setLengthLeft)(storageSlot, 32).toString('hex'));
            }
            accessListJSON.push(JSONItem);
        }
        return accessListJSON;
    }
    static getDataFeeEIP2930(accessList, common) {
        const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');
        const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');
        let slots = 0;
        for (let index = 0; index < accessList.length; index++) {
            const item = accessList[index];
            const storageSlots = item[1];
            slots += storageSlots.length;
        }
        const addresses = accessList.length;
        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);
    }
}
exports.AccessLists = AccessLists;
const blobTxToNetworkWrapperDataFormat = (tx) => {
    const to = {
        selector: tx.to !== undefined ? 1 : 0,
        value: tx.to?.toBuffer() ?? null,
    };
    return {
        message: {
            chainId: tx.common.chainId(),
            nonce: tx.nonce,
            maxPriorityFeePerGas: tx.maxPriorityFeePerGas,
            maxFeePerGas: tx.maxFeePerGas,
            gas: tx.gasLimit,
            to,
            value: tx.value,
            data: tx.data,
            accessList: tx.accessList.map((listItem) => {
                return { address: listItem[0], storageKeys: listItem[1] };
            }),
            blobVersionedHashes: tx.versionedHashes,
            maxFeePerDataGas: tx.maxFeePerDataGas,
        },
        // If transaction is unsigned, signature fields will be initialized to zeroes
        signature: {
            r: tx.r ?? BigInt(0),
            s: tx.s ?? BigInt(0),
            yParity: tx.v === BigInt(1) ? true : false,
        },
    };
};
exports.blobTxToNetworkWrapperDataFormat = blobTxToNetworkWrapperDataFormat;
//# sourceMappingURL=util.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\util.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\utils\\blobHelpers.js", {"../kzg/kzg":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\kzg\\kzg.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/sha256":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\sha256.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cdist%5Cutils%5CblobHelpers.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.commitmentsToVersionedHashes = exports.computeVersionedHash = exports.blobsToCommitments = exports.getBlobs = void 0;
const sha256_1 = require("ethereum-cryptography/sha256");
const kzg_1 = require("../kzg/kzg");
/**
 * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git
 */
const BYTES_PER_FIELD_ELEMENT = 32;
const FIELD_ELEMENTS_PER_BLOB = 4096;
const USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;
const MAX_BLOBS_PER_TX = 2;
const MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;
const BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;
function get_padded(data, blobs_len) {
    const pdata = Buffer.alloc(blobs_len * USEFUL_BYTES_PER_BLOB);
    const datalen = Buffer.byteLength(data);
    pdata.fill(data, 0, datalen);
    pdata[datalen] = 0x80;
    return pdata;
}
function get_blob(data) {
    const blob = Buffer.alloc(BLOB_SIZE, 'binary');
    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {
        const chunk = Buffer.alloc(32, 'binary');
        chunk.fill(data.subarray(i * 31, (i + 1) * 31), 0, 31);
        blob.fill(chunk, i * 32, (i + 1) * 32);
    }
    return blob;
}
const getBlobs = (input) => {
    const data = Buffer.from(input, 'binary');
    const len = Buffer.byteLength(data);
    if (len === 0) {
        throw Error('invalid blob data');
    }
    if (len > MAX_USEFUL_BYTES_PER_TX) {
        throw Error('blob data is too large');
    }
    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);
    const pdata = get_padded(data, blobs_len);
    const blobs = [];
    for (let i = 0; i < blobs_len; i++) {
        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);
        const blob = get_blob(chunk);
        blobs.push(blob);
    }
    return blobs;
};
exports.getBlobs = getBlobs;
const blobsToCommitments = (blobs) => {
    const commitments = [];
    for (const blob of blobs) {
        commitments.push(Buffer.from(kzg_1.kzg.blobToKzgCommitment(blob)));
    }
    return commitments;
};
exports.blobsToCommitments = blobsToCommitments;
/**
 * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version
 * number will be 0x01 for KZG vector commitments but could be different if future vector commitment
 * types are introduced
 * @param commitment a vector commitment to a blob
 * @param blobCommitmentVersion the version number corresponding to the type of vector commitment
 * @returns a versioned hash corresponding to a given blob vector commitment
 */
const computeVersionedHash = (commitment, blobCommitmentVersion) => {
    const computedVersionedHash = new Uint8Array(32);
    computedVersionedHash.set([blobCommitmentVersion], 0);
    computedVersionedHash.set((0, sha256_1.sha256)(commitment).slice(1), 1);
    return computedVersionedHash;
};
exports.computeVersionedHash = computeVersionedHash;
/**
 * Generate an array of versioned hashes from corresponding kzg commitments
 * @param commitments array of kzg commitments
 * @returns array of versioned hashes
 * Note: assumes KZG commitments (version 1 version hashes)
 */
const commitmentsToVersionedHashes = (commitments) => {
    const hashes = [];
    for (const commitment of commitments) {
        hashes.push(Buffer.from((0, exports.computeVersionedHash)(commitment, 0x01)));
    }
    return hashes;
};
exports.commitmentsToVersionedHashes = commitmentsToVersionedHashes;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\dist\\utils\\blobHelpers.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\goerli.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Cgoerli.json
      return function (require, module, exports) {
module.exports={
    "name": "goerli",
    "chainId": 5,
    "networkId": 5,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "Cross-client PoA test network",
    "url": "https://github.com/goerli/testnet",
    "genesis": {
        "timestamp": "0x5c51a607",
        "gasLimit": 10485760,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "istanbul",
            "block": 1561651,
            "forkHash": "0xc25efa5c"
        },
        {
            "name": "berlin",
            "block": 4460644,
            "forkHash": "0x757a1c47"
        },
        {
            "name": "london",
            "block": 5062605,
            "forkHash": "0xb8c6299d"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818",
            "name": "merge",
            "ttd": "10790000",
            "block": 7382819,
            "forkHash": "0xb8c6299d"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "timestamp": "1678832736",
            "forkHash": "0xf9843abf"
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "51.141.78.53",
            "port": 30303,
            "id": "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
            "location": "",
            "comment": "Upstream bootnode 1"
        },
        {
            "ip": "13.93.54.137",
            "port": 30303,
            "id": "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
            "location": "",
            "comment": "Upstream bootnode 2"
        },
        {
            "ip": "94.237.54.114",
            "port": 30313,
            "id": "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
            "location": "",
            "comment": "Upstream bootnode 3"
        },
        {
            "ip": "18.218.250.66",
            "port": 30313,
            "id": "b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",
            "location": "",
            "comment": "Upstream bootnode 4"
        },
        {
            "ip": "3.11.147.67",
            "port": 30303,
            "id": "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
            "location": "",
            "comment": "Ethereum Foundation bootnode"
        },
        {
            "ip": "51.15.116.226",
            "port": 30303,
            "id": "a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        },
        {
            "ip": "51.15.119.157",
            "port": 30303,
            "id": "807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        },
        {
            "ip": "51.15.119.157",
            "port": 40303,
            "id": "a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\goerli.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\mainnet.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Cmainnet.json
      return function (require, module, exports) {
module.exports={
    "name": "mainnet",
    "chainId": 1,
    "networkId": 1,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "The Ethereum main chain",
    "url": "https://ethstats.net/",
    "genesis": {
        "gasLimit": 5000,
        "difficulty": 17179869184,
        "nonce": "0x0000000000000042",
        "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfc64ec04"
        },
        {
            "name": "homestead",
            "block": 1150000,
            "forkHash": "0x97c2c34c"
        },
        {
            "name": "dao",
            "block": 1920000,
            "forkHash": "0x91d1f948"
        },
        {
            "name": "tangerineWhistle",
            "block": 2463000,
            "forkHash": "0x7a64da13"
        },
        {
            "name": "spuriousDragon",
            "block": 2675000,
            "forkHash": "0x3edd5b10"
        },
        {
            "name": "byzantium",
            "block": 4370000,
            "forkHash": "0xa00bc324"
        },
        {
            "name": "constantinople",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "petersburg",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "istanbul",
            "block": 9069000,
            "forkHash": "0x879d6e30"
        },
        {
            "name": "muirGlacier",
            "block": 9200000,
            "forkHash": "0xe029e991"
        },
        {
            "name": "berlin",
            "block": 12244000,
            "forkHash": "0x0eb440f6"
        },
        {
            "name": "london",
            "block": 12965000,
            "forkHash": "0xb715077d"
        },
        {
            "name": "arrowGlacier",
            "block": 13773000,
            "forkHash": "0x20c327fc"
        },
        {
            "name": "grayGlacier",
            "block": 15050000,
            "forkHash": "0xf0afd0e3"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393",
            "name": "merge",
            "ttd": "58750000000000000000000",
            "block": 15537394,
            "forkHash": "0xf0afd0e3"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "timestamp": "1681338455",
            "forkHash": "0xdce96c2d"
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "18.138.108.67",
            "port": 30303,
            "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
            "location": "ap-southeast-1-001",
            "comment": "bootnode-aws-ap-southeast-1-001"
        },
        {
            "ip": "3.209.45.79",
            "port": 30303,
            "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
            "location": "us-east-1-001",
            "comment": "bootnode-aws-us-east-1-001"
        },
        {
            "ip": "65.108.70.101",
            "port": 30303,
            "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
            "location": "eu-west-1-001",
            "comment": "bootnode-hetzner-hel"
        },
        {
            "ip": "157.90.35.166",
            "port": 30303,
            "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
            "location": "eu-central-1-001",
            "comment": "bootnode-hetzner-fsn"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\mainnet.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\rinkeby.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Crinkeby.json
      return function (require, module, exports) {
module.exports={
    "name": "rinkeby",
    "chainId": 4,
    "networkId": 4,
    "defaultHardfork": "london",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "PoA test network",
    "url": "https://www.rinkeby.io",
    "genesis": {
        "timestamp": "0x58ee40ba",
        "gasLimit": 4700000,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x3b8e0691"
        },
        {
            "name": "homestead",
            "block": 1,
            "forkHash": "0x60949295"
        },
        {
            "name": "tangerineWhistle",
            "block": 2,
            "forkHash": "0x8bde40dd"
        },
        {
            "name": "spuriousDragon",
            "block": 3,
            "forkHash": "0xcb3a64bb"
        },
        {
            "name": "byzantium",
            "block": 1035301,
            "forkHash": "0x8d748b57"
        },
        {
            "name": "constantinople",
            "block": 3660663,
            "forkHash": "0xe49cab14"
        },
        {
            "name": "petersburg",
            "block": 4321234,
            "forkHash": "0xafec6b27"
        },
        {
            "name": "istanbul",
            "block": 5435345,
            "forkHash": "0xcbdb8838"
        },
        {
            "name": "berlin",
            "block": 8290928,
            "forkHash": "0x6910c8bd"
        },
        {
            "name": "london",
            "block": 8897988,
            "forkHash": "0x8e29f2f3"
        },
        {
            "name": "merge",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "52.169.42.101",
            "port": 30303,
            "id": "a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",
            "location": "",
            "comment": "IE"
        },
        {
            "ip": "52.3.158.184",
            "port": 30303,
            "id": "343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",
            "location": "",
            "comment": "INFURA"
        },
        {
            "ip": "159.89.28.211",
            "port": 30303,
            "id": "b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",
            "location": "",
            "comment": "AKASHA"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\rinkeby.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\ropsten.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Cropsten.json
      return function (require, module, exports) {
module.exports={
    "name": "ropsten",
    "chainId": 3,
    "networkId": 3,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "PoW test network",
    "url": "https://github.com/ethereum/ropsten",
    "genesis": {
        "gasLimit": 16777216,
        "difficulty": 1048576,
        "nonce": "0x0000000000000042",
        "extraData": "0x3535353535353535353535353535353535353535353535353535353535353535"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "spuriousDragon",
            "block": 10,
            "forkHash": "0x63760190"
        },
        {
            "name": "byzantium",
            "block": 1700000,
            "forkHash": "0x3ea159c7"
        },
        {
            "name": "constantinople",
            "block": 4230000,
            "forkHash": "0x97b544f3"
        },
        {
            "name": "petersburg",
            "block": 4939394,
            "forkHash": "0xd6e2149b"
        },
        {
            "name": "istanbul",
            "block": 6485846,
            "forkHash": "0x4bc66396"
        },
        {
            "name": "muirGlacier",
            "block": 7117117,
            "forkHash": "0x6727ef90"
        },
        {
            "name": "berlin",
            "block": 9812189,
            "forkHash": "0xa157d377"
        },
        {
            "name": "london",
            "block": 10499401,
            "forkHash": "0x7119b6b3"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge",
            "name": "merge",
            "ttd": "50000000000000000",
            "block": null,
            "forkHash": "0x7119b6b3"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "52.176.7.10",
            "port": 30303,
            "id": "30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",
            "location": "",
            "comment": "US-Azure geth"
        },
        {
            "ip": "52.176.100.77",
            "port": 30303,
            "id": "865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",
            "location": "",
            "comment": "US-Azure parity"
        },
        {
            "ip": "52.232.243.152",
            "port": 30303,
            "id": "6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",
            "location": "",
            "comment": "Parity"
        },
        {
            "ip": "192.81.208.223",
            "port": 30303,
            "id": "94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",
            "location": "",
            "comment": "@gpip"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\ropsten.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\sepolia.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cchains%5Csepolia.json
      return function (require, module, exports) {
module.exports={
    "name": "sepolia",
    "chainId": 11155111,
    "networkId": 11155111,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "PoW test network to replace Ropsten",
    "url": "https://github.com/ethereum/go-ethereum/pull/23730",
    "genesis": {
        "timestamp": "0x6159af19",
        "gasLimit": 30000000,
        "difficulty": 131072,
        "nonce": "0x0000000000000000",
        "extraData": "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "istanbul",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "muirGlacier",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "berlin",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "london",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408",
            "name": "merge",
            "ttd": "17000000000000000",
            "block": 1450409,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "mergeForkIdTransition",
            "block": 1735371,
            "forkHash": "0xb96cbd13"
        },
        {
            "name": "shanghai",
            "block": null,
            "timestamp": "1677557088",
            "forkHash": "0xf7f9bc08"
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "18.168.182.86",
            "port": 30303,
            "id": "9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066",
            "location": "",
            "comment": "geth"
        },
        {
            "ip": "52.14.151.177",
            "port": 30303,
            "id": "ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7",
            "location": "",
            "comment": "besu"
        },
        {
            "ip": "165.22.196.173",
            "port": 30303,
            "id": "ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6",
            "location": "",
            "comment": "EF"
        },
        {
            "ip": "65.108.95.67",
            "port": 30303,
            "id": "075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6",
            "location": "",
            "comment": "lodestar"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"
    ]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\sepolia.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\common.js", {"./chains/goerli.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\goerli.json","./chains/mainnet.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\mainnet.json","./chains/rinkeby.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\rinkeby.json","./chains/ropsten.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\ropsten.json","./chains/sepolia.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\chains\\sepolia.json","./eips":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\index.js","./enums":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\enums.js","./hardforks":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\index.js","./utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\utils.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","crc-32":"F:\\metamask-extension\\node_modules\\crc-32\\crc32.js","events":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ccommon.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Common = void 0;
const util_1 = require("@ethereumjs/util");
const crc_32_1 = require("crc-32");
const events_1 = require("events");
const goerli = require("./chains/goerli.json");
const mainnet = require("./chains/mainnet.json");
const rinkeby = require("./chains/rinkeby.json");
const ropsten = require("./chains/ropsten.json");
const sepolia = require("./chains/sepolia.json");
const eips_1 = require("./eips");
const enums_1 = require("./enums");
const hardforks_1 = require("./hardforks");
const utils_1 = require("./utils");
/**
 * Common class to access chain and hardfork parameters and to provide
 * a unified and shared view on the network and hardfork state.
 *
 * Use the {@link Common.custom} static constructor for creating simple
 * custom chain {@link Common} objects (more complete custom chain setups
 * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
 */
class Common extends events_1.EventEmitter {
    constructor(opts) {
        super();
        this._eips = [];
        this._customChains = opts.customChains ?? [];
        this._chainParams = this.setChain(opts.chain);
        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? enums_1.Hardfork.Merge;
        // Assign hardfork changes in the sequence of the applied hardforks
        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [
            hf.name,
            hardforks_1.hardforks[hf.name],
        ]);
        this._hardfork = this.DEFAULT_HARDFORK;
        if (opts.hardfork !== undefined) {
            this.setHardfork(opts.hardfork);
        }
        if (opts.eips) {
            this.setEIPs(opts.eips);
        }
    }
    /**
     * Creates a {@link Common} object for a custom chain, based on a standard one.
     *
     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
     * in a provided {@link chainParamsOrName} dictionary. Some usage example:
     *
     * ```javascript
     * Common.custom({chainId: 123})
     * ```
     *
     * There are also selected supported custom chains which can be initialized by using one of the
     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
     *
     * ```javascript
     * Common.custom(CustomChains.MaticMumbai)
     * ```
     *
     * Note that these supported custom chains only provide some base parameters (usually the chain and
     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
     * the `@ethereumjs/tx` library to a Layer-2 chain).
     *
     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
     */
    static custom(chainParamsOrName, opts = {}) {
        const baseChain = opts.baseChain ?? 'mainnet';
        const standardChainParams = { ...Common._getChainParams(baseChain) };
        standardChainParams['name'] = 'custom-chain';
        if (typeof chainParamsOrName !== 'string') {
            return new Common({
                chain: {
                    ...standardChainParams,
                    ...chainParamsOrName,
                },
                ...opts,
            });
        }
        else {
            if (chainParamsOrName === enums_1.CustomChain.PolygonMainnet) {
                return Common.custom({
                    name: enums_1.CustomChain.PolygonMainnet,
                    chainId: 137,
                    networkId: 137,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.PolygonMumbai) {
                return Common.custom({
                    name: enums_1.CustomChain.PolygonMumbai,
                    chainId: 80001,
                    networkId: 80001,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.ArbitrumRinkebyTestnet) {
                return Common.custom({
                    name: enums_1.CustomChain.ArbitrumRinkebyTestnet,
                    chainId: 421611,
                    networkId: 421611,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.ArbitrumOne) {
                return Common.custom({
                    name: enums_1.CustomChain.ArbitrumOne,
                    chainId: 42161,
                    networkId: 42161,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.xDaiChain) {
                return Common.custom({
                    name: enums_1.CustomChain.xDaiChain,
                    chainId: 100,
                    networkId: 100,
                }, opts);
            }
            if (chainParamsOrName === enums_1.CustomChain.OptimisticKovan) {
                return Common.custom({
                    name: enums_1.CustomChain.OptimisticKovan,
                    chainId: 69,
                    networkId: 69,
                }, 
                // Optimism has not implemented the London hardfork yet (targeting Q1.22)
                { hardfork: enums_1.Hardfork.Berlin, ...opts });
            }
            if (chainParamsOrName === enums_1.CustomChain.OptimisticEthereum) {
                return Common.custom({
                    name: enums_1.CustomChain.OptimisticEthereum,
                    chainId: 10,
                    networkId: 10,
                }, 
                // Optimism has not implemented the London hardfork yet (targeting Q1.22)
                { hardfork: enums_1.Hardfork.Berlin, ...opts });
            }
            throw new Error(`Custom chain ${chainParamsOrName} not supported`);
        }
    }
    /**
     * Static method to load and set common from a geth genesis json
     * @param genesisJson json of geth configuration
     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
     * @returns Common
     */
    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {
        const genesisParams = (0, utils_1.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);
        const common = new Common({
            chain: genesisParams.name ?? 'custom',
            customChains: [genesisParams],
            eips,
            hardfork: hardfork ?? genesisParams.hardfork,
        });
        if (genesisHash !== undefined) {
            common.setForkHashes(genesisHash);
        }
        return common;
    }
    /**
     * Static method to determine if a {@link chainId} is supported as a standard chain
     * @param chainId bigint id (`1`) of a standard chain
     * @returns boolean
     */
    static isSupportedChainId(chainId) {
        const initializedChains = this._getInitializedChains();
        return Boolean(initializedChains['names'][chainId.toString()]);
    }
    static _getChainParams(chain, customChains) {
        const initializedChains = this._getInitializedChains(customChains);
        if (typeof chain === 'number' || typeof chain === 'bigint') {
            chain = chain.toString();
            if (initializedChains['names'][chain]) {
                const name = initializedChains['names'][chain];
                return initializedChains[name];
            }
            throw new Error(`Chain with ID ${chain} not supported`);
        }
        if (initializedChains[chain] !== undefined) {
            return initializedChains[chain];
        }
        throw new Error(`Chain with name ${chain} not supported`);
    }
    /**
     * Sets the chain
     * @param chain String ('mainnet') or Number (1) chain representation.
     *              Or, a Dictionary of chain parameters for a private network.
     * @returns The dictionary with parameters set as chain
     */
    setChain(chain) {
        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {
            this._chainParams = Common._getChainParams(chain, this._customChains);
        }
        else if (typeof chain === 'object') {
            if (this._customChains.length > 0) {
                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');
            }
            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
            for (const param of required) {
                if (!(param in chain)) {
                    throw new Error(`Missing required chain parameter: ${param}`);
                }
            }
            this._chainParams = chain;
        }
        else {
            throw new Error('Wrong input format');
        }
        for (const hf of this.hardforks()) {
            if (hf.block === undefined) {
                throw new Error(`Hardfork cannot have undefined block number`);
            }
        }
        return this._chainParams;
    }
    /**
     * Sets the hardfork to get params for
     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
     */
    setHardfork(hardfork) {
        let existing = false;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if (hfChanges[0] === hardfork) {
                if (this._hardfork !== hardfork) {
                    this._hardfork = hardfork;
                    this.emit('hardforkChanged', hardfork);
                }
                existing = true;
            }
        }
        if (!existing) {
            throw new Error(`Hardfork with name ${hardfork} not supported`);
        }
    }
    /**
     * Returns the hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)
     * @param timestamp: timestamp in seconds at which block was/is to be minted
     * @returns The name of the HF
     */
    getHardforkByBlockNumber(blockNumber, td, timestamp) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        td = (0, util_1.toType)(td, util_1.TypeOutput.BigInt);
        timestamp = (0, util_1.toType)(timestamp, util_1.TypeOutput.Number);
        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)
        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);
        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
        const doubleTTDHF = hfs
            .slice(mergeIndex + 1)
            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
        if (doubleTTDHF >= 0) {
            throw Error(`More than one merge hardforks found with ttd specified`);
        }
        // Find the first hardfork that has a block number greater than `blockNumber`
        // (skips the merge hardfork since it cannot have a block number specified).
        // If timestamp is not provided, it also skips timestamps hardforks to continue
        // discovering/checking number hardforks.
        let hfIndex = hfs.findIndex((hf) => (hf.block !== null && hf.block > blockNumber) ||
            (timestamp !== undefined && Number(hf.timestamp) > timestamp));
        if (hfIndex === -1) {
            // all hardforks apply, set hfIndex to the last one as that's the candidate
            hfIndex = hfs.length;
        }
        else if (hfIndex === 0) {
            // cannot have a case where a block number is before all applied hardforks
            // since the chain has to start with a hardfork
            throw Error('Must have at least one hardfork at block 0');
        }
        // If timestamp is not provided, we need to rollback to the last hf with block or ttd
        if (timestamp === undefined) {
            const stepBack = hfs
                .slice(0, hfIndex)
                .reverse()
                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);
            hfIndex = hfIndex - stepBack;
        }
        // Move hfIndex one back to arrive at candidate hardfork
        hfIndex = hfIndex - 1;
        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number
        // hardforks. so it will now be needed to rollback
        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {
            // We're on the merge hardfork.  Let's check the TTD
            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {
                // Merge ttd greater than current td so we're on hardfork before merge
                hfIndex -= 1;
            }
        }
        else {
            if (mergeIndex >= 0 && td !== undefined && td !== null) {
                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {
                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');
                }
                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {
                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');
                }
            }
        }
        const hfStartIndex = hfIndex;
        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp
        // This won't anyway be the case with Merge hfs
        for (; hfIndex < hfs.length - 1; hfIndex++) {
            // break out if hfIndex + 1 is not scheduled at hfIndex
            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||
                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {
                break;
            }
        }
        if (timestamp) {
            const minTimeStamp = hfs
                .slice(0, hfStartIndex)
                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);
            if (minTimeStamp > timestamp) {
                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
            }
            const maxTimeStamp = hfs
                .slice(hfIndex + 1)
                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), timestamp);
            if (maxTimeStamp < timestamp) {
                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
            }
        }
        const hardfork = hfs[hfIndex];
        return hardfork.name;
    }
    /**
     * Sets a new hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td
     * @param timestamp
     * @returns The name of the HF set
     */
    setHardforkByBlockNumber(blockNumber, td, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
        this.setHardfork(hardfork);
        return hardfork;
    }
    /**
     * Internal helper function, returns the params for the given hardfork for the chain set
     * @param hardfork Hardfork name
     * @returns Dictionary with hardfork params or null if hardfork not on chain
     */
    _getHardfork(hardfork) {
        const hfs = this.hardforks();
        for (const hf of hfs) {
            if (hf['name'] === hardfork)
                return hf;
        }
        return null;
    }
    /**
     * Sets the active EIPs
     * @param eips
     */
    setEIPs(eips = []) {
        for (const eip of eips) {
            if (!(eip in eips_1.EIPs)) {
                throw new Error(`${eip} not supported`);
            }
            const minHF = this.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);
            if (!minHF) {
                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
            }
            if (eips_1.EIPs[eip].requiredEIPs !== undefined) {
                for (const elem of eips_1.EIPs[eip].requiredEIPs) {
                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);
                    }
                }
            }
        }
        this._eips = eips;
    }
    /**
     * Returns a parameter for the current chain setup
     *
     * If the parameter is present in an EIP, the EIP always takes precedence.
     * Otherwise the parameter if taken from the latest applied HF with
     * a change on the respective parameter.
     *
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @returns The value requested or `BigInt(0)` if not found
     */
    param(topic, name) {
        // TODO: consider the case that different active EIPs
        // can change the same parameter
        let value;
        for (const eip of this._eips) {
            value = this.paramByEIP(topic, name, eip);
            if (value !== undefined)
                return value;
        }
        return this.paramByHardfork(topic, name, this._hardfork);
    }
    /**
     * Returns the parameter corresponding to a hardfork
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param hardfork Hardfork name
     * @returns The value requested or `BigInt(0)` if not found
     */
    paramByHardfork(topic, name, hardfork) {
        let value = null;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            // EIP-referencing HF file (e.g. berlin.json)
            if ('eips' in hfChanges[1]) {
                const hfEIPs = hfChanges[1]['eips'];
                for (const eip of hfEIPs) {
                    const valueEIP = this.paramByEIP(topic, name, eip);
                    value = typeof valueEIP === 'bigint' ? valueEIP : value;
                }
                // Parameter-inlining HF file (e.g. istanbul.json)
            }
            else {
                if (hfChanges[1][topic] === undefined) {
                    throw new Error(`Topic ${topic} not defined`);
                }
                if (hfChanges[1][topic][name] !== undefined) {
                    value = hfChanges[1][topic][name].v;
                }
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return BigInt(value ?? 0);
    }
    /**
     * Returns a parameter corresponding to an EIP
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param eip Number of the EIP
     * @returns The value requested or `undefined` if not found
     */
    paramByEIP(topic, name, eip) {
        if (!(eip in eips_1.EIPs)) {
            throw new Error(`${eip} not supported`);
        }
        const eipParams = eips_1.EIPs[eip];
        if (!(topic in eipParams)) {
            throw new Error(`Topic ${topic} not defined`);
        }
        if (eipParams[topic][name] === undefined) {
            return undefined;
        }
        const value = eipParams[topic][name].v;
        return BigInt(value);
    }
    /**
     * Returns a parameter for the hardfork active on block number or
     * optional provided total difficulty (Merge HF)
     * @param topic Parameter topic
     * @param name Parameter name
     * @param blockNumber Block number
     * @param td Total difficulty
     *    * @returns The value requested or `BigInt(0)` if not found
     */
    paramByBlock(topic, name, blockNumber, td, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
        return this.paramByHardfork(topic, name, hardfork);
    }
    /**
     * Checks if an EIP is activated by either being included in the EIPs
     * manually passed in with the {@link CommonOpts.eips} or in a
     * hardfork currently being active
     *
     * Note: this method only works for EIPs being supported
     * by the {@link CommonOpts.eips} constructor option
     * @param eip
     */
    isActivatedEIP(eip) {
        if (this.eips().includes(eip)) {
            return true;
        }
        for (const hfChanges of this.HARDFORK_CHANGES) {
            const hf = hfChanges[1];
            if (this.gteHardfork(hf['name']) && 'eips' in hf) {
                if (hf['eips'].includes(eip)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Checks if set or provided hardfork is active on block number
     * @param hardfork Hardfork name or null (for HF set)
     * @param blockNumber
     * @returns True if HF is active on block number
     */
    hardforkIsActiveOnBlock(hardfork, blockNumber) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const hfBlock = this.hardforkBlock(hardfork);
        if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {
            return true;
        }
        return false;
    }
    /**
     * Alias to hardforkIsActiveOnBlock when hardfork is set
     * @param blockNumber
     * @returns True if HF is active on block number
     */
    activeOnBlock(blockNumber) {
        return this.hardforkIsActiveOnBlock(null, blockNumber);
    }
    /**
     * Sequence based check if given or set HF1 is greater than or equal HF2
     * @param hardfork1 Hardfork name or null (if set)
     * @param hardfork2 Hardfork name
     * @param opts Hardfork options
     * @returns True if HF1 gte HF2
     */
    hardforkGteHardfork(hardfork1, hardfork2) {
        hardfork1 = hardfork1 ?? this._hardfork;
        const hardforks = this.hardforks();
        let posHf1 = -1, posHf2 = -1;
        let index = 0;
        for (const hf of hardforks) {
            if (hf['name'] === hardfork1)
                posHf1 = index;
            if (hf['name'] === hardfork2)
                posHf2 = index;
            index += 1;
        }
        return posHf1 >= posHf2 && posHf2 !== -1;
    }
    /**
     * Alias to hardforkGteHardfork when hardfork is set
     * @param hardfork Hardfork name
     * @returns True if hardfork set is greater than hardfork provided
     */
    gteHardfork(hardfork) {
        return this.hardforkGteHardfork(null, hardfork);
    }
    /**
     * Returns the hardfork change block for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if unscheduled
     */
    hardforkBlock(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const block = this._getHardfork(hardfork)?.['block'];
        if (block === undefined || block === null) {
            return null;
        }
        return BigInt(block);
    }
    hardforkTimestamp(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const timestamp = this._getHardfork(hardfork)?.['timestamp'];
        if (timestamp === undefined || timestamp === null) {
            return null;
        }
        return BigInt(timestamp);
    }
    /**
     * Returns the hardfork change block for eip
     * @param eip EIP number
     * @returns Block number or null if unscheduled
     */
    eipBlock(eip) {
        for (const hfChanges of this.HARDFORK_CHANGES) {
            const hf = hfChanges[1];
            if ('eips' in hf) {
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                if (hf['eips'].includes(eip)) {
                    return this.hardforkBlock(hfChanges[0]);
                }
            }
        }
        return null;
    }
    /**
     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Total difficulty or null if no set
     */
    hardforkTTD(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const ttd = this._getHardfork(hardfork)?.['ttd'];
        if (ttd === undefined || ttd === null) {
            return null;
        }
        return BigInt(ttd);
    }
    /**
     * True if block number provided is the hardfork (given or set) change block
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     * @deprecated
     */
    isHardforkBlock(blockNumber, hardfork) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const block = this.hardforkBlock(hardfork);
        return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block timestamp, number or null if not available
     */
    nextHardforkBlockOrTimestamp(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const hfs = this.hardforks();
        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);
        // If the current hardfork is merge, go one behind as merge hf is not part of these
        // calcs even if the merge hf block is set
        if (hardfork === enums_1.Hardfork.Merge) {
            hfIndex -= 1;
        }
        // Hardfork not found
        if (hfIndex < 0) {
            return null;
        }
        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;
        currHfTimeOrBlock =
            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined
                ? Number(currHfTimeOrBlock)
                : null;
        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {
            let hfTimeOrBlock = hf.timestamp ?? hf.block;
            hfTimeOrBlock =
                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;
            return (hf.name !== enums_1.Hardfork.Merge &&
                hfTimeOrBlock !== null &&
                hfTimeOrBlock !== undefined &&
                hfTimeOrBlock !== currHfTimeOrBlock);
        });
        // If no next hf found with valid block or timestamp return null
        if (nextHf === undefined) {
            return null;
        }
        const nextHfBlock = nextHf.timestamp ?? nextHf.block;
        if (nextHfBlock === null || nextHfBlock === undefined) {
            return null;
        }
        return BigInt(nextHfBlock);
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if not available
     * @deprecated
     */
    nextHardforkBlock(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        let hfBlock = this.hardforkBlock(hardfork);
        // If this is a merge hardfork with block not set, then we fallback to previous hardfork
        // to find the nextHardforkBlock
        if (hfBlock === null && hardfork === enums_1.Hardfork.Merge) {
            const hfs = this.hardforks();
            const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
            if (mergeIndex < 0) {
                throw Error(`Merge hardfork should have been found`);
            }
            hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);
        }
        if (hfBlock === null) {
            return null;
        }
        // Next fork block number or null if none available
        // Logic: if accumulator is still null and on the first occurrence of
        // a block greater than the current hfBlock set the accumulator,
        // pass on the accumulator as the final result from this time on
        const nextHfBlock = this.hardforks().reduce((acc, hf) => {
            // We need to ignore the merge block in our next hardfork calc
            const block = BigInt(hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block);
            // Typescript can't seem to follow that the hfBlock is not null at this point
            return block > hfBlock && acc === null ? block : acc;
        }, null);
        return nextHfBlock;
    }
    /**
     * True if block number provided is the hardfork change block following the hardfork given or set
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     * @deprecated
     */
    isNextHardforkBlock(blockNumber, hardfork) {
        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const nextHardforkBlock = this.nextHardforkBlock(hardfork);
        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;
    }
    /**
     * Internal helper function to calculate a fork hash
     * @param hardfork Hardfork name
     * @param genesisHash Genesis block hash of the chain
     * @returns Fork hash as hex string
     */
    _calcForkHash(hardfork, genesisHash) {
        let hfBuffer = Buffer.alloc(0);
        let prevBlockOrTime = 0;
        for (const hf of this.hardforks()) {
            const { block, timestamp, name } = hf;
            // Timestamp to be used for timestamp based hfs even if we may bundle
            // block number with them retrospectively
            let blockOrTime = timestamp ?? block;
            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
            // Skip for chainstart (0), not applied HFs (null) and
            // when already applied on same blockOrTime HFs
            // and on the merge since forkhash doesn't change on merge hf
            if (typeof blockOrTime === 'number' &&
                blockOrTime !== 0 &&
                blockOrTime !== prevBlockOrTime &&
                name !== enums_1.Hardfork.Merge) {
                const hfBlockBuffer = Buffer.from(blockOrTime.toString(16).padStart(16, '0'), 'hex');
                hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);
                prevBlockOrTime = blockOrTime;
            }
            if (hf.name === hardfork)
                break;
        }
        const inputBuffer = Buffer.concat([genesisHash, hfBuffer]);
        // CRC32 delivers result as signed (negative) 32-bit integer,
        // convert to hex string
        const forkhash = (0, util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');
        return `0x${forkhash}`;
    }
    /**
     * Returns an eth/64 compliant fork hash (EIP-2124)
     * @param hardfork Hardfork name, optional if HF set
     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
     */
    forkHash(hardfork, genesisHash) {
        hardfork = hardfork ?? this._hardfork;
        const data = this._getHardfork(hardfork);
        if (data === null ||
            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {
            const msg = 'No fork hash calculation possible for future hardfork';
            throw new Error(msg);
        }
        if (data?.forkHash !== null && data?.forkHash !== undefined) {
            return data.forkHash;
        }
        if (!genesisHash)
            throw new Error('genesisHash required for forkHash calculation');
        return this._calcForkHash(hardfork, genesisHash);
    }
    /**
     *
     * @param forkHash Fork hash as a hex string
     * @returns Array with hardfork data (name, block, forkHash)
     */
    hardforkForForkHash(forkHash) {
        const resArray = this.hardforks().filter((hf) => {
            return hf.forkHash === forkHash;
        });
        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
    }
    /**
     * Sets any missing forkHashes on the passed-in {@link Common} instance
     * @param common The {@link Common} to set the forkHashes for
     * @param genesisHash The genesis block hash
     */
    setForkHashes(genesisHash) {
        for (const hf of this.hardforks()) {
            const blockOrTime = hf.timestamp ?? hf.block;
            if ((hf.forkHash === null || hf.forkHash === undefined) &&
                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {
                hf.forkHash = this.forkHash(hf.name, genesisHash);
            }
        }
    }
    /**
     * Returns the Genesis parameters of the current chain
     * @returns Genesis dictionary
     */
    genesis() {
        return this._chainParams.genesis;
    }
    /**
     * Returns the hardforks for current chain
     * @returns {Array} Array with arrays of hardforks
     */
    hardforks() {
        return this._chainParams.hardforks;
    }
    /**
     * Returns bootstrap nodes for the current chain
     * @returns {Dictionary} Dict with bootstrap nodes
     */
    bootstrapNodes() {
        return this._chainParams.bootstrapNodes;
    }
    /**
     * Returns DNS networks for the current chain
     * @returns {String[]} Array of DNS ENR urls
     */
    dnsNetworks() {
        return this._chainParams.dnsNetworks;
    }
    /**
     * Returns the hardfork set
     * @returns Hardfork name
     */
    hardfork() {
        return this._hardfork;
    }
    /**
     * Returns the Id of current chain
     * @returns chain Id
     */
    chainId() {
        return BigInt(this._chainParams.chainId);
    }
    /**
     * Returns the name of current chain
     * @returns chain name (lower case)
     */
    chainName() {
        return this._chainParams.name;
    }
    /**
     * Returns the Id of current network
     * @returns network Id
     */
    networkId() {
        return BigInt(this._chainParams.networkId);
    }
    /**
     * Returns the active EIPs
     * @returns List of EIPs
     */
    eips() {
        return this._eips;
    }
    /**
     * Returns the consensus type of the network
     * Possible values: "pow"|"poa"|"pos"
     *
     * Note: This value can update along a Hardfork.
     */
    consensusType() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                value = hfChanges[1]['consensus']['type'];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return value ?? this._chainParams['consensus']['type'];
    }
    /**
     * Returns the concrete consensus implementation
     * algorithm or protocol for the network
     * e.g. "ethash" for "pow" consensus type,
     * "clique" for "poa" consensus type or
     * "casper" for "pos" consensus type.
     *
     * Note: This value can update along a Hardfork.
     */
    consensusAlgorithm() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                value = hfChanges[1]['consensus']['algorithm'];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return value ?? this._chainParams['consensus']['algorithm'];
    }
    /**
     * Returns a dictionary with consensus configuration
     * parameters based on the consensus algorithm
     *
     * Expected returns (parameters must be present in
     * the respective chain json files):
     *
     * ethash: empty object
     * clique: period, epoch
     * casper: empty object
     *
     * Note: This value can update along a Hardfork.
     */
    consensusConfig() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                // The config parameter is named after the respective consensus algorithm
                value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});
    }
    /**
     * Returns a deep copy of this {@link Common} instance.
     */
    copy() {
        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        copy.removeAllListeners();
        return copy;
    }
    static _getInitializedChains(customChains) {
        const names = {};
        for (const [name, id] of Object.entries(enums_1.Chain)) {
            names[id] = name.toLowerCase();
        }
        const chains = { mainnet, ropsten, rinkeby, goerli, sepolia };
        if (customChains) {
            for (const chain of customChains) {
                const { name } = chain;
                names[chain.chainId.toString()] = name;
                chains[name] = chain;
            }
        }
        chains.names = names;
        return chains;
    }
}
exports.Common = Common;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\common.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\1153.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C1153.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-1153",
    "number": 1153,
    "comment": "Transient Storage",
    "url": "https://eips.ethereum.org/EIPS/eip-1153",
    "status": "Review",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "tstore": {
            "v": 100,
            "d": "Base fee of the TSTORE opcode"
        },
        "tload": {
            "v": 100,
            "d": "Base fee of the TLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\1153.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\1559.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C1559.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-1559",
    "number": 1559,
    "comment": "Fee market change for ETH 1.0 chain",
    "url": "https://eips.ethereum.org/EIPS/eip-1559",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [2930],
    "gasConfig": {
        "baseFeeMaxChangeDenominator": {
            "v": 8,
            "d": "Maximum base fee change denominator"
        },
        "elasticityMultiplier": {
            "v": 2,
            "d": "Maximum block gas target elasticity"
        },
        "initialBaseFee": {
            "v": 1000000000,
            "d": "Initial base fee on first EIP1559 block"
        }
    },
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\1559.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2315.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2315.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2315",
    "number": 2315,
    "comment": "Simple subroutines for the EVM",
    "url": "https://eips.ethereum.org/EIPS/eip-2315",
    "status": "Draft",
    "minimumHardfork": "istanbul",
    "gasConfig": {},
    "gasPrices": {
        "beginsub": {
            "v": 2,
            "d": "Base fee of the BEGINSUB opcode"
        },
        "returnsub": {
            "v": 5,
            "d": "Base fee of the RETURNSUB opcode"
        },
        "jumpsub": {
            "v": 10,
            "d": "Base fee of the JUMPSUB opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2315.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2537.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2537.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2537",
    "number": 2537,
    "comment": "BLS12-381 precompiles",
    "url": "https://eips.ethereum.org/EIPS/eip-2537",
    "status": "Draft",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "Bls12381G1AddGas": {
            "v": 600,
            "d": "Gas cost of a single BLS12-381 G1 addition precompile-call"
        },
        "Bls12381G1MulGas": {
            "v": 12000,
            "d": "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
        },
        "Bls12381G2AddGas": {
            "v": 4500,
            "d": "Gas cost of a single BLS12-381 G2 addition precompile-call"
        },
        "Bls12381G2MulGas": {
            "v": 55000,
            "d": "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
        },
        "Bls12381PairingBaseGas": {
            "v": 115000,
            "d": "Base gas cost of BLS12-381 pairing check"
        },
        "Bls12381PairingPerPairGas": {
            "v": 23000,
            "d": "Per-pair gas cost of BLS12-381 pairing check"
        },
        "Bls12381MapG1Gas": {
            "v": 5500,
            "d": "Gas cost of BLS12-381 map field element to G1"
        },
        "Bls12381MapG2Gas": {
            "v": 110000,
            "d": "Gas cost of BLS12-381 map field element to G2"
        },
        "Bls12381MultiExpGasDiscount": {
            "v": [
                [1, 1200],
                [2, 888],
                [3, 764],
                [4, 641],
                [5, 594],
                [6, 547],
                [7, 500],
                [8, 453],
                [9, 438],
                [10, 423],
                [11, 408],
                [12, 394],
                [13, 379],
                [14, 364],
                [15, 349],
                [16, 334],
                [17, 330],
                [18, 326],
                [19, 322],
                [20, 318],
                [21, 314],
                [22, 310],
                [23, 306],
                [24, 302],
                [25, 298],
                [26, 294],
                [27, 289],
                [28, 285],
                [29, 281],
                [30, 277],
                [31, 273],
                [32, 269],
                [33, 268],
                [34, 266],
                [35, 265],
                [36, 263],
                [37, 262],
                [38, 260],
                [39, 259],
                [40, 257],
                [41, 256],
                [42, 254],
                [43, 253],
                [44, 251],
                [45, 250],
                [46, 248],
                [47, 247],
                [48, 245],
                [49, 244],
                [50, 242],
                [51, 241],
                [52, 239],
                [53, 238],
                [54, 236],
                [55, 235],
                [56, 233],
                [57, 232],
                [58, 231],
                [59, 229],
                [60, 228],
                [61, 226],
                [62, 225],
                [63, 223],
                [64, 222],
                [65, 221],
                [66, 220],
                [67, 219],
                [68, 219],
                [69, 218],
                [70, 217],
                [71, 216],
                [72, 216],
                [73, 215],
                [74, 214],
                [75, 213],
                [76, 213],
                [77, 212],
                [78, 211],
                [79, 211],
                [80, 210],
                [81, 209],
                [82, 208],
                [83, 208],
                [84, 207],
                [85, 206],
                [86, 205],
                [87, 205],
                [88, 204],
                [89, 203],
                [90, 202],
                [91, 202],
                [92, 201],
                [93, 200],
                [94, 199],
                [95, 199],
                [96, 198],
                [97, 197],
                [98, 196],
                [99, 196],
                [100, 195],
                [101, 194],
                [102, 193],
                [103, 193],
                [104, 192],
                [105, 191],
                [106, 191],
                [107, 190],
                [108, 189],
                [109, 188],
                [110, 188],
                [111, 187],
                [112, 186],
                [113, 185],
                [114, 185],
                [115, 184],
                [116, 183],
                [117, 182],
                [118, 182],
                [119, 181],
                [120, 180],
                [121, 179],
                [122, 179],
                [123, 178],
                [124, 177],
                [125, 176],
                [126, 176],
                [127, 175],
                [128, 174]
            ],
            "d": "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2537.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2565.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2565.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2565",
    "number": 2565,
    "comment": "ModExp gas cost",
    "url": "https://eips.ethereum.org/EIPS/eip-2565",
    "status": "Final",
    "minimumHardfork": "byzantium",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 3,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2565.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2718.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2718.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2718",
    "comment": "Typed Transaction Envelope",
    "url": "https://eips.ethereum.org/EIPS/eip-2718",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2718.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2929.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2929.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2929",
    "comment": "Gas cost increases for state access opcodes",
    "url": "https://eips.ethereum.org/EIPS/eip-2929",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "coldsload": {
            "v": 2100,
            "d": "Gas cost of the first read of storage from a given location (per transaction)"
        },
        "coldaccountaccess": {
            "v": 2600,
            "d": "Gas cost of the first read of a given address (per transaction)"
        },
        "warmstorageread": {
            "v": 100,
            "d": "Gas cost of reading storage locations which have already loaded 'cold'"
        },
        "sstoreCleanGasEIP2200": {
            "v": 2900,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreNoopGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19900,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4900,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "call": {
            "v": 0,
            "d": "Base fee of the CALL opcode"
        },
        "callcode": {
            "v": 0,
            "d": "Base fee of the CALLCODE opcode"
        },
        "delegatecall": {
            "v": 0,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "staticcall": {
            "v": 0,
            "d": "Base fee of the STATICCALL opcode"
        },
        "balance": {
            "v": 0,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodesize": {
            "v": 0,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 0,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "extcodehash": {
            "v": 0,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "sload": {
            "v": 0,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2929.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2930.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C2930.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-2930",
    "comment": "Optional access lists",
    "url": "https://eips.ethereum.org/EIPS/eip-2930",
    "status": "Final",
    "minimumHardfork": "istanbul",
    "requiredEIPs": [2718, 2929],
    "gasConfig": {},
    "gasPrices": {
        "accessListStorageKeyCost": {
            "v": 1900,
            "d": "Gas cost per storage key in an Access List transaction"
        },
        "accessListAddressCost": {
            "v": 2400,
            "d": "Gas cost per storage key in an Access List transaction"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2930.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3074.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3074.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3074",
    "number": 3074,
    "comment": "AUTH and AUTHCALL opcodes",
    "url": "https://eips.ethereum.org/EIPS/eip-3074",
    "status": "Review",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {
        "auth": {
            "v": 3100,
            "d": "Gas cost of the AUTH opcode"
        },
        "authcall": {
            "v": 0,
            "d": "Gas cost of the AUTHCALL opcode"
        },
        "authcallValueTransfer": {
            "v": 6700,
            "d": "Paid for CALL when the value transfer is non-zero"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3074.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3198.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3198.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3198",
    "number": 3198,
    "comment": "BASEFEE opcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3198",
    "status": "Final",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {
        "basefee": {
            "v": 2,
            "d": "Gas cost of the BASEFEE opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3198.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3529.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3529.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3529",
    "comment": "Reduction in refunds",
    "url": "https://eips.ethereum.org/EIPS/eip-3529",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [2929],
    "gasConfig": {
        "maxRefundQuotient": {
            "v": 5,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "selfdestructRefund": {
            "v": 0,
            "d": "Refunded following a selfdestruct operation"
        },
        "sstoreClearRefundEIP2200": {
            "v": 4800,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3529.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3540.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3540.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3540",
    "number": 3540,
    "comment": "EVM Object Format (EOF) v1",
    "url": "https://eips.ethereum.org/EIPS/eip-3540",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [3541],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3540.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3541.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3541.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3541",
    "comment": "Reject new contracts starting with the 0xEF byte",
    "url": "https://eips.ethereum.org/EIPS/eip-3541",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3541.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3554.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3554.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3554",
    "comment": "Reduction in refunds",
    "url": "Difficulty Bomb Delay to December 1st 2021",
    "status": "Final",
    "minimumHardfork": "muirGlacier",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9500000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3554.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3607.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3607.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3607",
    "number": 3607,
    "comment": "Reject transactions from senders with deployed code",
    "url": "https://eips.ethereum.org/EIPS/eip-3607",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3607.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3651.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3651.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3651",
    "number": 3198,
    "comment": "Warm COINBASE",
    "url": "https://eips.ethereum.org/EIPS/eip-3651",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [2929],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3651.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3670.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3670.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3670",
    "number": 3670,
    "comment": "EOF - Code Validation",
    "url": "https://eips.ethereum.org/EIPS/eip-3670",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [3540],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3670.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3675.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3675.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3675",
    "number": 3675,
    "comment": "Upgrade consensus to Proof-of-Stake",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Final",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3675.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3855.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3855.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3855",
    "number": 3855,
    "comment": "PUSH0 instruction",
    "url": "https://eips.ethereum.org/EIPS/eip-3855",
    "status": "Review",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "push0": {
            "v": 2,
            "d": "Base fee of the PUSH0 opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3855.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3860.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C3860.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-3860",
    "number": 3860,
    "comment": "Limit and meter initcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3860",
    "status": "Review",
    "minimumHardfork": "spuriousDragon",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "initCodeWordCost": {
            "v": 2,
            "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract"
        }
    },
    "vm": {
        "maxInitCodeSize": {
            "v": 49152,
            "d": "Maximum length of initialization code when creating a contract"
        }
    },
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3860.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4345.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4345.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4345",
    "number": 4345,
    "comment": "Difficulty Bomb Delay to June 2022",
    "url": "https://eips.ethereum.org/EIPS/eip-4345",
    "status": "Final",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 10700000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4345.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4399.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4399.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4399",
    "number": 4399,
    "comment": "Supplant DIFFICULTY opcode with PREVRANDAO",
    "url": "https://eips.ethereum.org/EIPS/eip-4399",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4399.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4844.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4844.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4844",
    "number": 4844,
    "comment": "Shard Blob Transactions",
    "url": "https://eips.ethereum.org/EIPS/eip-4844",
    "status": "Draft",
    "minimumHardfork": "merge",
    "requiredEIPs": [1559, 2718, 2930, 4895],
    "gasConfig": {
        "dataGasPerBlob": {
            "v": 131072,
            "d": "The base fee for data gas per blob"
        },
        "targetDataGasPerBlock": {
            "v": 262144,
            "d": "The target data gas consumed per block"
        },
        "maxDataGasPerBlock": {
            "v": 524288,
            "d": "The max data gas allowable per block"
        },
        "dataGasPriceUpdateFraction": {
            "v": 2225652,
            "d": "The denominator used in the exponential when calculating a data gas price"
        }
    },
    "gasPrices": {
        "simpleGasPerBlob": {
            "v": 12000,
            "d": "The basic gas fee for each blob"
        },
        "minDataGasPrice": {
            "v": 1,
            "d": "The minimum fee per data gas"
        },
        "kzgPointEvaluationGasPrecompilePrice": {
            "v": 50000,
            "d": "The fee associated with the point evaluation precompile"
        },
        "datahash": {
            "v": 3,
            "d": "Base fee of the DATAHASH opcode"
        }
    },
    "sharding": {
        "blobCommitmentVersionKzg": {
            "v": 1,
            "d": "The number indicated a versioned hash is a KZG commitment"
        },
        "fieldElementsPerBlob": {
            "v": 4096,
            "d": "The number of field elements allowed per blob"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4844.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4895.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C4895.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-4895",
    "number": 4895,
    "comment": "Beacon chain push withdrawals as operations",
    "url": "https://eips.ethereum.org/EIPS/eip-4895",
    "status": "Review",
    "minimumHardfork": "merge",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4895.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\5133.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5C5133.json
      return function (require, module, exports) {
module.exports={
    "name": "EIP-5133",
    "number": 5133,
    "comment": "Delaying Difficulty Bomb to mid-September 2022",
    "url": "https://eips.ethereum.org/EIPS/eip-5133",
    "status": "Draft",
    "minimumHardfork": "grayGlacier",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 11400000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\5133.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\index.js", {"./1153.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\1153.json","./1559.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\1559.json","./2315.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2315.json","./2537.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2537.json","./2565.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2565.json","./2718.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2718.json","./2929.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2929.json","./2930.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\2930.json","./3074.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3074.json","./3198.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3198.json","./3529.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3529.json","./3540.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3540.json","./3541.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3541.json","./3554.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3554.json","./3607.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3607.json","./3651.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3651.json","./3670.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3670.json","./3675.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3675.json","./3855.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3855.json","./3860.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\3860.json","./4345.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4345.json","./4399.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4399.json","./4844.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4844.json","./4895.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\4895.json","./5133.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\5133.json"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ceips%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIPs = void 0;
exports.EIPs = {
    1153: require('./1153.json'),
    1559: require('./1559.json'),
    2315: require('./2315.json'),
    2537: require('./2537.json'),
    2565: require('./2565.json'),
    2718: require('./2718.json'),
    2929: require('./2929.json'),
    2930: require('./2930.json'),
    3074: require('./3074.json'),
    3198: require('./3198.json'),
    3529: require('./3529.json'),
    3540: require('./3540.json'),
    3541: require('./3541.json'),
    3554: require('./3554.json'),
    3607: require('./3607.json'),
    3651: require('./3651.json'),
    3670: require('./3670.json'),
    3675: require('./3675.json'),
    3855: require('./3855.json'),
    3860: require('./3860.json'),
    4345: require('./4345.json'),
    4399: require('./4399.json'),
    4844: require('./4844.json'),
    4895: require('./4895.json'),
    5133: require('./5133.json'),
};
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\eips\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\enums.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cenums.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomChain = exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = void 0;
var Chain;
(function (Chain) {
    Chain[Chain["Mainnet"] = 1] = "Mainnet";
    Chain[Chain["Ropsten"] = 3] = "Ropsten";
    Chain[Chain["Rinkeby"] = 4] = "Rinkeby";
    Chain[Chain["Goerli"] = 5] = "Goerli";
    Chain[Chain["Sepolia"] = 11155111] = "Sepolia";
})(Chain = exports.Chain || (exports.Chain = {}));
var Hardfork;
(function (Hardfork) {
    Hardfork["Chainstart"] = "chainstart";
    Hardfork["Homestead"] = "homestead";
    Hardfork["Dao"] = "dao";
    Hardfork["TangerineWhistle"] = "tangerineWhistle";
    Hardfork["SpuriousDragon"] = "spuriousDragon";
    Hardfork["Byzantium"] = "byzantium";
    Hardfork["Constantinople"] = "constantinople";
    Hardfork["Petersburg"] = "petersburg";
    Hardfork["Istanbul"] = "istanbul";
    Hardfork["MuirGlacier"] = "muirGlacier";
    Hardfork["Berlin"] = "berlin";
    Hardfork["London"] = "london";
    Hardfork["ArrowGlacier"] = "arrowGlacier";
    Hardfork["GrayGlacier"] = "grayGlacier";
    Hardfork["MergeForkIdTransition"] = "mergeForkIdTransition";
    Hardfork["Merge"] = "merge";
    Hardfork["Shanghai"] = "shanghai";
    Hardfork["ShardingForkDev"] = "shardingFork";
})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));
var ConsensusType;
(function (ConsensusType) {
    ConsensusType["ProofOfStake"] = "pos";
    ConsensusType["ProofOfWork"] = "pow";
    ConsensusType["ProofOfAuthority"] = "poa";
})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));
var ConsensusAlgorithm;
(function (ConsensusAlgorithm) {
    ConsensusAlgorithm["Ethash"] = "ethash";
    ConsensusAlgorithm["Clique"] = "clique";
    ConsensusAlgorithm["Casper"] = "casper";
})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));
var CustomChain;
(function (CustomChain) {
    /**
     * Polygon (Matic) Mainnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */
    CustomChain["PolygonMainnet"] = "polygon-mainnet";
    /**
     * Polygon (Matic) Mumbai Testnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */
    CustomChain["PolygonMumbai"] = "polygon-mumbai";
    /**
     * Arbitrum Rinkeby Testnet
     *
     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)
     */
    CustomChain["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
    /**
     * Arbitrum One - mainnet for Arbitrum roll-up
     *
     * - [Documentation](https://developer.offchainlabs.com/public-chains)
     */
    CustomChain["ArbitrumOne"] = "arbitrum-one";
    /**
     * xDai EVM sidechain with a native stable token
     *
     * - [Documentation](https://www.xdaichain.com/)
     */
    CustomChain["xDaiChain"] = "x-dai-chain";
    /**
     * Optimistic Kovan - testnet for Optimism roll-up
     *
     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
     */
    CustomChain["OptimisticKovan"] = "optimistic-kovan";
    /**
     * Optimistic Ethereum - mainnet for Optimism roll-up
     *
     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
     */
    CustomChain["OptimisticEthereum"] = "optimistic-ethereum";
})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));
//# sourceMappingURL=enums.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\enums.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\arrowGlacier.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CarrowGlacier.json
      return function (require, module, exports) {
module.exports={
    "name": "arrowGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
    "status": "Final",
    "eips": [4345],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\arrowGlacier.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\berlin.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cberlin.json
      return function (require, module, exports) {
module.exports={
    "name": "berlin",
    "comment": "HF targeted for July 2020 following the Muir Glacier HF",
    "url": "https://eips.ethereum.org/EIPS/eip-2070",
    "status": "Final",
    "eips": [2565, 2929, 2718, 2930]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\berlin.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\byzantium.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cbyzantium.json
      return function (require, module, exports) {
module.exports={
    "name": "byzantium",
    "comment": "Hardfork with new precompiles, instructions and other protocol changes",
    "url": "https://eips.ethereum.org/EIPS/eip-609",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 20,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        },
        "ecAdd": {
            "v": 500,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 40000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 100000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 80000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "revert": {
            "v": 0,
            "d": "Base fee of the REVERT opcode"
        },
        "staticcall": {
            "v": 700,
            "d": "Base fee of the STATICCALL opcode"
        },
        "returndatasize": {
            "v": 2,
            "d": "Base fee of the RETURNDATASIZE opcode"
        },
        "returndatacopy": {
            "v": 3,
            "d": "Base fee of the RETURNDATACOPY opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "3000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 3000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\byzantium.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\chainstart.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cchainstart.json
      return function (require, module, exports) {
module.exports={
    "name": "chainstart",
    "comment": "Start of the Ethereum main chain",
    "url": "",
    "status": "",
    "gasConfig": {
        "minGasLimit": {
            "v": 5000,
            "d": "Minimum the gas limit may ever be"
        },
        "gasLimitBoundDivisor": {
            "v": 1024,
            "d": "The bound divisor of the gas limit, used in update calculations"
        },
        "maxRefundQuotient": {
            "v": 2,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "base": {
            "v": 2,
            "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
        },
        "tierStep": {
            "v": [0, 2, 3, 5, 8, 10, 20],
            "d": "Once per operation, for a selection of them"
        },
        "exp": {
            "v": 10,
            "d": "Base fee of the EXP opcode"
        },
        "expByte": {
            "v": 10,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        },
        "sha3": {
            "v": 30,
            "d": "Base fee of the SHA3 opcode"
        },
        "sha3Word": {
            "v": 6,
            "d": "Once per word of the SHA3 operation's data"
        },
        "sload": {
            "v": 50,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstoreSet": {
            "v": 20000,
            "d": "Once per SSTORE operation if the zeroness changes from zero"
        },
        "sstoreReset": {
            "v": 5000,
            "d": "Once per SSTORE operation if the zeroness does not change from zero"
        },
        "sstoreRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation if the zeroness changes to zero"
        },
        "jumpdest": {
            "v": 1,
            "d": "Base fee of the JUMPDEST opcode"
        },
        "log": {
            "v": 375,
            "d": "Base fee of the LOG opcode"
        },
        "logData": {
            "v": 8,
            "d": "Per byte in a LOG* operation's data"
        },
        "logTopic": {
            "v": 375,
            "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
        },
        "create": {
            "v": 32000,
            "d": "Base fee of the CREATE opcode"
        },
        "call": {
            "v": 40,
            "d": "Base fee of the CALL opcode"
        },
        "callStipend": {
            "v": 2300,
            "d": "Free gas given at beginning of call"
        },
        "callValueTransfer": {
            "v": 9000,
            "d": "Paid for CALL when the value transfor is non-zero"
        },
        "callNewAccount": {
            "v": 25000,
            "d": "Paid for CALL when the destination address didn't exist prior"
        },
        "selfdestructRefund": {
            "v": 24000,
            "d": "Refunded following a selfdestruct operation"
        },
        "memory": {
            "v": 3,
            "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
        },
        "quadCoeffDiv": {
            "v": 512,
            "d": "Divisor for the quadratic particle of the memory cost equation"
        },
        "createData": {
            "v": 200,
            "d": ""
        },
        "tx": {
            "v": 21000,
            "d": "Per transaction. NOTE: Not payable on data of calls between transactions"
        },
        "txCreation": {
            "v": 32000,
            "d": "The cost of creating a contract via tx"
        },
        "txDataZero": {
            "v": 4,
            "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
        },
        "txDataNonZero": {
            "v": 68,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "copy": {
            "v": 3,
            "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
        },
        "ecRecover": {
            "v": 3000,
            "d": ""
        },
        "sha256": {
            "v": 60,
            "d": ""
        },
        "sha256Word": {
            "v": 12,
            "d": ""
        },
        "ripemd160": {
            "v": 600,
            "d": ""
        },
        "ripemd160Word": {
            "v": 120,
            "d": ""
        },
        "identity": {
            "v": 15,
            "d": ""
        },
        "identityWord": {
            "v": 3,
            "d": ""
        },
        "stop": {
            "v": 0,
            "d": "Base fee of the STOP opcode"
        },
        "add": {
            "v": 3,
            "d": "Base fee of the ADD opcode"
        },
        "mul": {
            "v": 5,
            "d": "Base fee of the MUL opcode"
        },
        "sub": {
            "v": 3,
            "d": "Base fee of the SUB opcode"
        },
        "div": {
            "v": 5,
            "d": "Base fee of the DIV opcode"
        },
        "sdiv": {
            "v": 5,
            "d": "Base fee of the SDIV opcode"
        },
        "mod": {
            "v": 5,
            "d": "Base fee of the MOD opcode"
        },
        "smod": {
            "v": 5,
            "d": "Base fee of the SMOD opcode"
        },
        "addmod": {
            "v": 8,
            "d": "Base fee of the ADDMOD opcode"
        },
        "mulmod": {
            "v": 8,
            "d": "Base fee of the MULMOD opcode"
        },
        "signextend": {
            "v": 5,
            "d": "Base fee of the SIGNEXTEND opcode"
        },
        "lt": {
            "v": 3,
            "d": "Base fee of the LT opcode"
        },
        "gt": {
            "v": 3,
            "d": "Base fee of the GT opcode"
        },
        "slt": {
            "v": 3,
            "d": "Base fee of the SLT opcode"
        },
        "sgt": {
            "v": 3,
            "d": "Base fee of the SGT opcode"
        },
        "eq": {
            "v": 3,
            "d": "Base fee of the EQ opcode"
        },
        "iszero": {
            "v": 3,
            "d": "Base fee of the ISZERO opcode"
        },
        "and": {
            "v": 3,
            "d": "Base fee of the AND opcode"
        },
        "or": {
            "v": 3,
            "d": "Base fee of the OR opcode"
        },
        "xor": {
            "v": 3,
            "d": "Base fee of the XOR opcode"
        },
        "not": {
            "v": 3,
            "d": "Base fee of the NOT opcode"
        },
        "byte": {
            "v": 3,
            "d": "Base fee of the BYTE opcode"
        },
        "address": {
            "v": 2,
            "d": "Base fee of the ADDRESS opcode"
        },
        "balance": {
            "v": 20,
            "d": "Base fee of the BALANCE opcode"
        },
        "origin": {
            "v": 2,
            "d": "Base fee of the ORIGIN opcode"
        },
        "caller": {
            "v": 2,
            "d": "Base fee of the CALLER opcode"
        },
        "callvalue": {
            "v": 2,
            "d": "Base fee of the CALLVALUE opcode"
        },
        "calldataload": {
            "v": 3,
            "d": "Base fee of the CALLDATALOAD opcode"
        },
        "calldatasize": {
            "v": 2,
            "d": "Base fee of the CALLDATASIZE opcode"
        },
        "calldatacopy": {
            "v": 3,
            "d": "Base fee of the CALLDATACOPY opcode"
        },
        "codesize": {
            "v": 2,
            "d": "Base fee of the CODESIZE opcode"
        },
        "codecopy": {
            "v": 3,
            "d": "Base fee of the CODECOPY opcode"
        },
        "gasprice": {
            "v": 2,
            "d": "Base fee of the GASPRICE opcode"
        },
        "extcodesize": {
            "v": 20,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 20,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "blockhash": {
            "v": 20,
            "d": "Base fee of the BLOCKHASH opcode"
        },
        "coinbase": {
            "v": 2,
            "d": "Base fee of the COINBASE opcode"
        },
        "timestamp": {
            "v": 2,
            "d": "Base fee of the TIMESTAMP opcode"
        },
        "number": {
            "v": 2,
            "d": "Base fee of the NUMBER opcode"
        },
        "difficulty": {
            "v": 2,
            "d": "Base fee of the DIFFICULTY opcode"
        },
        "gaslimit": {
            "v": 2,
            "d": "Base fee of the GASLIMIT opcode"
        },
        "pop": {
            "v": 2,
            "d": "Base fee of the POP opcode"
        },
        "mload": {
            "v": 3,
            "d": "Base fee of the MLOAD opcode"
        },
        "mstore": {
            "v": 3,
            "d": "Base fee of the MSTORE opcode"
        },
        "mstore8": {
            "v": 3,
            "d": "Base fee of the MSTORE8 opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        },
        "jump": {
            "v": 8,
            "d": "Base fee of the JUMP opcode"
        },
        "jumpi": {
            "v": 10,
            "d": "Base fee of the JUMPI opcode"
        },
        "pc": {
            "v": 2,
            "d": "Base fee of the PC opcode"
        },
        "msize": {
            "v": 2,
            "d": "Base fee of the MSIZE opcode"
        },
        "gas": {
            "v": 2,
            "d": "Base fee of the GAS opcode"
        },
        "push": {
            "v": 3,
            "d": "Base fee of the PUSH opcode"
        },
        "dup": {
            "v": 3,
            "d": "Base fee of the DUP opcode"
        },
        "swap": {
            "v": 3,
            "d": "Base fee of the SWAP opcode"
        },
        "callcode": {
            "v": 40,
            "d": "Base fee of the CALLCODE opcode"
        },
        "return": {
            "v": 0,
            "d": "Base fee of the RETURN opcode"
        },
        "invalid": {
            "v": 0,
            "d": "Base fee of the INVALID opcode"
        },
        "selfdestruct": {
            "v": 0,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {
        "stackLimit": {
            "v": 1024,
            "d": "Maximum size of VM stack allowed"
        },
        "callCreateDepth": {
            "v": 1024,
            "d": "Maximum depth of call/create stack"
        },
        "maxExtraDataSize": {
            "v": 32,
            "d": "Maximum size extra data may be after Genesis"
        }
    },
    "pow": {
        "minimumDifficulty": {
            "v": 131072,
            "d": "The minimum that the difficulty may ever be"
        },
        "difficultyBoundDivisor": {
            "v": 2048,
            "d": "The bound divisor of the difficulty, used in the update calculations"
        },
        "durationLimit": {
            "v": 13,
            "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
        },
        "epochDuration": {
            "v": 30000,
            "d": "Duration between proof-of-work epochs"
        },
        "timebombPeriod": {
            "v": 100000,
            "d": "Exponential difficulty timebomb period"
        },
        "minerReward": {
            "v": "5000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 0,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\chainstart.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\constantinople.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cconstantinople.json
      return function (require, module, exports) {
module.exports={
    "name": "constantinople",
    "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
    "url": "https://eips.ethereum.org/EIPS/eip-1013",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": 200,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "netSstoreInitGas": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero"
        },
        "netSstoreCleanGas": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero"
        },
        "netSstoreDirtyGas": {
            "v": 200,
            "d": "Once per SSTORE operation from dirty"
        },
        "netSstoreClearRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "netSstoreResetRefund": {
            "v": 4800,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "netSstoreResetClearRefund": {
            "v": 19800,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "shl": {
            "v": 3,
            "d": "Base fee of the SHL opcode"
        },
        "shr": {
            "v": 3,
            "d": "Base fee of the SHR opcode"
        },
        "sar": {
            "v": 3,
            "d": "Base fee of the SAR opcode"
        },
        "extcodehash": {
            "v": 400,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "create2": {
            "v": 32000,
            "d": "Base fee of the CREATE2 opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "2000000000000000000",
            "d": "The amount a miner gets rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 5000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\constantinople.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\dao.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cdao.json
      return function (require, module, exports) {
module.exports={
    "name": "dao",
    "comment": "DAO rescue hardfork",
    "url": "https://eips.ethereum.org/EIPS/eip-779",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\dao.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\grayGlacier.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CgrayGlacier.json
      return function (require, module, exports) {
module.exports={
    "name": "grayGlacier",
    "comment": "Delaying the difficulty bomb to Mid September 2022",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
    "status": "Draft",
    "eips": [5133],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\grayGlacier.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\homestead.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Chomestead.json
      return function (require, module, exports) {
module.exports={
    "name": "homestead",
    "comment": "Homestead hardfork with protocol and network changes",
    "url": "https://eips.ethereum.org/EIPS/eip-606",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "delegatecall": {
            "v": 40,
            "d": "Base fee of the DELEGATECALL opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\homestead.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\index.js", {"./arrowGlacier.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\arrowGlacier.json","./berlin.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\berlin.json","./byzantium.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\byzantium.json","./chainstart.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\chainstart.json","./constantinople.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\constantinople.json","./dao.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\dao.json","./grayGlacier.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\grayGlacier.json","./homestead.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\homestead.json","./istanbul.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\istanbul.json","./london.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\london.json","./merge.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\merge.json","./mergeForkIdTransition.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\mergeForkIdTransition.json","./muirGlacier.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\muirGlacier.json","./petersburg.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\petersburg.json","./shanghai.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\shanghai.json","./sharding.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\sharding.json","./spuriousDragon.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\spuriousDragon.json","./tangerineWhistle.json":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\tangerineWhistle.json"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hardforks = void 0;
exports.hardforks = {
    chainstart: require('./chainstart.json'),
    homestead: require('./homestead.json'),
    dao: require('./dao.json'),
    tangerineWhistle: require('./tangerineWhistle.json'),
    spuriousDragon: require('./spuriousDragon.json'),
    byzantium: require('./byzantium.json'),
    constantinople: require('./constantinople.json'),
    petersburg: require('./petersburg.json'),
    istanbul: require('./istanbul.json'),
    muirGlacier: require('./muirGlacier.json'),
    berlin: require('./berlin.json'),
    london: require('./london.json'),
    shanghai: require('./shanghai.json'),
    arrowGlacier: require('./arrowGlacier.json'),
    grayGlacier: require('./grayGlacier.json'),
    mergeForkIdTransition: require('./mergeForkIdTransition.json'),
    merge: require('./merge.json'),
    shardingFork: require('./sharding.json'),
};
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\istanbul.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cistanbul.json
      return function (require, module, exports) {
module.exports={
    "name": "istanbul",
    "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
    "url": "https://eips.ethereum.org/EIPS/eip-1679",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "blake2Round": {
            "v": 1,
            "d": "Gas cost per round for the Blake2 F precompile"
        },
        "ecAdd": {
            "v": 150,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 6000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 45000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 34000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "txDataNonZero": {
            "v": 16,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "sstoreSentryGasEIP2200": {
            "v": 2300,
            "d": "Minimum gas required to be present for an SSTORE call, not consumed"
        },
        "sstoreNoopGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitGasEIP2200": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero to non-zero"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19200,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanGasEIP2200": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4200,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "sstoreClearRefundEIP2200": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "balance": {
            "v": 700,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodehash": {
            "v": 700,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "chainid": {
            "v": 2,
            "d": "Base fee of the CHAINID opcode"
        },
        "selfbalance": {
            "v": 5,
            "d": "Base fee of the SELFBALANCE opcode"
        },
        "sload": {
            "v": 800,
            "d": "Base fee of the SLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\istanbul.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\london.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Clondon.json
      return function (require, module, exports) {
module.exports={
    "name": "london",
    "comment": "HF targeted for July 2021 following the Berlin fork",
    "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
    "status": "Final",
    "eips": [1559, 3198, 3529, 3541]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\london.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\merge.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cmerge.json
      return function (require, module, exports) {
module.exports={
    "name": "merge",
    "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
    "status": "Final",
    "consensus": {
        "type": "pos",
        "algorithm": "casper",
        "casper": {}
    },
    "eips": [3675, 4399]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\merge.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\mergeForkIdTransition.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CmergeForkIdTransition.json
      return function (require, module, exports) {
module.exports={
    "name": "mergeForkIdTransition",
    "comment": "Pre-merge hardfork to fork off non-upgraded clients",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Draft",
    "eips": []
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\mergeForkIdTransition.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\muirGlacier.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CmuirGlacier.json
      return function (require, module, exports) {
module.exports={
    "name": "muirGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://eips.ethereum.org/EIPS/eip-2384",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\muirGlacier.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\petersburg.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cpetersburg.json
      return function (require, module, exports) {
module.exports={
    "name": "petersburg",
    "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
    "url": "https://eips.ethereum.org/EIPS/eip-1716",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreInitGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreCleanGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreDirtyGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\petersburg.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\shanghai.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Cshanghai.json
      return function (require, module, exports) {
module.exports={
    "name": "shanghai",
    "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
    "status": "Final",
    "eips": [3651, 3855, 3860, 4895]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\shanghai.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\sharding.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5Csharding.json
      return function (require, module, exports) {
module.exports={
    "name": "shardingFork",
    "comment": "Internal hardfork to test proto-danksharding (do not use in production)",
    "url": "https://eips.ethereum.org/EIPS/eip-4844",
    "status": "Experimental",
    "eips": [4844]
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\sharding.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\spuriousDragon.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CspuriousDragon.json
      return function (require, module, exports) {
module.exports={
    "name": "spuriousDragon",
    "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
    "url": "https://eips.ethereum.org/EIPS/eip-607",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "expByte": {
            "v": 50,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        }
    },
    "vm": {
        "maxCodeSize": {
            "v": 24576,
            "d": "Maximum length of contract code"
        }
    },
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\spuriousDragon.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\tangerineWhistle.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Chardforks%5CtangerineWhistle.json
      return function (require, module, exports) {
module.exports={
    "name": "tangerineWhistle",
    "comment": "Hardfork with gas cost changes for IO-heavy operations",
    "url": "https://eips.ethereum.org/EIPS/eip-608",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "sload": {
            "v": 200,
            "d": "Once per SLOAD operation"
        },
        "call": {
            "v": 700,
            "d": "Once per CALL operation & message call transaction"
        },
        "extcodesize": {
            "v": 700,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 700,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "balance": {
            "v": 400,
            "d": "Base fee of the BALANCE opcode"
        },
        "delegatecall": {
            "v": 700,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "callcode": {
            "v": 700,
            "d": "Base fee of the CALLCODE opcode"
        },
        "selfdestruct": {
            "v": 5000,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {},
    "pow": {}
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\hardforks\\tangerineWhistle.json",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\index.js", {"./common":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\common.js","./enums":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\enums.js","./types":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\types.js","./utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\utils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./common"), exports);
__exportStar(require("./enums"), exports);
__exportStar(require("./types"), exports);
__exportStar(require("./utils"), exports);
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\types.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Ctypes.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\types.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\utils.js", {"./enums":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\enums.js","@ethereumjs/util":"F:\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5C@ethereumjs%5Ctx%5Cnode_modules%5C@ethereumjs%5Ccommon%5Cdist%5Cutils.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGethGenesis = void 0;
const util_1 = require("@ethereumjs/util");
const enums_1 = require("./enums");
/**
 * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally
 * @param nonce string parsed from the Geth genesis file
 * @returns nonce as a 0x-prefixed 8 byte string
 */
function formatNonce(nonce) {
    if (!nonce || nonce === '0x0') {
        return '0x0000000000000000';
    }
    if ((0, util_1.isHexPrefixed)(nonce)) {
        return '0x' + (0, util_1.stripHexPrefix)(nonce).padStart(16, '0');
    }
    return '0x' + nonce.padStart(16, '0');
}
/**
 * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object
 * @param json object representing the Geth genesis file
 * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition
 * hardfork, which by default is post merge as with the merged eth networks but could also come
 * before merge like in kiln genesis
 * @returns genesis parameters in a `CommonOpts` compliant object
 */
function parseGethParams(json, mergeForkIdPostMerge = true) {
    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, } = json;
    let { extraData, timestamp, nonce } = json;
    const genesisTimestamp = Number(timestamp);
    const { chainId } = config;
    // geth is not strictly putting empty fields with a 0x prefix
    if (extraData === '') {
        extraData = '0x';
    }
    // geth may use number for timestamp
    if (!(0, util_1.isHexPrefixed)(timestamp)) {
        timestamp = (0, util_1.intToHex)(parseInt(timestamp));
    }
    // geth may not give us a nonce strictly formatted to an 8 byte hex string
    if (nonce.length !== 18) {
        nonce = formatNonce(nonce);
    }
    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time
    // but have different configuration parameters in geth genesis parameters
    if (config.eip155Block !== config.eip158Block) {
        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');
    }
    const params = {
        name,
        chainId,
        networkId: chainId,
        genesis: {
            timestamp,
            gasLimit: parseInt(gasLimit),
            difficulty: parseInt(difficulty),
            nonce,
            extraData,
            mixHash,
            coinbase,
            baseFeePerGas,
        },
        hardfork: undefined,
        hardforks: [],
        bootstrapNodes: [],
        consensus: config.clique !== undefined
            ? {
                type: 'poa',
                algorithm: 'clique',
                clique: {
                    // The recent geth genesis seems to be using blockperiodseconds
                    // and epochlength for clique specification
                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
                    period: config.clique.period ?? config.clique.blockperiodseconds,
                    epoch: config.clique.epoch ?? config.clique.epochlength,
                },
            }
            : {
                type: 'pow',
                algorithm: 'ethash',
                ethash: {},
            },
    };
    const forkMap = {
        [enums_1.Hardfork.Homestead]: { name: 'homesteadBlock' },
        [enums_1.Hardfork.Dao]: { name: 'daoForkBlock' },
        [enums_1.Hardfork.TangerineWhistle]: { name: 'eip150Block' },
        [enums_1.Hardfork.SpuriousDragon]: { name: 'eip155Block' },
        [enums_1.Hardfork.Byzantium]: { name: 'byzantiumBlock' },
        [enums_1.Hardfork.Constantinople]: { name: 'constantinopleBlock' },
        [enums_1.Hardfork.Petersburg]: { name: 'petersburgBlock' },
        [enums_1.Hardfork.Istanbul]: { name: 'istanbulBlock' },
        [enums_1.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },
        [enums_1.Hardfork.Berlin]: { name: 'berlinBlock' },
        [enums_1.Hardfork.London]: { name: 'londonBlock' },
        [enums_1.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },
        [enums_1.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },
        [enums_1.Hardfork.ShardingForkDev]: { name: 'shardingForkTime', postMerge: true, isTimestamp: true },
    };
    // forkMapRev is the map from config field name to Hardfork
    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
        acc[forkMap[elem].name] = elem;
        return acc;
    }, {});
    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);
    params.hardforks = configHardforkNames
        .map((nameBlock) => ({
        name: forkMapRev[nameBlock],
        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'
            ? null
            : config[nameBlock],
        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'
            ? config[nameBlock]
            : undefined,
    }))
        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);
    params.hardforks.sort(function (a, b) {
        return (a.block ?? Infinity) - (b.block ?? Infinity);
    });
    params.hardforks.sort(function (a, b) {
        return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp);
    });
    if (config.terminalTotalDifficulty !== undefined) {
        // Following points need to be considered for placement of merge hf
        // - Merge hardfork can't be placed at genesis
        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals
        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL
        //   necessary for e.g. withdrawals
        const mergeConfig = {
            name: enums_1.Hardfork.Merge,
            ttd: config.terminalTotalDifficulty,
            block: null,
        };
        // Merge hardfork has to be placed before first hardfork that is dependent on merge
        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);
        if (postMergeIndex !== -1) {
            params.hardforks.splice(postMergeIndex, 0, mergeConfig);
        }
        else {
            params.hardforks.push(mergeConfig);
        }
    }
    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;
    params.hardfork = latestHardfork?.name;
    params.hardforks.unshift({ name: enums_1.Hardfork.Chainstart, block: 0 });
    return params;
}
/**
 * Parses a genesis.json exported from Geth into parameters for Common instance
 * @param json representing the Geth genesis file
 * @param name optional chain name
 * @returns parsed params
 */
function parseGethGenesis(json, name, mergeForkIdPostMerge) {
    try {
        if (['config', 'difficulty', 'gasLimit', 'alloc'].some((field) => !(field in json))) {
            throw new Error('Invalid format, expected geth genesis fields missing');
        }
        if (name !== undefined) {
            json.name = name;
        }
        return parseGethParams(json, mergeForkIdPostMerge);
    }
    catch (e) {
        throw new Error(`Error parsing parameters file: ${e.message}`);
    }
}
exports.parseGethGenesis = parseGethGenesis;
//# sourceMappingURL=utils.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>@ethereumjs/common",file:"node_modules\\gridplus-sdk\\node_modules\\@ethereumjs\\tx\\node_modules\\@ethereumjs\\common\\dist\\utils.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bech32\\dist\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cbech32%5Cdist%5Cindex.js
      return function (require, module, exports) {
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.bech32m = exports.bech32 = void 0;
const ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
const ALPHABET_MAP = {};
for (let z = 0; z < ALPHABET.length; z++) {
    const x = ALPHABET.charAt(z);
    ALPHABET_MAP[x] = z;
}
function polymodStep(pre) {
    const b = pre >> 25;
    return (((pre & 0x1ffffff) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3));
}
function prefixChk(prefix) {
    let chk = 1;
    for (let i = 0; i < prefix.length; ++i) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
            return 'Invalid prefix (' + prefix + ')';
        chk = polymodStep(chk) ^ (c >> 5);
    }
    chk = polymodStep(chk);
    for (let i = 0; i < prefix.length; ++i) {
        const v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
    }
    return chk;
}
function convert(data, inBits, outBits, pad) {
    let value = 0;
    let bits = 0;
    const maxV = (1 << outBits) - 1;
    const result = [];
    for (let i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;
        while (bits >= outBits) {
            bits -= outBits;
            result.push((value >> bits) & maxV);
        }
    }
    if (pad) {
        if (bits > 0) {
            result.push((value << (outBits - bits)) & maxV);
        }
    }
    else {
        if (bits >= inBits)
            return 'Excess padding';
        if ((value << (outBits - bits)) & maxV)
            return 'Non-zero padding';
    }
    return result;
}
function toWords(bytes) {
    return convert(bytes, 8, 5, true);
}
function fromWordsUnsafe(words) {
    const res = convert(words, 5, 8, false);
    if (Array.isArray(res))
        return res;
}
function fromWords(words) {
    const res = convert(words, 5, 8, false);
    if (Array.isArray(res))
        return res;
    throw new Error(res);
}
function getLibraryFromEncoding(encoding) {
    let ENCODING_CONST;
    if (encoding === 'bech32') {
        ENCODING_CONST = 1;
    }
    else {
        ENCODING_CONST = 0x2bc830a3;
    }
    function encode(prefix, words, LIMIT) {
        LIMIT = LIMIT || 90;
        if (prefix.length + 7 + words.length > LIMIT)
            throw new TypeError('Exceeds length limit');
        prefix = prefix.toLowerCase();
        // determine chk mod
        let chk = prefixChk(prefix);
        if (typeof chk === 'string')
            throw new Error(chk);
        let result = prefix + '1';
        for (let i = 0; i < words.length; ++i) {
            const x = words[i];
            if (x >> 5 !== 0)
                throw new Error('Non 5-bit word');
            chk = polymodStep(chk) ^ x;
            result += ALPHABET.charAt(x);
        }
        for (let i = 0; i < 6; ++i) {
            chk = polymodStep(chk);
        }
        chk ^= ENCODING_CONST;
        for (let i = 0; i < 6; ++i) {
            const v = (chk >> ((5 - i) * 5)) & 0x1f;
            result += ALPHABET.charAt(v);
        }
        return result;
    }
    function __decode(str, LIMIT) {
        LIMIT = LIMIT || 90;
        if (str.length < 8)
            return str + ' too short';
        if (str.length > LIMIT)
            return 'Exceeds length limit';
        // don't allow mixed case
        const lowered = str.toLowerCase();
        const uppered = str.toUpperCase();
        if (str !== lowered && str !== uppered)
            return 'Mixed-case string ' + str;
        str = lowered;
        const split = str.lastIndexOf('1');
        if (split === -1)
            return 'No separator character for ' + str;
        if (split === 0)
            return 'Missing prefix for ' + str;
        const prefix = str.slice(0, split);
        const wordChars = str.slice(split + 1);
        if (wordChars.length < 6)
            return 'Data too short';
        let chk = prefixChk(prefix);
        if (typeof chk === 'string')
            return chk;
        const words = [];
        for (let i = 0; i < wordChars.length; ++i) {
            const c = wordChars.charAt(i);
            const v = ALPHABET_MAP[c];
            if (v === undefined)
                return 'Unknown character ' + c;
            chk = polymodStep(chk) ^ v;
            // not in the checksum?
            if (i + 6 >= wordChars.length)
                continue;
            words.push(v);
        }
        if (chk !== ENCODING_CONST)
            return 'Invalid checksum for ' + str;
        return { prefix, words };
    }
    function decodeUnsafe(str, LIMIT) {
        const res = __decode(str, LIMIT);
        if (typeof res === 'object')
            return res;
    }
    function decode(str, LIMIT) {
        const res = __decode(str, LIMIT);
        if (typeof res === 'object')
            return res;
        throw new Error(res);
    }
    return {
        decodeUnsafe,
        decode,
        encode,
        toWords,
        fromWordsUnsafe,
        fromWords,
    };
}
exports.bech32 = getLibraryFromEncoding('bech32');
exports.bech32m = getLibraryFromEncoding('bech32m');

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>bech32",file:"node_modules\\gridplus-sdk\\node_modules\\bech32\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bignumber.js\\bignumber.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cbignumber.js%5Cbignumber.js
      return function (require, module, exports) {
;(function (globalObject) {
  'use strict';

/*
 *      bignumber.js v9.1.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


  var BigNumber,
    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    mathceil = Math.ceil,
    mathfloor = Math.floor,

    bignumberError = '[BigNumber Error] ',
    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

    BASE = 1e14,
    LOG_BASE = 14,
    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
    SQRT_BASE = 1e7,

    // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9;                                   // 0 to MAX_INT32


  /*
   * Create and return a BigNumber constructor.
   */
  function clone(configObject) {
    var div, convertBase, parseNumeric,
      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
      ONE = new BigNumber(1),


      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


      // The default values below must be integers within the inclusive ranges stated.
      // The values can also be changed at run-time using BigNumber.set.

      // The maximum number of decimal places for operations involving division.
      DECIMAL_PLACES = 20,                     // 0 to MAX

      // The rounding mode used when rounding to the above decimal places, and when using
      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
      // UP         0 Away from zero.
      // DOWN       1 Towards zero.
      // CEIL       2 Towards +Infinity.
      // FLOOR      3 Towards -Infinity.
      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      ROUNDING_MODE = 4,                       // 0 to 8

      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

      // The exponent value at and beneath which toString returns exponential notation.
      // Number type: -7
      TO_EXP_NEG = -7,                         // 0 to -MAX

      // The exponent value at and above which toString returns exponential notation.
      // Number type: 21
      TO_EXP_POS = 21,                         // 0 to MAX

      // RANGE : [MIN_EXP, MAX_EXP]

      // The minimum exponent value, beneath which underflow to zero occurs.
      // Number type: -324  (5e-324)
      MIN_EXP = -1e7,                          // -1 to -MAX

      // The maximum exponent value, above which overflow to Infinity occurs.
      // Number type:  308  (1.7976931348623157e+308)
      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
      MAX_EXP = 1e7,                           // 1 to MAX

      // Whether to use cryptographically-secure random number generation, if available.
      CRYPTO = false,                          // true or false

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP        0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN      1 The remainder has the same sign as the dividend.
      //             This modulo mode is commonly known as 'truncated division' and is
      //             equivalent to (a % n) in JavaScript.
      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
      //             The remainder is always positive.
      //
      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
      // modes are commonly used for the modulus operation.
      // Although the other rounding modes can also be used, they may not give useful results.
      MODULO_MODE = 1,                         // 0 to 9

      // The maximum number of significant digits of the result of the exponentiatedBy operation.
      // If POW_PRECISION is 0, there will be unlimited significant digits.
      POW_PRECISION = 0,                       // 0 to MAX

      // The format specification used by the BigNumber.prototype.toFormat method.
      FORMAT = {
        prefix: '',
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ',',
        decimalSeparator: '.',
        fractionGroupSize: 0,
        fractionGroupSeparator: '\xA0',        // non-breaking space
        suffix: ''
      },

      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
      // '-', '.', whitespace, or repeated character.
      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
      alphabetHasNormalDecimalDigits = true;


    //------------------------------------------------------------------------------------------


    // CONSTRUCTOR


    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */
    function BigNumber(v, b) {
      var alphabet, c, caseChanged, e, i, isNum, len, str,
        x = this;

      // Enable constructor call without `new`.
      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {

        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {

          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

          // Fast path for integers, where n < 2147483648 (2**31).
          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++);

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {

          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

      } else {

        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base');

        // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {

          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error
             (tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0;

        // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {

              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {

              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                  str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        }

        // Prevent later check for length on converted number.
        isNum = false;
        str = convertBase(str, b, 10, x.s);

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
        else e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++);

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(--len) === 48;);

      if (str = str.slice(i, ++len)) {
        len -= i;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (isNum && BigNumber.DEBUG &&
          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
            throw Error
             (tooManyDigits + (x.s * v));
        }

         // Overflow?
        if ((e = e - i - 1) > MAX_EXP) {

          // Infinity.
          x.c = x.e = null;

        // Underflow?
        } else if (e < MIN_EXP) {

          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;  // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0');
          x.c.push(+str);
        }
      } else {

        // Zero.
        x.c = [x.e = 0];
      }
    }


    // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;

    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;


    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {

        if (typeof obj == 'object') {

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error
                 (bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          }

          // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'
          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto &&
                 (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error
                   (bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error
               (bignumberError + p + ' not true or false: ' + v);
            }
          }

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }

          // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'
          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if (typeof v == 'object') FORMAT = v;
            else throw Error
             (bignumberError + p + ' not an object: ' + v);
          }

          // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'
          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p];

            // Disallow if less than two characters,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.
            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
              ALPHABET = v;
            } else {
              throw Error
               (bignumberError + p + ' invalid: ' + v);
            }
          }

        } else {

          // '[BigNumber Error] Object expected: {v}'
          throw Error
           (bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };


    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */
    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;

      var i, n,
        c = v.c,
        e = v.e,
        s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {

        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }

          // Calculate number of digits that c[0] should have, based on the exponent.
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;

          // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
          if (String(c[0]).length == i) {

            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }

            // Last element cannot be zero, unless it is the only element.
            if (n !== 0) return true;
          }
        }

      // Infinity/NaN
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error
        (bignumberError + 'Invalid BigNumber: ' + v);
    };


    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };


    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };


    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
    BigNumber.random = (function () {
      var pow2_53 = 0x20000000000000;

      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
       ? function () { return mathfloor(Math.random() * pow2_53); }
       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
         (Math.random() * 0x800000 | 0); };

      return function (dp) {
        var a, b, e, k, v,
          i = 0,
          c = [],
          rand = new BigNumber(ONE);

        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);

        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {

          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {

            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {

              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

              // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {

                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }
            i = k / 2;

          // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {

            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {

              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {

                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error
             (bignumberError + 'crypto unavailable');
          }
        }

        // Use Math.random.
        if (!CRYPTO) {

          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE;

        // Convert trailing digits to zeros according to dp.
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        }

        // Remove trailing elements which are zero.
        for (; c[i] === 0; c.pop(), i--);

        // Zero?
        if (i < 0) {
          c = [e = 0];
        } else {

          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

          // Count the digits of the first element of c to determine leading zeros, and...
          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

          // adjust the exponent accordingly.
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    })();


    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.sum = function () {
      var i = 1,
        args = arguments,
        sum = new BigNumber(args[0]);
      for (; i < args.length;) sum = sum.plus(args[i++]);
      return sum;
    };


    // PRIVATE FUNCTIONS


    // Called by BigNumber and BigNumber.prototype.toString.
    convertBase = (function () {
      var decimal = '0123456789';

      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }

      // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.
      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r, x, xc, y,
          i = str.indexOf('.'),
          dp = DECIMAL_PLACES,
          rm = ROUNDING_MODE;

        // Non-integer.
        if (i >= 0) {
          k = POW_PRECISION;

          // Unlimited precision.
          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;

          // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
           10, baseOut, decimal);
          y.e = y.c.length;
        }

        // Convert the number as integer.

        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
         ? (alphabet = ALPHABET, decimal)
         : (alphabet = decimal, ALPHABET));

        // xc now represents str as an integer and converted to baseOut. e is the exponent.
        e = k = xc.length;

        // Remove trailing zeros.
        for (; xc[--k] == 0; xc.pop());

        // Zero?
        if (!xc[0]) return alphabet.charAt(0);

        // Does str represent an integer? If so, no need for the division.
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;

          // The sign is needed for correct rounding.
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }

        // xc now represents str converted to baseOut.

        // THe index of the rounding digit.
        d = e + dp + 1;

        // The rounding digit: the digit to the right of the digit that may be rounded up.
        i = xc[d];

        // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;

        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
               rm == (x.s < 0 ? 8 : 7));

        // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.
        if (d < 1 || !xc[0]) {

          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {

          // Truncate xc to the required number of decimal places.
          xc.length = d;

          // Round up?
          if (r) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }

          // Determine trailing zeros.
          for (k = xc.length; !xc[--k];);

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

          // Add leading zeros, decimal point and trailing zeros as required.
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }

        // The caller will add the sign.
        return str;
      };
    })();


    // Perform division in the specified base. Called by div and convertBase.
    div = (function () {

      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m, temp, xlo, xhi,
          carry = 0,
          i = x.length,
          klo = k % SQRT_BASE,
          khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {

          for (i = cmp = 0; i < aL; i++) {

            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1; a.splice(0, 1));
      }

      // x: dividend, y: divisor.
      return function (x, y, dp, rm, base) {
        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
          yL, yz,
          s = x.s == y.s ? 1 : -1,
          xc = x.c,
          yc = y.c;

        // Either NaN, Infinity or 0?
        if (!xc || !xc[0] || !yc || !yc[0]) {

          return new BigNumber(

           // Return NaN if either NaN, or both Infinity or 0.
           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
         );
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }

        // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
        for (i = 0; yc[i] == (xc[i] || 0); i++);

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;

          // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1));

          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL; rem[remL++] = 0);
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0;

            // Compare divisor and remainder.
            cmp = compare(yc, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, n.

              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // n is how many times the divisor goes into the current remainder.
              n = mathfloor(rem0 / yc0);

              //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {

                // n may be > base only when base is 3.
                if (n >= base) n = base - 1;

                // product = divisor * trial digit.
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.
                while (compare(prod, rem, prodL, remL) == 1) {
                  n--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {

                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {

                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                }

                // product = divisor
                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);
              remL = rem.length;

               // If product was < remainder.
              if (cmp == -1) {

                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0

            // Add the next digit, n, to the result array.
            qc[i++] = n;

            // Update the remainder.
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null;

          // Leading zero?
          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {

          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

        // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    })();


    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;

      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      if (!n.c) return n.toString();

      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
         ? toExponential(str, ne)
         : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm);

        // n.e may have changed if the value was rounded up.
        e = n.e;

        str = coeffToString(n.c);
        len = str.length;

        // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.

        // Exponential notation.
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

          // Append zeros?
          for (; len < i; str += '0', len++);
          str = toExponential(str, e);

        // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0');

          // Append zeros?
          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0');
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += '.';
              for (; i--; str += '0');
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    }


    // Handle BigNumber.max and BigNumber.min.
    function maxOrMin(args, method) {
      var n,
        i = 1,
        m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]);

        // If any number is NaN, return NaN.
        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }


    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
    function normalise(n, c, e) {
      var i = 1,
        j = c.length;

       // Remove trailing zeros.
      for (; !c[--j]; c.pop());

      // Calculate the base 10 exponent. First get the number of digits of c[0].
      for (j = c[0]; j >= 10; j /= 10, i++);

      // Overflow?
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

        // Infinity.
        n.c = n.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    }


    // Handle values that fail the validity test in BigNumber.
    parseNumeric = (function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
        dotAfter = /^([^.]+)\.$/,
        dotBefore = /^\.([^.]+)$/,
        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

      return function (x, str, isNum, b) {
        var base,
          s = isNum ? str : str.replace(whitespaceOrPlus, '');

        // No exception on ±Infinity or NaN.
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {

            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b;

              // E.g. '1.' to '1', '.1' to '0.1'
              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          }

          // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'
          if (BigNumber.DEBUG) {
            throw Error
              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          }

          // NaN
          x.s = null;
        }

        x.c = x.e = null;
      }
    })();


    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
    function round(x, sd, rm, r) {
      var d, i, j, k, n, ni, rd,
        xc = x.c,
        pows10 = POWS_TEN;

      // if x is not Infinity or NaN...
      if (xc) {

        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {

          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
          i = sd - d;

          // If the rounding digit is in the first element of xc...
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];

            // Get the rounding digit at index j of n.
            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {

              if (r) {

                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0));
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];

              // Get the number of digits of n.
              for (d = 1; k >= 10; k /= 10, d++);

              // Get the index of rd within n.
              i %= LOG_BASE;

              // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.
              j = i - LOG_BASE + d;

              // Get the rounding digit at index j of n.
              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 ||

          // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

          r = rm < 4
           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

            // Check whether the digit to the left of the rounding digit is odd.
            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
             rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {

              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }

          // Round up?
          if (r) {

            for (; ;) {

              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {

                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++);

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xc.length; xc[--i] === 0; xc.pop());
        }

        // Overflow? Infinity.
        if (x.e > MAX_EXP) {
          x.c = x.e = null;

        // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }


    function valueOf(n) {
      var str,
        e = n.e;

      if (e === null) return n.toString();

      str = coeffToString(n.c);

      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
        ? toExponential(str, e)
        : toFixedPoint(str, e, '0');

      return n.s < 0 ? '-' + str : str;
    }


    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };


    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };


    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.decimalPlaces = P.dp = function (dp, rm) {
      var c, n, v,
        x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last number.
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
      if (n < 0) n = 0;

      return n;
    };


    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };


    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };


    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
    P.exponentiatedBy = P.pow = function (n, m) {
      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
        x = this;

      n = new BigNumber(n);

      // Allow NaN and ±Infinity, but not other non-integers.
      if (n.c && !n.isInteger()) {
        throw Error
          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m);

      // Exponent of MAX_SAFE_INTEGER is 15.
      nIsBig = n.e > 14;

      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {

        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

        if (isModExp) x = x.mod(m);

      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
        // [1, 240000000]
        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
        // [80000000000000]  [99999750000000]
        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0;

        // If x >= 1, k = ±Infinity.
        if (x.e > -1) k = 1 / k;

        // If n is negative return ±0, else return ±Infinity.
        return new BigNumber(nIsNeg ? 1 / k : k);

      } else if (POW_PRECISION) {

        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE);

      // Performs 54 loop iterations for n of 9007199254740991.
      for (; ;) {

        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);

      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };


    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };


    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
    P.isFinite = function () {
      return !!this.c;
    };


    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };


    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

    };


    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };


    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };


    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };


    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
    P.isNaN = function () {
      return !this.s;
    };


    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
    P.isNegative = function () {
      return this.s < 0;
    };


    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
    P.isPositive = function () {
      return this.s > 0;
    };


    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };


    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
    P.minus = function (y, b) {
      var i, j, t, xLTy,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

        // Either zero?
        if (!xc[0] || !yc[0]) {

          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
           ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Determine which is the bigger number.
      if (a = xe - ye) {

        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse();

        // Prepend zeros to equalise exponents.
        for (b = a; b--; t.push(0));
        t.reverse();
      } else {

        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {

          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }

      // x < y? Point xc to the array of the bigger number.
      if (xLTy) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }

      b = (j = yc.length) - (i = xc.length);

      // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
      if (b > 0) for (; b--; xc[i++] = 0);
      b = BASE - 1;

      // Subtract yc from xc.
      for (; j > a;) {

        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b);
          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      }

      // Remove leading zeros and adjust exponent accordingly.
      for (; xc[0] == 0; xc.splice(0, 1), --ye);

      // Zero?
      if (!xc[0]) {

        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }

      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.
      return normalise(y, xc, ye);
    };


    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
    P.modulo = P.mod = function (y, b) {
      var q, s,
        x = this;

      y = new BigNumber(y, b);

      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN);

      // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y));

      // To match JavaScript %, ensure sign of zero is sign of dividend.
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

      return y;
    };


    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
    P.multipliedBy = P.times = function (y, b) {
      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
        base, sqrtBase,
        x = this,
        xc = x.c,
        yc = (y = new BigNumber(y, b)).c;

      // Either NaN, ±Infinity or ±0?
      if (!xc || !yc || !xc[0] || !yc[0]) {

        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;

          // Return ±Infinity if either is ±Infinity.
          if (!xc || !yc) {
            y.c = y.e = null;

          // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;

      // Ensure xc points to longer array and xcL to its length.
      if (xcL < ycL) {
        zc = xc;
        xc = yc;
        yc = zc;
        i = xcL;
        xcL = ycL;
        ycL = i;
      }

      // Initialise the result array with zeros.
      for (i = xcL + ycL, zc = []; i--; zc.push(0));

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };


    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
    P.plus = function (y, b) {
      var t,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
       if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0);

        // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();
        for (; a--; t.push(0));
        t.reverse();
      }

      a = xc.length;
      b = yc.length;

      // Point xc to the longer array, and b to the shorter length.
      if (a - b < 0) {
        t = yc;
        yc = xc;
        xc = t;
        b = a;
      }

      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }

      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible
      return normalise(y, xc, ye);
    };


    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.precision = P.sd = function (sd, rm) {
      var c, n, v,
        x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {

        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--);

        // Add the number of digits of the first element.
        for (v = c[0]; v >= 10; v /= 10, n++);
      }

      if (sd && x.e + 1 > n) n = x.e + 1;

      return n;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };


    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.squareRoot = P.sqrt = function () {
      var m, n, r, rep, t,
        x = this,
        c = x.c,
        s = x.s,
        e = x.e,
        dp = DECIMAL_PLACES + 4,
        half = new BigNumber('0.5');

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }

      // Initial estimate.
      s = Math.sqrt(+valueOf(x));

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      }

      // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;

        // Newton-Raphson iteration.
        for (; ;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {

              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };


    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */
    P.toFormat = function (dp, rm, format) {
      var str,
        x = this;

      if (format == null) {
        if (dp != null && rm && typeof rm == 'object') {
          format = rm;
          rm = null;
        } else if (dp && typeof dp == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if (typeof format != 'object') {
        throw Error
          (bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
          arr = str.split('.'),
          g1 = +format.groupSize,
          g2 = +format.secondaryGroupSize,
          groupSeparator = format.groupSeparator || '',
          intPart = arr[0],
          fractionPart = arr[1],
          isNeg = x.s < 0,
          intDigits = isNeg ? intPart.slice(1) : intPart,
          len = intDigits.length;

        if (g2) {
          i = g1;
          g1 = g2;
          g2 = i;
          len -= i;
        }

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart
         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
           '$&' + (format.fractionGroupSeparator || ''))
          : fractionPart)
         : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };


    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
    P.toFraction = function (md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
        x = this,
        xc = x.c;

      if (md != null) {
        n = new BigNumber(md);

        // Throw if md is less than one or is not an integer, unless it is Infinity.
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error
            (bignumberError + 'Argument ' +
              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);

      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc);

      // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s);

      // n0 = d1 = 0
      n0.c[0] = 0;

      for (; ;)  {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;

      // Determine which fraction is closer to x, n0/d0 or n1/d1
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

      MAX_EXP = exp;

      return r;
    };


    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
    P.toNumber = function () {
      return +valueOf(this);
    };


    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };


    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
    P.toString = function (b) {
      var str,
        n = this,
        s = n.s,
        e = n.e;

      // Infinity or NaN?
      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
           ? toExponential(coeffToString(n.c), e)
           : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };


    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };


    P._isBigNumber = true;

    if (configObject != null) BigNumber.set(configObject);

    return BigNumber;
  }


  // PRIVATE HELPER FUNCTIONS

  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }


  // Return a coefficient array as a string of base 10 digits.
  function coeffToString(a) {
    var s, z,
      i = 1,
      j = a.length,
      r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;
      for (; z--; s = '0' + s);
      r += s;
    }

    // Determine trailing zeros.
    for (j = r.length; r.charCodeAt(--j) === 48;);

    return r.slice(0, j + 1 || 1);
  }


  // Compare the value of BigNumbers x and y.
  function compare(x, y) {
    var a, b,
      xc = x.c,
      yc = y.c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either NaN?
    if (!i || !j) return null;

    a = xc && !xc[0];
    b = yc && !yc[0];

    // Either zero?
    if (a || b) return a ? b ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    a = i < 0;
    b = k == l;

    // Either Infinity?
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    // Compare exponents.
    if (!b) return k > l ^ a ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

    // Compare lengths.
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }


  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error
       (bignumberError + (name || 'Argument') + (typeof n == 'number'
         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
         : ' not a primitive number: ') + String(n));
    }
  }


  // Assumes finite n.
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }


  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
     (e < 0 ? 'e' : 'e+') + e;
  }


  function toFixedPoint(str, e, z) {
    var len, zs;

    // Negative exponent?
    if (e < 0) {

      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z);
      str = zs + str;

    // Positive exponent
    } else {
      len = str.length;

      // Append zeros.
      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z);
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  }


  // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

  // AMD.
  if (typeof define == 'function' && define.amd) {
    define(function () { return BigNumber; });

  // Node.js and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    module.exports = BigNumber;

  // Browser.
  } else {
    if (!globalObject) {
      globalObject = typeof self != 'undefined' && self ? self : window;
    }

    globalObject.BigNumber = BigNumber;
  }
})(this);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>bignumber.js",file:"node_modules\\gridplus-sdk\\node_modules\\bignumber.js\\bignumber.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\keccak.js", {"./utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\utils.js","@noble/hashes/sha3":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\sha3.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Ckeccak.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;
const sha3_1 = require("@noble/hashes/sha3");
const utils_1 = require("./utils");
exports.keccak224 = (0, utils_1.wrapHash)(sha3_1.keccak_224);
exports.keccak256 = (() => {
    const k = (0, utils_1.wrapHash)(sha3_1.keccak_256);
    k.create = sha3_1.keccak_256.create;
    return k;
})();
exports.keccak384 = (0, utils_1.wrapHash)(sha3_1.keccak_384);
exports.keccak512 = (0, utils_1.wrapHash)(sha3_1.keccak_512);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\keccak.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_assert.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5C_assert.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
}
exports.number = number;
function bool(b) {
    if (typeof b !== 'boolean')
        throw new Error(`Expected boolean, not ${b}`);
}
exports.bool = bool;
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array))
        throw new TypeError('Expected Uint8Array');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
exports.bytes = bytes;
function hash(hash) {
    if (typeof hash !== 'function' || typeof hash.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(hash.outputLen);
    number(hash.blockLen);
}
exports.hash = hash;
function exists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
exports.exists = exists;
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
}
exports.output = output;
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output,
};
exports.default = assert;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_assert.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_sha2.js", {"./_assert.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_assert.js","./utils.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\utils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5C_sha2.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SHA2 = void 0;
const _assert_js_1 = require("./_assert.js");
const utils_js_1 = require("./utils.js");
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        _assert_js_1.default.exists(this);
        _assert_js_1.default.output(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}
exports.SHA2 = SHA2;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_sha2.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_u64.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5C_u64.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = exports.toBig = exports.split = exports.fromBig = void 0;
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
exports.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
exports.split = split;
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
exports.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l) => l;
const rotr32L = (h, l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
// Removing "export" has 5% perf penalty -_-
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
exports.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
// prettier-ignore
const u64 = {
    fromBig, split, toBig: exports.toBig,
    shrSH, shrSL,
    rotrSH, rotrSL, rotrBH, rotrBL,
    rotr32H, rotr32L,
    rotlSH, rotlSL, rotlBH, rotlBL,
    add, add3L, add3H, add4L, add4H, add5H, add5L,
};
exports.default = u64;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_u64.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\cryptoBrowser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5CcryptoBrowser.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.crypto = void 0;
exports.crypto = {
    node: undefined,
    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\cryptoBrowser.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\sha256.js", {"./_sha2.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_sha2.js","./utils.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\utils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5Csha256.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha256 = void 0;
const _sha2_js_1 = require("./_sha2.js");
const utils_js_1 = require("./utils.js");
// Choice: a ? b : c
const Chi = (a, b, c) => (a & b) ^ (~a & c);
// Majority function, true if any two inpust is true
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
class SHA256 extends _sha2_js_1.SHA2 {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\sha256.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\sha3.js", {"./_assert.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_assert.js","./_u64.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_u64.js","./utils.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\utils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5Csha3.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
const _assert_js_1 = require("./_assert.js");
const _u64_js_1 = require("./_u64.js");
const utils_js_1 = require("./utils.js");
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);
const rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
exports.keccakP = keccakP;
class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        _assert_js_1.default.number(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        _assert_js_1.default.exists(this, false);
        _assert_js_1.default.bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= blockLen)
                this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        _assert_js_1.default.number(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        _assert_js_1.default.output(out, this);
        if (this.finished)
            throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
exports.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
exports.sha3_224 = gen(0x06, 144, 224 / 8);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */
exports.sha3_256 = gen(0x06, 136, 256 / 8);
exports.sha3_384 = gen(0x06, 104, 384 / 8);
exports.sha3_512 = gen(0x06, 72, 512 / 8);
exports.keccak_224 = gen(0x01, 144, 224 / 8);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */
exports.keccak_256 = gen(0x01, 136, 256 / 8);
exports.keccak_384 = gen(0x01, 104, 384 / 8);
exports.keccak_512 = gen(0x01, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
exports.shake128 = genShake(0x1f, 168, 128 / 8);
exports.shake256 = genShake(0x1f, 136, 256 / 8);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\sha3.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\utils.js", {"@noble/hashes/crypto":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\cryptoBrowser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cnode_modules%5C@noble%5Chashes%5Cutils.js
      return function (require, module, exports) {
"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
Object.defineProperty(exports, "__esModule", { value: true });
exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
// The import here is via the package name. This is to ensure
// that exports mapping/resolution does fall into place.
const crypto_1 = require("@noble/hashes/crypto");
// Cast array to different type
const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
exports.u8 = u8;
const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
exports.u32 = u32;
// Cast array to view
const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
exports.createView = createView;
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
exports.rotr = rotr;
exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.
// So, just to be sure not to corrupt anything.
if (!exports.isLE)
    throw new Error('Non little-endian hardware is not supported');
const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))
 */
function bytesToHex(uint8a) {
    // pre-caching improves the speed 6x
    if (!(uint8a instanceof Uint8Array))
        throw new Error('Uint8Array expected');
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += hexes[uint8a[i]];
    }
    return hex;
}
exports.bytesToHex = bytesToHex;
/**
 * @example hexToBytes('deadbeef')
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
            throw new Error('Invalid byte sequence');
        array[i] = byte;
    }
    return array;
}
exports.hexToBytes = hexToBytes;
// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise
// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.
const nextTick = async () => { };
exports.nextTick = nextTick;
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
            continue;
        await (0, exports.nextTick)();
        ts += diff;
    }
}
exports.asyncLoop = asyncLoop;
function utf8ToBytes(str) {
    if (typeof str !== 'string') {
        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    }
    return new TextEncoder().encode(str);
}
exports.utf8ToBytes = utf8ToBytes;
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array))
        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
}
exports.toBytes = toBytes;
/**
 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
 * @example concatBytes(buf1, buf2)
 */
function concatBytes(...arrays) {
    if (!arrays.every((a) => a instanceof Uint8Array))
        throw new Error('Uint8Array list expected');
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
exports.concatBytes = concatBytes;
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
exports.Hash = Hash;
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;
function checkOpts(defaults, opts) {
    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))
        throw new TypeError('Options should be object or undefined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
exports.checkOpts = checkOpts;
function wrapConstructor(hashConstructor) {
    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashConstructor();
    return hashC;
}
exports.wrapConstructor = wrapConstructor;
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
/**
 * Secure PRNG
 */
function randomBytes(bytesLength = 32) {
    if (crypto_1.crypto.web) {
        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));
    }
    else if (crypto_1.crypto.node) {
        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);
    }
    else {
        throw new Error("The environment doesn't have randomBytes function");
    }
}
exports.randomBytes = randomBytes;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography>@noble/hashes",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\utils.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\sha256.js", {"./utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\utils.js","@noble/hashes/sha256":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\sha256.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Csha256.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha256 = void 0;
const sha256_1 = require("@noble/hashes/sha256");
const utils_1 = require("./utils");
exports.sha256 = (0, utils_1.wrapHash)(sha256_1.sha256);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\sha256.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\utils.js", {"@noble/hashes/_assert":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\_assert.js","@noble/hashes/utils":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\node_modules\\@noble\\hashes\\utils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cethereum-cryptography%5Cutils.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;
// buf.toString('hex') -> toHex(buf)
const _assert_1 = __importDefault(require("@noble/hashes/_assert"));
const utils_1 = require("@noble/hashes/utils");
const assertBool = _assert_1.default.bool;
exports.assertBool = assertBool;
const assertBytes = _assert_1.default.bytes;
exports.assertBytes = assertBytes;
var utils_2 = require("@noble/hashes/utils");
Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function () { return utils_2.bytesToHex; } });
Object.defineProperty(exports, "toHex", { enumerable: true, get: function () { return utils_2.bytesToHex; } });
Object.defineProperty(exports, "concatBytes", { enumerable: true, get: function () { return utils_2.concatBytes; } });
Object.defineProperty(exports, "createView", { enumerable: true, get: function () { return utils_2.createView; } });
Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function () { return utils_2.utf8ToBytes; } });
// buf.toString('utf8') -> bytesToUtf8(buf)
function bytesToUtf8(data) {
    if (!(data instanceof Uint8Array)) {
        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
    }
    return new TextDecoder().decode(data);
}
exports.bytesToUtf8 = bytesToUtf8;
function hexToBytes(data) {
    const sliced = data.startsWith("0x") ? data.substring(2) : data;
    return (0, utils_1.hexToBytes)(sliced);
}
exports.hexToBytes = hexToBytes;
// buf.equals(buf2) -> equalsBytes(buf, buf2)
function equalsBytes(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
exports.equalsBytes = equalsBytes;
// Internal utils
function wrapHash(hash) {
    return (msg) => {
        _assert_1.default.bytes(msg);
        return hash(msg);
    };
}
exports.wrapHash = wrapHash;
exports.crypto = (() => {
    const webCrypto = typeof self === "object" && "crypto" in self ? self.crypto : undefined;
    const nodeRequire = typeof module !== "undefined" &&
        typeof module.require === "function" &&
        module.require.bind(module);
    return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : undefined,
        web: webCrypto
    };
})();

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>@ethereumjs/tx>ethereum-cryptography",file:"node_modules\\gridplus-sdk\\node_modules\\ethereum-cryptography\\utils.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js", {"_process":"F:\\metamask-extension\\node_modules\\process\\browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cjs-sha3%5Csrc%5Csha3.js
      return function (require, module, exports) {
(function (process){(function (){
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      define(function () {
        return methods;
      });
    }
  }
})();

}).call(this)}).call(this,require('_process'))

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>js-sha3",file:"node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\rlp\\dist\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Crlp%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.decode = exports.encode = void 0;
/**
 * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp
 * This function takes in data, converts it to Uint8Array if not,
 * and adds a length for recursion.
 * @param input Will be converted to Uint8Array
 * @returns Uint8Array of encoded data
 **/
function encode(input) {
    if (Array.isArray(input)) {
        const output = [];
        for (let i = 0; i < input.length; i++) {
            output.push(encode(input[i]));
        }
        const buf = concatBytes(...output);
        return concatBytes(encodeLength(buf.length, 192), buf);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) {
        return inputBuf;
    }
    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
}
exports.encode = encode;
/**
 * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
 * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
 * @param input
 * @param start
 * @param end
 */
function safeSlice(input, start, end) {
    if (end > input.length) {
        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');
    }
    return input.slice(start, end);
}
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 */
function decodeLength(v) {
    if (v[0] === 0) {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseHexByte(bytesToHex(v));
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Uint8Array.from([len + offset]);
    }
    const hexLength = numberToHex(len);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes(firstByte + hexLength));
}
function decode(input, stream = false) {
    if (!input || input.length === 0) {
        return Uint8Array.from([]);
    }
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) {
        return decoded;
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid RLP: remainder must be zero');
    }
    return decoded.data;
}
exports.decode = decode;
/** Decode an input with RLP */
function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.slice(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Uint8Array.from([]);
        }
        else {
            data = safeSlice(input, 1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');
        }
        return {
            data: data,
            remainder: input.slice(length),
        };
    }
    else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) {
            throw new Error('invalid RLP: not enough bytes for string length');
        }
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) {
            throw new Error('invalid RLP: expected string length to be greater than 55');
        }
        data = safeSlice(input, llength, length + llength);
        return {
            data: data,
            remainder: input.slice(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between 0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = safeSlice(input, 1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length),
        };
    }
    else {
        // a list over 55 bytes long
        llength = firstByte - 0xf6;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) {
            throw new Error('invalid RLP: encoded list too short');
        }
        const totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid RLP: total length is larger than the data');
        }
        innerRemainder = safeSlice(input, llength, totalLength);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength),
        };
    }
}
const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));
function bytesToHex(uint8a) {
    // Pre-caching chars with `cachedHexes` speeds this up 6x
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += cachedHexes[uint8a[i]];
    }
    return hex;
}
function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte))
        throw new Error('Invalid byte sequence');
    return byte;
}
// Caching slows it down 2-3x
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
    }
    return array;
}
/** Concatenates two Uint8Arrays into one. */
function concatBytes(...arrays) {
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function utf8ToBytes(utf) {
    return new TextEncoder().encode(utf);
}
/** Transform an integer into its hexadecimal value */
function numberToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    const hex = integer.toString(16);
    return hex.length % 2 ? `0${hex}` : hex;
}
/** Pad a string to be even */
function padToEven(a) {
    return a.length % 2 ? `0${a}` : a;
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.length >= 2 && str[0] === '0' && str[1] === 'x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform anything into a Uint8Array */
function toBytes(v) {
    if (v instanceof Uint8Array) {
        return v;
    }
    if (typeof v === 'string') {
        if (isHexPrefixed(v)) {
            return hexToBytes(padToEven(stripHexPrefix(v)));
        }
        return utf8ToBytes(v);
    }
    if (typeof v === 'number' || typeof v === 'bigint') {
        if (!v) {
            return Uint8Array.from([]);
        }
        return hexToBytes(numberToHex(v));
    }
    if (v === null || v === undefined) {
        return Uint8Array.from([]);
    }
    throw new Error('toBytes: received unsupported type ' + typeof v);
}
exports.utils = {
    bytesToHex,
    concatBytes,
    hexToBytes,
    utf8ToBytes,
};
const RLP = { encode, decode };
exports.default = RLP;
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>rlp",file:"node_modules\\gridplus-sdk\\node_modules\\rlp\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\elliptic.js", {"./lib":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\lib\\index.js","./lib/elliptic":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\lib\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Csecp256k1%5Celliptic.js
      return function (require, module, exports) {
module.exports = require('./lib')(require('./lib/elliptic'))

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>secp256k1",file:"node_modules\\gridplus-sdk\\node_modules\\secp256k1\\elliptic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\lib\\elliptic.js", {"elliptic":"F:\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Csecp256k1%5Clib%5Celliptic.js
      return function (require, module, exports) {
const EC = require('elliptic').ec

const ec = new EC('secp256k1')
const ecparams = ec.curve

// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
const BN = ecparams.n.constructor

function loadCompressedPublicKey (first, xbuf) {
  let x = new BN(xbuf)

  // overflow
  if (x.cmp(ecparams.p) >= 0) return null
  x = x.toRed(ecparams.red)

  // compute corresponding Y
  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadUncompressedPublicKey (first, xbuf, ybuf) {
  let x = new BN(xbuf)
  let y = new BN(ybuf)

  // overflow
  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

  x = x.toRed(ecparams.red)
  y = y.toRed(ecparams.red)

  // is odd flag
  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

  // x*x*x + b = y*y
  const x3 = x.redSqr().redIMul(x)
  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadPublicKey (pubkey) {
  // length should be validated in interface
  const first = pubkey[0]
  switch (first) {
    case 0x02:
    case 0x03:
      if (pubkey.length !== 33) return null
      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
    case 0x04:
    case 0x06:
    case 0x07:
      if (pubkey.length !== 65) return null
      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
    default:
      return null
  }
}

function savePublicKey (output, point) {
  const pubkey = point.encode(null, output.length === 33)
  // Loop should be faster because we do not need create extra Uint8Array
  // output.set(new Uint8Array(pubkey))
  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
}

module.exports = {
  contextRandomize () {
    return 0
  },

  privateKeyVerify (seckey) {
    const bn = new BN(seckey)
    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
  },

  privateKeyNegate (seckey) {
    const bn = new BN(seckey)
    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
    seckey.set(negate)
    return 0
  },

  privateKeyTweakAdd (seckey, tweak) {
    const bn = new BN(tweak)
    if (bn.cmp(ecparams.n) >= 0) return 1

    bn.iadd(new BN(seckey))
    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
    if (bn.isZero()) return 1

    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
    seckey.set(tweaked)

    return 0
  },

  privateKeyTweakMul (seckey, tweak) {
    let bn = new BN(tweak)
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

    bn.imul(new BN(seckey))
    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)

    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
    seckey.set(tweaked)

    return 0
  },

  publicKeyVerify (pubkey) {
    const pair = loadPublicKey(pubkey)
    return pair === null ? 1 : 0
  },

  publicKeyCreate (output, seckey) {
    const bn = new BN(seckey)
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

    const point = ec.keyFromPrivate(seckey).getPublic()
    savePublicKey(output, point)

    return 0
  },

  publicKeyConvert (output, pubkey) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    const point = pair.getPublic()
    savePublicKey(output, point)

    return 0
  },

  publicKeyNegate (output, pubkey) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    const point = pair.getPublic()
    point.y = point.y.redNeg()
    savePublicKey(output, point)

    return 0
  },

  publicKeyCombine (output, pubkeys) {
    const pairs = new Array(pubkeys.length)
    for (let i = 0; i < pubkeys.length; ++i) {
      pairs[i] = loadPublicKey(pubkeys[i])
      if (pairs[i] === null) return 1
    }

    let point = pairs[0].getPublic()
    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
    if (point.isInfinity()) return 2

    savePublicKey(output, point)

    return 0
  },

  publicKeyTweakAdd (output, pubkey, tweak) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    tweak = new BN(tweak)
    if (tweak.cmp(ecparams.n) >= 0) return 2

    const point = pair.getPublic().add(ecparams.g.mul(tweak))
    if (point.isInfinity()) return 2

    savePublicKey(output, point)

    return 0
  },

  publicKeyTweakMul (output, pubkey, tweak) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    tweak = new BN(tweak)
    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

    const point = pair.getPublic().mul(tweak)
    savePublicKey(output, point)

    return 0
  },

  signatureNormalize (sig) {
    const r = new BN(sig.subarray(0, 32))
    const s = new BN(sig.subarray(32, 64))
    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

    if (s.cmp(ec.nh) === 1) {
      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
    }

    return 0
  },

  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureExport (obj, sig) {
    const sigR = sig.subarray(0, 32)
    const sigS = sig.subarray(32, 64)
    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

    const { output } = obj

    // Prepare R
    let r = output.subarray(4, 4 + 33)
    r[0] = 0x00
    r.set(sigR, 1)

    let lenR = 33
    let posR = 0
    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

    r = r.subarray(posR)
    if (r[0] & 0x80) return 1
    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

    // Prepare S
    let s = output.subarray(6 + 33, 6 + 33 + 33)
    s[0] = 0x00
    s.set(sigS, 1)

    let lenS = 33
    let posS = 0
    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

    s = s.subarray(posS)
    if (s[0] & 0x80) return 1
    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

    // Set output length for return
    obj.outputlen = 6 + lenR + lenS

    // Output in specified format
    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    output[0] = 0x30
    output[1] = obj.outputlen - 2
    output[2] = 0x02
    output[3] = r.length
    output.set(r, 4)
    output[4 + lenR] = 0x02
    output[5 + lenR] = s.length
    output.set(s, 6 + lenR)

    return 0
  },

  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureImport (output, sig) {
    if (sig.length < 8) return 1
    if (sig.length > 72) return 1
    if (sig[0] !== 0x30) return 1
    if (sig[1] !== sig.length - 2) return 1
    if (sig[2] !== 0x02) return 1

    const lenR = sig[3]
    if (lenR === 0) return 1
    if (5 + lenR >= sig.length) return 1
    if (sig[4 + lenR] !== 0x02) return 1

    const lenS = sig[5 + lenR]
    if (lenS === 0) return 1
    if ((6 + lenR + lenS) !== sig.length) return 1

    if (sig[4] & 0x80) return 1
    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

    if (sig[lenR + 6] & 0x80) return 1
    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

    let sigR = sig.subarray(4, 4 + lenR)
    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
    if (sigR.length > 32) return 1

    let sigS = sig.subarray(6 + lenR)
    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
    if (sigS.length > 32) throw new Error('S length is too long')

    let r = new BN(sigR)
    if (r.cmp(ecparams.n) >= 0) r = new BN(0)

    let s = new BN(sig.subarray(6 + lenR))
    if (s.cmp(ecparams.n) >= 0) s = new BN(0)

    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)

    return 0
  },

  ecdsaSign (obj, message, seckey, data, noncefn) {
    if (noncefn) {
      const _noncefn = noncefn
      noncefn = (counter) => {
        const nonce = _noncefn(message, seckey, null, data, counter)

        const isValid = nonce instanceof Uint8Array && nonce.length === 32
        if (!isValid) throw new Error('This is the way')

        return new BN(nonce)
      }
    }

    const d = new BN(seckey)
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

    let sig
    try {
      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })
    } catch (err) {
      return 1
    }

    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
    obj.recid = sig.recoveryParam

    return 0
  },

  ecdsaVerify (sig, msg32, pubkey) {
    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }

    const sigr = new BN(sigObj.r)
    const sigs = new BN(sigObj.s)
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

    const pair = loadPublicKey(pubkey)
    if (pair === null) return 2

    const point = pair.getPublic()
    const isValid = ec.verify(msg32, sigObj, point)
    return isValid ? 0 : 3
  },

  ecdsaRecover (output, sig, recid, msg32) {
    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }

    const sigr = new BN(sigObj.r)
    const sigs = new BN(sigObj.s)
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

    if (sigr.isZero() || sigs.isZero()) return 2

    // Can throw `throw new Error('Unable to find sencond key candinate');`
    let point
    try {
      point = ec.recoverPubKey(msg32, sigObj, recid)
    } catch (err) {
      return 2
    }

    savePublicKey(output, point)

    return 0
  },

  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    const scalar = new BN(seckey)
    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

    const point = pair.getPublic().mul(scalar)

    if (hashfn === undefined) {
      const data = point.encode(null, true)
      const sha256 = ec.hash().update(data).digest()
      for (let i = 0; i < 32; ++i) output[i] = sha256[i]
    } else {
      if (!xbuf) xbuf = new Uint8Array(32)
      const x = point.getX().toArray('be', 32)
      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]

      if (!ybuf) ybuf = new Uint8Array(32)
      const y = point.getY().toArray('be', 32)
      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]

      const hash = hashfn(xbuf, ybuf, data)

      const isValid = hash instanceof Uint8Array && hash.length === output.length
      if (!isValid) return 2

      output.set(hash)
    }

    return 0
  }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>secp256k1",file:"node_modules\\gridplus-sdk\\node_modules\\secp256k1\\lib\\elliptic.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\lib\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Csecp256k1%5Clib%5Cindex.js
      return function (require, module, exports) {
const errors = {
  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
  TWEAK_ADD:
    'The tweak was out of range or the resulted private key is invalid',
  TWEAK_MUL: 'The tweak was out of range or equal to zero',
  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
  SECKEY_INVALID: 'Private Key is invalid',
  PUBKEY_PARSE: 'Public Key could not be parsed',
  PUBKEY_SERIALIZE: 'Public Key serialization error',
  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
  SIG_PARSE: 'Signature could not be parsed',
  SIGN: 'The nonce generation function failed, or the private key was invalid',
  RECOVER: 'Public key could not be recover',
  ECDH: 'Scalar was invalid (zero or overflow)'
}

function assert (cond, msg) {
  if (!cond) throw new Error(msg)
}

function isUint8Array (name, value, length) {
  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)

  if (length !== undefined) {
    if (Array.isArray(length)) {
      const numbers = length.join(', ')
      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
      assert(length.includes(value.length), msg)
    } else {
      const msg = `Expected ${name} to be an Uint8Array with length ${length}`
      assert(value.length === length, msg)
    }
  }
}

function isCompressed (value) {
  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
}

function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
  if (typeof output === 'function') output = output(length)
  isUint8Array('output', output, length)
  return output
}

function toTypeString (value) {
  return Object.prototype.toString.call(value).slice(8, -1)
}

module.exports = (secp256k1) => {
  return {
    contextRandomize (seed) {
      assert(
        seed === null || seed instanceof Uint8Array,
        'Expected seed to be an Uint8Array or null'
      )
      if (seed !== null) isUint8Array('seed', seed, 32)

      switch (secp256k1.contextRandomize(seed)) {
        case 1:
          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
      }
    },

    privateKeyVerify (seckey) {
      isUint8Array('private key', seckey, 32)

      return secp256k1.privateKeyVerify(seckey) === 0
    },

    privateKeyNegate (seckey) {
      isUint8Array('private key', seckey, 32)

      switch (secp256k1.privateKeyNegate(seckey)) {
        case 0:
          return seckey
        case 1:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    privateKeyTweakAdd (seckey, tweak) {
      isUint8Array('private key', seckey, 32)
      isUint8Array('tweak', tweak, 32)

      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
        case 0:
          return seckey
        case 1:
          throw new Error(errors.TWEAK_ADD)
      }
    },

    privateKeyTweakMul (seckey, tweak) {
      isUint8Array('private key', seckey, 32)
      isUint8Array('tweak', tweak, 32)

      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
        case 0:
          return seckey
        case 1:
          throw new Error(errors.TWEAK_MUL)
      }
    },

    publicKeyVerify (pubkey) {
      isUint8Array('public key', pubkey, [33, 65])

      return secp256k1.publicKeyVerify(pubkey) === 0
    },

    publicKeyCreate (seckey, compressed = true, output) {
      isUint8Array('private key', seckey, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyCreate(output, seckey)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.SECKEY_INVALID)
        case 2:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyConvert (pubkey, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyConvert(output, pubkey)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyNegate (pubkey, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyNegate(output, pubkey)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
        case 3:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyCombine (pubkeys, compressed = true, output) {
      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
      for (const pubkey of pubkeys) {
        isUint8Array('public key', pubkey, [33, 65])
      }
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyCombine(output, pubkeys)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.PUBKEY_COMBINE)
        case 3:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isUint8Array('tweak', tweak, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.TWEAK_ADD)
      }
    },

    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isUint8Array('tweak', tweak, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.TWEAK_MUL)
      }
    },

    signatureNormalize (sig) {
      isUint8Array('signature', sig, 64)

      switch (secp256k1.signatureNormalize(sig)) {
        case 0:
          return sig
        case 1:
          throw new Error(errors.SIG_PARSE)
      }
    },

    signatureExport (sig, output) {
      isUint8Array('signature', sig, 64)
      output = getAssertedOutput(output, 72)

      const obj = { output, outputlen: 72 }
      switch (secp256k1.signatureExport(obj, sig)) {
        case 0:
          return output.slice(0, obj.outputlen)
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    signatureImport (sig, output) {
      isUint8Array('signature', sig)
      output = getAssertedOutput(output, 64)

      switch (secp256k1.signatureImport(output, sig)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    ecdsaSign (msg32, seckey, options = {}, output) {
      isUint8Array('message', msg32, 32)
      isUint8Array('private key', seckey, 32)
      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
      if (options.data !== undefined) isUint8Array('options.data', options.data)
      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
      output = getAssertedOutput(output, 64)

      const obj = { signature: output, recid: null }
      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
        case 0:
          return obj
        case 1:
          throw new Error(errors.SIGN)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    ecdsaVerify (sig, msg32, pubkey) {
      isUint8Array('signature', sig, 64)
      isUint8Array('message', msg32, 32)
      isUint8Array('public key', pubkey, [33, 65])

      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
        case 0:
          return true
        case 3:
          return false
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.PUBKEY_PARSE)
      }
    },

    ecdsaRecover (sig, recid, msg32, compressed = true, output) {
      isUint8Array('signature', sig, 64)
      assert(
        toTypeString(recid) === 'Number' &&
          recid >= 0 &&
          recid <= 3,
        'Expected recovery id to be a Number within interval [0, 3]'
      )
      isUint8Array('message', msg32, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.RECOVER)
        case 3:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    ecdh (pubkey, seckey, options = {}, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isUint8Array('private key', seckey, 32)
      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
      if (options.data !== undefined) isUint8Array('options.data', options.data)
      if (options.hashfn !== undefined) {
        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
        isUint8Array('output', output)
      } else {
        output = getAssertedOutput(output, 32)
      }

      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.ECDH)
      }
    }
  }
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>secp256k1",file:"node_modules\\gridplus-sdk\\node_modules\\secp256k1\\lib\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\index.js", {"./nil.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\nil.js","./parse.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\parse.js","./stringify.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\stringify.js","./v1.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v1.js","./v3.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v3.js","./v4.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v4.js","./v5.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v5.js","./validate.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\validate.js","./version.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\version.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\md5-browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cmd5-browser.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\md5-browser.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\native-browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cnative-browser.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\native-browser.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\nil.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cnil.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\nil.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\parse.js", {"./validate.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\validate.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cparse.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\parse.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\regex.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cregex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\regex.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\rng-browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Crng-browser.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\rng-browser.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\sha1-browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Csha1-browser.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\sha1-browser.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\stringify.js", {"./validate.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\validate.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cstringify.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\stringify.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v1.js", {"./rng.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\rng-browser.js","./stringify.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\stringify.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cv1.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = require("./stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v1.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v3.js", {"./md5.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\md5-browser.js","./v35.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v35.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cv3.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v3.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v35.js", {"./parse.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\parse.js","./stringify.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\stringify.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cv35.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports.default = v35;

var _stringify = require("./stringify.js");

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v35.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v4.js", {"./native.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\native-browser.js","./rng.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\rng-browser.js","./stringify.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\stringify.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cv4.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _native = _interopRequireDefault(require("./native.js"));

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = require("./stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v4.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v5.js", {"./sha1.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\sha1-browser.js","./v35.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v35.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cv5.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\v5.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\validate.js", {"./regex.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\regex.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cvalidate.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\validate.js",}],
["F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\version.js", {"./validate.js":"F:\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\validate.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cnode_modules%5Cuuid%5Cdist%5Cversion.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports.default = _default;
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>uuid",file:"node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\version.js",}],
["F:\\metamask-extension\\node_modules\\int64-buffer\\int64-buffer.js", {"buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cint64-buffer%5Cint64-buffer.js
      return function (require, module, exports) {
(function (Buffer){(function (){
// int64-buffer.js

/*jshint -W018 */ // Confusing use of '!'.
/*jshint -W030 */ // Expected an assignment or function call and instead saw an expression.
/*jshint -W093 */ // Did you mean to return a conditional instead of an assignment?

var Uint64BE, Int64BE, Uint64LE, Int64LE;

!function(exports) {
  // constants

  var UNDEFINED = "undefined";
  var BUFFER = (UNDEFINED !== typeof Buffer) && Buffer;
  var UINT8ARRAY = (UNDEFINED !== typeof Uint8Array) && Uint8Array;
  var ARRAYBUFFER = (UNDEFINED !== typeof ArrayBuffer) && ArrayBuffer;
  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];
  var isArray = Array.isArray || _isArray;
  var BIT32 = 4294967296;
  var BIT24 = 16777216;

  // storage class

  var storage; // Array;

  // generate classes

  Uint64BE = factory("Uint64BE", true, true);
  Int64BE = factory("Int64BE", true, false);
  Uint64LE = factory("Uint64LE", false, true);
  Int64LE = factory("Int64LE", false, false);

  // class factory

  function factory(name, bigendian, unsigned) {
    var posH = bigendian ? 0 : 4;
    var posL = bigendian ? 4 : 0;
    var pos0 = bigendian ? 0 : 3;
    var pos1 = bigendian ? 1 : 2;
    var pos2 = bigendian ? 2 : 1;
    var pos3 = bigendian ? 3 : 0;
    var fromPositive = bigendian ? fromPositiveBE : fromPositiveLE;
    var fromNegative = bigendian ? fromNegativeBE : fromNegativeLE;
    var proto = Int64.prototype;
    var isName = "is" + name;
    var _isInt64 = "_" + isName;

    // properties
    proto.buffer = void 0;
    proto.offset = 0;
    proto[_isInt64] = true;

    // methods
    proto.toNumber = toNumber;
    proto.toString = toString;
    proto.toJSON = toNumber;
    proto.toArray = toArray;

    // add .toBuffer() method only when Buffer available
    if (BUFFER) proto.toBuffer = toBuffer;

    // add .toArrayBuffer() method only when Uint8Array available
    if (UINT8ARRAY) proto.toArrayBuffer = toArrayBuffer;

    // isUint64BE, isInt64BE
    Int64[isName] = isInt64;

    // CommonJS
    exports[name] = Int64;

    return Int64;

    // constructor
    function Int64(buffer, offset, value, raddix) {
      if (!(this instanceof Int64)) return new Int64(buffer, offset, value, raddix);
      return init(this, buffer, offset, value, raddix);
    }

    // isUint64BE, isInt64BE
    function isInt64(b) {
      return !!(b && b[_isInt64]);
    }

    // initializer
    function init(that, buffer, offset, value, raddix) {
      if (UINT8ARRAY && ARRAYBUFFER) {
        if (buffer instanceof ARRAYBUFFER) buffer = new UINT8ARRAY(buffer);
        if (value instanceof ARRAYBUFFER) value = new UINT8ARRAY(value);
      }

      // Int64BE() style
      if (!buffer && !offset && !value && !storage) {
        // shortcut to initialize with zero
        that.buffer = newArray(ZERO, 0);
        return;
      }

      // Int64BE(value, raddix) style
      if (!isValidBuffer(buffer, offset)) {
        var _storage = storage || Array;
        raddix = offset;
        value = buffer;
        offset = 0;
        buffer = (storage === BUFFER) ? BUFFER.alloc(8) : new _storage(8);
      }

      that.buffer = buffer;
      that.offset = offset |= 0;

      // Int64BE(buffer, offset) style
      if (UNDEFINED === typeof value) return;

      // Int64BE(buffer, offset, value, raddix) style
      if ("string" === typeof value) {
        fromString(buffer, offset, value, raddix || 10);
      } else if (isValidBuffer(value, raddix)) {
        fromArray(buffer, offset, value, raddix);
      } else if ("number" === typeof raddix) {
        writeInt32(buffer, offset + posH, value); // high
        writeInt32(buffer, offset + posL, raddix); // low
      } else if (value > 0) {
        fromPositive(buffer, offset, value); // positive
      } else if (value < 0) {
        fromNegative(buffer, offset, value); // negative
      } else {
        fromArray(buffer, offset, ZERO, 0); // zero, NaN and others
      }
    }

    function fromString(buffer, offset, str, raddix) {
      var pos = 0;
      var len = str.length;
      var high = 0;
      var low = 0;
      if (str[0] === "-") pos++;
      var sign = pos;
      while (pos < len) {
        var chr = parseInt(str[pos++], raddix);
        if (!(chr >= 0)) break; // NaN
        low = low * raddix + chr;
        high = high * raddix + Math.floor(low / BIT32);
        low %= BIT32;
      }
      if (sign) {
        high = ~high;
        if (low) {
          low = BIT32 - low;
        } else {
          high++;
        }
      }
      writeInt32(buffer, offset + posH, high);
      writeInt32(buffer, offset + posL, low);
    }

    function toNumber() {
      var buffer = this.buffer;
      var offset = this.offset;
      var high = readInt32(buffer, offset + posH);
      var low = readInt32(buffer, offset + posL);
      if (!unsigned) high |= 0; // a trick to get signed
      return high ? (high * BIT32 + low) : low;
    }

    function toString(radix) {
      var buffer = this.buffer;
      var offset = this.offset;
      var high = readInt32(buffer, offset + posH);
      var low = readInt32(buffer, offset + posL);
      var str = "";
      var sign = !unsigned && (high & 0x80000000);
      if (sign) {
        high = ~high;
        low = BIT32 - low;
      }
      radix = radix || 10;
      while (1) {
        var mod = (high % radix) * BIT32 + low;
        high = Math.floor(high / radix);
        low = Math.floor(mod / radix);
        str = (mod % radix).toString(radix) + str;
        if (!high && !low) break;
      }
      if (sign) {
        str = "-" + str;
      }
      return str;
    }

    function writeInt32(buffer, offset, value) {
      buffer[offset + pos3] = value & 255;
      value = value >> 8;
      buffer[offset + pos2] = value & 255;
      value = value >> 8;
      buffer[offset + pos1] = value & 255;
      value = value >> 8;
      buffer[offset + pos0] = value & 255;
    }

    function readInt32(buffer, offset) {
      return (buffer[offset + pos0] * BIT24) +
        (buffer[offset + pos1] << 16) +
        (buffer[offset + pos2] << 8) +
        buffer[offset + pos3];
    }
  }

  function toArray(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    storage = null; // Array

    if (raw !== false && isArray(buffer)) {
      return (buffer.length === 8) ? buffer : buffer.slice(offset, offset + 8);
    }

    return newArray(buffer, offset);
  }

  function toBuffer(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    storage = BUFFER;

    if (raw !== false && BUFFER.isBuffer(buffer)) {
      return (buffer.length === 8) ? buffer : buffer.slice(offset, offset + 8);
    }

    // Buffer.from(arraybuffer) available since Node v4.5.0
    // https://nodejs.org/en/blog/release/v4.5.0/
    return BUFFER.from(toArrayBuffer.call(this, raw));
  }

  function toArrayBuffer(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    var arrbuf = buffer.buffer;
    storage = UINT8ARRAY;

    // arrbuf.slice() ignores buffer.offset until Node v8.0.0
    if (raw !== false && !buffer.offset && (arrbuf instanceof ARRAYBUFFER)) {
      return (arrbuf.byteLength === 8) ? arrbuf : arrbuf.slice(offset, offset + 8);
    }

    var dest = new UINT8ARRAY(8);
    fromArray(dest, 0, buffer, offset);
    return dest.buffer;
  }

  function isValidBuffer(buffer, offset) {
    var len = buffer && buffer.length;
    offset |= 0;
    return len && (offset + 8 <= len) && ("string" !== typeof buffer[offset]);
  }

  function fromArray(destbuf, destoff, srcbuf, srcoff) {
    destoff |= 0;
    srcoff |= 0;
    for (var i = 0; i < 8; i++) {
      destbuf[destoff++] = srcbuf[srcoff++] & 255;
    }
  }

  function newArray(buffer, offset) {
    return Array.prototype.slice.call(buffer, offset, offset + 8);
  }

  function fromPositiveBE(buffer, offset, value) {
    var pos = offset + 8;
    while (pos > offset) {
      buffer[--pos] = value & 255;
      value /= 256;
    }
  }

  function fromNegativeBE(buffer, offset, value) {
    var pos = offset + 8;
    value++;
    while (pos > offset) {
      buffer[--pos] = ((-value) & 255) ^ 255;
      value /= 256;
    }
  }

  function fromPositiveLE(buffer, offset, value) {
    var end = offset + 8;
    while (offset < end) {
      buffer[offset++] = value & 255;
      value /= 256;
    }
  }

  function fromNegativeLE(buffer, offset, value) {
    var end = offset + 8;
    value++;
    while (offset < end) {
      buffer[offset++] = ((-value) & 255) ^ 255;
      value /= 256;
    }
  }

  // https://github.com/retrofox/is-array
  function _isArray(val) {
    return !!val && "[object Array]" == Object.prototype.toString.call(val);
  }

}(typeof exports === 'object' && typeof exports.nodeName !== 'string' ? exports : (this || {}));

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/utxo-lib>int64-buffer",file:"node_modules\\int64-buffer\\int64-buffer.js",}],
["F:\\metamask-extension\\node_modules\\is-retry-allowed\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cis-retry-allowed%5Cindex.js
      return function (require, module, exports) {
'use strict';

const denyList = new Set([
	'ENOTFOUND',
	'ENETUNREACH',

	// SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
	'UNABLE_TO_GET_ISSUER_CERT',
	'UNABLE_TO_GET_CRL',
	'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
	'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
	'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
	'CERT_SIGNATURE_FAILURE',
	'CRL_SIGNATURE_FAILURE',
	'CERT_NOT_YET_VALID',
	'CERT_HAS_EXPIRED',
	'CRL_NOT_YET_VALID',
	'CRL_HAS_EXPIRED',
	'ERROR_IN_CERT_NOT_BEFORE_FIELD',
	'ERROR_IN_CERT_NOT_AFTER_FIELD',
	'ERROR_IN_CRL_LAST_UPDATE_FIELD',
	'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
	'OUT_OF_MEM',
	'DEPTH_ZERO_SELF_SIGNED_CERT',
	'SELF_SIGNED_CERT_IN_CHAIN',
	'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
	'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
	'CERT_CHAIN_TOO_LONG',
	'CERT_REVOKED',
	'INVALID_CA',
	'PATH_LENGTH_EXCEEDED',
	'INVALID_PURPOSE',
	'CERT_UNTRUSTED',
	'CERT_REJECTED',
	'HOSTNAME_MISMATCH'
]);

// TODO: Use `error?.code` when targeting Node.js 14
module.exports = error => !denyList.has(error && error.code);

      };
    };
  }
  }
}, {package:"is-retry-allowed",file:"node_modules\\is-retry-allowed\\index.js",}],
["F:\\metamask-extension\\node_modules\\iso-url\\index.js", {"./src/relative":"F:\\metamask-extension\\node_modules\\iso-url\\src\\relative.js","./src/url":"F:\\metamask-extension\\node_modules\\iso-url\\src\\url-browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Ciso-url%5Cindex.js
      return function (require, module, exports) {
'use strict';

const {
    URLWithLegacySupport,
    format,
    URLSearchParams,
    defaultBase
} = require('./src/url');
const relative = require('./src/relative');

module.exports = {
    URL: URLWithLegacySupport,
    URLSearchParams,
    format,
    relative,
    defaultBase
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>borc>iso-url",file:"node_modules\\iso-url\\index.js",}],
["F:\\metamask-extension\\node_modules\\iso-url\\src\\relative.js", {"./url":"F:\\metamask-extension\\node_modules\\iso-url\\src\\url-browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Ciso-url%5Csrc%5Crelative.js
      return function (require, module, exports) {
'use strict';

const { URLWithLegacySupport, format } = require('./url');

module.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {
    let protocol = location.protocol ?
        location.protocol.replace(':', '') :
        'http';

    // Check protocol map
    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
    let urlParsed;

    try {
        urlParsed = new URLWithLegacySupport(url);
    } catch (err) {
        urlParsed = {};
    }

    const base = Object.assign({}, location, {
        protocol: protocol || urlParsed.protocol,
        host: location.host || urlParsed.host
    });

    return new URLWithLegacySupport(url, format(base)).toString();
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>borc>iso-url",file:"node_modules\\iso-url\\src\\relative.js",}],
["F:\\metamask-extension\\node_modules\\iso-url\\src\\url-browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Ciso-url%5Csrc%5Curl-browser.js
      return function (require, module, exports) {
'use strict';

const defaultBase = self.location ?
    self.location.protocol + '//' + self.location.host :
    '';
const URL = self.URL;

class URLWithLegacySupport {
    constructor(url = '', base = defaultBase) {
        this.super = new URL(url, base);
        this.path = this.pathname + this.search;
        this.auth =
            this.username && this.password ?
                this.username + ':' + this.password :
                null;

        this.query =
            this.search && this.search.startsWith('?') ?
                this.search.slice(1) :
                null;
    }

    get hash() {
        return this.super.hash;
    }
    get host() {
        return this.super.host;
    }
    get hostname() {
        return this.super.hostname;
    }
    get href() {
        return this.super.href;
    }
    get origin() {
        return this.super.origin;
    }
    get password() {
        return this.super.password;
    }
    get pathname() {
        return this.super.pathname;
    }
    get port() {
        return this.super.port;
    }
    get protocol() {
        return this.super.protocol;
    }
    get search() {
        return this.super.search;
    }
    get searchParams() {
        return this.super.searchParams;
    }
    get username() {
        return this.super.username;
    }

    set hash(hash) {
        this.super.hash = hash;
    }
    set host(host) {
        this.super.host = host;
    }
    set hostname(hostname) {
        this.super.hostname = hostname;
    }
    set href(href) {
        this.super.href = href;
    }
    set origin(origin) {
        this.super.origin = origin;
    }
    set password(password) {
        this.super.password = password;
    }
    set pathname(pathname) {
        this.super.pathname = pathname;
    }
    set port(port) {
        this.super.port = port;
    }
    set protocol(protocol) {
        this.super.protocol = protocol;
    }
    set search(search) {
        this.super.search = search;
    }
    set searchParams(searchParams) {
        this.super.searchParams = searchParams;
    }
    set username(username) {
        this.super.username = username;
    }

    createObjectURL(o) {
        return this.super.createObjectURL(o);
    }
    revokeObjectURL(o) {
        this.super.revokeObjectURL(o);
    }
    toJSON() {
        return this.super.toJSON();
    }
    toString() {
        return this.super.toString();
    }
    format() {
        return this.toString();
    }
}

function format(obj) {
    if (typeof obj === 'string') {
        const url = new URL(obj);

        return url.toString();
    }

    if (!(obj instanceof URL)) {
        const userPass =
            obj.username && obj.password ?
                `${obj.username}:${obj.password}@` :
                '';
        const auth = obj.auth ? obj.auth + '@' : '';
        const port = obj.port ? ':' + obj.port : '';
        const protocol = obj.protocol ? obj.protocol + '//' : '';
        const host = obj.host || '';
        const hostname = obj.hostname || '';
        const search = obj.search || (obj.query ? '?' + obj.query : '');
        const hash = obj.hash || '';
        const pathname = obj.pathname || '';
        const path = obj.path || pathname + search;

        return `${protocol}${userPass || auth}${host ||
            hostname + port}${path}${hash}`;
    }
}

module.exports = {
    URLWithLegacySupport,
    URLSearchParams: self.URLSearchParams,
    defaultBase,
    format
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>borc>iso-url",file:"node_modules\\iso-url\\src\\url-browser.js",}],
["F:\\metamask-extension\\node_modules\\isomorphic-fetch\\fetch-npm-browserify.js", {"whatwg-fetch":"F:\\metamask-extension\\node_modules\\whatwg-fetch\\dist\\fetch.umd.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cisomorphic-fetch%5Cfetch-npm-browserify.js
      return function (require, module, exports) {
// the whatwg-fetch polyfill installs the fetch() function
// on the global object (window or self)
//
// Return that as the export for use in Webpack, Browserify etc.
require('whatwg-fetch');
module.exports = self.fetch.bind(self);

      };
    };
  }
  }
}, {package:"@metamask/smart-transactions-controller>isomorphic-fetch",file:"node_modules\\isomorphic-fetch\\fetch-npm-browserify.js",}],
["F:\\metamask-extension\\node_modules\\join-component\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjoin-component%5Cindex.js
      return function (require, module, exports) {

/**
 * Join `arr` with the trailing `str` defaulting to "and",
 * and `sep` string defaulting to ", ".
 *
 * @param {Array} arr
 * @param {String} str
 * @param {String} sep
 * @return {String}
 * @api public
 */

module.exports = function(arr, str, sep){
  str = str || 'and';
  sep = sep || ', ';

  if (arr.length < 2) return arr[0] || '';

  var oxford = str.slice(0, 2) === sep;

  if (!oxford) {
    str = ' ' + str;
  } else if (arr.length == 2) {
    str = str.slice(1);
  }

  return arr.slice(0, -1).join(sep) + str + ' ' + arr[arr.length - 1];
};

      };
    };
  }
  }
}, {package:"@segment/loosely-validate-event>join-component",file:"node_modules\\join-component\\index.js",}],
["F:\\metamask-extension\\node_modules\\js-base64\\base64.js", {"buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjs-base64%5Cbase64.js
      return function (require, module, exports) {
(function (Buffer){(function (){


//
// THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT BY HAND!
//
;(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined'
        ? module.exports = factory()
        : typeof define === 'function' && define.amd
        ? define(factory) :
        // cf. https://github.com/dankogai/js-base64/issues/119
        (function() {
            // existing version for noConflict()
            const _Base64 = global.Base64;
            const gBase64 = factory();
            gBase64.noConflict = () => {
                global.Base64 = _Base64;
                return gBase64;
            };
            if (global.Meteor) { // Meteor.js
                Base64 = gBase64;
            }
            global.Base64 = gBase64;
        })();
}((typeof self !== 'undefined' ? self
        : typeof window !== 'undefined' ? window
        : typeof global !== 'undefined' ? global
        : this
), function() {
    'use strict';

/**
 *  base64.ts
 *
 *  Licensed under the BSD 3-Clause License.
 *    http://opensource.org/licenses/BSD-3-Clause
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 *
 * @author Dan Kogai (https://github.com/dankogai)
 */
const version = '3.6.1';
/**
 * @deprecated use lowercase `version`.
 */
const VERSION = version;
const _hasatob = typeof atob === 'function';
const _hasbtoa = typeof btoa === 'function';
const _hasBuffer = typeof Buffer === 'function';
const _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;
const _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;
const b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
const b64chs = [...b64ch];
const b64tab = ((a) => {
    let tab = {};
    a.forEach((c, i) => tab[c] = i);
    return tab;
})(b64chs);
const b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
const _fromCC = String.fromCharCode.bind(String);
const _U8Afrom = typeof Uint8Array.from === 'function'
    ? Uint8Array.from.bind(Uint8Array)
    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
const _mkUriSafe = (src) => src
    .replace(/[+\/]/g, (m0) => m0 == '+' ? '-' : '_')
    .replace(/=+$/m, '');
const _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\+\/]/g, '');
/**
 * polyfill version of `btoa`
 */
const btoaPolyfill = (bin) => {
    // console.log('polyfilled');
    let u32, c0, c1, c2, asc = '';
    const pad = bin.length % 3;
    for (let i = 0; i < bin.length;) {
        if ((c0 = bin.charCodeAt(i++)) > 255 ||
            (c1 = bin.charCodeAt(i++)) > 255 ||
            (c2 = bin.charCodeAt(i++)) > 255)
            throw new TypeError('invalid character found');
        u32 = (c0 << 16) | (c1 << 8) | c2;
        asc += b64chs[u32 >> 18 & 63]
            + b64chs[u32 >> 12 & 63]
            + b64chs[u32 >> 6 & 63]
            + b64chs[u32 & 63];
    }
    return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
};
/**
 * does what `window.btoa` of web browsers do.
 * @param {String} bin binary string
 * @returns {string} Base64-encoded string
 */
const _btoa = _hasbtoa ? (bin) => btoa(bin)
    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')
        : btoaPolyfill;
const _fromUint8Array = _hasBuffer
    ? (u8a) => Buffer.from(u8a).toString('base64')
    : (u8a) => {
        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326
        const maxargs = 0x1000;
        let strs = [];
        for (let i = 0, l = u8a.length; i < l; i += maxargs) {
            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
        }
        return _btoa(strs.join(''));
    };
/**
 * converts a Uint8Array to a Base64 string.
 * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5
 * @returns {string} Base64 string
 */
const fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
// This trick is found broken https://github.com/dankogai/js-base64/issues/130
// const utob = (src: string) => unescape(encodeURIComponent(src));
// reverting good old fationed regexp
const cb_utob = (c) => {
    if (c.length < 2) {
        var cc = c.charCodeAt(0);
        return cc < 0x80 ? c
            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))
                + _fromCC(0x80 | (cc & 0x3f)))
                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))
                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))
                    + _fromCC(0x80 | (cc & 0x3f)));
    }
    else {
        var cc = 0x10000
            + (c.charCodeAt(0) - 0xD800) * 0x400
            + (c.charCodeAt(1) - 0xDC00);
        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))
            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))
            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))
            + _fromCC(0x80 | (cc & 0x3f)));
    }
};
const re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
/**
 * @deprecated should have been internal use only.
 * @param {string} src UTF-8 string
 * @returns {string} UTF-16 string
 */
const utob = (u) => u.replace(re_utob, cb_utob);
//
const _encode = _hasBuffer
    ? (s) => Buffer.from(s, 'utf8').toString('base64')
    : _TE
        ? (s) => _fromUint8Array(_TE.encode(s))
        : (s) => _btoa(utob(s));
/**
 * converts a UTF-8-encoded string to a Base64 string.
 * @param {boolean} [urlsafe] if `true` make the result URL-safe
 * @returns {string} Base64 string
 */
const encode = (src, urlsafe = false) => urlsafe
    ? _mkUriSafe(_encode(src))
    : _encode(src);
/**
 * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.
 * @returns {string} Base64 string
 */
const encodeURI = (src) => encode(src, true);
// This trick is found broken https://github.com/dankogai/js-base64/issues/130
// const btou = (src: string) => decodeURIComponent(escape(src));
// reverting good old fationed regexp
const re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
const cb_btou = (cccc) => {
    switch (cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                | ((0x3f & cccc.charCodeAt(1)) << 12)
                | ((0x3f & cccc.charCodeAt(2)) << 6)
                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;
            return (_fromCC((offset >>> 10) + 0xD800)
                + _fromCC((offset & 0x3FF) + 0xDC00));
        case 3:
            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)
                | ((0x3f & cccc.charCodeAt(1)) << 6)
                | (0x3f & cccc.charCodeAt(2)));
        default:
            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)
                | (0x3f & cccc.charCodeAt(1)));
    }
};
/**
 * @deprecated should have been internal use only.
 * @param {string} src UTF-16 string
 * @returns {string} UTF-8 string
 */
const btou = (b) => b.replace(re_btou, cb_btou);
/**
 * polyfill version of `atob`
 */
const atobPolyfill = (asc) => {
    // console.log('polyfilled');
    asc = asc.replace(/\s+/g, '');
    if (!b64re.test(asc))
        throw new TypeError('malformed base64.');
    asc += '=='.slice(2 - (asc.length & 3));
    let u24, bin = '', r1, r2;
    for (let i = 0; i < asc.length;) {
        u24 = b64tab[asc.charAt(i++)] << 18
            | b64tab[asc.charAt(i++)] << 12
            | (r1 = b64tab[asc.charAt(i++)]) << 6
            | (r2 = b64tab[asc.charAt(i++)]);
        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)
            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)
                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
    }
    return bin;
};
/**
 * does what `window.atob` of web browsers do.
 * @param {String} asc Base64-encoded string
 * @returns {string} binary string
 */
const _atob = _hasatob ? (asc) => atob(_tidyB64(asc))
    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')
        : atobPolyfill;
//
const _toUint8Array = _hasBuffer
    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))
    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));
/**
 * converts a Base64 string to a Uint8Array.
 */
const toUint8Array = (a) => _toUint8Array(_unURI(a));
//
const _decode = _hasBuffer
    ? (a) => Buffer.from(a, 'base64').toString('utf8')
    : _TD
        ? (a) => _TD.decode(_toUint8Array(a))
        : (a) => btou(_atob(a));
const _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));
/**
 * converts a Base64 string to a UTF-8 string.
 * @param {String} src Base64 string.  Both normal and URL-safe are supported
 * @returns {string} UTF-8 string
 */
const decode = (src) => _decode(_unURI(src));
/**
 * check if a value is a valid Base64 string
 * @param {String} src a value to check
  */
const isValid = (src) => {
    if (typeof src !== 'string')
        return false;
    const s = src.replace(/\s+/g, '').replace(/=+$/, '');
    return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
};
//
const _noEnum = (v) => {
    return {
        value: v, enumerable: false, writable: true, configurable: true
    };
};
/**
 * extend String.prototype with relevant methods
 */
const extendString = function () {
    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
    _add('fromBase64', function () { return decode(this); });
    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });
    _add('toBase64URI', function () { return encode(this, true); });
    _add('toBase64URL', function () { return encode(this, true); });
    _add('toUint8Array', function () { return toUint8Array(this); });
};
/**
 * extend Uint8Array.prototype with relevant methods
 */
const extendUint8Array = function () {
    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });
    _add('toBase64URI', function () { return fromUint8Array(this, true); });
    _add('toBase64URL', function () { return fromUint8Array(this, true); });
};
/**
 * extend Builtin prototypes with relevant methods
 */
const extendBuiltins = () => {
    extendString();
    extendUint8Array();
};
const gBase64 = {
    version: version,
    VERSION: VERSION,
    atob: _atob,
    atobPolyfill: atobPolyfill,
    btoa: _btoa,
    btoaPolyfill: btoaPolyfill,
    fromBase64: decode,
    toBase64: encode,
    encode: encode,
    encodeURI: encodeURI,
    encodeURL: encodeURI,
    utob: utob,
    btou: btou,
    decode: decode,
    isValid: isValid,
    fromUint8Array: fromUint8Array,
    toUint8Array: toUint8Array,
    extendString: extendString,
    extendUint8Array: extendUint8Array,
    extendBuiltins: extendBuiltins,
};

    //
    // export Base64 to the namespace
    //
    // ES5 is yet to have Object.assign() that may make transpilers unhappy.
    // gBase64.Base64 = Object.assign({}, gBase64);
    gBase64.Base64 = {};
    Object.keys(gBase64).forEach(k => gBase64.Base64[k] = gBase64[k]);
    return gBase64;
}));



}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>js-base64",file:"node_modules\\js-base64\\base64.js",}],
["F:\\metamask-extension\\node_modules\\json-rpc-middleware-stream\\dist\\createEngineStream.js", {"readable-stream":"F:\\metamask-extension\\node_modules\\readable-stream\\readable-browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjson-rpc-middleware-stream%5Cdist%5CcreateEngineStream.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const readable_stream_1 = require("readable-stream");
/**
 * Takes a JsonRpcEngine and returns a Duplex stream wrapping it.
 *
 * @param opts - Options bag.
 * @param opts.engine - The JsonRpcEngine to wrap in a stream.
 * @returns The stream wrapping the engine.
 */
function createEngineStream(opts) {
    if (!opts || !opts.engine) {
        throw new Error('Missing engine parameter!');
    }
    const { engine } = opts;
    const stream = new readable_stream_1.Duplex({ objectMode: true, read: () => undefined, write });
    // forward notifications
    if (engine.on) {
        engine.on('notification', (message) => {
            stream.push(message);
        });
    }
    return stream;
    /**
     * Write a JSON-RPC request to the stream.
     *
     * @param req - The JSON-rpc request.
     * @param _encoding - The stream encoding, not used.
     * @param cb - The stream write callback.
     */
    function write(req, _encoding, cb) {
        engine.handle(req, (_err, res) => {
            stream.push(res);
        });
        cb();
    }
}
exports.default = createEngineStream;
//# sourceMappingURL=createEngineStream.js.map
      };
    };
  }
  }
}, {package:"json-rpc-middleware-stream",file:"node_modules\\json-rpc-middleware-stream\\dist\\createEngineStream.js",}],
["F:\\metamask-extension\\node_modules\\json-rpc-middleware-stream\\dist\\createStreamMiddleware.js", {"@metamask/safe-event-emitter":"F:\\metamask-extension\\node_modules\\@metamask\\safe-event-emitter\\index.js","readable-stream":"F:\\metamask-extension\\node_modules\\readable-stream\\readable-browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjson-rpc-middleware-stream%5Cdist%5CcreateStreamMiddleware.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const safe_event_emitter_1 = __importDefault(require("@metamask/safe-event-emitter"));
const readable_stream_1 = require("readable-stream");
/**
 * Creates a JsonRpcEngine middleware with an associated Duplex stream and
 * EventEmitter. The middleware, and by extension stream, assume that middleware
 * parameters are properly formatted. No runtime type checking or validation is
 * performed.
 *
 * @param options - Configuration options for middleware.
 * @returns The event emitter, middleware, and stream.
 */
function createStreamMiddleware(options = {}) {
    const idMap = {}; // TODO: replace with actual Map
    const stream = new readable_stream_1.Duplex({
        objectMode: true,
        read: () => undefined,
        write: processMessage,
    });
    const events = new safe_event_emitter_1.default();
    const middleware = (req, res, next, end) => {
        // write req to stream
        sendToStream(req);
        // register request on id map
        idMap[req.id] = { req, res, next, end };
    };
    return { events, middleware, stream };
    /**
     * Forwards JSON-RPC request to the stream.
     *
     * @param req - The JSON-RPC request object.
     */
    function sendToStream(req) {
        // TODO: limiting retries could be implemented here
        stream.push(req);
    }
    /**
     * Writes a JSON-RPC object to the stream.
     *
     * @param res - The JSON-RPC response object.
     * @param _encoding - The stream encoding, not used.
     * @param cb - The stream write callback.
     */
    function processMessage(res, _encoding, cb) {
        let err = null;
        try {
            const isNotification = !res.id;
            if (isNotification) {
                processNotification(res);
            }
            else {
                processResponse(res);
            }
        }
        catch (_err) {
            err = _err;
        }
        // continue processing stream
        cb(err);
    }
    /**
     * Processes a JSON-RPC response.
     *
     * @param res - The response to process.
     */
    function processResponse(res) {
        const context = idMap[res.id];
        if (!context) {
            console.warn(`StreamMiddleware - Unknown response id "${res.id}"`);
            return;
        }
        delete idMap[res.id];
        // copy whole res onto original res
        Object.assign(context.res, res);
        // run callback on empty stack,
        // prevent internal stream-handler from catching errors
        setTimeout(context.end);
    }
    /**
     * Processes a JSON-RPC notification.
     *
     * @param notif - The notification to process.
     */
    function processNotification(notif) {
        if ((options === null || options === void 0 ? void 0 : options.retryOnMessage) && notif.method === options.retryOnMessage) {
            retryStuckRequests();
        }
        events.emit('notification', notif);
    }
    /**
     * Retry pending requests.
     */
    function retryStuckRequests() {
        Object.values(idMap).forEach(({ req, retryCount = 0 }) => {
            // Avoid retrying requests without an id - they cannot have matching responses so retry logic doesn't apply
            // Check for retry count below ensure that a request is not retried more than 3 times
            if (!req.id) {
                return;
            }
            if (retryCount >= 3) {
                throw new Error(`StreamMiddleware - Retry limit exceeded for request id "${req.id}"`);
            }
            idMap[req.id].retryCount = retryCount + 1;
            sendToStream(req);
        });
    }
}
exports.default = createStreamMiddleware;
//# sourceMappingURL=createStreamMiddleware.js.map
      };
    };
  }
  }
}, {package:"json-rpc-middleware-stream",file:"node_modules\\json-rpc-middleware-stream\\dist\\createStreamMiddleware.js",}],
["F:\\metamask-extension\\node_modules\\json-rpc-middleware-stream\\dist\\index.js", {"./createEngineStream":"F:\\metamask-extension\\node_modules\\json-rpc-middleware-stream\\dist\\createEngineStream.js","./createStreamMiddleware":"F:\\metamask-extension\\node_modules\\json-rpc-middleware-stream\\dist\\createStreamMiddleware.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjson-rpc-middleware-stream%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStreamMiddleware = exports.createEngineStream = void 0;
const createEngineStream_1 = __importDefault(require("./createEngineStream"));
exports.createEngineStream = createEngineStream_1.default;
const createStreamMiddleware_1 = __importDefault(require("./createStreamMiddleware"));
exports.createStreamMiddleware = createStreamMiddleware_1.default;
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"json-rpc-middleware-stream",file:"node_modules\\json-rpc-middleware-stream\\dist\\index.js",}],
["F:\\metamask-extension\\node_modules\\json-stable-stringify\\index.js", {"jsonify":"F:\\metamask-extension\\node_modules\\jsonify\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjson-stable-stringify%5Cindex.js
      return function (require, module, exports) {
'use strict';

var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');

var isArray = Array.isArray || function (x) {
	return {}.toString.call(x) === '[object Array]';
};

var objectKeys = Object.keys || function (obj) {
	var has = Object.prototype.hasOwnProperty || function () { return true; };
	var keys = [];
	for (var key in obj) {
		if (has.call(obj, key)) { keys.push(key); }
	}
	return keys;
};

module.exports = function (obj, opts) {
	if (!opts) { opts = {}; }
	if (typeof opts === 'function') { opts = { cmp: opts }; }
	var space = opts.space || '';
	if (typeof space === 'number') { space = Array(space + 1).join(' '); }
	var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;
	var replacer = opts.replacer || function (key, value) { return value; };

	var cmp = opts.cmp && (function (f) {
		return function (node) {
			return function (a, b) {
				var aobj = { key: a, value: node[a] };
				var bobj = { key: b, value: node[b] };
				return f(aobj, bobj);
			};
		};
	}(opts.cmp));

	var seen = [];
	return (function stringify(parent, key, node, level) {
		var indent = space ? '\n' + new Array(level + 1).join(space) : '';
		var colonSeparator = space ? ': ' : ':';

		if (node && node.toJSON && typeof node.toJSON === 'function') {
			node = node.toJSON();
		}

		node = replacer.call(parent, key, node);

		if (node === undefined) {
			return;
		}
		if (typeof node !== 'object' || node === null) {
			return json.stringify(node);
		}
		if (isArray(node)) {
			var out = [];
			for (var i = 0; i < node.length; i++) {
				var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
				out.push(indent + space + item);
			}
			return '[' + out.join(',') + indent + ']';
		}

		if (seen.indexOf(node) !== -1) {
			if (cycles) { return json.stringify('__cycle__'); }
			throw new TypeError('Converting circular structure to JSON');
		} else { seen.push(node); }

		var keys = objectKeys(node).sort(cmp && cmp(node));
		var out = [];
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			var value = stringify(node, key, node[key], level + 1);

			if (!value) { continue; }

			var keyValue = json.stringify(key)
					+ colonSeparator
					+ value;

			out.push(indent + space + keyValue);
		}
		seen.splice(seen.indexOf(node), 1);
		return '{' + out.join(',') + indent + '}';

	}({ '': obj }, '', obj, 0));
};

      };
    };
  }
  }
}, {package:"lavamoat>json-stable-stringify",file:"node_modules\\json-stable-stringify\\index.js",}],
["F:\\metamask-extension\\node_modules\\jsonify\\index.js", {"./lib/parse":"F:\\metamask-extension\\node_modules\\jsonify\\lib\\parse.js","./lib/stringify":"F:\\metamask-extension\\node_modules\\jsonify\\lib\\stringify.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonify%5Cindex.js
      return function (require, module, exports) {
'use strict';

exports.parse = require('./lib/parse');
exports.stringify = require('./lib/stringify');

      };
    };
  }
  }
}, {package:"lavamoat>json-stable-stringify>jsonify",file:"node_modules\\jsonify\\index.js",}],
["F:\\metamask-extension\\node_modules\\jsonify\\lib\\parse.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonify%5Clib%5Cparse.js
      return function (require, module, exports) {
'use strict';

var at; // The index of the current character
var ch; // The current character
var escapee = {
	'"': '"',
	'\\': '\\',
	'/': '/',
	b: '\b',
	f: '\f',
	n: '\n',
	r: '\r',
	t: '\t'
};
var text;

// Call error when something is wrong.
function error(m) {
	throw {
		name: 'SyntaxError',
		message: m,
		at: at,
		text: text
	};
}

function next(c) {
	// If a c parameter is provided, verify that it matches the current character.
	if (c && c !== ch) {
		error("Expected '" + c + "' instead of '" + ch + "'");
	}

	// Get the next character. When there are no more characters, return the empty string.

	ch = text.charAt(at);
	at += 1;
	return ch;
}

function number() {
	// Parse a number value.
	var num;
	var str = '';

	if (ch === '-') {
		str = '-';
		next('-');
	}
	while (ch >= '0' && ch <= '9') {
		str += ch;
		next();
	}
	if (ch === '.') {
		str += '.';
		while (next() && ch >= '0' && ch <= '9') {
			str += ch;
		}
	}
	if (ch === 'e' || ch === 'E') {
		str += ch;
		next();
		if (ch === '-' || ch === '+') {
			str += ch;
			next();
		}
		while (ch >= '0' && ch <= '9') {
			str += ch;
			next();
		}
	}
	num = Number(str);
	if (!isFinite(num)) {
		error('Bad number');
	}
	return num;
}

function string() {
	// Parse a string value.
	var hex;
	var i;
	var str = '';
	var uffff;

	// When parsing for string values, we must look for " and \ characters.
	if (ch === '"') {
		while (next()) {
			if (ch === '"') {
				next();
				return str;
			} else if (ch === '\\') {
				next();
				if (ch === 'u') {
					uffff = 0;
					for (i = 0; i < 4; i += 1) {
						hex = parseInt(next(), 16);
						if (!isFinite(hex)) {
							break;
						}
						uffff = (uffff * 16) + hex;
					}
					str += String.fromCharCode(uffff);
				} else if (typeof escapee[ch] === 'string') {
					str += escapee[ch];
				} else {
					break;
				}
			} else {
				str += ch;
			}
		}
	}
	error('Bad string');
}

// Skip whitespace.
function white() {
	while (ch && ch <= ' ') {
		next();
	}
}

// true, false, or null.
function word() {
	switch (ch) {
		case 't':
			next('t');
			next('r');
			next('u');
			next('e');
			return true;
		case 'f':
			next('f');
			next('a');
			next('l');
			next('s');
			next('e');
			return false;
		case 'n':
			next('n');
			next('u');
			next('l');
			next('l');
			return null;
		default:
			error("Unexpected '" + ch + "'");
	}
}

// Parse an array value.
function array() {
	var arr = [];

	if (ch === '[') {
		next('[');
		white();
		if (ch === ']') {
			next(']');
			return arr; // empty array
		}
		while (ch) {
			arr.push(value()); // eslint-disable-line no-use-before-define
			white();
			if (ch === ']') {
				next(']');
				return arr;
			}
			next(',');
			white();
		}
	}
	error('Bad array');
}

// Parse an object value.
function object() {
	var key;
	var obj = {};

	if (ch === '{') {
		next('{');
		white();
		if (ch === '}') {
			next('}');
			return obj; // empty object
		}
		while (ch) {
			key = string();
			white();
			next(':');
			if (Object.prototype.hasOwnProperty.call(obj, key)) {
				error('Duplicate key "' + key + '"');
			}
			obj[key] = value(); // eslint-disable-line no-use-before-define
			white();
			if (ch === '}') {
				next('}');
				return obj;
			}
			next(',');
			white();
		}
	}
	error('Bad object');
}

// Parse a JSON value. It could be an object, an array, a string, a number, or a word.
function value() {
	white();
	switch (ch) {
		case '{':
			return object();
		case '[':
			return array();
		case '"':
			return string();
		case '-':
			return number();
		default:
			return ch >= '0' && ch <= '9' ? number() : word();
	}
}

// Return the json_parse function. It will have access to all of the above functions and variables.
module.exports = function (source, reviver) {
	var result;

	text = source;
	at = 0;
	ch = ' ';
	result = value();
	white();
	if (ch) {
		error('Syntax error');
	}

	// If there is a reviver function, we recursively walk the new structure,
	// passing each name/value pair to the reviver function for possible
	// transformation, starting with a temporary root object that holds the result
	// in an empty key. If there is not a reviver function, we simply return the
	// result.

	return typeof reviver === 'function' ? (function walk(holder, key) {
		var k;
		var v;
		var val = holder[key];
		if (val && typeof val === 'object') {
			for (k in value) {
				if (Object.prototype.hasOwnProperty.call(val, k)) {
					v = walk(val, k);
					if (typeof v === 'undefined') {
						delete val[k];
					} else {
						val[k] = v;
					}
				}
			}
		}
		return reviver.call(holder, key, val);
	}({ '': result }, '')) : result;
};

      };
    };
  }
  }
}, {package:"lavamoat>json-stable-stringify>jsonify",file:"node_modules\\jsonify\\lib\\parse.js",}],
["F:\\metamask-extension\\node_modules\\jsonify\\lib\\stringify.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonify%5Clib%5Cstringify.js
      return function (require, module, exports) {
'use strict';

var escapable = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
var gap;
var indent;
var meta = { // table of character substitutions
	'\b': '\\b',
	'\t': '\\t',
	'\n': '\\n',
	'\f': '\\f',
	'\r': '\\r',
	'"': '\\"',
	'\\': '\\\\'
};
var rep;

function quote(string) {
	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape sequences.

	escapable.lastIndex = 0;
	return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
		var c = meta[a];
		return typeof c === 'string' ? c
			: '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	}) + '"' : '"' + string + '"';
}

function str(key, holder) {
	// Produce a string from holder[key].
	var i; // The loop counter.
	var k; // The member key.
	var v; // The member value.
	var length;
	var mind = gap;
	var partial;
	var value = holder[key];

	// If the value has a toJSON method, call it to obtain a replacement value.
	if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
		value = value.toJSON(key);
	}

	// If we were called with a replacer function, then call the replacer to obtain a replacement value.
	if (typeof rep === 'function') {
		value = rep.call(holder, key, value);
	}

	// What happens next depends on the value's type.
	switch (typeof value) {
		case 'string':
			return quote(value);

		case 'number':
			// JSON numbers must be finite. Encode non-finite numbers as null.
			return isFinite(value) ? String(value) : 'null';

		case 'boolean':
		case 'null':
			// If the value is a boolean or null, convert it to a string. Note:
			// typeof null does not produce 'null'. The case is included here in
			// the remote chance that this gets fixed someday.
			return String(value);

		case 'object':
			if (!value) {
				return 'null';
			}
			gap += indent;
			partial = [];

			// Array.isArray
			if (Object.prototype.toString.apply(value) === '[object Array]') {
				length = value.length;
				for (i = 0; i < length; i += 1) {
					partial[i] = str(i, value) || 'null';
				}

				// Join all of the elements together, separated with commas, and wrap them in brackets.
				v = partial.length === 0 ? '[]' : gap
					? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
					: '[' + partial.join(',') + ']';
				gap = mind;
				return v;
			}

			// If the replacer is an array, use it to select the members to be stringified.
			if (rep && typeof rep === 'object') {
				length = rep.length;
				for (i = 0; i < length; i += 1) {
					k = rep[i];
					if (typeof k === 'string') {
						v = str(k, value);
						if (v) {
							partial.push(quote(k) + (gap ? ': ' : ':') + v);
						}
					}
				}
			} else {
				// Otherwise, iterate through all of the keys in the object.
				for (k in value) {
					if (Object.prototype.hasOwnProperty.call(value, k)) {
						v = str(k, value);
						if (v) {
							partial.push(quote(k) + (gap ? ': ' : ':') + v);
						}
					}
				}
			}

			// Join all of the member texts together, separated with commas, and wrap them in braces.

			v = partial.length === 0 ? '{}' : gap
				? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
				: '{' + partial.join(',') + '}';
			gap = mind;
			return v;
		default:
	}
}

module.exports = function (value, replacer, space) {
	var i;
	gap = '';
	indent = '';

	// If the space parameter is a number, make an indent string containing that many spaces.
	if (typeof space === 'number') {
		for (i = 0; i < space; i += 1) {
			indent += ' ';
		}
	} else if (typeof space === 'string') {
		// If the space parameter is a string, it will be used as the indent string.
		indent = space;
	}

	// If there is a replacer, it must be a function or an array. Otherwise, throw an error.
	rep = replacer;
	if (
		replacer
		&& typeof replacer !== 'function'
		&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')
	) {
		throw new Error('JSON.stringify');
	}

	// Make a fake root object containing our value under the key of ''.
	// Return the result of stringifying the value.
	return str('', { '': value });
};

      };
    };
  }
  }
}, {package:"lavamoat>json-stable-stringify>jsonify",file:"node_modules\\jsonify\\lib\\stringify.js",}],
["F:\\metamask-extension\\node_modules\\jsonschema\\lib\\attribute.js", {"./helpers":"F:\\metamask-extension\\node_modules\\jsonschema\\lib\\helpers.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonschema%5Clib%5Cattribute.js
      return function (require, module, exports) {
'use strict';

var helpers = require('./helpers');

/** @type ValidatorResult */
var ValidatorResult = helpers.ValidatorResult;
/** @type SchemaError */
var SchemaError = helpers.SchemaError;

var attribute = {};

attribute.ignoreProperties = {
  // informative properties
  'id': true,
  'default': true,
  'description': true,
  'title': true,
  // arguments to other properties
  'exclusiveMinimum': true,
  'exclusiveMaximum': true,
  'additionalItems': true,
  // special-handled properties
  '$schema': true,
  '$ref': true,
  'extends': true
};

/**
 * @name validators
 */
var validators = attribute.validators = {};

/**
 * Validates whether the instance if of a certain type
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */
validators.type = function validateType (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var types = Array.isArray(schema.type) ? schema.type : [schema.type];
  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
    var list = types.map(function (v) {
      return v.id && ('<' + v.id + '>') || (v+'');
    });
    result.addError({
      name: 'type',
      argument: list,
      message: "is not of a type(s) " + list,
    });
  }
  return result;
};

function testSchema(instance, options, ctx, callback, schema){
  var res = this.validateSchema(instance, schema, options, ctx);
  if (! res.valid && callback instanceof Function) {
    callback(res);
  }
  return res.valid;
}

/**
 * Validates whether the instance matches some of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */
validators.anyOf = function validateAnyOf (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var inner = new ValidatorResult(instance, schema, options, ctx);
  if (!Array.isArray(schema.anyOf)){
    throw new SchemaError("anyOf must be an array");
  }
  if (!schema.anyOf.some(
    testSchema.bind(
      this, instance, options, ctx, function(res){inner.importErrors(res);}
      ))) {
    var list = schema.anyOf.map(function (v, i) {
      return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
    });
    if (options.nestedErrors) {
      result.importErrors(inner);
    }
    result.addError({
      name: 'anyOf',
      argument: list,
      message: "is not any of " + list.join(','),
    });
  }
  return result;
};

/**
 * Validates whether the instance matches every given schema
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */
validators.allOf = function validateAllOf (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  if (!Array.isArray(schema.allOf)){
    throw new SchemaError("allOf must be an array");
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var self = this;
  schema.allOf.forEach(function(v, i){
    var valid = self.validateSchema(instance, v, options, ctx);
    if(!valid.valid){
      var msg = (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
      result.addError({
        name: 'allOf',
        argument: { id: msg, length: valid.errors.length, valid: valid },
        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',
      });
      result.importErrors(valid);
    }
  });
  return result;
};

/**
 * Validates whether the instance matches exactly one of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */
validators.oneOf = function validateOneOf (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  if (!Array.isArray(schema.oneOf)){
    throw new SchemaError("oneOf must be an array");
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var inner = new ValidatorResult(instance, schema, options, ctx);
  var count = schema.oneOf.filter(
    testSchema.bind(
      this, instance, options, ctx, function(res) {inner.importErrors(res);}
      ) ).length;
  var list = schema.oneOf.map(function (v, i) {
    return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
  });
  if (count!==1) {
    if (options.nestedErrors) {
      result.importErrors(inner);
    }
    result.addError({
      name: 'oneOf',
      argument: list,
      message: "is not exactly one from " + list.join(','),
    });
  }
  return result;
};

/**
 * Validates properties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.properties = function validateProperties (instance, schema, options, ctx) {
  if(instance === undefined || !(instance instanceof Object)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var properties = schema.properties || {};
  for (var property in properties) {
    if (typeof options.preValidateProperty == 'function') {
      options.preValidateProperty(instance, property, properties[property], options, ctx);
    }

    var prop = (instance || undefined) && instance[property];
    var res = this.validateSchema(prop, properties[property], options, ctx.makeChild(properties[property], property));
    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
    result.importErrors(res);
  }
  return result;
};

/**
 * Test a specific property within in instance against the additionalProperties schema attribute
 * This ignores properties with definitions in the properties schema attribute, but no other attributes.
 * If too many more types of property-existance tests pop up they may need their own class of tests (like `type` has)
 * @private
 * @return {boolean}
 */
function testAdditionalProperty (instance, schema, options, ctx, property, result) {
  if (schema.properties && schema.properties[property] !== undefined) {
    return;
  }
  if (schema.additionalProperties === false) {
    result.addError({
      name: 'additionalProperties',
      argument: property,
      message: "additionalProperty " + JSON.stringify(property) + " exists in instance when not allowed",
    });
  } else {
    var additionalProperties = schema.additionalProperties || {};

    if (typeof options.preValidateProperty == 'function') {
      options.preValidateProperty(instance, property, additionalProperties, options, ctx);
    }

    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
    result.importErrors(res);
  }
}

/**
 * Validates patternProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {
  if(instance === undefined) return;
  if(!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var patternProperties = schema.patternProperties || {};

  for (var property in instance) {
    var test = true;
    for (var pattern in patternProperties) {
      var expr = new RegExp(pattern);
      if (!expr.test(property)) {
        continue;
      }
      test = false;

      if (typeof options.preValidateProperty == 'function') {
        options.preValidateProperty(instance, property, patternProperties[pattern], options, ctx);
      }

      var res = this.validateSchema(instance[property], patternProperties[pattern], options, ctx.makeChild(patternProperties[pattern], property));
      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
      result.importErrors(res);
    }
    if (test) {
      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
    }
  }

  return result;
};

/**
 * Validates additionalProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {
  if(instance === undefined) return;
  if(!this.types.object(instance)) return;
  // if patternProperties is defined then we'll test when that one is called instead
  if (schema.patternProperties) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  for (var property in instance) {
    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
  }
  return result;
};

/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minProperties = function validateMinProperties (instance, schema, options, ctx) {
  if (!instance || typeof instance !== 'object') {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var keys = Object.keys(instance);
  if (!(keys.length >= schema.minProperties)) {
    result.addError({
      name: 'minProperties',
      argument: schema.minProperties,
      message: "does not meet minimum property length of " + schema.minProperties,
    })
  }
  return result;
};

/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {
  if (!instance || typeof instance !== 'object') {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var keys = Object.keys(instance);
  if (!(keys.length <= schema.maxProperties)) {
    result.addError({
      name: 'maxProperties',
      argument: schema.maxProperties,
      message: "does not meet maximum property length of " + schema.maxProperties,
    });
  }
  return result;
};

/**
 * Validates items when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.items = function validateItems (instance, schema, options, ctx) {
  if (!Array.isArray(instance)) {
    return null;
  }
  var self = this;
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (instance === undefined || !schema.items) {
    return result;
  }
  instance.every(function (value, i) {
    var items = Array.isArray(schema.items) ? (schema.items[i] || schema.additionalItems) : schema.items;
    if (items === undefined) {
      return true;
    }
    if (items === false) {
      result.addError({
        name: 'items',
        message: "additionalItems not permitted",
      });
      return false;
    }
    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;
    result.importErrors(res);
    return true;
  });
  return result;
};

/**
 * Validates minimum and exclusiveMinimum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minimum = function validateMinimum (instance, schema, options, ctx) {
  if (typeof instance !== 'number') {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var valid = true;
  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
    valid = instance > schema.minimum;
  } else {
    valid = instance >= schema.minimum;
  }
  if (!valid) {
    result.addError({
      name: 'minimum',
      argument: schema.minimum,
      message: "must have a minimum value of " + schema.minimum,
    });
  }
  return result;
};

/**
 * Validates maximum and exclusiveMaximum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maximum = function validateMaximum (instance, schema, options, ctx) {
  if (typeof instance !== 'number') {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var valid;
  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
    valid = instance < schema.maximum;
  } else {
    valid = instance <= schema.maximum;
  }
  if (!valid) {
    result.addError({
      name: 'maximum',
      argument: schema.maximum,
      message: "must have a maximum value of " + schema.maximum,
    });
  }
  return result;
};

/**
 * Perform validation for multipleOf and divisibleBy, which are essentially the same.
 * @param instance
 * @param schema
 * @param validationType
 * @param errorMessage
 * @returns {String|null}
 */
var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {
  if (typeof instance !== 'number') {
    return null;
  }

  var validationArgument = schema[validationType];
  if (validationArgument == 0) {
    throw new SchemaError(validationType + " cannot be zero");
  }

  var result = new ValidatorResult(instance, schema, options, ctx);

  var instanceDecimals = helpers.getDecimalPlaces(instance);
  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);

  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);
  var multiplier = Math.pow(10, maxDecimals);

  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
    result.addError({
      name: validationType,
      argument:  validationArgument,
      message: errorMessage + JSON.stringify(validationArgument)
    });
  }

  return result;
};

/**
 * Validates divisibleBy when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {
 return validateMultipleOfOrDivisbleBy(instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
};

/**
 * Validates multipleOf when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {
  return validateMultipleOfOrDivisbleBy(instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
};

/**
 * Validates whether the instance value is present.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.required = function validateRequired (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (instance === undefined && schema.required === true) {
    // A boolean form is implemented for reverse-compatability with schemas written against older drafts
    result.addError({
      name: 'required',
      message: "is required"
    });
  } else if (instance && typeof instance==='object' && Array.isArray(schema.required)) {
    schema.required.forEach(function(n){
      if(instance[n]===undefined){
        result.addError({
          name: 'required',
          argument: n,
          message: "requires property " + JSON.stringify(n),
        });
      }
    });
  }
  return result;
};

/**
 * Validates whether the instance value matches the regular expression, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.pattern = function validatePattern (instance, schema, options, ctx) {
  if (typeof instance !== 'string') {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!instance.match(schema.pattern)) {
    result.addError({
      name: 'pattern',
      argument: schema.pattern,
      message: "does not match pattern " + JSON.stringify(schema.pattern),
    });
  }
  return result;
};

/**
 * Validates whether the instance value is of a certain defined format or a custom
 * format.
 * The following formats are supported for string types:
 *   - date-time
 *   - date
 *   - time
 *   - ip-address
 *   - ipv6
 *   - uri
 *   - color
 *   - host-name
 *   - alpha
 *   - alpha-numeric
 *   - utc-millisec
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {String|null}
 */
validators.format = function validateFormat (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
    result.addError({
      name: 'format',
      argument: schema.format,
      message: "does not conform to the " + JSON.stringify(schema.format) + " format",
    });
  }
  return result;
};

/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minLength = function validateMinLength (instance, schema, options, ctx) {
  if (!(typeof instance === 'string')) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!(instance.length >= schema.minLength)) {
    result.addError({
      name: 'minLength',
      argument: schema.minLength,
      message: "does not meet minimum length of " + schema.minLength,
    });
  }
  return result;
};

/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maxLength = function validateMaxLength (instance, schema, options, ctx) {
  if (!(typeof instance === 'string')) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!(instance.length <= schema.maxLength)) {
    result.addError({
      name: 'maxLength',
      argument: schema.maxLength,
      message: "does not meet maximum length of " + schema.maxLength,
    });
  }
  return result;
};

/**
 * Validates whether instance contains at least a minimum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minItems = function validateMinItems (instance, schema, options, ctx) {
  if (!Array.isArray(instance)) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!(instance.length >= schema.minItems)) {
    result.addError({
      name: 'minItems',
      argument: schema.minItems,
      message: "does not meet minimum length of " + schema.minItems,
    });
  }
  return result;
};

/**
 * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maxItems = function validateMaxItems (instance, schema, options, ctx) {
  if (!Array.isArray(instance)) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!(instance.length <= schema.maxItems)) {
    result.addError({
      name: 'maxItems',
      argument: schema.maxItems,
      message: "does not meet maximum length of " + schema.maxItems,
    });
  }
  return result;
};

/**
 * Validates that every item in an instance array is unique, when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!Array.isArray(instance)) {
    return result;
  }
  function testArrays (v, i, a) {
    for (var j = i + 1; j < a.length; j++) if (helpers.deepCompareStrict(v, a[j])) {
      return false;
    }
    return true;
  }
  if (!instance.every(testArrays)) {
    result.addError({
      name: 'uniqueItems',
      message: "contains duplicate item",
    });
  }
  return result;
};

/**
 * Deep compares arrays for duplicates
 * @param v
 * @param i
 * @param a
 * @private
 * @return {boolean}
 */
function testArrays (v, i, a) {
  var j, len = a.length;
  for (j = i + 1, len; j < len; j++) {
    if (helpers.deepCompareStrict(v, a[j])) {
      return false;
    }
  }
  return true;
}

/**
 * Validates whether there are no duplicates, when the instance is an Array.
 * @param instance
 * @return {String|null}
 */
validators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {
  if (!Array.isArray(instance)) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!instance.every(testArrays)) {
    result.addError({
      name: 'uniqueItems',
      message: "contains duplicate item",
    });
  }
  return result;
};

/**
 * Validate for the presence of dependency properties, if the instance is an object.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */
validators.dependencies = function validateDependencies (instance, schema, options, ctx) {
  if (!instance || typeof instance != 'object') {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  for (var property in schema.dependencies) {
    if (instance[property] === undefined) {
      continue;
    }
    var dep = schema.dependencies[property];
    var childContext = ctx.makeChild(dep, property);
    if (typeof dep == 'string') {
      dep = [dep];
    }
    if (Array.isArray(dep)) {
      dep.forEach(function (prop) {
        if (instance[prop] === undefined) {
          result.addError({
            // FIXME there's two different "dependencies" errors here with slightly different outputs
            // Can we make these the same? Or should we create different error types?
            name: 'dependencies',
            argument: childContext.propertyPath,
            message: "property " + prop + " not found, required by " + childContext.propertyPath,
          });
        }
      });
    } else {
      var res = this.validateSchema(instance, dep, options, childContext);
      if(result.instance !== res.instance) result.instance = res.instance;
      if (res && res.errors.length) {
        result.addError({
          name: 'dependencies',
          argument: childContext.propertyPath,
          message: "does not meet dependency required by " + childContext.propertyPath,
        });
        result.importErrors(res);
      }
    }
  }
  return result;
};

/**
 * Validates whether the instance value is one of the enumerated values.
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */
validators['enum'] = function validateEnum (instance, schema, options, ctx) {
  if (!Array.isArray(schema['enum'])) {
    throw new SchemaError("enum expects an array", schema);
  }
  if (instance === undefined) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {
    result.addError({
      name: 'enum',
      argument: schema['enum'],
      message: "is not one of enum values: " + schema['enum'].join(','),
    });
  }
  return result;
};

/**
 * Validates whether the instance exactly matches a given value
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */
validators['const'] = function validateEnum (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!helpers.deepCompareStrict(schema['const'], instance)) {
    result.addError({
      name: 'const',
      argument: schema['const'],
      message: "does not exactly match expected constant: " + schema['const'],
    });
  }
  return result;
};

/**
 * Validates whether the instance if of a prohibited type.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */
validators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {
  var self = this;
  if(instance===undefined) return null;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var notTypes = schema.not || schema.disallow;
  if(!notTypes) return null;
  if(!Array.isArray(notTypes)) notTypes=[notTypes];
  notTypes.forEach(function (type) {
    if (self.testType(instance, schema, options, ctx, type)) {
      var schemaId = type && type.id && ('<' + type.id + '>') || type;
      result.addError({
        name: 'not',
        argument: schemaId,
        message: "is of prohibited type " + schemaId,
      });
    }
  });
  return result;
};

module.exports = attribute;

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/blockchain-link>ripple-lib>jsonschema",file:"node_modules\\jsonschema\\lib\\attribute.js",}],
["F:\\metamask-extension\\node_modules\\jsonschema\\lib\\helpers.js", {"url":"F:\\metamask-extension\\node_modules\\url\\url.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonschema%5Clib%5Chelpers.js
      return function (require, module, exports) {
'use strict';

var uri = require('url');

var ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, propertyPath, name, argument) {
  if (propertyPath) {
    this.property = propertyPath;
  }
  if (message) {
    this.message = message;
  }
  if (schema) {
    if (schema.id) {
      this.schema = schema.id;
    } else {
      this.schema = schema;
    }
  }
  if (instance) {
    this.instance = instance;
  }
  this.name = name;
  this.argument = argument;
  this.stack = this.toString();
};

ValidationError.prototype.toString = function toString() {
  return this.property + ' ' + this.message;
};

var ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {
  this.instance = instance;
  this.schema = schema;
  this.propertyPath = ctx.propertyPath;
  this.errors = [];
  this.throwError = options && options.throwError;
  this.disableFormat = options && options.disableFormat === true;
};

ValidatorResult.prototype.addError = function addError(detail) {
  var err;
  if (typeof detail == 'string') {
    err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);
  } else {
    if (!detail) throw new Error('Missing error detail');
    if (!detail.message) throw new Error('Missing error message');
    if (!detail.name) throw new Error('Missing validator type');
    err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);
  }

  if (this.throwError) {
    throw err;
  }
  this.errors.push(err);
  return err;
};

ValidatorResult.prototype.importErrors = function importErrors(res) {
  if (typeof res == 'string' || (res && res.validatorType)) {
    this.addError(res);
  } else if (res && res.errors) {
    Array.prototype.push.apply(this.errors, res.errors);
  }
};

function stringizer (v,i){
  return i+': '+v.toString()+'\n';
}
ValidatorResult.prototype.toString = function toString(res) {
  return this.errors.map(stringizer).join('');
};

Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
  return !this.errors.length;
} });

/**
 * Describes a problem with a Schema which prevents validation of an instance
 * @name SchemaError
 * @constructor
 */
var SchemaError = exports.SchemaError = function SchemaError (msg, schema) {
  this.message = msg;
  this.schema = schema;
  Error.call(this, msg);
  Error.captureStackTrace(this, SchemaError);
};
SchemaError.prototype = Object.create(Error.prototype,
  { constructor: {value: SchemaError, enumerable: false}
  , name: {value: 'SchemaError', enumerable: false}
  });

var SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, propertyPath, base, schemas) {
  this.schema = schema;
  this.options = options;
  this.propertyPath = propertyPath;
  this.base = base;
  this.schemas = schemas;
};

SchemaContext.prototype.resolve = function resolve (target) {
  return uri.resolve(this.base, target);
};

SchemaContext.prototype.makeChild = function makeChild(schema, propertyName){
  var propertyPath = (propertyName===undefined) ? this.propertyPath : this.propertyPath+makeSuffix(propertyName);
  var base = uri.resolve(this.base, schema.id||'');
  var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));
  if(schema.id && !ctx.schemas[base]){
    ctx.schemas[base] = schema;
  }
  return ctx;
}

var FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {
  'date-time': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
  'date': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,

  'email': /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
  'ipv6': /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
  'uri': /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,

  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,

  // hostname regex from: http://stackoverflow.com/a/1420225/5628
  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,

  'alpha': /^[a-zA-Z]+$/,
  'alphanumeric': /^[a-zA-Z0-9]+$/,
  'utc-millisec': function (input) {
    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
  },
  'regex': function (input) {
    var result = true;
    try {
      new RegExp(input);
    } catch (e) {
      result = false;
    }
    return result;
  },
  'style': /\s*(.+?):\s*([^;]+);?/g,
  'phone': /^\+(?:[0-9] ?){6,14}[0-9]$/
};

FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];

exports.isFormat = function isFormat (input, format, validator) {
  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {
    if (FORMAT_REGEXPS[format] instanceof RegExp) {
      return FORMAT_REGEXPS[format].test(input);
    }
    if (typeof FORMAT_REGEXPS[format] === 'function') {
      return FORMAT_REGEXPS[format](input);
    }
  } else if (validator && validator.customFormats &&
      typeof validator.customFormats[format] === 'function') {
    return validator.customFormats[format](input);
  }
  return true;
};

var makeSuffix = exports.makeSuffix = function makeSuffix (key) {
  key = key.toString();
  // This function could be capable of outputting valid a ECMAScript string, but the
  // resulting code for testing which form to use would be tens of thousands of characters long
  // That means this will use the name form for some illegal forms
  if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
    return '.' + key;
  }
  if (key.match(/^\d+$/)) {
    return '[' + key + ']';
  }
  return '[' + JSON.stringify(key) + ']';
};

exports.deepCompareStrict = function deepCompareStrict (a, b) {
  if (typeof a !== typeof b) {
    return false;
  }
  if (a instanceof Array) {
    if (!(b instanceof Array)) {
      return false;
    }
    if (a.length !== b.length) {
      return false;
    }
    return a.every(function (v, i) {
      return deepCompareStrict(a[i], b[i]);
    });
  }
  if (typeof a === 'object') {
    if (!a || !b) {
      return a === b;
    }
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) {
      return false;
    }
    return aKeys.every(function (v) {
      return deepCompareStrict(a[v], b[v]);
    });
  }
  return a === b;
};

function deepMerger (target, dst, e, i) {
  if (typeof e === 'object') {
    dst[i] = deepMerge(target[i], e)
  } else {
    if (target.indexOf(e) === -1) {
      dst.push(e)
    }
  }
}

function copyist (src, dst, key) {
  dst[key] = src[key];
}

function copyistWithDeepMerge (target, src, dst, key) {
  if (typeof src[key] !== 'object' || !src[key]) {
    dst[key] = src[key];
  }
  else {
    if (!target[key]) {
      dst[key] = src[key];
    } else {
      dst[key] = deepMerge(target[key], src[key])
    }
  }
}

function deepMerge (target, src) {
  var array = Array.isArray(src);
  var dst = array && [] || {};

  if (array) {
    target = target || [];
    dst = dst.concat(target);
    src.forEach(deepMerger.bind(null, target, dst));
  } else {
    if (target && typeof target === 'object') {
      Object.keys(target).forEach(copyist.bind(null, target, dst));
    }
    Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
  }

  return dst;
};

module.exports.deepMerge = deepMerge;

/**
 * Validates instance against the provided schema
 * Implements URI+JSON Pointer encoding, e.g. "%7e"="~0"=>"~", "~1"="%2f"=>"/"
 * @param o
 * @param s The path to walk o along
 * @return any
 */
exports.objectGetPath = function objectGetPath(o, s) {
  var parts = s.split('/').slice(1);
  var k;
  while (typeof (k=parts.shift()) == 'string') {
    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));
    if (!(n in o)) return;
    o = o[n];
  }
  return o;
};

function pathEncoder (v) {
  return '/'+encodeURIComponent(v).replace(/~/g,'%7E');
}
/**
 * Accept an Array of property names and return a JSON Pointer URI fragment
 * @param Array a
 * @return {String}
 */
exports.encodePath = function encodePointer(a){
	// ~ must be encoded explicitly because hacks
	// the slash is encoded by encodeURIComponent
	return a.map(pathEncoder).join('');
};


/**
 * Calculate the number of decimal places a number uses
 * We need this to get correct results out of multipleOf and divisibleBy
 * when either figure is has decimal places, due to IEEE-754 float issues.
 * @param number
 * @returns {number}
 */
exports.getDecimalPlaces = function getDecimalPlaces(number) {

  var decimalPlaces = 0;
  if (isNaN(number)) return decimalPlaces;

  if (typeof number !== 'number') {
    number = Number(number);
  }

  var parts = number.toString().split('e');
  if (parts.length === 2) {
    if (parts[1][0] !== '-') {
      return decimalPlaces;
    } else {
      decimalPlaces = Number(parts[1].slice(1));
    }
  }

  var decimalParts = parts[0].split('.');
  if (decimalParts.length === 2) {
    decimalPlaces += decimalParts[1].length;
  }

  return decimalPlaces;
};


      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/blockchain-link>ripple-lib>jsonschema",file:"node_modules\\jsonschema\\lib\\helpers.js",}],
["F:\\metamask-extension\\node_modules\\jsonschema\\lib\\index.js", {"./helpers":"F:\\metamask-extension\\node_modules\\jsonschema\\lib\\helpers.js","./validator":"F:\\metamask-extension\\node_modules\\jsonschema\\lib\\validator.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonschema%5Clib%5Cindex.js
      return function (require, module, exports) {
'use strict';

var Validator = module.exports.Validator = require('./validator');

module.exports.ValidatorResult = require('./helpers').ValidatorResult;
module.exports.ValidationError = require('./helpers').ValidationError;
module.exports.SchemaError = require('./helpers').SchemaError;

module.exports.validate = function (instance, schema, options) {
  var v = new Validator();
  return v.validate(instance, schema, options);
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/blockchain-link>ripple-lib>jsonschema",file:"node_modules\\jsonschema\\lib\\index.js",}],
["F:\\metamask-extension\\node_modules\\jsonschema\\lib\\validator.js", {"./attribute":"F:\\metamask-extension\\node_modules\\jsonschema\\lib\\attribute.js","./helpers":"F:\\metamask-extension\\node_modules\\jsonschema\\lib\\helpers.js","url":"F:\\metamask-extension\\node_modules\\url\\url.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cjsonschema%5Clib%5Cvalidator.js
      return function (require, module, exports) {
'use strict';

var urilib = require('url');

var attribute = require('./attribute');
var helpers = require('./helpers');
var ValidatorResult = helpers.ValidatorResult;
var SchemaError = helpers.SchemaError;
var SchemaContext = helpers.SchemaContext;

/**
 * Creates a new Validator object
 * @name Validator
 * @constructor
 */
var Validator = function Validator () {
  // Allow a validator instance to override global custom formats or to have their
  // own custom formats.
  this.customFormats = Object.create(Validator.prototype.customFormats);
  this.schemas = {};
  this.unresolvedRefs = [];

  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.
  this.types = Object.create(types);
  this.attributes = Object.create(attribute.validators);
};

// Allow formats to be registered globally.
Validator.prototype.customFormats = {};

// Hint at the presence of a property
Validator.prototype.schemas = null;
Validator.prototype.types = null;
Validator.prototype.attributes = null;
Validator.prototype.unresolvedRefs = null;

/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param schema
 * @param urn
 * @return {Object}
 */
Validator.prototype.addSchema = function addSchema (schema, uri) {
  if (!schema) {
    return null;
  }
  var ourUri = uri || schema.id;
  this.addSubSchema(ourUri, schema);
  if (ourUri) {
    this.schemas[ourUri] = schema;
  }
  return this.schemas[ourUri];
};

Validator.prototype.addSubSchema = function addSubSchema(baseuri, schema) {
  if(!schema || typeof schema!='object') return;
  // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined
  if(schema.$ref){
    var resolvedUri = urilib.resolve(baseuri, schema.$ref);
    // Only mark unknown schemas as unresolved
    if (this.schemas[resolvedUri] === undefined) {
      this.schemas[resolvedUri] = null;
      this.unresolvedRefs.push(resolvedUri);
    }
    return;
  }
  var ourUri = schema.id && urilib.resolve(baseuri, schema.id);
  var ourBase = ourUri || baseuri;
  if (ourUri) {
    if(this.schemas[ourUri]){
      if(!helpers.deepCompareStrict(this.schemas[ourUri], schema)){
        throw new Error('Schema <'+schema+'> already exists with different definition');
      }
      return this.schemas[ourUri];
    }
    this.schemas[ourUri] = schema;
    var documentUri = ourUri.replace(/^([^#]*)#$/, '$1');
    this.schemas[documentUri] = schema;
  }
  this.addSubSchemaArray(ourBase, ((schema.items instanceof Array)?schema.items:[schema.items]));
  this.addSubSchemaArray(ourBase, ((schema.extends instanceof Array)?schema.extends:[schema.extends]));
  this.addSubSchema(ourBase, schema.additionalItems);
  this.addSubSchemaObject(ourBase, schema.properties);
  this.addSubSchema(ourBase, schema.additionalProperties);
  this.addSubSchemaObject(ourBase, schema.definitions);
  this.addSubSchemaObject(ourBase, schema.patternProperties);
  this.addSubSchemaObject(ourBase, schema.dependencies);
  this.addSubSchemaArray(ourBase, schema.disallow);
  this.addSubSchemaArray(ourBase, schema.allOf);
  this.addSubSchemaArray(ourBase, schema.anyOf);
  this.addSubSchemaArray(ourBase, schema.oneOf);
  this.addSubSchema(ourBase, schema.not);
  return this.schemas[ourUri];
};

Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
  if(!(schemas instanceof Array)) return;
  for(var i=0; i<schemas.length; i++){
    this.addSubSchema(baseuri, schemas[i]);
  }
};

Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
  if(!schemas || typeof schemas!='object') return;
  for(var p in schemas){
    this.addSubSchema(baseuri, schemas[p]);
  }
};



/**
 * Sets all the schemas of the Validator instance.
 * @param schemas
 */
Validator.prototype.setSchemas = function setSchemas (schemas) {
  this.schemas = schemas;
};

/**
 * Returns the schema of a certain urn
 * @param urn
 */
Validator.prototype.getSchema = function getSchema (urn) {
  return this.schemas[urn];
};

/**
 * Validates instance against the provided schema
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {Array}
 */
Validator.prototype.validate = function validate (instance, schema, options, ctx) {
  if (!options) {
    options = {};
  }
  var propertyName = options.propertyName || 'instance';
  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI
  var base = urilib.resolve(options.base||'/', schema.id||'');
  if(!ctx){
    ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));
    if (!ctx.schemas[base]) {
      ctx.schemas[base] = schema;
    }
  }
  if (schema) {
    var result = this.validateSchema(instance, schema, options, ctx);
    if (!result) {
      throw new Error('Result undefined');
    }
    return result;
  }
  throw new SchemaError('no schema specified', schema);
};

/**
* @param Object schema
* @return mixed schema uri or false
*/
function shouldResolve(schema) {
  var ref = (typeof schema === 'string') ? schema : schema.$ref;
  if (typeof ref=='string') return ref;
  return false;
}

/**
 * Validates an instance against the schema (the actual work horse)
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @private
 * @return {ValidatorResult}
 */
Validator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!schema) {
    throw new Error("schema is undefined");
  }

  if (schema['extends']) {
    if (schema['extends'] instanceof Array) {
      var schemaobj = {schema: schema, ctx: ctx};
      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));
      schema = schemaobj.schema;
      schemaobj.schema = null;
      schemaobj.ctx = null;
      schemaobj = null;
    } else {
      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));
    }
  }

  var switchSchema;
  if (switchSchema = shouldResolve(schema)) {
    var resolved = this.resolve(schema, switchSchema, ctx);
    var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);
    return this.validateSchema(instance, resolved.subschema, options, subctx);
  }

  var skipAttributes = options && options.skipAttributes || [];
  // Validate each schema attribute against the instance
  for (var key in schema) {
    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
      var validatorErr = null;
      var validator = this.attributes[key];
      if (validator) {
        validatorErr = validator.call(this, instance, schema, options, ctx);
      } else if (options.allowUnknownAttributes === false) {
        // This represents an error with the schema itself, not an invalid instance
        throw new SchemaError("Unsupported attribute: " + key, schema);
      }
      if (validatorErr) {
        result.importErrors(validatorErr);
      }
    }
  }

  if (typeof options.rewrite == 'function') {
    var value = options.rewrite.call(this, instance, schema, options, ctx);
    result.instance = value;
  }
  return result;
};

/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/
Validator.prototype.schemaTraverser = function schemaTraverser (schemaobj, s) {
  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
}

/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/
Validator.prototype.superResolve = function superResolve (schema, ctx) {
  var ref;
  if(ref = shouldResolve(schema)) {
    return this.resolve(schema, ref, ctx).subschema;
  }
  return schema;
}

/**
* @private
* @param Object schema
* @param Object switchSchema
* @param SchemaContext ctx
* @return Object resolved schemas {subschema:String, switchSchema: String}
* @throws SchemaError
*/
Validator.prototype.resolve = function resolve (schema, switchSchema, ctx) {
  switchSchema = ctx.resolve(switchSchema);
  // First see if the schema exists under the provided URI
  if (ctx.schemas[switchSchema]) {
    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};
  }
  // Else try walking the property pointer
  var parsed = urilib.parse(switchSchema);
  var fragment = parsed && parsed.hash;
  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
  if (!document || !ctx.schemas[document]) {
    throw new SchemaError("no such schema <" + switchSchema + ">", schema);
  }
  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
  if(subschema===undefined){
    throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
  }
  return {subschema: subschema, switchSchema: switchSchema};
};

/**
 * Tests whether the instance if of a certain type.
 * @private
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @param type
 * @return {boolean}
 */
Validator.prototype.testType = function validateType (instance, schema, options, ctx, type) {
  if (typeof this.types[type] == 'function') {
    return this.types[type].call(this, instance);
  }
  if (type && typeof type == 'object') {
    var res = this.validateSchema(instance, type, options, ctx);
    return res === undefined || !(res && res.errors.length);
  }
  // Undefined or properties not on the list are acceptable, same as not being defined
  return true;
};

var types = Validator.prototype.types = {};
types.string = function testString (instance) {
  return typeof instance == 'string';
};
types.number = function testNumber (instance) {
  // isFinite returns false for NaN, Infinity, and -Infinity
  return typeof instance == 'number' && isFinite(instance);
};
types.integer = function testInteger (instance) {
  return (typeof instance == 'number') && instance % 1 === 0;
};
types.boolean = function testBoolean (instance) {
  return typeof instance == 'boolean';
};
types.array = function testArray (instance) {
  return Array.isArray(instance);
};
types['null'] = function testNull (instance) {
  return instance === null;
};
types.date = function testDate (instance) {
  return instance instanceof Date;
};
types.any = function testAny (instance) {
  return true;
};
types.object = function testObject (instance) {
  // TODO: fix this - see #15
  return instance && (typeof instance) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);
};

module.exports = Validator;

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/blockchain-link>ripple-lib>jsonschema",file:"node_modules\\jsonschema\\lib\\validator.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\_baseInRange.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5C_baseInRange.js
      return function (require, module, exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * The base implementation of `_.inRange` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */
function baseInRange(number, start, end) {
  return number >= nativeMin(start, end) && number < nativeMax(start, end);
}

module.exports = baseInRange;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\_baseInRange.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\_baseTrim.js", {"./_trimmedEndIndex":"F:\\metamask-extension\\node_modules\\lodash\\_trimmedEndIndex.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5C_baseTrim.js
      return function (require, module, exports) {
var trimmedEndIndex = require('./_trimmedEndIndex');

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\_baseTrim.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\_trimmedEndIndex.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5C_trimmedEndIndex.js
      return function (require, module, exports) {
/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\_trimmedEndIndex.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\inRange.js", {"./_baseInRange":"F:\\metamask-extension\\node_modules\\lodash\\_baseInRange.js","./toFinite":"F:\\metamask-extension\\node_modules\\lodash\\toFinite.js","./toNumber":"F:\\metamask-extension\\node_modules\\lodash\\toNumber.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5CinRange.js
      return function (require, module, exports) {
var baseInRange = require('./_baseInRange'),
    toFinite = require('./toFinite'),
    toNumber = require('./toNumber');

/**
 * Checks if `n` is between `start` and up to, but not including, `end`. If
 * `end` is not specified, it's set to `start` with `start` then set to `0`.
 * If `start` is greater than `end` the params are swapped to support
 * negative ranges.
 *
 * @static
 * @memberOf _
 * @since 3.3.0
 * @category Number
 * @param {number} number The number to check.
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 * @see _.range, _.rangeRight
 * @example
 *
 * _.inRange(3, 2, 4);
 * // => true
 *
 * _.inRange(4, 8);
 * // => true
 *
 * _.inRange(4, 2);
 * // => false
 *
 * _.inRange(2, 2);
 * // => false
 *
 * _.inRange(1.2, 2);
 * // => true
 *
 * _.inRange(5.2, 4);
 * // => false
 *
 * _.inRange(-3, -2, -6);
 * // => true
 */
function inRange(number, start, end) {
  start = toFinite(start);
  if (end === undefined) {
    end = start;
    start = 0;
  } else {
    end = toFinite(end);
  }
  number = toNumber(number);
  return baseInRange(number, start, end);
}

module.exports = inRange;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\inRange.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\isEmpty.js", {"./_baseKeys":"F:\\metamask-extension\\node_modules\\lodash\\_baseKeys.js","./_getTag":"F:\\metamask-extension\\node_modules\\lodash\\_getTag.js","./_isPrototype":"F:\\metamask-extension\\node_modules\\lodash\\_isPrototype.js","./isArguments":"F:\\metamask-extension\\node_modules\\lodash\\isArguments.js","./isArray":"F:\\metamask-extension\\node_modules\\lodash\\isArray.js","./isArrayLike":"F:\\metamask-extension\\node_modules\\lodash\\isArrayLike.js","./isBuffer":"F:\\metamask-extension\\node_modules\\lodash\\isBuffer.js","./isTypedArray":"F:\\metamask-extension\\node_modules\\lodash\\isTypedArray.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5CisEmpty.js
      return function (require, module, exports) {
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isPrototype = require('./_isPrototype'),
    isTypedArray = require('./isTypedArray');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\isEmpty.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\isInteger.js", {"./toInteger":"F:\\metamask-extension\\node_modules\\lodash\\toInteger.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5CisInteger.js
      return function (require, module, exports) {
var toInteger = require('./toInteger');

/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */
function isInteger(value) {
  return typeof value == 'number' && value == toInteger(value);
}

module.exports = isInteger;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\isInteger.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\toFinite.js", {"./toNumber":"F:\\metamask-extension\\node_modules\\lodash\\toNumber.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5CtoFinite.js
      return function (require, module, exports) {
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\toFinite.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\toInteger.js", {"./toFinite":"F:\\metamask-extension\\node_modules\\lodash\\toFinite.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5CtoInteger.js
      return function (require, module, exports) {
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\toInteger.js",}],
["F:\\metamask-extension\\node_modules\\lodash\\toNumber.js", {"./_baseTrim":"F:\\metamask-extension\\node_modules\\lodash\\_baseTrim.js","./isObject":"F:\\metamask-extension\\node_modules\\lodash\\isObject.js","./isSymbol":"F:\\metamask-extension\\node_modules\\lodash\\isSymbol.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clodash%5CtoNumber.js
      return function (require, module, exports) {
var baseTrim = require('./_baseTrim'),
    isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

      };
    };
  }
  }
}, {package:"lodash",file:"node_modules\\lodash\\toNumber.js",}],
["F:\\metamask-extension\\node_modules\\long\\src\\long.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Clong%5Csrc%5Clong.js
      return function (require, module, exports) {
module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>long",file:"node_modules\\long\\src\\long.js",}],
["F:\\metamask-extension\\node_modules\\multibase\\src\\base.js", {"./util":"F:\\metamask-extension\\node_modules\\multibase\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmultibase%5Csrc%5Cbase.js
      return function (require, module, exports) {
'use strict'

const { encodeText } = require('./util')

/** @typedef {__import__('./types').CodecFactory} CodecFactory */
/** @typedef {__import__("./types").BaseName} BaseName */
/** @typedef {__import__("./types").BaseCode} BaseCode */

/**
 * Class to encode/decode in the supported Bases
 *
 */
class Base {
  /**
   * @param {BaseName} name
   * @param {BaseCode} code
   * @param {CodecFactory} factory
   * @param {string} alphabet
   */
  constructor (name, code, factory, alphabet) {
    this.name = name
    this.code = code
    this.codeBuf = encodeText(this.code)
    this.alphabet = alphabet
    this.codec = factory(alphabet)
  }

  /**
   * @param {Uint8Array} buf
   * @returns {string}
   */
  encode (buf) {
    return this.codec.encode(buf)
  }

  /**
   * @param {string} string
   * @returns {Uint8Array}
   */
  decode (string) {
    for (const char of string) {
      if (this.alphabet && this.alphabet.indexOf(char) < 0) {
        throw new Error(`invalid character '${char}' in '${string}'`)
      }
    }
    return this.codec.decode(string)
  }
}

module.exports = Base

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multibase",file:"node_modules\\multibase\\src\\base.js",}],
["F:\\metamask-extension\\node_modules\\multibase\\src\\constants.js", {"./base.js":"F:\\metamask-extension\\node_modules\\multibase\\src\\base.js","./rfc4648":"F:\\metamask-extension\\node_modules\\multibase\\src\\rfc4648.js","./util":"F:\\metamask-extension\\node_modules\\multibase\\src\\util.js","@multiformats/base-x":"F:\\metamask-extension\\node_modules\\@multiformats\\base-x\\src\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmultibase%5Csrc%5Cconstants.js
      return function (require, module, exports) {
'use strict'

const baseX = require('@multiformats/base-x')
const Base = require('./base.js')
const { rfc4648 } = require('./rfc4648')
const { decodeText, encodeText } = require('./util')

/** @typedef {__import__('./types').CodecFactory} CodecFactory */
/** @typedef {__import__('./types').Codec} Codec */
/** @typedef {__import__('./types').BaseName} BaseName */
/** @typedef {__import__('./types').BaseCode} BaseCode */

/** @type {CodecFactory} */
const identity = () => {
  return {
    encode: decodeText,
    decode: encodeText
  }
}

/**
 *
 * name, code, implementation, alphabet
 *
 * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}
 */
const constants = [
  ['identity', '\x00', identity, ''],
  ['base2', '0', rfc4648(1), '01'],
  ['base8', '7', rfc4648(3), '01234567'],
  ['base10', '9', baseX, '0123456789'],
  ['base16', 'f', rfc4648(4), '0123456789abcdef'],
  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],
  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],
  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],
  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],
  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],
  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],
  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],
  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],
  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],
  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],
  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],
  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],
  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
]

/** @type {Record<BaseName,Base>} */
const names = constants.reduce((prev, tupple) => {
  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])
  return prev
}, /** @type {Record<BaseName,Base>} */({}))

/** @type {Record<BaseCode,Base>} */
const codes = constants.reduce((prev, tupple) => {
  prev[tupple[1]] = names[tupple[0]]
  return prev
}, /** @type {Record<BaseCode,Base>} */({}))

module.exports = {
  names,
  codes
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multibase",file:"node_modules\\multibase\\src\\constants.js",}],
["F:\\metamask-extension\\node_modules\\multibase\\src\\index.js", {"./constants":"F:\\metamask-extension\\node_modules\\multibase\\src\\constants.js","./util":"F:\\metamask-extension\\node_modules\\multibase\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmultibase%5Csrc%5Cindex.js
      return function (require, module, exports) {
/**
 * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
 *
 */
'use strict'

const constants = require('./constants')
const { encodeText, decodeText, concat } = require('./util')

/** @typedef {__import__('./base')} Base */
/** @typedef {__import__("./types").BaseNameOrCode} BaseNameOrCode */
/** @typedef {__import__("./types").BaseCode} BaseCode */
/** @typedef {__import__("./types").BaseName} BaseName */

/**
 * Create a new Uint8Array with the multibase varint+code.
 *
 * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
 * @param {Uint8Array} buf - The data to be prefixed with multibase.
 * @returns {Uint8Array}
 * @throws {Error} Will throw if the encoding is not supported
 */
function multibase (nameOrCode, buf) {
  if (!buf) {
    throw new Error('requires an encoded Uint8Array')
  }
  const { name, codeBuf } = encoding(nameOrCode)
  validEncode(name, buf)

  return concat([codeBuf, buf], codeBuf.length + buf.length)
}

/**
 * Encode data with the specified base and add the multibase prefix.
 *
 * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
 * @param {Uint8Array} buf - The data to be encoded.
 * @returns {Uint8Array}
 * @throws {Error} Will throw if the encoding is not supported
 *
 */
function encode (nameOrCode, buf) {
  const enc = encoding(nameOrCode)
  const data = encodeText(enc.encode(buf))

  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)
}

/**
 * Takes a Uint8Array or string encoded with multibase header, decodes it and
 * returns the decoded buffer
 *
 * @param {Uint8Array|string} data
 * @returns {Uint8Array}
 * @throws {Error} Will throw if the encoding is not supported
 *
 */
function decode (data) {
  if (data instanceof Uint8Array) {
    data = decodeText(data)
  }
  const prefix = data[0]

  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet
  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {
    data = data.toLowerCase()
  }
  const enc = encoding(/** @type {BaseCode} */(data[0]))
  return enc.decode(data.substring(1))
}

/**
 * Is the given data multibase encoded?
 *
 * @param {Uint8Array|string} data
 */
function isEncoded (data) {
  if (data instanceof Uint8Array) {
    data = decodeText(data)
  }

  // Ensure bufOrString is a string
  if (Object.prototype.toString.call(data) !== '[object String]') {
    return false
  }

  try {
    const enc = encoding(/** @type {BaseCode} */(data[0]))
    return enc.name
  } catch (err) {
    return false
  }
}

/**
 * Validate encoded data
 *
 * @param {BaseNameOrCode} name
 * @param {Uint8Array} buf
 * @returns {void}
 * @throws {Error} Will throw if the encoding is not supported
 */
function validEncode (name, buf) {
  const enc = encoding(name)
  enc.decode(decodeText(buf))
}

/**
 * Get the encoding by name or code
 *
 * @param {BaseNameOrCode} nameOrCode
 * @returns {Base}
 * @throws {Error} Will throw if the encoding is not supported
 */
function encoding (nameOrCode) {
  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {
    return constants.names[/** @type {BaseName} */(nameOrCode)]
  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {
    return constants.codes[/** @type {BaseCode} */(nameOrCode)]
  } else {
    throw new Error(`Unsupported encoding: ${nameOrCode}`)
  }
}

/**
 * Get encoding from data
 *
 * @param {string|Uint8Array} data
 * @returns {Base}
 * @throws {Error} Will throw if the encoding is not supported
 */
function encodingFromData (data) {
  if (data instanceof Uint8Array) {
    data = decodeText(data)
  }

  return encoding(/** @type {BaseCode} */(data[0]))
}

exports = module.exports = multibase
exports.encode = encode
exports.decode = decode
exports.isEncoded = isEncoded
exports.encoding = encoding
exports.encodingFromData = encodingFromData
const names = Object.freeze(constants.names)
const codes = Object.freeze(constants.codes)
exports.names = names
exports.codes = codes

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multibase",file:"node_modules\\multibase\\src\\index.js",}],
["F:\\metamask-extension\\node_modules\\multibase\\src\\rfc4648.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmultibase%5Csrc%5Crfc4648.js
      return function (require, module, exports) {
'use strict'

/** @typedef {__import__('./types').CodecFactory} CodecFactory */

/**
 * @param {string} string
 * @param {string} alphabet
 * @param {number} bitsPerChar
 * @returns {Uint8Array}
 */
const decode = (string, alphabet, bitsPerChar) => {
  // Build the character lookup table:
  /** @type {Record<string, number>} */
  const codes = {}
  for (let i = 0; i < alphabet.length; ++i) {
    codes[alphabet[i]] = i
  }

  // Count the padding bytes:
  let end = string.length
  while (string[end - 1] === '=') {
    --end
  }

  // Allocate the output:
  const out = new Uint8Array((end * bitsPerChar / 8) | 0)

  // Parse the data:
  let bits = 0 // Number of bits currently in the buffer
  let buffer = 0 // Bits waiting to be written out, MSB first
  let written = 0 // Next byte to write
  for (let i = 0; i < end; ++i) {
    // Read one character from the string:
    const value = codes[string[i]]
    if (value === undefined) {
      throw new SyntaxError('Invalid character ' + string[i])
    }

    // Append the bits to the buffer:
    buffer = (buffer << bitsPerChar) | value
    bits += bitsPerChar

    // Write out some bits if the buffer has a byte's worth:
    if (bits >= 8) {
      bits -= 8
      out[written++] = 0xff & (buffer >> bits)
    }
  }

  // Verify that we have received just enough bits:
  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
    throw new SyntaxError('Unexpected end of data')
  }

  return out
}

/**
 * @param {Uint8Array} data
 * @param {string} alphabet
 * @param {number} bitsPerChar
 * @returns {string}
 */
const encode = (data, alphabet, bitsPerChar) => {
  const pad = alphabet[alphabet.length - 1] === '='
  const mask = (1 << bitsPerChar) - 1
  let out = ''

  let bits = 0 // Number of bits currently in the buffer
  let buffer = 0 // Bits waiting to be written out, MSB first
  for (let i = 0; i < data.length; ++i) {
    // Slurp data into the buffer:
    buffer = (buffer << 8) | data[i]
    bits += 8

    // Write out as much as we can:
    while (bits > bitsPerChar) {
      bits -= bitsPerChar
      out += alphabet[mask & (buffer >> bits)]
    }
  }

  // Partial character:
  if (bits) {
    out += alphabet[mask & (buffer << (bitsPerChar - bits))]
  }

  // Add padding characters until we hit a byte boundary:
  if (pad) {
    while ((out.length * bitsPerChar) & 7) {
      out += '='
    }
  }

  return out
}

/**
 * RFC4648 Factory
 *
 * @param {number} bitsPerChar
 * @returns {CodecFactory}
 */
const rfc4648 = (bitsPerChar) => (alphabet) => {
  return {
    /**
     * @param {Uint8Array} input
     * @returns {string}
     */
    encode (input) {
      return encode(input, alphabet, bitsPerChar)
    },
    /**
     * @param {string} input
     * @returns {Uint8Array}
     */
    decode (input) {
      return decode(input, alphabet, bitsPerChar)
    }
  }
}

module.exports = { rfc4648 }

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multibase",file:"node_modules\\multibase\\src\\rfc4648.js",}],
["F:\\metamask-extension\\node_modules\\multibase\\src\\util.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmultibase%5Csrc%5Cutil.js
      return function (require, module, exports) {
'use strict'

const textDecoder = new TextDecoder()
/**
 * @param {ArrayBufferView|ArrayBuffer} bytes
 * @returns {string}
 */
const decodeText = (bytes) => textDecoder.decode(bytes)

const textEncoder = new TextEncoder()
/**
 * @param {string} text
 * @returns {Uint8Array}
 */
const encodeText = (text) => textEncoder.encode(text)

/**
 * Returns a new Uint8Array created by concatenating the passed Arrays
 *
 * @param {Array<ArrayLike<number>>} arrs
 * @param {number} length
 * @returns {Uint8Array}
 */
function concat (arrs, length) {
  const output = new Uint8Array(length)
  let offset = 0

  for (const arr of arrs) {
    output.set(arr, offset)
    offset += arr.length
  }

  return output
}

module.exports = { decodeText, encodeText, concat }

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multibase",file:"node_modules\\multibase\\src\\util.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\decode.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Cnode_modules%5Cvarint%5Cdecode.js
      return function (require, module, exports) {
module.exports = read

var MSB = 0x80
  , REST = 0x7F

function read(buf, offset) {
  var res    = 0
    , offset = offset || 0
    , shift  = 0
    , counter = offset
    , b
    , l = buf.length

  do {
    if (counter >= l || shift > 49) {
      read.bytes = 0
      throw new RangeError('Could not decode varint')
    }
    b = buf[counter++]
    res += shift < 28
      ? (b & REST) << shift
      : (b & REST) * Math.pow(2, shift)
    shift += 7
  } while (b >= MSB)

  read.bytes = counter - offset

  return res
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec>varint",file:"node_modules\\multicodec\\node_modules\\varint\\decode.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\encode.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Cnode_modules%5Cvarint%5Cencode.js
      return function (require, module, exports) {
module.exports = encode

var MSB = 0x80
  , REST = 0x7F
  , MSBALL = ~REST
  , INT = Math.pow(2, 31)

function encode(num, out, offset) {
  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
    encode.bytes = 0
    throw new RangeError('Could not encode varint')
  }
  out = out || []
  offset = offset || 0
  var oldOffset = offset

  while(num >= INT) {
    out[offset++] = (num & 0xFF) | MSB
    num /= 128
  }
  while(num & MSBALL) {
    out[offset++] = (num & 0xFF) | MSB
    num >>>= 7
  }
  out[offset] = num | 0
  
  encode.bytes = offset - oldOffset + 1
  
  return out
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec>varint",file:"node_modules\\multicodec\\node_modules\\varint\\encode.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\index.js", {"./decode.js":"F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\decode.js","./encode.js":"F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\encode.js","./length.js":"F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\length.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Cnode_modules%5Cvarint%5Cindex.js
      return function (require, module, exports) {
module.exports = {
    encode: require('./encode.js')
  , decode: require('./decode.js')
  , encodingLength: require('./length.js')
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec>varint",file:"node_modules\\multicodec\\node_modules\\varint\\index.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\length.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Cnode_modules%5Cvarint%5Clength.js
      return function (require, module, exports) {

var N1 = Math.pow(2,  7)
var N2 = Math.pow(2, 14)
var N3 = Math.pow(2, 21)
var N4 = Math.pow(2, 28)
var N5 = Math.pow(2, 35)
var N6 = Math.pow(2, 42)
var N7 = Math.pow(2, 49)
var N8 = Math.pow(2, 56)
var N9 = Math.pow(2, 63)

module.exports = function (value) {
  return (
    value < N1 ? 1
  : value < N2 ? 2
  : value < N3 ? 3
  : value < N4 ? 4
  : value < N5 ? 5
  : value < N6 ? 6
  : value < N7 ? 7
  : value < N8 ? 8
  : value < N9 ? 9
  :              10
  )
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec>varint",file:"node_modules\\multicodec\\node_modules\\varint\\length.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\src\\generated-table.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Csrc%5Cgenerated-table.js
      return function (require, module, exports) {
// DO NOT CHANGE THIS FILE. IT IS GENERATED BY tools/update-table.js
/* eslint quote-props: off */
'use strict'

/**
 * @type {__import__('./generated-types').NameCodeMap}
 */
const baseTable = Object.freeze({
  'identity': 0x00,
  'cidv1': 0x01,
  'cidv2': 0x02,
  'cidv3': 0x03,
  'ip4': 0x04,
  'tcp': 0x06,
  'sha1': 0x11,
  'sha2-256': 0x12,
  'sha2-512': 0x13,
  'sha3-512': 0x14,
  'sha3-384': 0x15,
  'sha3-256': 0x16,
  'sha3-224': 0x17,
  'shake-128': 0x18,
  'shake-256': 0x19,
  'keccak-224': 0x1a,
  'keccak-256': 0x1b,
  'keccak-384': 0x1c,
  'keccak-512': 0x1d,
  'blake3': 0x1e,
  'dccp': 0x21,
  'murmur3-128': 0x22,
  'murmur3-32': 0x23,
  'ip6': 0x29,
  'ip6zone': 0x2a,
  'path': 0x2f,
  'multicodec': 0x30,
  'multihash': 0x31,
  'multiaddr': 0x32,
  'multibase': 0x33,
  'dns': 0x35,
  'dns4': 0x36,
  'dns6': 0x37,
  'dnsaddr': 0x38,
  'protobuf': 0x50,
  'cbor': 0x51,
  'raw': 0x55,
  'dbl-sha2-256': 0x56,
  'rlp': 0x60,
  'bencode': 0x63,
  'dag-pb': 0x70,
  'dag-cbor': 0x71,
  'libp2p-key': 0x72,
  'git-raw': 0x78,
  'torrent-info': 0x7b,
  'torrent-file': 0x7c,
  'leofcoin-block': 0x81,
  'leofcoin-tx': 0x82,
  'leofcoin-pr': 0x83,
  'sctp': 0x84,
  'dag-jose': 0x85,
  'dag-cose': 0x86,
  'eth-block': 0x90,
  'eth-block-list': 0x91,
  'eth-tx-trie': 0x92,
  'eth-tx': 0x93,
  'eth-tx-receipt-trie': 0x94,
  'eth-tx-receipt': 0x95,
  'eth-state-trie': 0x96,
  'eth-account-snapshot': 0x97,
  'eth-storage-trie': 0x98,
  'bitcoin-block': 0xb0,
  'bitcoin-tx': 0xb1,
  'bitcoin-witness-commitment': 0xb2,
  'zcash-block': 0xc0,
  'zcash-tx': 0xc1,
  'docid': 0xce,
  'stellar-block': 0xd0,
  'stellar-tx': 0xd1,
  'md4': 0xd4,
  'md5': 0xd5,
  'bmt': 0xd6,
  'decred-block': 0xe0,
  'decred-tx': 0xe1,
  'ipld-ns': 0xe2,
  'ipfs-ns': 0xe3,
  'swarm-ns': 0xe4,
  'ipns-ns': 0xe5,
  'zeronet': 0xe6,
  'secp256k1-pub': 0xe7,
  'bls12_381-g1-pub': 0xea,
  'bls12_381-g2-pub': 0xeb,
  'x25519-pub': 0xec,
  'ed25519-pub': 0xed,
  'bls12_381-g1g2-pub': 0xee,
  'dash-block': 0xf0,
  'dash-tx': 0xf1,
  'swarm-manifest': 0xfa,
  'swarm-feed': 0xfb,
  'udp': 0x0111,
  'p2p-webrtc-star': 0x0113,
  'p2p-webrtc-direct': 0x0114,
  'p2p-stardust': 0x0115,
  'p2p-circuit': 0x0122,
  'dag-json': 0x0129,
  'udt': 0x012d,
  'utp': 0x012e,
  'unix': 0x0190,
  'thread': 0x0196,
  'p2p': 0x01a5,
  'ipfs': 0x01a5,
  'https': 0x01bb,
  'onion': 0x01bc,
  'onion3': 0x01bd,
  'garlic64': 0x01be,
  'garlic32': 0x01bf,
  'tls': 0x01c0,
  'quic': 0x01cc,
  'ws': 0x01dd,
  'wss': 0x01de,
  'p2p-websocket-star': 0x01df,
  'http': 0x01e0,
  'json': 0x0200,
  'messagepack': 0x0201,
  'libp2p-peer-record': 0x0301,
  'sha2-256-trunc254-padded': 0x1012,
  'ripemd-128': 0x1052,
  'ripemd-160': 0x1053,
  'ripemd-256': 0x1054,
  'ripemd-320': 0x1055,
  'x11': 0x1100,
  'p256-pub': 0x1200,
  'p384-pub': 0x1201,
  'p521-pub': 0x1202,
  'ed448-pub': 0x1203,
  'x448-pub': 0x1204,
  'ed25519-priv': 0x1300,
  'kangarootwelve': 0x1d01,
  'sm3-256': 0x534d,
  'blake2b-8': 0xb201,
  'blake2b-16': 0xb202,
  'blake2b-24': 0xb203,
  'blake2b-32': 0xb204,
  'blake2b-40': 0xb205,
  'blake2b-48': 0xb206,
  'blake2b-56': 0xb207,
  'blake2b-64': 0xb208,
  'blake2b-72': 0xb209,
  'blake2b-80': 0xb20a,
  'blake2b-88': 0xb20b,
  'blake2b-96': 0xb20c,
  'blake2b-104': 0xb20d,
  'blake2b-112': 0xb20e,
  'blake2b-120': 0xb20f,
  'blake2b-128': 0xb210,
  'blake2b-136': 0xb211,
  'blake2b-144': 0xb212,
  'blake2b-152': 0xb213,
  'blake2b-160': 0xb214,
  'blake2b-168': 0xb215,
  'blake2b-176': 0xb216,
  'blake2b-184': 0xb217,
  'blake2b-192': 0xb218,
  'blake2b-200': 0xb219,
  'blake2b-208': 0xb21a,
  'blake2b-216': 0xb21b,
  'blake2b-224': 0xb21c,
  'blake2b-232': 0xb21d,
  'blake2b-240': 0xb21e,
  'blake2b-248': 0xb21f,
  'blake2b-256': 0xb220,
  'blake2b-264': 0xb221,
  'blake2b-272': 0xb222,
  'blake2b-280': 0xb223,
  'blake2b-288': 0xb224,
  'blake2b-296': 0xb225,
  'blake2b-304': 0xb226,
  'blake2b-312': 0xb227,
  'blake2b-320': 0xb228,
  'blake2b-328': 0xb229,
  'blake2b-336': 0xb22a,
  'blake2b-344': 0xb22b,
  'blake2b-352': 0xb22c,
  'blake2b-360': 0xb22d,
  'blake2b-368': 0xb22e,
  'blake2b-376': 0xb22f,
  'blake2b-384': 0xb230,
  'blake2b-392': 0xb231,
  'blake2b-400': 0xb232,
  'blake2b-408': 0xb233,
  'blake2b-416': 0xb234,
  'blake2b-424': 0xb235,
  'blake2b-432': 0xb236,
  'blake2b-440': 0xb237,
  'blake2b-448': 0xb238,
  'blake2b-456': 0xb239,
  'blake2b-464': 0xb23a,
  'blake2b-472': 0xb23b,
  'blake2b-480': 0xb23c,
  'blake2b-488': 0xb23d,
  'blake2b-496': 0xb23e,
  'blake2b-504': 0xb23f,
  'blake2b-512': 0xb240,
  'blake2s-8': 0xb241,
  'blake2s-16': 0xb242,
  'blake2s-24': 0xb243,
  'blake2s-32': 0xb244,
  'blake2s-40': 0xb245,
  'blake2s-48': 0xb246,
  'blake2s-56': 0xb247,
  'blake2s-64': 0xb248,
  'blake2s-72': 0xb249,
  'blake2s-80': 0xb24a,
  'blake2s-88': 0xb24b,
  'blake2s-96': 0xb24c,
  'blake2s-104': 0xb24d,
  'blake2s-112': 0xb24e,
  'blake2s-120': 0xb24f,
  'blake2s-128': 0xb250,
  'blake2s-136': 0xb251,
  'blake2s-144': 0xb252,
  'blake2s-152': 0xb253,
  'blake2s-160': 0xb254,
  'blake2s-168': 0xb255,
  'blake2s-176': 0xb256,
  'blake2s-184': 0xb257,
  'blake2s-192': 0xb258,
  'blake2s-200': 0xb259,
  'blake2s-208': 0xb25a,
  'blake2s-216': 0xb25b,
  'blake2s-224': 0xb25c,
  'blake2s-232': 0xb25d,
  'blake2s-240': 0xb25e,
  'blake2s-248': 0xb25f,
  'blake2s-256': 0xb260,
  'skein256-8': 0xb301,
  'skein256-16': 0xb302,
  'skein256-24': 0xb303,
  'skein256-32': 0xb304,
  'skein256-40': 0xb305,
  'skein256-48': 0xb306,
  'skein256-56': 0xb307,
  'skein256-64': 0xb308,
  'skein256-72': 0xb309,
  'skein256-80': 0xb30a,
  'skein256-88': 0xb30b,
  'skein256-96': 0xb30c,
  'skein256-104': 0xb30d,
  'skein256-112': 0xb30e,
  'skein256-120': 0xb30f,
  'skein256-128': 0xb310,
  'skein256-136': 0xb311,
  'skein256-144': 0xb312,
  'skein256-152': 0xb313,
  'skein256-160': 0xb314,
  'skein256-168': 0xb315,
  'skein256-176': 0xb316,
  'skein256-184': 0xb317,
  'skein256-192': 0xb318,
  'skein256-200': 0xb319,
  'skein256-208': 0xb31a,
  'skein256-216': 0xb31b,
  'skein256-224': 0xb31c,
  'skein256-232': 0xb31d,
  'skein256-240': 0xb31e,
  'skein256-248': 0xb31f,
  'skein256-256': 0xb320,
  'skein512-8': 0xb321,
  'skein512-16': 0xb322,
  'skein512-24': 0xb323,
  'skein512-32': 0xb324,
  'skein512-40': 0xb325,
  'skein512-48': 0xb326,
  'skein512-56': 0xb327,
  'skein512-64': 0xb328,
  'skein512-72': 0xb329,
  'skein512-80': 0xb32a,
  'skein512-88': 0xb32b,
  'skein512-96': 0xb32c,
  'skein512-104': 0xb32d,
  'skein512-112': 0xb32e,
  'skein512-120': 0xb32f,
  'skein512-128': 0xb330,
  'skein512-136': 0xb331,
  'skein512-144': 0xb332,
  'skein512-152': 0xb333,
  'skein512-160': 0xb334,
  'skein512-168': 0xb335,
  'skein512-176': 0xb336,
  'skein512-184': 0xb337,
  'skein512-192': 0xb338,
  'skein512-200': 0xb339,
  'skein512-208': 0xb33a,
  'skein512-216': 0xb33b,
  'skein512-224': 0xb33c,
  'skein512-232': 0xb33d,
  'skein512-240': 0xb33e,
  'skein512-248': 0xb33f,
  'skein512-256': 0xb340,
  'skein512-264': 0xb341,
  'skein512-272': 0xb342,
  'skein512-280': 0xb343,
  'skein512-288': 0xb344,
  'skein512-296': 0xb345,
  'skein512-304': 0xb346,
  'skein512-312': 0xb347,
  'skein512-320': 0xb348,
  'skein512-328': 0xb349,
  'skein512-336': 0xb34a,
  'skein512-344': 0xb34b,
  'skein512-352': 0xb34c,
  'skein512-360': 0xb34d,
  'skein512-368': 0xb34e,
  'skein512-376': 0xb34f,
  'skein512-384': 0xb350,
  'skein512-392': 0xb351,
  'skein512-400': 0xb352,
  'skein512-408': 0xb353,
  'skein512-416': 0xb354,
  'skein512-424': 0xb355,
  'skein512-432': 0xb356,
  'skein512-440': 0xb357,
  'skein512-448': 0xb358,
  'skein512-456': 0xb359,
  'skein512-464': 0xb35a,
  'skein512-472': 0xb35b,
  'skein512-480': 0xb35c,
  'skein512-488': 0xb35d,
  'skein512-496': 0xb35e,
  'skein512-504': 0xb35f,
  'skein512-512': 0xb360,
  'skein1024-8': 0xb361,
  'skein1024-16': 0xb362,
  'skein1024-24': 0xb363,
  'skein1024-32': 0xb364,
  'skein1024-40': 0xb365,
  'skein1024-48': 0xb366,
  'skein1024-56': 0xb367,
  'skein1024-64': 0xb368,
  'skein1024-72': 0xb369,
  'skein1024-80': 0xb36a,
  'skein1024-88': 0xb36b,
  'skein1024-96': 0xb36c,
  'skein1024-104': 0xb36d,
  'skein1024-112': 0xb36e,
  'skein1024-120': 0xb36f,
  'skein1024-128': 0xb370,
  'skein1024-136': 0xb371,
  'skein1024-144': 0xb372,
  'skein1024-152': 0xb373,
  'skein1024-160': 0xb374,
  'skein1024-168': 0xb375,
  'skein1024-176': 0xb376,
  'skein1024-184': 0xb377,
  'skein1024-192': 0xb378,
  'skein1024-200': 0xb379,
  'skein1024-208': 0xb37a,
  'skein1024-216': 0xb37b,
  'skein1024-224': 0xb37c,
  'skein1024-232': 0xb37d,
  'skein1024-240': 0xb37e,
  'skein1024-248': 0xb37f,
  'skein1024-256': 0xb380,
  'skein1024-264': 0xb381,
  'skein1024-272': 0xb382,
  'skein1024-280': 0xb383,
  'skein1024-288': 0xb384,
  'skein1024-296': 0xb385,
  'skein1024-304': 0xb386,
  'skein1024-312': 0xb387,
  'skein1024-320': 0xb388,
  'skein1024-328': 0xb389,
  'skein1024-336': 0xb38a,
  'skein1024-344': 0xb38b,
  'skein1024-352': 0xb38c,
  'skein1024-360': 0xb38d,
  'skein1024-368': 0xb38e,
  'skein1024-376': 0xb38f,
  'skein1024-384': 0xb390,
  'skein1024-392': 0xb391,
  'skein1024-400': 0xb392,
  'skein1024-408': 0xb393,
  'skein1024-416': 0xb394,
  'skein1024-424': 0xb395,
  'skein1024-432': 0xb396,
  'skein1024-440': 0xb397,
  'skein1024-448': 0xb398,
  'skein1024-456': 0xb399,
  'skein1024-464': 0xb39a,
  'skein1024-472': 0xb39b,
  'skein1024-480': 0xb39c,
  'skein1024-488': 0xb39d,
  'skein1024-496': 0xb39e,
  'skein1024-504': 0xb39f,
  'skein1024-512': 0xb3a0,
  'skein1024-520': 0xb3a1,
  'skein1024-528': 0xb3a2,
  'skein1024-536': 0xb3a3,
  'skein1024-544': 0xb3a4,
  'skein1024-552': 0xb3a5,
  'skein1024-560': 0xb3a6,
  'skein1024-568': 0xb3a7,
  'skein1024-576': 0xb3a8,
  'skein1024-584': 0xb3a9,
  'skein1024-592': 0xb3aa,
  'skein1024-600': 0xb3ab,
  'skein1024-608': 0xb3ac,
  'skein1024-616': 0xb3ad,
  'skein1024-624': 0xb3ae,
  'skein1024-632': 0xb3af,
  'skein1024-640': 0xb3b0,
  'skein1024-648': 0xb3b1,
  'skein1024-656': 0xb3b2,
  'skein1024-664': 0xb3b3,
  'skein1024-672': 0xb3b4,
  'skein1024-680': 0xb3b5,
  'skein1024-688': 0xb3b6,
  'skein1024-696': 0xb3b7,
  'skein1024-704': 0xb3b8,
  'skein1024-712': 0xb3b9,
  'skein1024-720': 0xb3ba,
  'skein1024-728': 0xb3bb,
  'skein1024-736': 0xb3bc,
  'skein1024-744': 0xb3bd,
  'skein1024-752': 0xb3be,
  'skein1024-760': 0xb3bf,
  'skein1024-768': 0xb3c0,
  'skein1024-776': 0xb3c1,
  'skein1024-784': 0xb3c2,
  'skein1024-792': 0xb3c3,
  'skein1024-800': 0xb3c4,
  'skein1024-808': 0xb3c5,
  'skein1024-816': 0xb3c6,
  'skein1024-824': 0xb3c7,
  'skein1024-832': 0xb3c8,
  'skein1024-840': 0xb3c9,
  'skein1024-848': 0xb3ca,
  'skein1024-856': 0xb3cb,
  'skein1024-864': 0xb3cc,
  'skein1024-872': 0xb3cd,
  'skein1024-880': 0xb3ce,
  'skein1024-888': 0xb3cf,
  'skein1024-896': 0xb3d0,
  'skein1024-904': 0xb3d1,
  'skein1024-912': 0xb3d2,
  'skein1024-920': 0xb3d3,
  'skein1024-928': 0xb3d4,
  'skein1024-936': 0xb3d5,
  'skein1024-944': 0xb3d6,
  'skein1024-952': 0xb3d7,
  'skein1024-960': 0xb3d8,
  'skein1024-968': 0xb3d9,
  'skein1024-976': 0xb3da,
  'skein1024-984': 0xb3db,
  'skein1024-992': 0xb3dc,
  'skein1024-1000': 0xb3dd,
  'skein1024-1008': 0xb3de,
  'skein1024-1016': 0xb3df,
  'skein1024-1024': 0xb3e0,
  'poseidon-bls12_381-a2-fc1': 0xb401,
  'poseidon-bls12_381-a2-fc1-sc': 0xb402,
  'zeroxcert-imprint-256': 0xce11,
  'fil-commitment-unsealed': 0xf101,
  'fil-commitment-sealed': 0xf102,
  'holochain-adr-v0': 0x807124,
  'holochain-adr-v1': 0x817124,
  'holochain-key-v0': 0x947124,
  'holochain-key-v1': 0x957124,
  'holochain-sig-v0': 0xa27124,
  'holochain-sig-v1': 0xa37124,
  'skynet-ns': 0xb19910
})

module.exports = { baseTable }

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec",file:"node_modules\\multicodec\\src\\generated-table.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\src\\index.js", {"./maps":"F:\\metamask-extension\\node_modules\\multicodec\\src\\maps.js","./util":"F:\\metamask-extension\\node_modules\\multicodec\\src\\util.js","uint8arrays/concat":"F:\\metamask-extension\\node_modules\\uint8arrays\\concat.js","varint":"F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Csrc%5Cindex.js
      return function (require, module, exports) {
/**
 * Implementation of the multicodec specification.
 *
 * @module multicodec
 * @example
 * const multicodec = require('multicodec')
 *
 * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
 * // prefixedProtobuf 0x50...
 *
 */
'use strict'

/** @typedef {__import__('./generated-types').CodecName} CodecName */
/** @typedef {__import__('./generated-types').CodecCode} CodecCode */

const varint = require('varint')
const uint8ArrayConcat = require('uint8arrays/concat')
const util = require('./util')
const { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')

/**
 * Prefix a buffer with a multicodec-packed.
 *
 * @param {CodecName|Uint8Array} multicodecStrOrCode
 * @param {Uint8Array} data
 * @returns {Uint8Array}
 */
function addPrefix (multicodecStrOrCode, data) {
  let prefix

  if (multicodecStrOrCode instanceof Uint8Array) {
    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)
  } else {
    if (nameToVarint[multicodecStrOrCode]) {
      prefix = nameToVarint[multicodecStrOrCode]
    } else {
      throw new Error('multicodec not recognized')
    }
  }

  return uint8ArrayConcat([prefix, data], prefix.length + data.length)
}

/**
 * Decapsulate the multicodec-packed prefix from the data.
 *
 * @param {Uint8Array} data
 * @returns {Uint8Array}
 */
function rmPrefix (data) {
  varint.decode(/** @type {Buffer} */(data))
  return data.slice(varint.decode.bytes)
}

/**
 * Get the codec name of the prefixed data.
 *
 * @param {Uint8Array} prefixedData
 * @returns {CodecName}
 */
function getNameFromData (prefixedData) {
  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))
  const name = codeToName[code]
  if (name === undefined) {
    throw new Error(`Code "${code}" not found`)
  }
  return name
}

/**
 * Get the codec name from a code.
 *
 * @param {CodecCode} codec
 * @returns {CodecName}
 */
function getNameFromCode (codec) {
  return codeToName[codec]
}

/**
 * Get the code of the codec
 *
 * @param {CodecName} name
 * @returns {CodecCode}
 */
function getCodeFromName (name) {
  const code = nameToCode[name]
  if (code === undefined) {
    throw new Error(`Codec "${name}" not found`)
  }
  return code
}

/**
 * Get the code of the prefixed data.
 *
 * @param {Uint8Array} prefixedData
 * @returns {CodecCode}
 */
function getCodeFromData (prefixedData) {
  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))
}

/**
 * Get the code as varint of a codec name.
 *
 * @param {CodecName} name
 * @returns {Uint8Array}
 */
function getVarintFromName (name) {
  const code = nameToVarint[name]
  if (code === undefined) {
    throw new Error(`Codec "${name}" not found`)
  }
  return code
}

/**
 * Get the varint of a code.
 *
 * @param {CodecCode} code
 * @returns {Uint8Array}
 */
function getVarintFromCode (code) {
  return util.varintEncode(code)
}

/**
 * Get the codec name of the prefixed data.
 *
 * @deprecated use getNameFromData instead.
 * @param {Uint8Array} prefixedData
 * @returns {CodecName}
 */
function getCodec (prefixedData) {
  return getNameFromData(prefixedData)
}

/**
 * Get the codec name from a code.
 *
 * @deprecated use getNameFromCode instead.
 * @param {CodecCode} codec
 * @returns {CodecName}
 */
function getName (codec) {
  return getNameFromCode(codec)
}

/**
 * Get the code of the codec
 *
 * @deprecated use getCodeFromName instead.
 * @param {CodecName} name
 * @returns {CodecCode}
 */
function getNumber (name) {
  return getCodeFromName(name)
}

/**
 * Get the code of the prefixed data.
 *
 * @deprecated use getCodeFromData instead.
 * @param {Uint8Array} prefixedData
 * @returns {CodecCode}
 */
function getCode (prefixedData) {
  return getCodeFromData(prefixedData)
}

/**
 * Get the code as varint of a codec name.
 *
 * @deprecated use getVarintFromName instead.
 * @param {CodecName} name
 * @returns {Uint8Array}
 */
function getCodeVarint (name) {
  return getVarintFromName(name)
}

/**
 * Get the varint of a code.
 *
 * @deprecated use getVarintFromCode instead.
 * @param {CodecCode} code
 * @returns {Array.<number>}
 */
function getVarint (code) {
  return Array.from(getVarintFromCode(code))
}

module.exports = {
  addPrefix,
  rmPrefix,
  getNameFromData,
  getNameFromCode,
  getCodeFromName,
  getCodeFromData,
  getVarintFromName,
  getVarintFromCode,
  // Deprecated
  getCodec,
  getName,
  getNumber,
  getCode,
  getCodeVarint,
  getVarint,
  // Make the constants top-level constants
  ...constantToCode,
  // Export the maps
  nameToVarint,
  nameToCode,
  codeToName
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec",file:"node_modules\\multicodec\\src\\index.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\src\\maps.js", {"./generated-table":"F:\\metamask-extension\\node_modules\\multicodec\\src\\generated-table.js","./util":"F:\\metamask-extension\\node_modules\\multicodec\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Csrc%5Cmaps.js
      return function (require, module, exports) {
'use strict'

/** @typedef {__import__('./generated-types').ConstantCodeMap} ConstantCodeMap */
/** @typedef {__import__('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */
/** @typedef {__import__('./generated-types').CodeNameMap} CodeNameMap */
/** @typedef {__import__('./generated-types').CodecName} CodecName */
/** @typedef {__import__('./generated-types').CodecConstant} CodecConstant */

const { baseTable } = require('./generated-table')
const varintEncode = require('./util').varintEncode

const nameToVarint = /** @type {NameUint8ArrayMap} */ ({})
const constantToCode = /** @type {ConstantCodeMap} */({})
const codeToName = /** @type {CodeNameMap} */({})

// eslint-disable-next-line guard-for-in
for (const name in baseTable) {
  const codecName = /** @type {CodecName} */(name)
  const code = baseTable[codecName]
  nameToVarint[codecName] = varintEncode(code)

  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))
  constantToCode[constant] = code

  if (!codeToName[code]) {
    codeToName[code] = codecName
  }
}

Object.freeze(nameToVarint)
Object.freeze(constantToCode)
Object.freeze(codeToName)
const nameToCode = Object.freeze(baseTable)
module.exports = {
  nameToVarint,
  constantToCode,
  nameToCode,
  codeToName
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec",file:"node_modules\\multicodec\\src\\maps.js",}],
["F:\\metamask-extension\\node_modules\\multicodec\\src\\util.js", {"uint8arrays/from-string":"F:\\metamask-extension\\node_modules\\uint8arrays\\from-string.js","uint8arrays/to-string":"F:\\metamask-extension\\node_modules\\uint8arrays\\to-string.js","varint":"F:\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cmulticodec%5Csrc%5Cutil.js
      return function (require, module, exports) {
'use strict'

const varint = require('varint')
const uint8ArrayToString = require('uint8arrays/to-string')
const uint8ArrayFromString = require('uint8arrays/from-string')

module.exports = {
  numberToUint8Array,
  uint8ArrayToNumber,
  varintUint8ArrayEncode,
  varintEncode
}

/**
 * @param {Uint8Array} buf
 */
function uint8ArrayToNumber (buf) {
  return parseInt(uint8ArrayToString(buf, 'base16'), 16)
}

/**
 * @param {number} num
 */
function numberToUint8Array (num) {
  let hexString = num.toString(16)
  if (hexString.length % 2 === 1) {
    hexString = '0' + hexString
  }
  return uint8ArrayFromString(hexString, 'base16')
}

/**
 * @param {Uint8Array} input
 */
function varintUint8ArrayEncode (input) {
  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))
}

/**
 * @param {number} num
 */
function varintEncode (num) {
  return Uint8Array.from(varint.encode(num))
}

      };
    };
  }
  }
}, {package:"@ensdomains/content-hash>cids>multicodec",file:"node_modules\\multicodec\\src\\util.js",}],
["F:\\metamask-extension\\node_modules\\nanoid\\index.browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cnanoid%5Cindex.browser.js
      return function (require, module, exports) {
// This file replaces `index.js` in bundlers like webpack or Rollup,
// according to `browser` config in `package.json`.

if ("development" !== 'production') {
  // All bundlers will remove this block in production bundle
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    throw new Error(
      'React Native does not have a built-in secure random generator. ' +
      'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' +
      'For secure ID install `expo-random` locally and use `nanoid/async`.'
    )
  }
  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {
    throw new Error(
      'Your browser does not have secure random generator. ' +
      'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'
    )
  }
}

var crypto = self.crypto || self.msCrypto

// This alphabet uses a-z A-Z 0-9 _- symbols.
// Symbols are generated for smaller size.
// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA
var url = '-_'
// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).
var i = 36
while (i--) {
  // 36 is radix. Number.prototype.toString(36) returns number
  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.
  url += i.toString(36)
}
// Loop from 36 to 10 (from Z to A in Base36).
i = 36
while (i-- - 10) {
  url += i.toString(36).toUpperCase()
}

module.exports = function (size) {
  var id = ''
  var bytes = crypto.getRandomValues(new Uint8Array(size || 21))
  i = size || 21

  // Compact alternative for `for (var i = 0; i < size; i++)`
  while (i--) {
    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.
    // This mask reduces random byte 0-255 to 0-63 values.
    // There is no need in `|| ''` and `* 1.6` hacks in here,
    // because bitmask trim bytes exact to alphabet size.
    id += url[bytes[i] & 63]
  }
  return id
}

      };
    };
  }
  }
}, {package:"nanoid",file:"node_modules\\nanoid\\index.browser.js",}],
["F:\\metamask-extension\\node_modules\\node-fetch\\browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cnode-fetch%5Cbrowser.js
      return function (require, module, exports) {
"use strict";

// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var globalObject = getGlobal();

module.exports = exports = globalObject.fetch;

// Needed for TypeScript and Webpack.
if (globalObject.fetch) {
	exports.default = globalObject.fetch.bind(globalObject);
}

exports.Headers = globalObject.Headers;
exports.Request = globalObject.Request;
exports.Response = globalObject.Response;

      };
    };
  }
  }
}, {package:"node-fetch",file:"node_modules\\node-fetch\\browser.js",}],
["F:\\metamask-extension\\node_modules\\nonce-tracker\\index.js", {"assert":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\assert\\assert.js","await-semaphore":"F:\\metamask-extension\\node_modules\\await-semaphore\\index.js","ethjs-query":"F:\\metamask-extension\\node_modules\\ethjs-query\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cnonce-tracker%5Cindex.js
      return function (require, module, exports) {
const EthQuery = require('ethjs-query')
const assert = require('assert')
const Mutex = require('await-semaphore').Mutex
/**
  @param opts {Object}
    @param {Object} opts.provider a ethereum provider
    @param {Function} opts.getPendingTransactions a function that returns an array of txMeta
    whosee status is `submitted`
    @param {Function} opts.getConfirmedTransactions a function that returns an array of txMeta
    whose status is `confirmed`
  @class
*/
class NonceTracker {

  constructor ({ provider, blockTracker, getPendingTransactions, getConfirmedTransactions }) {
    this.provider = provider
    this.blockTracker = blockTracker
    this.ethQuery = new EthQuery(provider)
    this.getPendingTransactions = getPendingTransactions
    this.getConfirmedTransactions = getConfirmedTransactions
    this.lockMap = {}
  }

  /**
    @returns {Promise<Object>} with the key releaseLock (the gloabl mutex)
  */
  async getGlobalLock () {
    const globalMutex = this._lookupMutex('global')
    // await global mutex free
    const releaseLock = await globalMutex.acquire()
    return { releaseLock }
  }

  /**
   * @typedef NonceDetails
   * @property {number} highestLocallyConfirmed - A hex string of the highest nonce on a confirmed transaction.
   * @property {number} nextNetworkNonce - The next nonce suggested by the eth_getTransactionCount method.
   * @property {number} highestSuggested - The maximum between the other two, the number returned.
   */

  /**
  this will return an object with the `nextNonce` `nonceDetails`, and the releaseLock
  Note: releaseLock must be called after adding a signed tx to pending transactions (or discarding).

  @param address {string} the hex string for the address whose nonce we are calculating
  @returns {Promise<NonceDetails>}
  */
  async getNonceLock (address) {
    // await global mutex free
    await this._globalMutexFree()
    // await lock free, then take lock
    const releaseLock = await this._takeMutex(address)
    try {
      // evaluate multiple nextNonce strategies
      const nonceDetails = {}
      const networkNonceResult = await this._getNetworkNextNonce(address)
      const highestLocallyConfirmed = this._getHighestLocallyConfirmed(address)
      const nextNetworkNonce = networkNonceResult.nonce
      const highestSuggested = Math.max(nextNetworkNonce, highestLocallyConfirmed)

      const pendingTxs = this.getPendingTransactions(address)
      const localNonceResult = this._getHighestContinuousFrom(pendingTxs, highestSuggested) || 0

      nonceDetails.params = {
        highestLocallyConfirmed,
        highestSuggested,
        nextNetworkNonce,
      }
      nonceDetails.local = localNonceResult
      nonceDetails.network = networkNonceResult

      const nextNonce = Math.max(networkNonceResult.nonce, localNonceResult.nonce)
      assert(Number.isInteger(nextNonce), `nonce-tracker - nextNonce is not an integer - got: (${typeof nextNonce}) "${nextNonce}"`)

      // return nonce and release cb
      return { nextNonce, nonceDetails, releaseLock }
    } catch (err) {
      // release lock if we encounter an error
      releaseLock()
      throw err
    }
  }

  async _globalMutexFree () {
    const globalMutex = this._lookupMutex('global')
    const releaseLock = await globalMutex.acquire()
    releaseLock()
  }

  async _takeMutex (lockId) {
    const mutex = this._lookupMutex(lockId)
    const releaseLock = await mutex.acquire()
    return releaseLock
  }

  _lookupMutex (lockId) {
    let mutex = this.lockMap[lockId]
    if (!mutex) {
      mutex = new Mutex()
      this.lockMap[lockId] = mutex
    }
    return mutex
  }

  async _getNetworkNextNonce (address) {
    // calculate next nonce
    // we need to make sure our base count
    // and pending count are from the same block
    const blockNumber = await this.blockTracker.getLatestBlock()
    const baseCountBN = await this.ethQuery.getTransactionCount(address, blockNumber)
    const baseCount = baseCountBN.toNumber()
    assert(Number.isInteger(baseCount), `nonce-tracker - baseCount is not an integer - got: (${typeof baseCount}) "${baseCount}"`)
    const nonceDetails = { blockNumber, baseCount }
    return { name: 'network', nonce: baseCount, details: nonceDetails }
  }

  _getHighestLocallyConfirmed (address) {
    const confirmedTransactions = this.getConfirmedTransactions(address)
    const highest = this._getHighestNonce(confirmedTransactions)
    return Number.isInteger(highest) ? highest + 1 : 0
  }

  _getHighestNonce (txList) {
    const nonces = txList.map((txMeta) => {
      const nonce = txMeta.txParams.nonce
      assert(typeof nonce, 'string', 'nonces should be hex strings')
      return parseInt(nonce, 16)
    })
    const highestNonce = Math.max.apply(null, nonces)
    return highestNonce
  }

  /**
    @typedef {object} highestContinuousFrom
    @property {string} - name the name for how the nonce was calculated based on the data used
    @property {number} - nonce the next suggested nonce
    @property {object} - details the provided starting nonce that was used (for debugging)
  */
  /**
    @param txList {array} - list of txMeta's
    @param startPoint {number} - the highest known locally confirmed nonce
    @returns {highestContinuousFrom}
  */
  _getHighestContinuousFrom (txList, startPoint) {
    const nonces = txList.map((txMeta) => {
      const nonce = txMeta.txParams.nonce
      assert(typeof nonce, 'string', 'nonces should be hex strings')
      return parseInt(nonce, 16)
    })

    let highest = startPoint
    while (nonces.includes(highest)) {
      highest++
    }

    return { name: 'local', nonce: highest, details: { startPoint, highest } }
  }

}

module.exports = NonceTracker

      };
    };
  }
  }
}, {package:"nonce-tracker",file:"node_modules\\nonce-tracker\\index.js",}],
["F:\\metamask-extension\\node_modules\\obs-store\\index.js", {"safe-event-emitter":"F:\\metamask-extension\\node_modules\\safe-event-emitter\\index.js","xtend":"F:\\metamask-extension\\node_modules\\xtend\\immutable.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cobs-store%5Cindex.js
      return function (require, module, exports) {
'use strict'

const extend = require('xtend')
const SafeEventEmitter = require('safe-event-emitter')

class ObservableStore extends SafeEventEmitter {

  constructor (initState = {}) {
    super()
    // set init state
    this._state = initState
  }

  // wrapper around internal getState
  getState () {
    return this._getState()
  }
  
  // wrapper around internal putState
  putState (newState) {
    this._putState(newState)
    this.emit('update', newState)
  }

  updateState (partialState) {
    // if non-null object, merge
    if (partialState && typeof partialState === 'object') {
      const state = this.getState()
      const newState = Object.assign({}, state, partialState)
      this.putState(newState)
    // if not object, use new value
    } else {
      this.putState(partialState)
    }
  }

  // subscribe to changes
  subscribe (handler) {
    this.on('update', handler)
  }

  // unsubscribe to changes
  unsubscribe (handler) {
    this.removeListener('update', handler)
  }

  //
  // private
  //

  // read from persistence
  _getState () {
    return this._state
  }

  // write to persistence
  _putState (newState) {
    this._state = newState
  }

}

module.exports = ObservableStore

      };
    };
  }
  }
}, {package:"@metamask/eth-keyring-controller>obs-store",file:"node_modules\\obs-store\\index.js",}],
["F:\\metamask-extension\\node_modules\\parse-uri\\src\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cparse-uri%5Csrc%5Cindex.js
      return function (require, module, exports) {
'use strict'

module.exports = (str, opts = {}) => {
  if (!str) return undefined

  const o = {
    key: [
      'source',
      'protocol',
      'authority',
      'userInfo',
      'user',
      'password',
      'host',
      'port',
      'relative',
      'path',
      'directory',
      'file',
      'query',
      'anchor'
    ],
    q: {
      name: 'queryKey',
      parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
      strict: /^(?:([^:/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\d*))?))?((((?:[^?#/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      loose: /^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#/]*\.[^?#/.]+(?:[?#]|$)))*\/?)?([^?#/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
  }

  const m = o.parser[opts.strictMode ? 'strict' : 'loose'].exec(str)
  const uri = {}
  let i = 14

  while (i--) uri[o.key[i]] = m[i] || ''

  uri[o.q.name] = {}
  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
    if ($1) uri[o.q.name][$1] = $2
  })

  return uri
}

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>parse-uri",file:"node_modules\\parse-uri\\src\\index.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\light.js", {"./src/index-light":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\index-light.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Clight.js
      return function (require, module, exports) {
// light library entry point.

"use strict";
module.exports = require("./src/index-light");
      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\light.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\converter.js", {"./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cconverter.js
      return function (require, module, exports) {
"use strict";
/**
 * Runtime message from/to plain object converters.
 * @namespace
 */
var converter = exports;

var Enum = require("./enum"),
    util = require("./util");

/**
 * Generates a partial value fromObject conveter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(d%s){", prop);
            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
                if (field.repeated && values[keys[i]] === field.typeDefault) gen
                ("default:");
                gen
                ("case%j:", keys[i])
                ("case %i:", values[keys[i]])
                    ("m%s=%j", prop, values[keys[i]])
                    ("break");
            } gen
            ("}");
        } else gen
            ("if(typeof d%s!==\"object\")", prop)
                ("throw TypeError(%j)", field.fullName + ": object expected")
            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
                break;
            case "uint32":
            case "fixed32": gen
                ("m%s=d%s>>>0", prop, prop);
                break;
            case "int32":
            case "sint32":
            case "sfixed32": gen
                ("m%s=d%s|0", prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(util.Long)")
                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
                ("else if(typeof d%s===\"string\")", prop)
                    ("m%s=parseInt(d%s,10)", prop, prop)
                ("else if(typeof d%s===\"number\")", prop)
                    ("m%s=d%s", prop, prop)
                ("else if(typeof d%s===\"object\")", prop)
                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;
            case "bytes": gen
                ("if(typeof d%s===\"string\")", prop)
                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
                ("else if(d%s.length)", prop)
                    ("m%s=d%s", prop, prop);
                break;
            case "string": gen
                ("m%s=String(d%s)", prop, prop);
                break;
            case "bool": gen
                ("m%s=Boolean(d%s)", prop, prop);
                break;
            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a plain object to runtime message converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.fromObject = function fromObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray;
    var gen = util.codegen(["d"], mtype.name + "$fromObject")
    ("if(d instanceof this.ctor)")
        ("return d");
    if (!fields.length) return gen
    ("return new this.ctor");
    gen
    ("var m=new this.ctor");
    for (var i = 0; i < fields.length; ++i) {
        var field  = fields[i].resolve(),
            prop   = util.safeProp(field.name);

        // Map fields
        if (field.map) { gen
    ("if(d%s){", prop)
        ("if(typeof d%s!==\"object\")", prop)
            ("throw TypeError(%j)", field.fullName + ": object expected")
        ("m%s={}", prop)
        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
        ("}")
    ("}");

        // Repeated fields
        } else if (field.repeated) { gen
    ("if(d%s){", prop)
        ("if(!Array.isArray(d%s))", prop)
            ("throw TypeError(%j)", field.fullName + ": array expected")
        ("m%s=[]", prop)
        ("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
        ("}")
    ("}");

        // Non-repeated fields
        } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
    ("if(d%s!=null){", prop); // !== undefined && !== null
        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
            if (!(field.resolvedType instanceof Enum)) gen
    ("}");
        }
    } return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

/**
 * Generates a partial value toObject converter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_toObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) gen
            ("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else gen
            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
            ("if(typeof m%s===\"number\")", prop)
                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
            ("else") // Long-like
                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
                break;
            case "bytes": gen
            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;
            default: gen
            ("d%s=m%s", prop, prop);
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a runtime message to plain object converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.toObject = function toObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    if (!fields.length)
        return util.codegen()("return {}");
    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
    ("if(!o)")
        ("o={}")
    ("var d={}");

    var repeatedFields = [],
        mapFields = [],
        normalFields = [],
        i = 0;
    for (; i < fields.length; ++i)
        if (!fields[i].partOf)
            ( fields[i].resolve().repeated ? repeatedFields
            : fields[i].map ? mapFields
            : normalFields).push(fields[i]);

    if (repeatedFields.length) { gen
    ("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i) gen
        ("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen
    ("}");
    }

    if (mapFields.length) { gen
    ("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i) gen
        ("d%s={}", util.safeProp(mapFields[i].name));
        gen
    ("}");
    }

    if (normalFields.length) { gen
    ("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop  = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen
        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
            else if (field.long) gen
        ("if(util.Long){")
            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
        ("}else")
            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
            else if (field.bytes) {
                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
                gen
        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
        ("else{")
            ("d%s=%s", prop, arrayDefault)
            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
        ("}");
            } else gen
        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
        } gen
    ("}");
    }
    var hasKs2 = false;
    for (i = 0; i < fields.length; ++i) {
        var field = fields[i],
            index = mtype._fieldsArray.indexOf(field),
            prop  = util.safeProp(field.name);
        if (field.map) {
            if (!hasKs2) { hasKs2 = true; gen
    ("var ks2");
            } gen
    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
        ("d%s={}", prop)
        ("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
        ("}");
        } else if (field.repeated) { gen
    ("if(m%s&&m%s.length){", prop, prop)
        ("d%s=[]", prop)
        ("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
        ("}");
        } else { gen
    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
        if (field.partOf) gen
        ("if(o.oneofs)")
            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen
    ("}");
    }
    return gen
    ("return d");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\converter.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\decoder.js", {"./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./types":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\types.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cdecoder.js
      return function (require, module, exports) {
"use strict";
module.exports = decoder;

var Enum    = require("./enum"),
    types   = require("./types"),
    util    = require("./util");

function missing(field) {
    return "missing required '" + field.name + "'";
}

/**
 * Generates a decoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function decoder(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
    ("if(!(r instanceof Reader))")
        ("r=Reader.create(r)")
    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k,value" : ""))
    ("while(r.pos<c){")
        ("var t=r.uint32()");
    if (mtype.group) gen
        ("if((t&7)===4)")
            ("break");
    gen
        ("switch(t>>>3){");

    var i = 0;
    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
            ref   = "m" + util.safeProp(field.name); gen
            ("case %i:", field.id);

        // Map fields
        if (field.map) { gen
                ("if(%s===util.emptyObject)", ref)
                    ("%s={}", ref)
                ("var c2 = r.uint32()+r.pos");

            if (types.defaults[field.keyType] !== undefined) gen
                ("k=%j", types.defaults[field.keyType]);
            else gen
                ("k=null");

            if (types.defaults[type] !== undefined) gen
                ("value=%j", types.defaults[type]);
            else gen
                ("value=null");

            gen
                ("while(r.pos<c2){")
                    ("var tag2=r.uint32()")
                    ("switch(tag2>>>3){")
                        ("case 1: k=r.%s(); break", field.keyType)
                        ("case 2:");

            if (types.basic[type] === undefined) gen
                            ("value=types[%i].decode(r,r.uint32())", i); // can't be groups
            else gen
                            ("value=r.%s()", type);

            gen
                            ("break")
                        ("default:")
                            ("r.skipType(tag2&7)")
                            ("break")
                    ("}")
                ("}");

            if (types.long[field.keyType] !== undefined) gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=value", ref);
            else gen
                ("%s[k]=value", ref);

        // Repeated fields
        } else if (field.repeated) { gen

                ("if(!(%s&&%s.length))", ref, ref)
                    ("%s=[]", ref);

            // Packable (always check for forward and backward compatiblity)
            if (types.packed[type] !== undefined) gen
                ("if((t&7)===2){")
                    ("var c2=r.uint32()+r.pos")
                    ("while(r.pos<c2)")
                        ("%s.push(r.%s())", ref, type)
                ("}else");

            // Non-packed
            if (types.basic[type] === undefined) gen(field.resolvedType.group
                    ? "%s.push(types[%i].decode(r))"
                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
            else gen
                    ("%s.push(r.%s())", ref, type);

        // Non-repeated
        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
                ? "%s=types[%i].decode(r)"
                : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else gen
                ("%s=r.%s()", ref, type);
        gen
                ("break");
    // Unknown fields
    } gen
            ("default:")
                ("r.skipType(t&7)")
                ("break")

        ("}")
    ("}");

    // Field presence
    for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required) gen
    ("if(!m.hasOwnProperty(%j))", rfield.name)
        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
    }

    return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline */
}

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\decoder.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\encoder.js", {"./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./types":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\types.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cencoder.js
      return function (require, module, exports) {
"use strict";
module.exports = encoder;

var Enum     = require("./enum"),
    types    = require("./types"),
    util     = require("./util");

/**
 * Generates a partial message type encoder.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genTypePartial(gen, field, fieldIndex, ref) {
    return field.resolvedType.group
        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
}

/**
 * Generates an encoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function encoder(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
    ("if(!w)")
        ("w=Writer.create()");

    var i, ref;

    // "when a message is serialized its known fields should be written sequentially by field number"
    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

    for (var i = 0; i < fields.length; ++i) {
        var field    = fields[i].resolve(),
            index    = mtype._fieldsArray.indexOf(field),
            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
            wireType = types.basic[type];
            ref      = "m" + util.safeProp(field.name);

        // Map fields
        if (field.map) {
            gen
    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name) // !== undefined && !== null
        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen
            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen
            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen
        ("}")
    ("}");

            // Repeated fields
        } else if (field.repeated) { gen
    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

            // Packed repeated
            if (field.packed && types.packed[type] !== undefined) { gen

        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
        ("for(var i=0;i<%s.length;++i)", ref)
            ("w.%s(%s[i])", type, ref)
        ("w.ldelim()");

            // Non-packed
            } else { gen

        ("for(var i=0;i<%s.length;++i)", ref);
                if (wireType === undefined)
            genTypePartial(gen, field, index, ref + "[i]");
                else gen
            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

            } gen
    ("}");

        // Non-repeated
        } else {
            if (field.optional) gen
    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined)
        genTypePartial(gen, field, index, ref);
            else gen
        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

        }
    }

    return gen
    ("return w");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\encoder.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js", {"./namespace":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\namespace.js","./object":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cenum.js
      return function (require, module, exports) {
"use strict";
module.exports = Enum;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

var Namespace = require("./namespace"),
    util = require("./util");

/**
 * Constructs a new enum instance.
 * @classdesc Reflected enum.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {Object.<string,number>} [values] Enum values as an object, by name
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this enum
 * @param {Object.<string,string>} [comments] The value comments for this enum
 */
function Enum(name, values, options, comment, comments) {
    ReflectionObject.call(this, name, options);

    if (values && typeof values !== "object")
        throw TypeError("values must be an object");

    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */
    this.valuesById = {};

    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */
    this.values = Object.create(this.valuesById); // toJSON, marker

    /**
     * Enum comment text.
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */
    this.comments = comments || {};

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.

    if (values)
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
            if (typeof values[keys[i]] === "number") // use forward entries only
                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
}

/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */

/**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */
Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
    enm.reserved = json.reserved;
    return enm;
};

/**
 * Converts this enum to an enum descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IEnum} Enum descriptor
 */
Enum.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"  , this.options,
        "values"   , this.values,
        "reserved" , this.reserved && this.reserved.length ? this.reserved : undefined,
        "comment"  , keepComments ? this.comment : undefined,
        "comments" , keepComments ? this.comments : undefined
    ]);
};

/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */
Enum.prototype.add = function add(name, id, comment) {
    // utilized by the parser but not by .fromJSON

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (!util.isInteger(id))
        throw TypeError("id must be an integer");

    if (this.values[name] !== undefined)
        throw Error("duplicate name '" + name + "' in " + this);

    if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);

    if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);

    if (this.valuesById[id] !== undefined) {
        if (!(this.options && this.options.allow_alias))
            throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else
        this.valuesById[this.values[name] = id] = name;

    this.comments[name] = comment || null;
    return this;
};

/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */
Enum.prototype.remove = function remove(name) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    var val = this.values[name];
    if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);

    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];

    return this;
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\enum.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js", {"./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./object":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js","./types":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\types.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cfield.js
      return function (require, module, exports) {
"use strict";
module.exports = Field;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

var Enum  = require("./enum"),
    types = require("./types"),
    util  = require("./util");

var Type; // cyclic

var ruleRe = /^required|optional|repeated$/;

/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */
Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};

/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function Field(name, id, type, rule, extend, options, comment) {

    if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = undefined;
    } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = undefined;
    }

    ReflectionObject.call(this, name, options);

    if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");

    if (!util.isString(type))
        throw TypeError("type must be a string");

    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");

    if (extend !== undefined && !util.isString(extend))
        throw TypeError("extend must be a string");

    if (rule === "proto3_optional") {
        rule = "optional";
    }
    /**
     * Field rule, if any.
     * @type {string|undefined}
     */
    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

    /**
     * Field type.
     * @type {string}
     */
    this.type = type; // toJSON

    /**
     * Unique field id.
     * @type {number}
     */
    this.id = id; // toJSON, marker

    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */
    this.extend = extend || undefined; // toJSON

    /**
     * Whether this field is required.
     * @type {boolean}
     */
    this.required = rule === "required";

    /**
     * Whether this field is optional.
     * @type {boolean}
     */
    this.optional = !this.required;

    /**
     * Whether this field is repeated.
     * @type {boolean}
     */
    this.repeated = rule === "repeated";

    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */
    this.map = false;

    /**
     * Message this field belongs to.
     * @type {Type|null}
     */
    this.message = null;

    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */
    this.partOf = null;

    /**
     * The field type's default value.
     * @type {*}
     */
    this.typeDefault = null;

    /**
     * The field's default value on prototypes.
     * @type {*}
     */
    this.defaultValue = null;

    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */
    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */
    this.bytes = type === "bytes";

    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */
    this.resolvedType = null;

    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */
    this.extensionField = null;

    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */
    this.declaringField = null;

    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */
    this._packed = null;

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */
Object.defineProperty(Field.prototype, "packed", {
    get: function() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null)
            this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});

/**
 * @override
 */
Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") // clear cached before setting
        this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};

/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */

/**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */

/**
 * Converts this field to a field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IField} Field descriptor
 */
Field.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "rule"    , this.rule !== "optional" && this.rule || undefined,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */
Field.prototype.resolve = function resolve() {

    if (this.resolved)
        return this;

    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
            this.typeDefault = null;
        else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
    }

    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
            this.typeDefault = this.resolvedType.values[this.typeDefault];
    }

    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
            delete this.options.packed;
        if (!Object.keys(this.options).length)
            this.options = undefined;
    }

    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

        /* istanbul ignore else */
        if (Object.freeze)
            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }

    // take special care of maps and repeated fields
    if (this.map)
        this.defaultValue = util.emptyObject;
    else if (this.repeated)
        this.defaultValue = util.emptyArray;
    else
        this.defaultValue = this.typeDefault;

    // ensure proper value on prototype
    if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;

    return ReflectionObject.prototype.resolve.call(this);
};

/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */
Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;

    // enum reference: create a reflected copy of the enum and keep reuseing it
    else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;

    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
    };
};

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */
// like Field.d but without a default value

// Sets up cyclic dependencies (called in index-light)
Field._configure = function configure(Type_) {
    Type = Type_;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\field.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\index-light.js", {"./converter":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\converter.js","./decoder":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\decoder.js","./encoder":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\encoder.js","./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./field":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js","./index-minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\index-minimal.js","./mapfield":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\mapfield.js","./message":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\message.js","./method":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\method.js","./namespace":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\namespace.js","./object":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js","./oneof":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\oneof.js","./root":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\root.js","./service":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\service.js","./type":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\type.js","./types":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\types.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js","./verifier":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\verifier.js","./wrappers":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\wrappers.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cindex-light.js
      return function (require, module, exports) {
"use strict";
var protobuf = module.exports = require("./index-minimal");

protobuf.build = "light";

/**
 * A node-style callback as used by {@link load} and {@link Root#load}.
 * @typedef LoadCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Root} [root] Root, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} root Root namespace, defaults to create a new one if omitted.
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 */
function load(filename, root, callback) {
    if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
    } else if (!root)
        root = new protobuf.Root();
    return root.load(filename, callback);
}

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Promise<Root>} Promise
 * @see {@link Root#load}
 * @variation 3
 */
// function load(filename:string, [root:Root]):Promise<Root>

protobuf.load = load;

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 * @see {@link Root#loadSync}
 */
function loadSync(filename, root) {
    if (!root)
        root = new protobuf.Root();
    return root.loadSync(filename);
}

protobuf.loadSync = loadSync;

// Serialization
protobuf.encoder          = require("./encoder");
protobuf.decoder          = require("./decoder");
protobuf.verifier         = require("./verifier");
protobuf.converter        = require("./converter");

// Reflection
protobuf.ReflectionObject = require("./object");
protobuf.Namespace        = require("./namespace");
protobuf.Root             = require("./root");
protobuf.Enum             = require("./enum");
protobuf.Type             = require("./type");
protobuf.Field            = require("./field");
protobuf.OneOf            = require("./oneof");
protobuf.MapField         = require("./mapfield");
protobuf.Service          = require("./service");
protobuf.Method           = require("./method");

// Runtime
protobuf.Message          = require("./message");
protobuf.wrappers         = require("./wrappers");

// Utility
protobuf.types            = require("./types");
protobuf.util             = require("./util");

// Set up possibly cyclic reflection dependencies
protobuf.ReflectionObject._configure(protobuf.Root);
protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
protobuf.Root._configure(protobuf.Type);
protobuf.Field._configure(protobuf.Type);

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\index-light.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\index-minimal.js", {"./reader":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\reader.js","./reader_buffer":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\reader_buffer.js","./roots":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\roots.js","./rpc":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\rpc.js","./util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js","./writer":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\writer.js","./writer_buffer":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\writer_buffer.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cindex-minimal.js
      return function (require, module, exports) {
"use strict";
var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = require("./writer");
protobuf.BufferWriter = require("./writer_buffer");
protobuf.Reader       = require("./reader");
protobuf.BufferReader = require("./reader_buffer");

// Utility
protobuf.util         = require("./util/minimal");
protobuf.rpc          = require("./rpc");
protobuf.roots        = require("./roots");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\index-minimal.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\mapfield.js", {"./field":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js","./types":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\types.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cmapfield.js
      return function (require, module, exports) {
"use strict";
module.exports = MapField;

// extends Field
var Field = require("./field");
((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

var types   = require("./types"),
    util    = require("./util");

/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function MapField(name, id, keyType, type, options, comment) {
    Field.call(this, name, id, type, undefined, undefined, options, comment);

    /* istanbul ignore if */
    if (!util.isString(keyType))
        throw TypeError("keyType must be a string");

    /**
     * Key type.
     * @type {string}
     */
    this.keyType = keyType; // toJSON, marker

    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */
    this.resolvedKeyType = null;

    // Overrides Field#map
    this.map = true;
}

/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */

/**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */

/**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */
MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
};

/**
 * Converts this map field to a map field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMapField} Map field descriptor
 */
MapField.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "keyType" , this.keyType,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
MapField.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;

    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined)
        throw Error("invalid key type: " + this.keyType);

    return Field.prototype.resolve.call(this);
};

/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */
MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;

    // enum reference value: create a reflected copy of the enum and keep reuseing it
    else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;

    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\mapfield.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\message.js", {"./util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cmessage.js
      return function (require, module, exports) {
"use strict";
module.exports = Message;

var util = require("./util/minimal");

/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object = object
 */
function Message(properties) {
    // not used internally
    if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            this[keys[i]] = properties[keys[i]];
}

/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */

/**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */

/*eslint-disable valid-jsdoc*/

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.create = function create(properties) {
    return this.$type.create(properties);
};

/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encode = function encode(message, writer) {
    return this.$type.encode(message, writer);
};

/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};

/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};

/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};

/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */
Message.verify = function verify(message) {
    return this.$type.verify(message);
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.toObject = function toObject(message, options) {
    return this.$type.toObject(message, options);
};

/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */
Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
};

/*eslint-enable valid-jsdoc*/
      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\message.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\method.js", {"./object":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cmethod.js
      return function (require, module, exports) {
"use strict";
module.exports = Method;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

var util = require("./util");

/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this method
 * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object
 */
function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {

    /* istanbul ignore next */
    if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = undefined;
    } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = undefined;
    }

    /* istanbul ignore if */
    if (!(type === undefined || util.isString(type)))
        throw TypeError("type must be a string");

    /* istanbul ignore if */
    if (!util.isString(requestType))
        throw TypeError("requestType must be a string");

    /* istanbul ignore if */
    if (!util.isString(responseType))
        throw TypeError("responseType must be a string");

    ReflectionObject.call(this, name, options);

    /**
     * Method type.
     * @type {string}
     */
    this.type = type || "rpc"; // toJSON

    /**
     * Request type.
     * @type {string}
     */
    this.requestType = requestType; // toJSON, marker

    /**
     * Whether requests are streamed or not.
     * @type {boolean|undefined}
     */
    this.requestStream = requestStream ? true : undefined; // toJSON

    /**
     * Response type.
     * @type {string}
     */
    this.responseType = responseType; // toJSON

    /**
     * Whether responses are streamed or not.
     * @type {boolean|undefined}
     */
    this.responseStream = responseStream ? true : undefined; // toJSON

    /**
     * Resolved request type.
     * @type {Type|null}
     */
    this.resolvedRequestType = null;

    /**
     * Resolved response type.
     * @type {Type|null}
     */
    this.resolvedResponseType = null;

    /**
     * Comment for this method
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Options properly parsed into an object
     */
    this.parsedOptions = parsedOptions;
}

/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 * @property {string} comment Method comments
 * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object
 */

/**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */
Method.fromJSON = function fromJSON(name, json) {
    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
};

/**
 * Converts this method to a method descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMethod} Method descriptor
 */
Method.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
        "requestType"    , this.requestType,
        "requestStream"  , this.requestStream,
        "responseType"   , this.responseType,
        "responseStream" , this.responseStream,
        "options"        , this.options,
        "comment"        , keepComments ? this.comment : undefined,
        "parsedOptions"  , this.parsedOptions,
    ]);
};

/**
 * @override
 */
Method.prototype.resolve = function resolve() {

    /* istanbul ignore if */
    if (this.resolved)
        return this;

    this.resolvedRequestType = this.parent.lookupType(this.requestType);
    this.resolvedResponseType = this.parent.lookupType(this.responseType);

    return ReflectionObject.prototype.resolve.call(this);
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\method.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\namespace.js", {"./field":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js","./object":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js","./oneof":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\oneof.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cnamespace.js
      return function (require, module, exports) {
"use strict";
module.exports = Namespace;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

var Field    = require("./field"),
    OneOf    = require("./oneof"),
    util     = require("./util");

var Type,    // cyclic
    Service,
    Enum;

/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */
Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};

/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */
function arrayToJSON(array, toJSONOptions) {
    if (!(array && array.length))
        return undefined;
    var obj = {};
    for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
    return obj;
}

Namespace.arrayToJSON = arrayToJSON;

/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
                return true;
    return false;
};

/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (reserved[i] === name)
                return true;
    return false;
};

/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */
function Namespace(name, options) {
    ReflectionObject.call(this, name, options);

    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */
    this.nested = undefined; // toJSON

    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */
    this._nestedArray = null;
}

function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}

/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */
Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});

/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */

/**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */

/**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
 */
// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

/**
 * Converts this namespace to a namespace descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {INamespace} Namespace descriptor
 */
Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
    return util.toObject([
        "options" , this.options,
        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
    ]);
};

/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */
Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */
    if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
                ( nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : nested.id !== undefined
                ? Field.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    }
    return this;
};

/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */
Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name]
        || null;
};

/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */
Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
    throw Error("no such enum: " + name);
};

/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */
Namespace.prototype.add = function add(object) {

    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf))
        throw TypeError("object must be a valid nested object");

    if (!this.nested)
        this.nested = {};
    else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i)
                    object.add(nested[i]);
                this.remove(prev);
                if (!this.nested)
                    this.nested = {};
                object.setOptions(prev.options, true);

            } else
                throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};

/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */
Namespace.prototype.remove = function remove(object) {

    if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this)
        throw Error(object + " is not a member of " + this);

    delete this.nested[object.name];
    if (!Object.keys(this.nested).length)
        this.nested = undefined;

    object.onRemove(this);
    return clearCache(this);
};

/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */
Namespace.prototype.define = function define(path, json) {

    if (util.isString(path))
        path = path.split(".");
    else if (!Array.isArray(path))
        throw TypeError("illegal path");
    if (path && path.length && path[0] === "")
        throw Error("path must be relative");

    var ptr = this;
    while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace))
                throw Error("path conflicts with non-namespace objects");
        } else
            ptr.add(ptr = new Namespace(part));
    }
    if (json)
        ptr.addJSON(json);
    return ptr;
};

/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */
Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray, i = 0;
    while (i < nested.length)
        if (nested[i] instanceof Namespace)
            nested[i++].resolveAll();
        else
            nested[i++].resolve();
    return this.resolve();
};

/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */
Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

    /* istanbul ignore next */
    if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined;
    } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [ filterTypes ];

    if (util.isString(path) && path.length) {
        if (path === ".")
            return this.root;
        path = path.split(".");
    } else if (!path.length)
        return this;

    // Start at root if path is absolute
    if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);

    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
                return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
            return found;

    // Otherwise try each nested namespace
    } else
        for (var i = 0; i < this.nestedArray.length; ++i)
            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
                return found;

    // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked)
        return null;
    return this.parent.lookup(path, filterTypes);
};

/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */
// lookup(path: string, [parentAlreadyChecked: boolean])

/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */
Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [ Type ]);
    if (!found)
        throw Error("no such type: " + path);
    return found;
};

/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */
Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [ Enum ]);
    if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */
Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [ Type, Enum ]);
    if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */
Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [ Service ]);
    if (!found)
        throw Error("no such Service '" + path + "' in " + this);
    return found;
};

// Sets up cyclic dependencies (called in index-light)
Namespace._configure = function(Type_, Service_, Enum_) {
    Type    = Type_;
    Service = Service_;
    Enum    = Enum_;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\namespace.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js", {"./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cobject.js
      return function (require, module, exports) {
"use strict";
module.exports = ReflectionObject;

ReflectionObject.className = "ReflectionObject";

var util = require("./util");

var Root; // cyclic

/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */
function ReflectionObject(name, options) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (options && !util.isObject(options))
        throw TypeError("options must be an object");

    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */
    this.options = options; // toJSON

    /**
     * Parsed Options.
     * @type {Array.<Object.<string,*>>|undefined}
     */
    this.parsedOptions = null;

    /**
     * Unique name within its namespace.
     * @type {string}
     */
    this.name = name;

    /**
     * Parent namespace.
     * @type {Namespace|null}
     */
    this.parent = null;

    /**
     * Whether already resolved or not.
     * @type {boolean}
     */
    this.resolved = false;

    /**
     * Comment text, if any.
     * @type {string|null}
     */
    this.comment = null;

    /**
     * Defining file name.
     * @type {string|null}
     */
    this.filename = null;
}

Object.defineProperties(ReflectionObject.prototype, {

    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */
    root: {
        get: function() {
            var ptr = this;
            while (ptr.parent !== null)
                ptr = ptr.parent;
            return ptr;
        }
    },

    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */
    fullName: {
        get: function() {
            var path = [ this.name ],
                ptr = this.parent;
            while (ptr) {
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});

/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */
ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};

/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */
ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent)
        this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root)
        root._handleAdd(this);
};

/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */
ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root)
        root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};

/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;
    if (this.root instanceof Root)
        this.resolved = true; // only if part of a root
    return this;
};

/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */
ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options)
        return this.options[name];
    return undefined;
};

/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined)
        (this.options || (this.options = {}))[name] = value;
    return this;
};

/**
 * Sets a parsed option.
 * @param {string} name parsed Option name
 * @param {*} value Option value
 * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\empty, will add a new option with that value
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
    if (!this.parsedOptions) {
        this.parsedOptions = [];
    }
    var parsedOptions = this.parsedOptions;
    if (propName) {
        // If setting a sub property of an option then try to merge it
        // with an existing option
        var opt = parsedOptions.find(function (opt) {
            return Object.prototype.hasOwnProperty.call(opt, name);
        });
        if (opt) {
            // If we found an existing option - just merge the property value
            var newValue = opt[name];
            util.setProperty(newValue, propName, value);
        } else {
            // otherwise, create a new option, set it's property and add it to the list
            opt = {};
            opt[name] = util.setProperty({}, propName, value);
            parsedOptions.push(opt);
        }
    } else {
        // Always create a new option when setting the value of the option itself
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
    }
    return this;
};

/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
            this.setOption(keys[i], options[keys[i]], ifNotSet);
    return this;
};

/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */
ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className,
        fullName  = this.fullName;
    if (fullName.length)
        return className + " " + fullName;
    return className;
};

// Sets up cyclic dependencies (called in index-light)
ReflectionObject._configure = function(Root_) {
    Root = Root_;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\object.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\oneof.js", {"./field":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js","./object":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\object.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Coneof.js
      return function (require, module, exports) {
"use strict";
module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = require("./object");
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field = require("./field"),
    util  = require("./util");

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function OneOf(name, fieldNames, options, comment) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined;
    }
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options, json.comment);
};

/**
 * Converts this oneof to a oneof descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IOneOf} Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , this.options,
        "oneof"   , this.oneof,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) {
    if (oneof.parent)
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
            if (!oneof.fieldsArray[i].parent)
                oneof.parent.add(oneof.fieldsArray[i]);
}

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */
OneOf.prototype.add = function add(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */
OneOf.prototype.remove = function remove(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0)
        throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
};

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) {
    for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
            field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
};

/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length)
        fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor)
            .add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\oneof.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\reader.js", {"./util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Creader.js
      return function (require, module, exports) {
"use strict";
module.exports = Reader;

var util      = require("./util/minimal");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\reader.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\reader_buffer.js", {"./reader":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\reader.js","./util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Creader_buffer.js
      return function (require, module, exports) {
"use strict";
module.exports = BufferReader;

// extends Reader
var Reader = require("./reader");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = require("./util/minimal");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\reader_buffer.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\root.js", {"./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./field":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js","./namespace":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\namespace.js","./oneof":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\oneof.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Croot.js
      return function (require, module, exports) {
"use strict";
module.exports = Root;

// extends Namespace
var Namespace = require("./namespace");
((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

var Field   = require("./field"),
    Enum    = require("./enum"),
    OneOf   = require("./oneof"),
    util    = require("./util");

var Type,   // cyclic
    parse,  // might be excluded
    common; // "

/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */
function Root(options) {
    Namespace.call(this, "", options);

    /**
     * Deferred extension fields.
     * @type {Field[]}
     */
    this.deferred = [];

    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */
    this.files = [];
}

/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */
Root.fromJSON = function fromJSON(json, root) {
    if (!root)
        root = new Root();
    if (json.options)
        root.setOptions(json.options);
    return root.addJSON(json.nested);
};

/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */
Root.prototype.resolvePath = util.path.resolve;

/**
 * Fetch content from file path or url
 * This method exists so you can override it with your own logic.
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.fetch = util.fetch;

// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */
function SYNC() {} // eslint-disable-line no-empty-function

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback)
        return util.asPromise(load, self, filename, options);

    var sync = callback === SYNC; // undocumented

    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */
        if (!callback)
            return;
        var cb = callback;
        callback = null;
        if (sync)
            throw err;
        cb(err, root);
    }

    // Bundled definition existence checking
    function getBundledFileName(filename) {
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) return altname;
        }
        return null;
    }

    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{")
                source = JSON.parse(source);
            if (!util.isString(source))
                self.setOptions(source.options).addJSON(source.nested);
            else {
                parse.filename = filename;
                var parsed = parse(source, self, options),
                    resolved,
                    i = 0;
                if (parsed.imports)
                    for (; i < parsed.imports.length; ++i)
                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))
                            fetch(resolved);
                if (parsed.weakImports)
                    for (i = 0; i < parsed.weakImports.length; ++i)
                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))
                            fetch(resolved, true);
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued)
            finish(null, self); // only once anyway
    }

    // Fetches a single file
    function fetch(filename, weak) {

        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1)
            return;
        self.files.push(filename);

        // Shortcut bundled definitions
        if (filename in common) {
            if (sync)
                process(filename, common[filename]);
            else {
                ++queued;
                setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }

        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak)
                    finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            self.fetch(filename, function(err, source) {
                --queued;
                /* istanbul ignore if */
                if (!callback)
                    return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */
                    if (!weak)
                        finish(err);
                    else if (!queued) // can't be covered reliably
                        finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;

    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename))
        filename = [ filename ];
    for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self.resolvePath("", filename[i]))
            fetch(resolved);

    if (sync)
        return self;
    if (!queued)
        finish(null, self);
    return undefined;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */
// function load(filename:string, [options:IParseOptions]):Promise<Root>

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */
Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode)
        throw Error("not supported");
    return this.load(filename, options, SYNC);
};

/**
 * @override
 */
Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
            return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};

// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;

/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */
function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}

/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */
Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {

        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
            if (!tryHandleExtension(this, object))
                this.deferred.push(object);

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            object.parent[object.name] = object.values; // expose enum values as property of its parent

    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

        if (object instanceof Type) // Try to handle any deferred extensions
            for (var i = 0; i < this.deferred.length;)
                if (tryHandleExtension(this, this.deferred[i]))
                    this.deferred.splice(i, 1);
                else
                    ++i;
        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
            this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
            object.parent[object.name] = object; // expose namespace as property of its parent
    }

    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
    // properties of namespaces just like static code does. This allows using a .d.ts generated for
    // a static module with reflection-based solutions where the condition is met.
};

/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */
Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {

        if (/* an extension field */ object.extend !== undefined) {
            if (/* already handled */ object.extensionField) { // remove its sister field
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else { // cancel the extension
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */
                if (index > -1)
                    this.deferred.splice(index, 1);
            }
        }

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose enum values

    } else if (object instanceof Namespace) {

        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose namespaces

    }
};

// Sets up cyclic dependencies (called in index-light)
Root._configure = function(Type_, parse_, common_) {
    Type   = Type_;
    parse  = parse_;
    common = common_;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\root.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\roots.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Croots.js
      return function (require, module, exports) {
"use strict";
module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\roots.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\rpc.js", {"./rpc/service":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\rpc\\service.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Crpc.js
      return function (require, module, exports) {
"use strict";

/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = require("./rpc/service");

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\rpc.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\rpc\\service.js", {"../util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Crpc%5Cservice.js
      return function (require, module, exports) {
"use strict";
module.exports = Service;

var util = require("../util/minimal");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\rpc\\service.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\service.js", {"./method":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\method.js","./namespace":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\namespace.js","./rpc":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\rpc.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cservice.js
      return function (require, module, exports) {
"use strict";
module.exports = Service;

// extends Namespace
var Namespace = require("./namespace");
((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

var Method = require("./method"),
    util   = require("./util"),
    rpc    = require("./rpc");

/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */
function Service(name, options) {
    Namespace.call(this, name, options);

    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */
    this.methods = {}; // toJSON, marker

    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */
    this._methodsArray = null;
}

/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */

/**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */
Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */
    if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    if (json.nested)
        service.addJSON(json.nested);
    service.comment = json.comment;
    return service;
};

/**
 * Converts this service to a service descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IService} Service descriptor
 */
Service.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , inherited && inherited.options || undefined,
        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
        "nested"  , inherited && inherited.nested || undefined,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */
Object.defineProperty(Service.prototype, "methodsArray", {
    get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});

function clearCache(service) {
    service._methodsArray = null;
    return service;
}

/**
 * @override
 */
Service.prototype.get = function get(name) {
    return this.methods[name]
        || Namespace.prototype.get.call(this, name);
};

/**
 * @override
 */
Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
    return Namespace.prototype.resolve.call(this);
};

/**
 * @override
 */
Service.prototype.add = function add(object) {

    /* istanbul ignore if */
    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * @override
 */
Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {

        /* istanbul ignore if */
        if (this.methods[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */
Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\service.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\type.js", {"./converter":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\converter.js","./decoder":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\decoder.js","./encoder":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\encoder.js","./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./field":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\field.js","./mapfield":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\mapfield.js","./message":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\message.js","./namespace":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\namespace.js","./oneof":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\oneof.js","./reader":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\reader.js","./service":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\service.js","./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js","./verifier":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\verifier.js","./wrappers":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\wrappers.js","./writer":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\writer.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Ctype.js
      return function (require, module, exports) {
"use strict";
module.exports = Type;

// extends Namespace
var Namespace = require("./namespace");
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

var Enum      = require("./enum"),
    OneOf     = require("./oneof"),
    Field     = require("./field"),
    MapField  = require("./mapfield"),
    Service   = require("./service"),
    Message   = require("./message"),
    Reader    = require("./reader"),
    Writer    = require("./writer"),
    util      = require("./util"),
    encoder   = require("./encoder"),
    decoder   = require("./decoder"),
    verifier  = require("./verifier"),
    converter = require("./converter"),
    wrappers  = require("./wrappers");

/**
 * Constructs a new reflected message type instance.
 * @classdesc Reflected message type.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Message name
 * @param {Object.<string,*>} [options] Declared options
 */
function Type(name, options) {
    Namespace.call(this, name, options);

    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */
    this.fields = {};  // toJSON, marker

    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */
    this.oneofs = undefined; // toJSON

    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */
    this.extensions = undefined; // toJSON

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */
    this.group = undefined; // toJSON

    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */
    this._fieldsById = null;

    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */
    this._fieldsArray = null;

    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */
    this._oneofsArray = null;

    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */
    this._ctor = null;
}

Object.defineProperties(Type.prototype, {

    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */
    fieldsById: {
        get: function() {

            /* istanbul ignore if */
            if (this._fieldsById)
                return this._fieldsById;

            this._fieldsById = {};
            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
                var field = this.fields[names[i]],
                    id = field.id;

                /* istanbul ignore if */
                if (this._fieldsById[id])
                    throw Error("duplicate id " + id + " in " + this);

                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },

    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */
    fieldsArray: {
        get: function() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },

    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */
    oneofsArray: {
        get: function() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },

    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */
    ctor: {
        get: function() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {

            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }

            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;

            // Mix in static methods
            util.merge(ctor, Message, true);

            this._ctor = ctor;

            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for (; i < /* initializes */ this.fieldsArray.length; ++i)
                this._fieldsArray[i].resolve(); // ensures a proper value

            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
                ctorProperties[this._oneofsArray[i].resolve().name] = {
                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
                };
            if (i)
                Object.defineProperties(ctor.prototype, ctorProperties);
        }
    }
});

/**
 * Generates a constructor function for the specified type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
Type.generateConstructor = function generateConstructor(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["p"], mtype.name);
    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map) gen
            ("this%s={}", util.safeProp(field.name));
        else if (field.repeated) gen
            ("this%s=[]", util.safeProp(field.name));
    return gen
    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
    /* eslint-enable no-unexpected-multiline */
};

function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}

/**
 * Message type descriptor.
 * @interface IType
 * @extends INamespace
 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
 * @property {Object.<string,IField>} fields Field descriptors
 * @property {number[][]} [extensions] Extension ranges
 * @property {number[][]} [reserved] Reserved ranges
 * @property {boolean} [group=false] Whether a legacy group or not
 */

/**
 * Creates a message type from a message type descriptor.
 * @param {string} name Message name
 * @param {IType} json Message type descriptor
 * @returns {Type} Created message type
 */
Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = Object.keys(json.fields),
        i = 0;
    for (; i < names.length; ++i)
        type.add(
            ( typeof json.fields[names[i]].keyType !== "undefined"
            ? MapField.fromJSON
            : Field.fromJSON )(names[i], json.fields[names[i]])
        );
    if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
            var nested = json.nested[names[i]];
            type.add( // most to least likely
                ( nested.id !== undefined
                ? Field.fromJSON
                : nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
    if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
    if (json.group)
        type.group = true;
    if (json.comment)
        type.comment = json.comment;
    return type;
};

/**
 * Converts this message type to a message type descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IType} Message type descriptor
 */
Type.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"    , inherited && inherited.options || undefined,
        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
        "group"      , this.group || undefined,
        "nested"     , inherited && inherited.nested || undefined,
        "comment"    , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray, i = 0;
    while (i < fields.length)
        fields[i++].resolve();
    var oneofs = this.oneofsArray; i = 0;
    while (i < oneofs.length)
        oneofs[i++].resolve();
    return Namespace.prototype.resolveAll.call(this);
};

/**
 * @override
 */
Type.prototype.get = function get(name) {
    return this.fields[name]
        || this.oneofs && this.oneofs[name]
        || this.nested && this.nested[name]
        || null;
};

/**
 * Adds a nested object to this type.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
 */
Type.prototype.add = function add(object) {

    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Field && object.extend === undefined) {
        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
        // The root object takes care of adding distinct sister-fields to the respective extended
        // type instead.

        // avoids calling the getter if not absolutely necessary because it's called quite frequently
        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
            throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
            throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
            throw Error("name '" + object.name + "' is reserved in " + this);

        if (object.parent)
            object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs)
            this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * Removes a nested object from this type.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this type
 */
Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined) {
        // See Type#add for the reason why extension fields are excluded here.

        /* istanbul ignore if */
        if (!this.fields || this.fields[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {

        /* istanbul ignore if */
        if (!this.oneofs || this.oneofs[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<{}>} Message instance
 */
Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};

/**
 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
 * @returns {Type} `this`
 */
Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).

    var fullName = this.fullName,
        types    = [];
    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);

    // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer : Writer,
        types  : types,
        util   : util
    });
    this.decode = decoder(this)({
        Reader : Reader,
        types  : types,
        util   : util
    });
    this.verify = verifier(this)({
        types : types,
        util  : util
    });
    this.fromObject = converter.fromObject(this)({
        types : types,
        util  : util
    });
    this.toObject = converter.toObject(this)({
        types : types,
        util  : util
    });

    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = Object.create(this);
        // if (wrapper.fromObject) {
            originalThis.fromObject = this.fromObject;
            this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
            originalThis.toObject = this.toObject;
            this.toObject = wrapper.toObject.bind(originalThis);
        // }
    }

    return this;
};

/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};

/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};

/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError<{}>} If required fields are missing
 */
Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};

/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader))
        reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};

/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */
Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */
Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};

/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */
Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};

/**
 * Decorator function as returned by {@link Type.d} (TypeScript).
 * @typedef TypeDecorator
 * @type {function}
 * @param {Constructor<T>} target Target constructor
 * @returns {undefined}
 * @template T extends Message<T>
 */

/**
 * Type decorator (TypeScript).
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {TypeDecorator<T>} Decorator function
 * @template T extends Message<T>
 */
Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\type.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\types.js", {"./util":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Ctypes.js
      return function (require, module, exports) {
"use strict";

/**
 * Common type constants.
 * @namespace
 */
var types = exports;

var util = require("./util");

var s = [
    "double",   // 0
    "float",    // 1
    "int32",    // 2
    "uint32",   // 3
    "sint32",   // 4
    "fixed32",  // 5
    "sfixed32", // 6
    "int64",    // 7
    "uint64",   // 8
    "sint64",   // 9
    "fixed64",  // 10
    "sfixed64", // 11
    "bool",     // 12
    "string",   // 13
    "bytes"     // 14
];

function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while (i < values.length) o[s[i + offset]] = values[i++];
    return o;
}

/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */
types.basic = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2,
    /* bytes    */ 2
]);

/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */
types.defaults = bake([
    /* double   */ 0,
    /* float    */ 0,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 0,
    /* sfixed32 */ 0,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 0,
    /* sfixed64 */ 0,
    /* bool     */ false,
    /* string   */ "",
    /* bytes    */ util.emptyArray,
    /* message  */ null
]);

/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */
types.long = bake([
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1
], 7);

/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */
types.mapKey = bake([
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2
], 2);

/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */
types.packed = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0
]);

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\types.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\util.js", {"./enum":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\enum.js","./root":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\root.js","./roots":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\roots.js","./type":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\type.js","./util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js","@protobufjs/codegen":"F:\\metamask-extension\\node_modules\\@protobufjs\\codegen\\index.js","@protobufjs/fetch":"F:\\metamask-extension\\node_modules\\@protobufjs\\fetch\\index.js","@protobufjs/path":"F:\\metamask-extension\\node_modules\\@protobufjs\\path\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cutil.js
      return function (require, module, exports) {
"use strict";

/**
 * Various utility functions.
 * @namespace
 */
var util = module.exports = require("./util/minimal");

var roots = require("./roots");

var Type, // cyclic
    Enum;

util.codegen = require("@protobufjs/codegen");
util.fetch   = require("@protobufjs/fetch");
util.path    = require("@protobufjs/path");

/**
 * Node's fs module if available.
 * @type {Object.<string,*>}
 */
util.fs = util.inquire("fs");

/**
 * Converts an object's values to an array.
 * @param {Object.<string,*>} object Object to convert
 * @returns {Array.<*>} Converted array
 */
util.toArray = function toArray(object) {
    if (object) {
        var keys  = Object.keys(object),
            array = new Array(keys.length),
            index = 0;
        while (index < keys.length)
            array[index] = object[keys[index++]];
        return array;
    }
    return [];
};

/**
 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
 * @param {Array.<*>} array Array to convert
 * @returns {Object.<string,*>} Converted object
 */
util.toObject = function toObject(array) {
    var object = {},
        index  = 0;
    while (index < array.length) {
        var key = array[index++],
            val = array[index++];
        if (val !== undefined)
            object[key] = val;
    }
    return object;
};

var safePropBackslashRe = /\\/g,
    safePropQuoteRe     = /"/g;

/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
util.isReserved = function isReserved(name) {
    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
};

/**
 * Returns a safe property accessor for the specified property name.
 * @param {string} prop Property name
 * @returns {string} Safe accessor
 */
util.safeProp = function safeProp(prop) {
    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
    return "." + prop;
};

/**
 * Converts the first character of a string to upper case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.ucFirst = function ucFirst(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
};

var camelCaseRe = /_([a-z])/g;

/**
 * Converts a string to camel case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.camelCase = function camelCase(str) {
    return str.substring(0, 1)
         + str.substring(1)
               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
};

/**
 * Compares reflected fields by id.
 * @param {Field} a First field
 * @param {Field} b Second field
 * @returns {number} Comparison value
 */
util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};

/**
 * Decorator helper for types (TypeScript).
 * @param {Constructor<T>} ctor Constructor function
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {Type} Reflected type
 * @template T extends Message<T>
 * @property {Root} root Decorators root
 */
util.decorateType = function decorateType(ctor, typeName) {

    /* istanbul ignore if */
    if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }

    /* istanbul ignore next */
    if (!Type)
        Type = require("./type");

    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
    return type;
};

var decorateEnumIndex = 0;

/**
 * Decorator helper for enums (TypeScript).
 * @param {Object} object Enum object
 * @returns {Enum} Reflected enum
 */
util.decorateEnum = function decorateEnum(object) {

    /* istanbul ignore if */
    if (object.$type)
        return object.$type;

    /* istanbul ignore next */
    if (!Enum)
        Enum = require("./enum");

    var enm = new Enum("Enum" + decorateEnumIndex++, object);
    util.decorateRoot.add(enm);
    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
    return enm;
};


/**
 * Sets the value of a property by property path. If a value already exists, it is turned to an array
 * @param {Object.<string,*>} dst Destination object
 * @param {string} path dot '.' delimited path of the property to set
 * @param {Object} value the value to set
 * @returns {Object.<string,*>} Destination object
 */
util.setProperty = function setProperty(dst, path, value) {
    function setProp(dst, path, value) {
        var part = path.shift();
        if (part === "__proto__") {
          return dst;
        }
        if (path.length > 0) {
            dst[part] = setProp(dst[part] || {}, path, value);
        } else {
            var prevValue = dst[part];
            if (prevValue)
                value = [].concat(prevValue).concat(value);
            dst[part] = value;
        }
        return dst;
    }

    if (typeof dst !== "object")
        throw TypeError("dst must be an object");
    if (!path)
        throw TypeError("path must be specified");

    path = path.split(".");
    return setProp(dst, path, value);
};

/**
 * Decorator root (TypeScript).
 * @name util.decorateRoot
 * @type {Root}
 * @readonly
 */
Object.defineProperty(util, "decorateRoot", {
    get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require("./root"))());
    }
});

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\util.js",}],
["F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\longbits.js", {"../util/minimal":"F:\\metamask-extension\\node_modules\\protobufjs\\src\\util\\minimal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cnode_modules%5Cprotobufjs%5Csrc%5Cutil%5Clongbits.js
      return function (require, module, exports) {
"use strict";
module.exports = LongBits;

var util = require("../util/minimal");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};

      };
    };
  }
  }
}, {package:"@metamask/eth-trezor-keyring>@trezor/connect-web>@trezor/connect>@trezor/transport>protobufjs",file:"node_modules\\protobufjs\\src\\util\\longbits.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
