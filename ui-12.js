LavaPack.loadBundle([
["F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts", {"../../../shared/constants/common":"F:\\metamask-extension\\shared\\constants\\common.ts","../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../shared/lib/fetch-with-cache":"F:\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../shared/lib/swaps-utils":"F:\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../shared/modules/swaps.utils":"F:\\metamask-extension\\shared\\modules\\swaps.utils.js","../../helpers/utils/confirm-tx.util":"F:\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cswaps.util.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.countDecimals = exports.StxErrorTypes = void 0;
exports.fetchAggregatorMetadata = fetchAggregatorMetadata;
exports.fetchSwapsFeatureFlags = fetchSwapsFeatureFlags;
exports.fetchSwapsGasPrices = fetchSwapsGasPrices;
exports.fetchToken = fetchToken;
exports.fetchTokenPrice = fetchTokenPrice;
exports.fetchTokens = fetchTokens;
exports.fetchTopAssets = fetchTopAssets;
exports.formatSwapsValueForDisplay = formatSwapsValueForDisplay;
exports.getNetworkNameByChainId = exports.getFeeForSmartTransaction = exports.getClassNameForCharLength = void 0;
exports.getRenderableNetworkFeesForQuote = getRenderableNetworkFeesForQuote;
exports.parseSmartTransactionsError = exports.isContractAddressValid = exports.getTranslatedStxErrorMessage = exports.getSwapsLivenessForNetwork = void 0;
exports.quotesToRenderableData = quotesToRenderableData;
exports.showRemainingTimeInMinAndSec = void 0;
var _bignumber = require("bignumber.js");
var _swaps = require("../../../shared/constants/swaps");
var _swaps2 = require("../../../shared/modules/swaps.utils");
var _network = require("../../../shared/constants/network");
var _confirmTx = require("../../helpers/utils/confirm-tx.util");
var _fetchWithCache = _interopRequireDefault(require("../../../shared/lib/fetch-with-cache"));
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _swapsUtils = require("../../../shared/lib/swaps-utils");
var _conversion = require("../../../shared/modules/conversion.utils");
var _common = require("../../../shared/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const CACHE_REFRESH_FIVE_MINUTES = 300000;
const USD_CURRENCY_CODE = 'usd';
const clientIdHeader = {
  'X-Client-Id': _swaps.SWAPS_CLIENT_ID
};
const TOKEN_VALIDATORS = [{
  property: 'address',
  type: 'string',
  validator: input => (0, _hexstringUtils.isValidHexAddress)(input, {
    allowNonPrefixed: false
  })
}, {
  property: 'symbol',
  type: 'string',
  validator: string => (0, _swapsUtils.truthyString)(string) && string.length <= 12
}, {
  property: 'decimals',
  type: 'string|number',
  validator: string => Number(string) >= 0 && Number(string) <= 36
}];
const TOP_ASSET_VALIDATORS = TOKEN_VALIDATORS.slice(0, 2);
const AGGREGATOR_METADATA_VALIDATORS = [{
  property: 'color',
  type: 'string',
  validator: string => Boolean(string.match(/^#[A-Fa-f0-9]+$/u))
}, {
  property: 'title',
  type: 'string',
  validator: _swapsUtils.truthyString
}, {
  property: 'icon',
  type: 'string',
  validator: string => Boolean(string.match(/^data:image/u))
}];
const isValidDecimalNumber = string => !isNaN(string) && string.match(/^[.0-9]+$/u) && !isNaN(parseFloat(string));
const SWAP_GAS_PRICE_VALIDATOR = [{
  property: 'SafeGasPrice',
  type: 'string',
  validator: isValidDecimalNumber
}, {
  property: 'ProposeGasPrice',
  type: 'string',
  validator: isValidDecimalNumber
}, {
  property: 'FastGasPrice',
  type: 'string',
  validator: isValidDecimalNumber
}];
async function fetchToken(contractAddress, chainId) {
  const tokenUrl = (0, _swapsUtils.getBaseApi)('token', chainId);
  return await (0, _fetchWithCache.default)(`${tokenUrl}?address=${contractAddress}`, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  });
}
async function fetchTokens(chainId) {
  const tokensUrl = (0, _swapsUtils.getBaseApi)('tokens', chainId);
  const tokens = await (0, _fetchWithCache.default)(tokensUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  });
  const logError = false;
  const tokenObject = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId] || null;
  return [tokenObject, ...tokens.filter(token => {
    return (0, _swapsUtils.validateData)(TOKEN_VALIDATORS, token, tokensUrl, logError) && !((0, _swaps2.isSwapsDefaultTokenSymbol)(token.symbol, chainId) || (0, _swaps2.isSwapsDefaultTokenAddress)(token.address, chainId));
  })];
}
async function fetchAggregatorMetadata(chainId) {
  const aggregatorMetadataUrl = (0, _swapsUtils.getBaseApi)('aggregatorMetadata', chainId);
  const aggregators = await (0, _fetchWithCache.default)(aggregatorMetadataUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  });
  const filteredAggregators = {};
  for (const aggKey in aggregators) {
    if ((0, _swapsUtils.validateData)(AGGREGATOR_METADATA_VALIDATORS, aggregators[aggKey], aggregatorMetadataUrl)) {
      filteredAggregators[aggKey] = aggregators[aggKey];
    }
  }
  return filteredAggregators;
}
async function fetchTopAssets(chainId) {
  const topAssetsUrl = (0, _swapsUtils.getBaseApi)('topAssets', chainId);
  const response = (await (0, _fetchWithCache.default)(topAssetsUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  })) || [];
  const topAssetsMap = response.reduce((_topAssetsMap, asset, index) => {
    if ((0, _swapsUtils.validateData)(TOP_ASSET_VALIDATORS, asset, topAssetsUrl)) {
      return {
        ..._topAssetsMap,
        [asset.address]: {
          index: String(index)
        }
      };
    }
    return _topAssetsMap;
  }, {});
  return topAssetsMap;
}
async function fetchSwapsFeatureFlags() {
  const v2ApiBaseUrl = false ? _swaps.SWAPS_DEV_API_V2_BASE_URL : _swaps.SWAPS_API_V2_BASE_URL;
  return await (0, _fetchWithCache.default)(`${v2ApiBaseUrl}/featureFlags`, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: 600000
  });
}
async function fetchTokenPrice(address) {
  var _prices$address;
  const query = `contract_addresses=${address}&vs_currencies=eth`;
  const prices = await (0, _fetchWithCache.default)(`https://api.coingecko.com/api/v3/simple/token_price/ethereum?${query}`, {
    method: 'GET'
  }, {
    cacheRefreshTime: 60000
  });
  return prices === null || prices === void 0 ? void 0 : (_prices$address = prices[address]) === null || _prices$address === void 0 ? void 0 : _prices$address.eth;
}
async function fetchSwapsGasPrices(chainId) {
  const gasPricesUrl = (0, _swapsUtils.getBaseApi)('gasPrices', chainId);
  const response = await (0, _fetchWithCache.default)(gasPricesUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: 30000
  });
  const responseIsValid = (0, _swapsUtils.validateData)(SWAP_GAS_PRICE_VALIDATOR, response, gasPricesUrl);
  if (!responseIsValid) {
    throw new Error(`${gasPricesUrl} response is invalid`);
  }
  const {
    SafeGasPrice: safeLow,
    ProposeGasPrice: average,
    FastGasPrice: fast
  } = response;
  return {
    safeLow,
    average,
    fast
  };
}
const getFeeForSmartTransaction = ({
  chainId,
  currentCurrency,
  conversionRate,
  USDConversionRate,
  nativeCurrencySymbol,
  feeInWeiDec
}) => {
  var _SWAPS_CHAINID_DEFAUL;
  const feeInWeiHex = (0, _conversion.decimalToHex)(feeInWeiDec);
  const ethFee = (0, _conversion.getValueFromWeiHex)({
    value: feeInWeiHex,
    toDenomination: _common.EtherDenomination.ETH,
    numberOfDecimals: 5
  });
  const rawNetworkFees = (0, _conversion.getValueFromWeiHex)({
    value: feeInWeiHex,
    toCurrency: currentCurrency,
    conversionRate,
    numberOfDecimals: 2
  });
  let feeInUsd;
  if (currentCurrency === USD_CURRENCY_CODE) {
    feeInUsd = rawNetworkFees;
  } else {
    feeInUsd = (0, _conversion.getValueFromWeiHex)({
      value: feeInWeiHex,
      toCurrency: USD_CURRENCY_CODE,
      conversionRate: USDConversionRate,
      numberOfDecimals: 2
    });
  }
  const formattedNetworkFee = (0, _confirmTx.formatCurrency)(rawNetworkFees, currentCurrency);
  const chainCurrencySymbolToUse = nativeCurrencySymbol || ((_SWAPS_CHAINID_DEFAUL = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _SWAPS_CHAINID_DEFAUL === void 0 ? void 0 : _SWAPS_CHAINID_DEFAUL.symbol);
  return {
    feeInUsd,
    feeInFiat: formattedNetworkFee,
    feeInEth: `${ethFee} ${chainCurrencySymbolToUse}`,
    rawEthFee: ethFee
  };
};
exports.getFeeForSmartTransaction = getFeeForSmartTransaction;
function getRenderableNetworkFeesForQuote({
  tradeGas,
  approveGas,
  gasPrice,
  currentCurrency,
  conversionRate,
  USDConversionRate,
  tradeValue,
  sourceSymbol,
  sourceAmount,
  chainId,
  nativeCurrencySymbol,
  multiLayerL1FeeTotal
}) {
  const totalGasLimitForCalculation = new _bignumber.BigNumber(tradeGas || '0x0', 16).plus(approveGas || '0x0', 16).toString(16);
  let gasTotalInWeiHex = (0, _transactionsControllerUtils.calcGasTotal)(totalGasLimitForCalculation, gasPrice);
  if (multiLayerL1FeeTotal !== null) {
    gasTotalInWeiHex = (0, _conversion.sumHexes)(gasTotalInWeiHex || '0x0', multiLayerL1FeeTotal || '0x0');
  }
  const nonGasFee = new _bignumber.BigNumber(tradeValue, 16).minus((0, _swaps2.isSwapsDefaultTokenSymbol)(sourceSymbol, chainId) ? sourceAmount : 0, 10).toString(16);
  const totalWeiCost = new _bignumber.BigNumber(gasTotalInWeiHex, 16).plus(nonGasFee, 16).toString(16);
  const ethFee = (0, _conversion.getValueFromWeiHex)({
    value: totalWeiCost,
    toDenomination: _common.EtherDenomination.ETH,
    numberOfDecimals: 5
  });
  const rawNetworkFees = (0, _conversion.getValueFromWeiHex)({
    value: totalWeiCost,
    toCurrency: currentCurrency,
    conversionRate,
    numberOfDecimals: 2
  });
  const formattedNetworkFee = (0, _confirmTx.formatCurrency)(rawNetworkFees, currentCurrency);
  let feeInUsd;
  if (currentCurrency === USD_CURRENCY_CODE) {
    feeInUsd = rawNetworkFees;
  } else {
    feeInUsd = (0, _conversion.getValueFromWeiHex)({
      value: totalWeiCost,
      toCurrency: USD_CURRENCY_CODE,
      conversionRate: USDConversionRate,
      numberOfDecimals: 2
    });
  }
  const chainCurrencySymbolToUse = nativeCurrencySymbol || _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId].symbol;
  return {
    rawNetworkFees,
    feeInUsd,
    rawEthFee: ethFee,
    feeInFiat: formattedNetworkFee,
    feeInEth: `${ethFee} ${chainCurrencySymbolToUse}`,
    nonGasFee
  };
}
function quotesToRenderableData({
  quotes,
  gasPrice,
  conversionRate,
  currentCurrency,
  approveGas,
  tokenConversionRates,
  chainId,
  smartTransactionEstimatedGas,
  nativeCurrencySymbol,
  multiLayerL1ApprovalFeeTotal
}) {
  return Object.values(quotes).map(quote => {
    const {
      destinationAmount = 0,
      sourceAmount = 0,
      sourceTokenInfo,
      destinationTokenInfo,
      slippage,
      aggType,
      aggregator,
      gasEstimateWithRefund,
      averageGas,
      fee,
      trade,
      multiLayerL1TradeFeeTotal
    } = quote;
    let multiLayerL1FeeTotal = null;
    if (multiLayerL1TradeFeeTotal !== null && multiLayerL1ApprovalFeeTotal !== null) {
      multiLayerL1FeeTotal = (0, _conversion.sumHexes)(multiLayerL1TradeFeeTotal || '0x0', multiLayerL1ApprovalFeeTotal || '0x0');
    } else if (multiLayerL1TradeFeeTotal !== null) {
      multiLayerL1FeeTotal = multiLayerL1TradeFeeTotal;
    }
    const sourceValue = (0, _transactionsControllerUtils.calcTokenAmount)(sourceAmount, sourceTokenInfo.decimals).toString(10);
    const destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals).toPrecision(8);
    let feeInFiat = null;
    let feeInEth = null;
    let rawNetworkFees = null;
    let rawEthFee = null;
    ({
      feeInFiat,
      feeInEth,
      rawNetworkFees,
      rawEthFee
    } = getRenderableNetworkFeesForQuote({
      tradeGas: gasEstimateWithRefund || (0, _conversion.decimalToHex)(averageGas || 800000),
      approveGas,
      gasPrice,
      currentCurrency,
      conversionRate,
      tradeValue: trade.value,
      sourceSymbol: sourceTokenInfo.symbol,
      sourceAmount,
      chainId,
      multiLayerL1FeeTotal
    }));
    if (smartTransactionEstimatedGas) {
      ({
        feeInFiat,
        feeInEth
      } = getFeeForSmartTransaction({
        chainId,
        currentCurrency,
        conversionRate,
        nativeCurrencySymbol,
        feeInWeiDec: smartTransactionEstimatedGas.feeEstimate
      }));
    }
    const slippageMultiplier = new _bignumber.BigNumber(100 - slippage).div(100);
    const minimumAmountReceived = new _bignumber.BigNumber(destinationValue).times(slippageMultiplier).toFixed(6);
    const tokenConversionRate = tokenConversionRates[destinationTokenInfo.address];
    const ethValueOfTrade = (0, _swaps2.isSwapsDefaultTokenSymbol)(destinationTokenInfo.symbol, chainId) ? (0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals).minus(rawEthFee, 10) : new _bignumber.BigNumber(tokenConversionRate || 0, 10).times((0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals), 10).minus(rawEthFee, 10);
    let liquiditySourceKey;
    let renderedSlippage = slippage;
    if (aggType === 'AGG') {
      liquiditySourceKey = 'swapAggregator';
    } else if (aggType === 'RFQ') {
      liquiditySourceKey = 'swapRequestForQuotation';
      renderedSlippage = 0;
    } else if (aggType === 'DEX') {
      liquiditySourceKey = 'swapDecentralizedExchange';
    } else if (aggType === 'CONTRACT') {
      liquiditySourceKey = 'swapDirectContract';
    } else {
      liquiditySourceKey = 'swapUnknown';
    }
    return {
      aggId: aggregator,
      amountReceiving: `${destinationValue} ${destinationTokenInfo.symbol}`,
      destinationTokenDecimals: destinationTokenInfo.decimals,
      destinationTokenSymbol: destinationTokenInfo.symbol,
      destinationTokenValue: formatSwapsValueForDisplay(destinationValue),
      destinationIconUrl: destinationTokenInfo.iconUrl,
      isBestQuote: quote.isBestQuote,
      liquiditySourceKey,
      feeInEth,
      detailedNetworkFees: `${feeInEth} (${feeInFiat})`,
      networkFees: feeInFiat,
      quoteSource: aggType,
      rawNetworkFees,
      slippage: renderedSlippage,
      sourceTokenDecimals: sourceTokenInfo.decimals,
      sourceTokenSymbol: sourceTokenInfo.symbol,
      sourceTokenValue: sourceValue,
      sourceTokenIconUrl: sourceTokenInfo.iconUrl,
      ethValueOfTrade,
      minimumAmountReceived,
      metaMaskFee: fee
    };
  });
}
function formatSwapsValueForDisplay(destinationAmount) {
  let amountToDisplay = (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(destinationAmount, 12);
  if (amountToDisplay.match(/e[+-]/u)) {
    amountToDisplay = new _bignumber.BigNumber(amountToDisplay).toFixed();
  }
  return amountToDisplay;
}
const getClassNameForCharLength = (num, classNamePrefix) => {
  let modifier;
  if (!num || num.length <= 10) {
    modifier = 'lg';
  } else if (num.length > 10 && num.length <= 13) {
    modifier = 'md';
  } else {
    modifier = 'sm';
  }
  return `${classNamePrefix}--${modifier}`;
};

/**
 * Checks whether a contract address is valid before swapping tokens.
 *
 * @param contractAddress - E.g. "0x881d40237659c251811cec9c364ef91dc08d300c" for mainnet
 * @param chainId - The hex encoded chain ID to check
 * @returns Whether a contract address is valid or not
 */
exports.getClassNameForCharLength = getClassNameForCharLength;
const isContractAddressValid = (contractAddress, chainId) => {
  if (!contractAddress || !_swaps.ALLOWED_CONTRACT_ADDRESSES[chainId]) {
    return false;
  }
  return _swaps.ALLOWED_CONTRACT_ADDRESSES[chainId].some(
  // Sometimes we get a contract address with a few upper-case chars and since addresses are
  // case-insensitive, we compare lowercase versions for validity.
  allowedContractAddress => contractAddress.toLowerCase() === allowedContractAddress.toLowerCase());
};

/**
 * @param chainId
 * @returns string e.g. ethereum, bsc or polygon
 */
exports.isContractAddressValid = isContractAddressValid;
const getNetworkNameByChainId = chainId => {
  switch (chainId) {
    case _network.CHAIN_IDS.MAINNET:
      return _swaps.ETHEREUM;
    case _network.CHAIN_IDS.BSC:
      return _swaps.BSC;
    case _network.CHAIN_IDS.POLYGON:
      return _swaps.POLYGON;
    case _network.CHAIN_IDS.GOERLI:
      return _swaps.GOERLI;
    case _network.CHAIN_IDS.AVALANCHE:
      return _swaps.AVALANCHE;
    case _network.CHAIN_IDS.OPTIMISM:
      return _swaps.OPTIMISM;
    case _network.CHAIN_IDS.ARBITRUM:
      return _swaps.ARBITRUM;
    default:
      return '';
  }
};

/**
 * It returns info about if Swaps are enabled and if we should use our new APIs for it.
 *
 * @param chainId
 * @param swapsFeatureFlags
 * @returns object with 2 items: "swapsFeatureIsLive"
 */
exports.getNetworkNameByChainId = getNetworkNameByChainId;
const getSwapsLivenessForNetwork = (chainId, swapsFeatureFlags = {}) => {
  const networkName = getNetworkNameByChainId(chainId);
  // Use old APIs for testnet and Goerli.
  if ([_network.CHAIN_IDS.LOCALHOST, _network.CHAIN_IDS.GOERLI].includes(chainId)) {
    return {
      swapsFeatureIsLive: true
    };
  }
  // If a network name is not found in the list of feature flags, disable Swaps.
  if (!swapsFeatureFlags[networkName]) {
    return {
      swapsFeatureIsLive: false
    };
  }
  const isNetworkEnabledForNewApi = swapsFeatureFlags[networkName].extensionActive;
  if (isNetworkEnabledForNewApi) {
    return {
      swapsFeatureIsLive: true
    };
  }
  return {
    swapsFeatureIsLive: swapsFeatureFlags[networkName].fallbackToV1
  };
};

/**
 * @param value
 * @returns number
 */
exports.getSwapsLivenessForNetwork = getSwapsLivenessForNetwork;
const countDecimals = value => {
  var _value$toString$split;
  if (!value || Math.floor(value) === value) {
    return 0;
  }
  return ((_value$toString$split = value.toString().split('.')[1]) === null || _value$toString$split === void 0 ? void 0 : _value$toString$split.length) || 0;
};
exports.countDecimals = countDecimals;
const showRemainingTimeInMinAndSec = remainingTimeInSec => {
  if (!Number.isInteger(remainingTimeInSec)) {
    return '0:00';
  }
  const minutes = Math.floor(remainingTimeInSec / 60);
  const seconds = remainingTimeInSec % 60;
  return `${minutes}:${seconds.toString().padStart(2, '0')}`;
};
exports.showRemainingTimeInMinAndSec = showRemainingTimeInMinAndSec;
let StxErrorTypes = /*#__PURE__*/function (StxErrorTypes) {
  StxErrorTypes["unavailable"] = "unavailable";
  StxErrorTypes["notEnoughFunds"] = "not_enough_funds";
  StxErrorTypes["regularTxPending"] = "regular_tx_pending";
  return StxErrorTypes;
}({});
exports.StxErrorTypes = StxErrorTypes;
const getTranslatedStxErrorMessage = (errorType, t) => {
  switch (errorType) {
    case StxErrorTypes.unavailable:
    case StxErrorTypes.regularTxPending:
      return t('smartSwapsErrorUnavailable');
    case StxErrorTypes.notEnoughFunds:
      return t('smartSwapsErrorNotEnoughFunds');
    default:
      return t('smartSwapsErrorUnavailable');
  }
};
exports.getTranslatedStxErrorMessage = getTranslatedStxErrorMessage;
const parseSmartTransactionsError = errorMessage => {
  const errorJson = errorMessage.slice(12);
  return JSON.parse(errorJson.trim());
};
exports.parseSmartTransactionsError = parseSmartTransactionsError;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\swaps.util.ts",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\transaction-settings\\transaction-settings.js", {"../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/button-group":"F:\\metamask-extension\\ui\\components\\ui\\button-group\\index.js","../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../components/ui/toggle-button":"F:\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../components/ui/typography":"F:\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Ctransaction-settings%5Ctransaction-settings.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionSettings;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../../contexts/i18n");
var _buttonGroup = _interopRequireDefault(require("../../../components/ui/button-group"));
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));
var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _typography = _interopRequireDefault(require("../../../components/ui/typography"));
var _designSystem = require("../../../helpers/constants/design-system");
var _swaps = require("../swaps.util");
var _swaps2 = require("../../../../shared/constants/swaps");
var _componentLibrary = require("../../../components/component-library");
var _actions = require("../../../store/actions");
var _swaps3 = require("../../../ducks/swaps/swaps");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function TransactionSettings({
  onSelect,
  onModalClose,
  maxAllowedSlippage,
  currentSlippage,
  smartTransactionsEnabled,
  smartTransactionsOptInStatus,
  setSmartTransactionsOptInStatus,
  currentSmartTransactionsError,
  isDirectWrappingEnabled
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const swapsErrorKey = (0, _reactRedux.useSelector)(_swaps3.getSwapsErrorKey);
  const [customValue, setCustomValue] = (0, _react.useState)(() => {
    if (typeof currentSlippage === 'number' && !Object.values(_swaps2.Slippage).includes(currentSlippage)) {
      return currentSlippage.toString();
    }
    return '';
  });
  const [enteringCustomValue, setEnteringCustomValue] = (0, _react.useState)(false);
  const [activeButtonIndex, setActiveButtonIndex] = (0, _react.useState)(() => {
    if (currentSlippage === _swaps2.Slippage.high) {
      return 1; // 3% slippage.
    } else if (currentSlippage === _swaps2.Slippage.default) {
      return 0; // 2% slippage.
    } else if (typeof currentSlippage === 'number') {
      return 2; // Custom slippage.
    }

    return 0;
  });
  const [inputRef, setInputRef] = (0, _react.useState)(null);
  const [newSlippage, setNewSlippage] = (0, _react.useState)(currentSlippage);
  const [newSmartTransactionsOptInStatus, setNewSmartTransactionsOptInStatus] = (0, _react.useState)(smartTransactionsOptInStatus);
  const didFormChange = newSlippage !== currentSlippage || newSmartTransactionsOptInStatus !== smartTransactionsOptInStatus;
  const updateTransactionSettings = () => {
    if (newSlippage !== currentSlippage) {
      onSelect(newSlippage);
    }
    if (newSmartTransactionsOptInStatus !== smartTransactionsOptInStatus) {
      setSmartTransactionsOptInStatus(newSmartTransactionsOptInStatus);
    }
  };
  let notificationText = '';
  let notificationTitle = '';
  let notificationSeverity = _designSystem.SEVERITIES.INFO;
  if (customValue) {
    // customValue is a string, e.g. '0'
    if (Number(customValue) < 0) {
      notificationSeverity = _designSystem.SEVERITIES.DANGER;
      notificationText = t('swapSlippageNegativeDescription');
      notificationTitle = t('swapSlippageNegativeTitle');
      dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SLIPPAGE_NEGATIVE_ERROR));
    } else if (Number(customValue) > 0 && Number(customValue) <= 1) {
      // We will not show this warning for 0% slippage, because we will only
      // return non-slippage quotes from off-chain makers.
      notificationSeverity = _designSystem.SEVERITIES.WARNING;
      notificationText = t('swapSlippageTooLowDescription');
      notificationTitle = t('swapSlippageTooLowTitle');
    } else if (Number(customValue) >= 5 && Number(customValue) <= maxAllowedSlippage) {
      notificationSeverity = _designSystem.SEVERITIES.WARNING;
      notificationText = t('swapSlippageVeryHighDescription');
      notificationTitle = t('swapSlippageVeryHighTitle');
    } else if (Number(customValue) > maxAllowedSlippage) {
      notificationSeverity = _designSystem.SEVERITIES.DANGER;
      notificationText = t('swapSlippageOverLimitDescription');
      notificationTitle = t('swapSlippageOverLimitTitle');
      dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SLIPPAGE_OVER_LIMIT_ERROR));
    } else if (Number(customValue) === 0) {
      notificationSeverity = _designSystem.SEVERITIES.INFO;
      notificationText = t('swapSlippageZeroDescription');
      notificationTitle = t('swapSlippageZeroTitle');
    } else if (swapsErrorKey) {
      dispatch((0, _actions.setSwapsErrorKey)(''));
    }
  }
  const isDangerSeverity = notificationSeverity === _designSystem.SEVERITIES.DANGER;
  const customValueText = customValue || t('swapCustom');
  (0, _react.useEffect)(() => {
    if (inputRef && enteringCustomValue && window.document.activeElement !== inputRef) {
      inputRef.focus();
    }
  }, [inputRef, enteringCustomValue]);
  (0, _react.useEffect)(() => {
    if (activeButtonIndex !== 2) {
      // If it's not a custom slippage, remove an error key.
      dispatch((0, _actions.setSwapsErrorKey)(''));
    }
  }, [dispatch, activeButtonIndex]);
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.Modal, {
    onClose: onModalClose,
    isOpen: true,
    isClosedOnOutsideClick: true,
    isClosedOnEscapeKey: true,
    className: "mm-modal__custom-scrollbar"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalOverlay, null), /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalContent, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalHeader, {
    onClose: onModalClose
  }, t('transactionSettings')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FlexDirection.Column,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.stretch,
    className: "transaction-settings__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 7,
    marginBottom: 5
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, smartTransactionsEnabled && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2,
    marginBottom: 6,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    paddingRight: 3
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H6,
    boxProps: {
      paddingRight: 2
    }
  }, t('smartSwap')), currentSmartTransactionsError ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    iconFillColor: "var(--color-icon-muted)",
    contentText: (0, _swaps.getTranslatedStxErrorMessage)(currentSmartTransactionsError, t)
  }) : /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('stxTooltip'),
    iconFillColor: "var(--color-icon-muted)"
  })), /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
    value: newSmartTransactionsOptInStatus,
    onToggle: value => {
      setNewSmartTransactionsOptInStatus(!value, value);
    },
    offLabel: t('off'),
    onLabel: t('on'),
    disabled: Boolean(currentSmartTransactionsError)
  })), !isDirectWrappingEnabled && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H6,
    boxProps: {
      paddingRight: 2
    }
  }, t('swapsMaxSlippage')), currentSmartTransactionsError ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    iconFillColor: "var(--color-icon-muted)",
    contentText: (0, _swaps.getTranslatedStxErrorMessage)(currentSmartTransactionsError, t)
  }) : /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    iconFillColor: "var(--color-icon-muted)",
    contentText: t('swapSlippageTooltip')
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_buttonGroup.default, {
    defaultActiveButtonIndex: activeButtonIndex === 2 && !customValue ? 1 : activeButtonIndex,
    variant: "radiogroup",
    newActiveButtonIndex: activeButtonIndex,
    className: (0, _classnames.default)('button-group', 'transaction-settings__button-group')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(0);
      setNewSlippage(_swaps2.Slippage.default);
    }
  }, t('swapSlippagePercent', [_swaps2.Slippage.default])), /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(1);
      setNewSlippage(_swaps2.Slippage.high);
    }
  }, t('swapSlippagePercent', [_swaps2.Slippage.high])), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: (0, _classnames.default)('transaction-settings__button-group-custom-button', {
      'radio-button--danger': isDangerSeverity
    }),
    onClick: () => {
      setActiveButtonIndex(2);
      setEnteringCustomValue(true);
    }
  }, enteringCustomValue ? /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('transaction-settings__custom-input', {
      'transaction-settings__custom-input--danger': isDangerSeverity
    })
  }, /*#__PURE__*/_react.default.createElement("input", {
    "data-testid": "transaction-settings-custom-slippage",
    onChange: event => {
      const {
        value
      } = event.target;
      const isValueNumeric = !isNaN(Number(value));
      if (isValueNumeric) {
        setCustomValue(value);
        setNewSlippage(Number(value));
      }
    },
    type: "text",
    maxLength: "4",
    ref: setInputRef,
    onBlur: () => {
      setEnteringCustomValue(false);
    },
    onKeyDown: event => {
      if (event.key === 'Enter') {
        setEnteringCustomValue(false);
      }
    },
    value: customValue || ''
  })) : customValueText, (customValue || enteringCustomValue) && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-settings__percentage-suffix"
  }, "%")))))), notificationText && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 5
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: notificationSeverity,
    title: notificationTitle
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H6,
    testId: "mm-banner-alert-notification-text"
  }, notificationText)))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 5
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    onClick: () => {
      updateTransactionSettings();
      onModalClose();
    },
    block: true,
    disabled: !didFormChange,
    "data-testid": "update-transaction-settings-button"
  }, t('update'))))));
}
TransactionSettings.propTypes = {
  onSelect: _propTypes.default.func.isRequired,
  onModalClose: _propTypes.default.func.isRequired,
  maxAllowedSlippage: _propTypes.default.number.isRequired,
  currentSlippage: _propTypes.default.number,
  smartTransactionsEnabled: _propTypes.default.bool.isRequired,
  smartTransactionsOptInStatus: _propTypes.default.bool,
  setSmartTransactionsOptInStatus: _propTypes.default.func,
  currentSmartTransactionsError: _propTypes.default.string,
  isDirectWrappingEnabled: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\transaction-settings\\transaction-settings.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\index.js", {"./view-on-block-explorer":"F:\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\view-on-block-explorer.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cview-on-block-explorer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _viewOnBlockExplorer.default;
  }
});
var _viewOnBlockExplorer = _interopRequireDefault(require("./view-on-block-explorer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\view-on-block-explorer\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\view-on-block-explorer.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cview-on-block-explorer%5Cview-on-block-explorer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewOnBlockExplorer;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _i18n = require("../../../contexts/i18n");
var _util = require("../../../helpers/utils/util");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ViewOnBlockExplorer({
  blockExplorerUrl,
  sensitiveTrackingProperties
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const blockExplorerHostName = (0, _util.getURLHostName)(blockExplorerUrl);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 6,
    className: "view-on-block-explorer"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => {
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.ExternalLinkClicked,
        category: _metametrics2.MetaMetricsEventCategory.Swaps,
        sensitiveProperties: sensitiveTrackingProperties,
        properties: {
          link_type: _metametrics2.MetaMetricsEventLinkType.TransactionBlockExplorer,
          location: 'Swap Transaction',
          url_domain: blockExplorerHostName
        }
      });
      global.platform.openTab({
        url: blockExplorerUrl
      });
    }
  }, t('viewOnCustomBlockExplorer', [t('blockExplorerSwapAction'), blockExplorerHostName])));
}
ViewOnBlockExplorer.propTypes = {
  blockExplorerUrl: _propTypes.default.string.isRequired,
  sensitiveTrackingProperties: _propTypes.default.object.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\view-on-block-explorer\\view-on-block-explorer.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\view-quote\\index.js", {"./view-quote":"F:\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cview-quote%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _viewQuote.default;
  }
});
var _viewQuote = _interopRequireDefault(require("./view-quote"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\view-quote\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote-price-difference.js", {"../../../../shared/constants/gas":"F:\\metamask-extension\\shared\\constants\\gas.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/actionable-message/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/tooltip":"F:\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cview-quote%5Cview-quote-price-difference.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewQuotePriceDifference;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../../contexts/i18n");
var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));
var _tooltip = _interopRequireDefault(require("../../../components/ui/tooltip"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _gas = require("../../../../shared/constants/gas");
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ViewQuotePriceDifference(props) {
  const {
    usedQuote,
    sourceTokenValue,
    destinationTokenValue,
    onAcknowledgementClick,
    acknowledged,
    priceSlippageFromSource,
    priceSlippageFromDestination,
    priceDifferencePercentage,
    priceSlippageUnknownFiatValue
  } = props;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  let priceDifferenceTitle = '';
  let priceDifferenceMessage = '';
  let priceDifferenceClass = '';
  let priceDifferenceAcknowledgementText = '';
  if (priceSlippageUnknownFiatValue) {
    // A calculation error signals we cannot determine dollar value
    priceDifferenceTitle = t('swapPriceUnavailableTitle');
    priceDifferenceMessage = t('swapPriceUnavailableDescription');
    priceDifferenceClass = _gas.GasRecommendations.high;
    priceDifferenceAcknowledgementText = t('tooltipApproveButton');
  } else {
    priceDifferenceTitle = t('swapPriceDifferenceTitle', [priceDifferencePercentage]);
    priceDifferenceMessage = t('swapPriceDifference', [sourceTokenValue,
    // Number of source token to swap
    usedQuote.sourceTokenInfo.symbol,
    // Source token symbol
    priceSlippageFromSource,
    // Source tokens total value
    destinationTokenValue,
    // Number of destination tokens in return
    usedQuote.destinationTokenInfo.symbol,
    // Destination token symbol,
    priceSlippageFromDestination // Destination tokens total value
    ]);

    priceDifferenceClass = usedQuote.priceSlippage.bucket;
    priceDifferenceAcknowledgementText = t('tooltipApproveButton');
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__price-difference-warning-wrapper', priceDifferenceClass)
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents-text"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      justifyContent: _designSystem.JustifyContent.spaceBetween,
      paddingBottom: 2
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents-title"
    }, priceDifferenceTitle), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      title: t('swapPriceImpactTooltip')
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Info
    }))), priceDifferenceMessage, !acknowledged && /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents-actions"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: () => {
        onAcknowledgementClick();
      }
    }, priceDifferenceAcknowledgementText))))
  }));
}
ViewQuotePriceDifference.propTypes = {
  usedQuote: _propTypes.default.object,
  sourceTokenValue: _propTypes.default.string,
  destinationTokenValue: _propTypes.default.string,
  onAcknowledgementClick: _propTypes.default.func,
  acknowledged: _propTypes.default.bool,
  priceSlippageFromSource: _propTypes.default.string,
  priceSlippageFromDestination: _propTypes.default.string,
  priceDifferencePercentage: _propTypes.default.number,
  priceSlippageUnknownFiatValue: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\view-quote\\view-quote-price-difference.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote.js", {"../../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/gas":"F:\\metamask-extension\\shared\\constants\\gas.ts","../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/lib/metamask-controller-utils":"F:\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../../shared/lib/swaps-utils":"F:\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../../../shared/modules/transaction.utils":"F:\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../components/ui/actionable-message/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/pulse-loader":"F:\\metamask-extension\\ui\\components\\ui\\pulse-loader\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"F:\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../../hooks/gasFeeInput/useGasFeeInputs":"F:\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","../../../hooks/useEqualityCheck":"F:\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../hooks/useEthFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js","../../../hooks/usePrevious":"F:\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../hooks/useTokenTracker":"F:\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actionConstants":"F:\\metamask-extension\\ui\\store\\actionConstants.ts","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../../confirm-approve/confirm-approve.util":"F:\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","../countdown-timer":"F:\\metamask-extension\\ui\\pages\\swaps\\countdown-timer\\index.js","../fee-card":"F:\\metamask-extension\\ui\\pages\\swaps\\fee-card\\index.js","../main-quote-summary":"F:\\metamask-extension\\ui\\pages\\swaps\\main-quote-summary\\index.js","../select-quote-popover":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\index.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","./view-quote-price-difference":"F:\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote-price-difference.js","@sentry/browser":"F:\\metamask-extension\\node_modules\\@sentry\\browser\\cjs\\index.js","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cview-quote%5Cview-quote.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewQuote;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _lodash = require("lodash");
var _classnames = _interopRequireDefault(require("classnames"));
var _browser = require("@sentry/browser");
var _i18n = require("../../../contexts/i18n");
var _selectQuotePopover = _interopRequireDefault(require("../select-quote-popover"));
var _useEthFiatAmount = require("../../../hooks/useEthFiatAmount");
var _useEqualityCheck = require("../../../hooks/useEqualityCheck");
var _usePrevious = require("../../../hooks/usePrevious");
var _useGasFeeInputs = require("../../../hooks/gasFeeInput/useGasFeeInputs");
var _metametrics = require("../../../contexts/metametrics");
var _feeCard = _interopRequireDefault(require("../fee-card"));
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _actions = require("../../../store/actions");
var _actionConstants = require("../../../store/actionConstants");
var _routes = require("../../../helpers/constants/routes");
var _mainQuoteSummary = _interopRequireDefault(require("../main-quote-summary"));
var _confirmApprove = require("../../confirm-approve/confirm-approve.util");
var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));
var _swaps2 = require("../swaps.util");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _swaps3 = require("../../../../shared/constants/swaps");
var _gas = require("../../../../shared/constants/gas");
var _countdownTimer = _interopRequireDefault(require("../countdown-timer"));
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _pulseLoader = _interopRequireDefault(require("../../../components/ui/pulse-loader"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _stringUtils = require("../../../../shared/modules/string-utils");
var _transaction = require("../../../../shared/modules/transaction.utils");
var _metamaskControllerUtils = require("../../../../shared/lib/metamask-controller-utils");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _util = require("../../../../app/scripts/lib/util");
var _swapsUtils = require("../../../../shared/lib/swaps-utils");
var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));
var _conversion = require("../../../../shared/modules/conversion.utils");
var _viewQuotePriceDifference = _interopRequireDefault(require("./view-quote-price-difference"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// TODO: Replace this with a different loading component.

let intervalId;
function ViewQuote() {
  var _usedQuote$trade, _usedQuote$priceSlipp, _usedQuote$priceSlipp2, _usedQuote$priceSlipp3, _usedQuote$priceSlipp4, _usedQuote$priceSlipp5;
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [dispatchedSafeRefetch, setDispatchedSafeRefetch] = (0, _react.useState)(false);
  const [submitClicked, setSubmitClicked] = (0, _react.useState)(false);
  const [selectQuotePopoverShown, setSelectQuotePopoverShown] = (0, _react.useState)(false);
  const [warningHidden, setWarningHidden] = (0, _react.useState)(false);
  const [originalApproveAmount, setOriginalApproveAmount] = (0, _react.useState)(null);
  const [multiLayerL1FeeTotal, setMultiLayerL1FeeTotal] = (0, _react.useState)(null);
  const [multiLayerL1ApprovalFeeTotal, setMultiLayerL1ApprovalFeeTotal] = (0, _react.useState)(null);
  // We need to have currentTimestamp in state, otherwise it would change with each rerender.
  const [currentTimestamp] = (0, _react.useState)(Date.now());
  const [acknowledgedPriceDifference, setAcknowledgedPriceDifference] = (0, _react.useState)(false);
  const priceDifferenceRiskyBuckets = [_gas.GasRecommendations.high, _gas.GasRecommendations.medium];
  const routeState = (0, _reactRedux.useSelector)(_swaps.getBackgroundSwapRouteState);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  (0, _react.useEffect)(() => {
    if (!Object.values(quotes).length) {
      history.push(_routes.BUILD_QUOTE_ROUTE);
    } else if (routeState === 'awaiting') {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }
  }, [history, quotes, routeState]);
  const quotesLastFetched = (0, _reactRedux.useSelector)(_swaps.getQuotesLastFetched);

  // Select necessary data
  const gasPrice = (0, _reactRedux.useSelector)(_swaps.getUsedSwapsGasPrice);
  const customMaxGas = (0, _reactRedux.useSelector)(_swaps.getCustomSwapsGas);
  const customMaxFeePerGas = (0, _reactRedux.useSelector)(_swaps.getCustomMaxFeePerGas);
  const customMaxPriorityFeePerGas = (0, _reactRedux.useSelector)(_swaps.getCustomMaxPriorityFeePerGas);
  const swapsUserFeeLevel = (0, _reactRedux.useSelector)(_swaps.getSwapsUserFeeLevel);
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const memoizedTokenConversionRates = (0, _useEqualityCheck.useEqualityCheck)(tokenConversionRates);
  const {
    balance: ethBalance
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_selectors.conversionRateSelector);
  const USDConversionRate = (0, _reactRedux.useSelector)(_selectors.getUSDConversionRate);
  const isMultiLayerFeeNetwork = (0, _reactRedux.useSelector)(_selectors.getIsMultiLayerFeeNetwork);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const swapsTokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559);
  const balanceError = (0, _reactRedux.useSelector)(_swaps.getBalanceError);
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const approveTxParams = (0, _reactRedux.useSelector)(_swaps.getApproveTxParams, _reactRedux.shallowEqual);
  const selectedQuote = (0, _reactRedux.useSelector)(_swaps.getSelectedQuote, _lodash.isEqual);
  const topQuote = (0, _reactRedux.useSelector)(_swaps.getTopQuote, _lodash.isEqual);
  const usedQuote = selectedQuote || topQuote;
  const tradeValue = (usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$trade = usedQuote.trade) === null || _usedQuote$trade === void 0 ? void 0 : _usedQuote$trade.value) ?? '0x0';
  const swapsQuoteRefreshTime = (0, _reactRedux.useSelector)(_swaps.getSwapsQuoteRefreshTime);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _lodash.isEqual);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const nativeCurrencySymbol = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const reviewSwapClickedTimestamp = (0, _reactRedux.useSelector)(_swaps.getReviewSwapClickedTimestamp);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const swapsSTXLoading = (0, _reactRedux.useSelector)(_swaps.getSwapsSTXLoading);
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  const smartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsError);
  const smartTransactionFees = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionFees, _lodash.isEqual);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const swapsNetworkConfig = (0, _reactRedux.useSelector)(_swaps.getSwapsNetworkConfig, _reactRedux.shallowEqual);
  const unsignedTransaction = usedQuote.trade;
  const isSmartTransaction = currentSmartTransactionsEnabled && smartTransactionsOptInStatus;
  let gasFeeInputs;
  if (networkAndAccountSupports1559) {
    // For Swaps we want to get 'high' estimations by default.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    gasFeeInputs = (0, _useGasFeeInputs.useGasFeeInputs)(_gas.GasRecommendations.high, {
      userFeeLevel: swapsUserFeeLevel || _gas.GasRecommendations.high
    });
  }
  const fetchParamsSourceToken = fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.sourceToken;
  const additionalTrackingParams = {
    reg_tx_fee_in_usd: undefined,
    reg_tx_fee_in_eth: undefined,
    reg_tx_max_fee_in_usd: undefined,
    reg_tx_max_fee_in_eth: undefined,
    stx_fee_in_usd: undefined,
    stx_fee_in_eth: undefined,
    stx_max_fee_in_usd: undefined,
    stx_max_fee_in_eth: undefined
  };
  const usedGasLimit = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimateWithRefund) || `0x${(0, _conversion.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.averageGas) || 0)}`;
  const gasLimitForMax = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimate) || `0x0`;
  const usedGasLimitWithMultiplier = new _bignumber.default(gasLimitForMax, 16).times((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasMultiplier) || _swaps.FALLBACK_GAS_MULTIPLIER, 10).round(0).toString(16);
  const nonCustomMaxGasLimit = usedQuote !== null && usedQuote !== void 0 && usedQuote.gasEstimate ? usedGasLimitWithMultiplier : `0x${(0, _conversion.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.maxGas) || 0)}`;
  const maxGasLimit = customMaxGas || nonCustomMaxGasLimit;
  let maxFeePerGas;
  let maxPriorityFeePerGas;
  let baseAndPriorityFeePerGas;

  // EIP-1559 gas fees.
  if (networkAndAccountSupports1559) {
    const {
      maxFeePerGas: suggestedMaxFeePerGas,
      maxPriorityFeePerGas: suggestedMaxPriorityFeePerGas,
      gasFeeEstimates: {
        estimatedBaseFee = '0'
      }
    } = gasFeeInputs;
    maxFeePerGas = customMaxFeePerGas || (0, _conversion.decGWEIToHexWEI)(suggestedMaxFeePerGas);
    maxPriorityFeePerGas = customMaxPriorityFeePerGas || (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
    baseAndPriorityFeePerGas = (0, _conversion.addHexes)((0, _conversion.decGWEIToHexWEI)(estimatedBaseFee), maxPriorityFeePerGas);
  }
  let gasTotalInWeiHex = (0, _transactionsControllerUtils.calcGasTotal)(maxGasLimit, maxFeePerGas || gasPrice);
  if (multiLayerL1FeeTotal !== null) {
    gasTotalInWeiHex = (0, _conversion.sumHexes)(gasTotalInWeiHex || '0x0', multiLayerL1FeeTotal || '0x0');
  }
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(swapsTokens, true);
  const balanceToken = fetchParamsSourceToken === defaultSwapsToken.address ? defaultSwapsToken : tokensWithBalances.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, fetchParamsSourceToken));
  const selectedFromToken = balanceToken || usedQuote.sourceTokenInfo;
  const tokenBalance = (tokensWithBalances === null || tokensWithBalances === void 0 ? void 0 : tokensWithBalances.length) && (0, _transactionsControllerUtils.calcTokenAmount)(selectedFromToken.balance || '0x0', selectedFromToken.decimals).toFixed(9);
  const tokenBalanceUnavailable = tokensWithBalances && balanceToken === undefined;
  const approveData = (0, _transaction.parseStandardTokenTransactionData)(approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.data);
  const approveValue = approveData && (0, _metamaskControllerUtils.getTokenValueParam)(approveData);
  const approveAmount = approveValue && (selectedFromToken === null || selectedFromToken === void 0 ? void 0 : selectedFromToken.decimals) !== undefined && (0, _transactionsControllerUtils.calcTokenAmount)(approveValue, selectedFromToken.decimals).toFixed(9);
  const approveGas = approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.gas;
  const renderablePopoverData = (0, _react.useMemo)(() => {
    return (0, _swaps2.quotesToRenderableData)({
      quotes,
      gasPrice: networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : gasPrice,
      conversionRate,
      currentCurrency,
      approveGas,
      tokenConversionRates: memoizedTokenConversionRates,
      chainId,
      smartTransactionEstimatedGas: smartTransactionsEnabled && smartTransactionsOptInStatus && (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees),
      nativeCurrencySymbol,
      multiLayerL1ApprovalFeeTotal
    });
  }, [quotes, gasPrice, baseAndPriorityFeePerGas, networkAndAccountSupports1559, conversionRate, currentCurrency, approveGas, memoizedTokenConversionRates, chainId, smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees, nativeCurrencySymbol, smartTransactionsEnabled, smartTransactionsOptInStatus, multiLayerL1ApprovalFeeTotal]);
  const renderableDataForUsedQuote = renderablePopoverData.find(renderablePopoverDatum => renderablePopoverDatum.aggId === usedQuote.aggregator);
  const {
    destinationTokenDecimals,
    destinationTokenSymbol,
    destinationTokenValue,
    destinationIconUrl,
    sourceTokenDecimals,
    sourceTokenSymbol,
    sourceTokenValue,
    sourceTokenIconUrl
  } = renderableDataForUsedQuote;
  let {
    feeInFiat,
    feeInEth,
    rawEthFee,
    feeInUsd
  } = (0, _swaps2.getRenderableNetworkFeesForQuote)({
    tradeGas: usedGasLimit,
    approveGas,
    gasPrice: networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : gasPrice,
    currentCurrency,
    conversionRate,
    USDConversionRate,
    tradeValue,
    sourceSymbol: sourceTokenSymbol,
    sourceAmount: usedQuote.sourceAmount,
    chainId,
    nativeCurrencySymbol,
    multiLayerL1FeeTotal
  });
  additionalTrackingParams.reg_tx_fee_in_usd = Number(feeInUsd);
  additionalTrackingParams.reg_tx_fee_in_eth = Number(rawEthFee);
  const renderableMaxFees = (0, _swaps2.getRenderableNetworkFeesForQuote)({
    tradeGas: maxGasLimit,
    approveGas,
    gasPrice: maxFeePerGas || gasPrice,
    currentCurrency,
    conversionRate,
    USDConversionRate,
    tradeValue,
    sourceSymbol: sourceTokenSymbol,
    sourceAmount: usedQuote.sourceAmount,
    chainId,
    nativeCurrencySymbol,
    multiLayerL1FeeTotal
  });
  let {
    feeInFiat: maxFeeInFiat,
    feeInEth: maxFeeInEth,
    rawEthFee: maxRawEthFee,
    feeInUsd: maxFeeInUsd
  } = renderableMaxFees;
  additionalTrackingParams.reg_tx_max_fee_in_usd = Number(maxFeeInUsd);
  additionalTrackingParams.reg_tx_max_fee_in_eth = Number(maxRawEthFee);
  if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
    var _smartTransactionFees;
    const stxEstimatedFeeInWeiDec = (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees.feeEstimate) + ((smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : (_smartTransactionFees = smartTransactionFees.approvalTxFees) === null || _smartTransactionFees === void 0 ? void 0 : _smartTransactionFees.feeEstimate) || 0);
    const stxMaxFeeInWeiDec = stxEstimatedFeeInWeiDec * swapsNetworkConfig.stxMaxFeeMultiplier;
    ({
      feeInFiat,
      feeInEth,
      rawEthFee,
      feeInUsd
    } = (0, _swaps2.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: stxEstimatedFeeInWeiDec
    }));
    additionalTrackingParams.stx_fee_in_usd = Number(feeInUsd);
    additionalTrackingParams.stx_fee_in_eth = Number(rawEthFee);
    additionalTrackingParams.estimated_gas = smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees.gasLimit;
    ({
      feeInFiat: maxFeeInFiat,
      feeInEth: maxFeeInEth,
      rawEthFee: maxRawEthFee,
      feeInUsd: maxFeeInUsd
    } = (0, _swaps2.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: stxMaxFeeInWeiDec
    }));
    additionalTrackingParams.stx_max_fee_in_usd = Number(maxFeeInUsd);
    additionalTrackingParams.stx_max_fee_in_eth = Number(maxRawEthFee);
  }
  const tokenCost = new _bignumber.default(usedQuote.sourceAmount);
  const ethCost = new _bignumber.default(usedQuote.trade.value || 0, 10).plus(new _bignumber.default(gasTotalInWeiHex, 16));
  const insufficientTokens = ((tokensWithBalances === null || tokensWithBalances === void 0 ? void 0 : tokensWithBalances.length) || balanceError) && tokenCost.gt(new _bignumber.default(selectedFromToken.balance || '0x0'));
  const insufficientEth = ethCost.gt(new _bignumber.default(ethBalance || '0x0'));
  const tokenBalanceNeeded = insufficientTokens ? (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)((0, _transactionsControllerUtils.calcTokenAmount)(tokenCost, selectedFromToken.decimals).minus(tokenBalance).toString(10), 6) : null;
  const ethBalanceNeeded = insufficientEth ? (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(ethCost.minus(ethBalance, 16).div('1000000000000000000', 10).toString(10), 6) : null;
  let ethBalanceNeededStx;
  if (isSmartTransaction && smartTransactionsError !== null && smartTransactionsError !== void 0 && smartTransactionsError.balanceNeededWei) {
    ethBalanceNeededStx = (0, _conversion.decWEIToDecETH)(smartTransactionsError.balanceNeededWei - smartTransactionsError.currentBalanceWei);
  }
  const destinationToken = (0, _reactRedux.useSelector)(_swaps.getDestinationTokenInfo, _lodash.isEqual);
  (0, _react.useEffect)(() => {
    if (isSmartTransaction) {
      if (insufficientTokens) {
        dispatch((0, _swaps.setBalanceError)(true));
      } else if (balanceError && !insufficientTokens) {
        dispatch((0, _swaps.setBalanceError)(false));
      }
    } else if (insufficientTokens || insufficientEth) {
      dispatch((0, _swaps.setBalanceError)(true));
    } else if (balanceError && !insufficientTokens && !insufficientEth) {
      dispatch((0, _swaps.setBalanceError)(false));
    }
  }, [insufficientTokens, insufficientEth, balanceError, dispatch, isSmartTransaction]);
  (0, _react.useEffect)(() => {
    const currentTime = Date.now();
    const timeSinceLastFetched = currentTime - quotesLastFetched;
    if (timeSinceLastFetched > swapsQuoteRefreshTime && !dispatchedSafeRefetch) {
      setDispatchedSafeRefetch(true);
      dispatch((0, _actions.safeRefetchQuotes)());
    } else if (timeSinceLastFetched > swapsQuoteRefreshTime) {
      dispatch((0, _actions.setSwapsErrorKey)(_swaps3.QUOTES_EXPIRED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
    }
  }, [quotesLastFetched, dispatchedSafeRefetch, dispatch, history, swapsQuoteRefreshTime]);
  (0, _react.useEffect)(() => {
    if (!originalApproveAmount && approveAmount) {
      setOriginalApproveAmount(approveAmount);
    }
  }, [originalApproveAmount, approveAmount]);

  // If it's not a Smart Transaction and ETH balance is needed, we want to show a warning.
  const isNotStxAndEthBalanceIsNeeded = (!currentSmartTransactionsEnabled || !smartTransactionsOptInStatus) && ethBalanceNeeded;

  // If it's a Smart Transaction and ETH balance is needed, we want to show a warning.
  const isStxAndEthBalanceIsNeeded = isSmartTransaction && ethBalanceNeededStx;

  // Indicates if we should show to a user a warning about insufficient funds for swapping.
  const showInsufficientWarning = (balanceError || tokenBalanceNeeded || isNotStxAndEthBalanceIsNeeded || isStxAndEthBalanceIsNeeded) && !warningHidden;
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const numberOfQuotes = Object.values(quotes).length;
  const bestQuoteReviewedEventSent = (0, _react.useRef)();
  const eventObjectBase = (0, _react.useMemo)(() => {
    return {
      token_from: sourceTokenSymbol,
      token_from_amount: sourceTokenValue,
      token_to: destinationTokenSymbol,
      token_to_amount: destinationTokenValue,
      request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
      slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
      custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
      response_time: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.responseTime,
      best_quote_source: topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator,
      available_quotes: numberOfQuotes,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    };
  }, [sourceTokenSymbol, sourceTokenValue, destinationTokenSymbol, destinationTokenValue, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.responseTime, topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator, numberOfQuotes, hardwareWalletUsed, hardwareWalletType, smartTransactionsEnabled, currentSmartTransactionsEnabled, smartTransactionsOptInStatus]);
  const trackAllAvailableQuotesOpened = () => {
    trackEvent({
      event: 'All Available Quotes Opened',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        other_quote_selected: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) !== (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator),
        other_quote_selected_source: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) === (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator) ? null : usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator
      }
    });
  };
  const trackQuoteDetailsOpened = () => {
    trackEvent({
      event: 'Quote Details Opened',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        other_quote_selected: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) !== (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator),
        other_quote_selected_source: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) === (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator) ? null : usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator
      }
    });
  };
  const trackEditSpendLimitOpened = () => {
    trackEvent({
      event: 'Edit Spend Limit Opened',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        custom_spend_limit_set: originalApproveAmount === approveAmount,
        custom_spend_limit_amount: originalApproveAmount === approveAmount ? null : approveAmount
      }
    });
  };
  const trackBestQuoteReviewedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'Best Quote Reviewed',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        network_fees: feeInFiat
      }
    });
  }, [trackEvent, eventObjectBase, feeInFiat]);
  const trackViewQuotePageLoadedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'View Quote Page Loaded',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        response_time: currentTimestamp - reviewSwapClickedTimestamp
      }
    });
  }, [trackEvent, eventObjectBase, currentTimestamp, reviewSwapClickedTimestamp]);
  (0, _react.useEffect)(() => {
    if (!bestQuoteReviewedEventSent.current && [sourceTokenSymbol, sourceTokenValue, destinationTokenSymbol, destinationTokenValue, fetchParams, topQuote, numberOfQuotes, feeInFiat].every(dep => dep !== null && dep !== undefined)) {
      bestQuoteReviewedEventSent.current = true;
      trackBestQuoteReviewedEvent();
    }
  }, [fetchParams, topQuote, numberOfQuotes, feeInFiat, destinationTokenSymbol, destinationTokenValue, sourceTokenSymbol, sourceTokenValue, trackBestQuoteReviewedEvent]);
  const metaMaskFee = usedQuote.fee;

  /* istanbul ignore next */
  const onFeeCardTokenApprovalClick = () => {
    trackEditSpendLimitOpened();
    dispatch((0, _actions.showModal)({
      name: 'EDIT_APPROVAL_PERMISSION',
      decimals: selectedFromToken.decimals,
      origin: 'MetaMask',
      setCustomAmount: newCustomPermissionAmount => {
        const customPermissionAmount = newCustomPermissionAmount === '' ? originalApproveAmount : newCustomPermissionAmount;
        const newData = (0, _confirmApprove.getCustomTxParamsData)(approveTxParams.data, {
          customPermissionAmount,
          decimals: selectedFromToken.decimals
        });
        if (customPermissionAmount !== null && customPermissionAmount !== void 0 && customPermissionAmount.length && approveTxParams.data !== newData) {
          dispatch((0, _actions.setCustomApproveTxData)(newData));
        }
      },
      tokenAmount: originalApproveAmount,
      customTokenAmount: originalApproveAmount === approveAmount ? null : approveAmount,
      tokenBalance,
      tokenSymbol: selectedFromToken.symbol,
      requiredMinimum: (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.sourceAmount, selectedFromToken.decimals)
    }));
  };
  const actionableBalanceErrorMessage = tokenBalanceUnavailable ? t('swapTokenBalanceUnavailable', [sourceTokenSymbol]) : t('swapApproveNeedMoreTokens', [/*#__PURE__*/_react.default.createElement("span", {
    key: "swapApproveNeedMoreTokens-1",
    className: "view-quote__bold"
  }, tokenBalanceNeeded || ethBalanceNeededStx || ethBalanceNeeded), tokenBalanceNeeded && !(sourceTokenSymbol === defaultSwapsToken.symbol) ? sourceTokenSymbol : defaultSwapsToken.symbol]);

  // Price difference warning
  const priceSlippageBucket = usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp === void 0 ? void 0 : _usedQuote$priceSlipp.bucket;
  const lastPriceDifferenceBucket = (0, _usePrevious.usePrevious)(priceSlippageBucket);

  // If the user agreed to a different bucket of risk, make them agree again
  (0, _react.useEffect)(() => {
    if (acknowledgedPriceDifference && lastPriceDifferenceBucket === _gas.GasRecommendations.medium && priceSlippageBucket === _gas.GasRecommendations.high) {
      setAcknowledgedPriceDifference(false);
    }
  }, [priceSlippageBucket, acknowledgedPriceDifference, lastPriceDifferenceBucket]);
  let viewQuotePriceDifferenceComponent = null;
  const priceSlippageFromSource = (0, _useEthFiatAmount.useEthFiatAmount)((usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp2 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp2 === void 0 ? void 0 : _usedQuote$priceSlipp2.sourceAmountInETH) || 0, {
    showFiat: true
  });
  const priceSlippageFromDestination = (0, _useEthFiatAmount.useEthFiatAmount)((usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp3 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp3 === void 0 ? void 0 : _usedQuote$priceSlipp3.destinationAmountInETH) || 0, {
    showFiat: true
  });

  // We cannot present fiat value if there is a calculation error or no slippage
  // from source or destination
  const priceSlippageUnknownFiatValue = !priceSlippageFromSource || !priceSlippageFromDestination || Boolean(usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp4 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp4 === void 0 ? void 0 : _usedQuote$priceSlipp4.calculationError);
  let priceDifferencePercentage = 0;
  if (usedQuote !== null && usedQuote !== void 0 && (_usedQuote$priceSlipp5 = usedQuote.priceSlippage) !== null && _usedQuote$priceSlipp5 !== void 0 && _usedQuote$priceSlipp5.ratio) {
    priceDifferencePercentage = parseFloat(new _bignumber.default(usedQuote.priceSlippage.ratio, 10).minus(1, 10).times(100, 10).toFixed(2), 10);
  }
  const shouldShowPriceDifferenceWarning = !tokenBalanceUnavailable && !showInsufficientWarning && usedQuote && (priceDifferenceRiskyBuckets.includes(priceSlippageBucket) || priceSlippageUnknownFiatValue);
  if (shouldShowPriceDifferenceWarning) {
    viewQuotePriceDifferenceComponent = /*#__PURE__*/_react.default.createElement(_viewQuotePriceDifference.default, {
      usedQuote: usedQuote,
      sourceTokenValue: sourceTokenValue,
      destinationTokenValue: destinationTokenValue,
      priceSlippageFromSource: priceSlippageFromSource,
      priceSlippageFromDestination: priceSlippageFromDestination,
      priceDifferencePercentage: priceDifferencePercentage,
      priceSlippageUnknownFiatValue: priceSlippageUnknownFiatValue,
      onAcknowledgementClick: () => {
        setAcknowledgedPriceDifference(true);
      },
      acknowledged: acknowledgedPriceDifference
    });
  }
  const disableSubmissionDueToPriceWarning = shouldShowPriceDifferenceWarning && !acknowledgedPriceDifference;
  const isShowingWarning = showInsufficientWarning || shouldShowPriceDifferenceWarning;
  const isSwapButtonDisabled = Boolean(submitClicked || balanceError || tokenBalanceUnavailable || disableSubmissionDueToPriceWarning || networkAndAccountSupports1559 && baseAndPriorityFeePerGas === undefined || !networkAndAccountSupports1559 && (gasPrice === null || gasPrice === undefined) || currentSmartTransactionsEnabled && (currentSmartTransactionsError || smartTransactionsError) || currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !(smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees));
  (0, _react.useEffect)(() => {
    if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !insufficientTokens) {
      const unsignedTx = {
        from: unsignedTransaction.from,
        to: unsignedTransaction.to,
        value: unsignedTransaction.value,
        data: unsignedTransaction.data,
        gas: unsignedTransaction.gas,
        chainId
      };
      intervalId = setInterval(() => {
        if (!swapsSTXLoading) {
          dispatch((0, _swaps.fetchSwapsSmartTransactionFees)({
            unsignedTransaction: unsignedTx,
            approveTxParams,
            fallbackOnNotEnoughFunds: false
          }));
        }
      }, swapsNetworkConfig.stxGetTransactionsRefreshTime);
      dispatch((0, _swaps.fetchSwapsSmartTransactionFees)({
        unsignedTransaction: unsignedTx,
        approveTxParams,
        fallbackOnNotEnoughFunds: false
      }));
    } else if (intervalId) {
      clearInterval(intervalId);
    }
    return () => clearInterval(intervalId);
    // eslint-disable-next-line
  }, [dispatch, currentSmartTransactionsEnabled, smartTransactionsOptInStatus, unsignedTransaction.data, unsignedTransaction.from, unsignedTransaction.value, unsignedTransaction.gas, unsignedTransaction.to, chainId, swapsNetworkConfig.stxGetTransactionsRefreshTime, insufficientTokens]);
  (0, _react.useEffect)(() => {
    // Thanks to the next line we will only do quotes polling 3 times before showing a Quote Timeout modal.
    dispatch((0, _actions.setSwapsQuotesPollingLimitEnabled)(true));
    if (reviewSwapClickedTimestamp) {
      trackViewQuotePageLoadedEvent();
    }
  }, [dispatch, trackViewQuotePageLoadedEvent, reviewSwapClickedTimestamp]);
  (0, _react.useEffect)(() => {
    // if smart transaction error is turned off, reset submit clicked boolean
    if (!currentSmartTransactionsEnabled && currentSmartTransactionsError && submitClicked) {
      setSubmitClicked(false);
    }
  }, [currentSmartTransactionsEnabled, currentSmartTransactionsError, submitClicked]);
  (0, _react.useEffect)(() => {
    if (!isMultiLayerFeeNetwork || !(usedQuote !== null && usedQuote !== void 0 && usedQuote.multiLayerL1TradeFeeTotal)) {
      return;
    }
    const getEstimatedL1Fees = async () => {
      try {
        let l1ApprovalFeeTotal = '0x0';
        if (approveTxParams) {
          l1ApprovalFeeTotal = await (0, _fetchEstimatedL1Fee.default)(chainId, {
            txParams: {
              ...approveTxParams,
              gasPrice: (0, _util.addHexPrefix)(approveTxParams.gasPrice),
              value: '0x0' // For approval txs we need to use "0x0" here.
            }
          });

          setMultiLayerL1ApprovalFeeTotal(l1ApprovalFeeTotal);
        }
        const l1FeeTotal = (0, _conversion.sumHexes)(usedQuote.multiLayerL1TradeFeeTotal, l1ApprovalFeeTotal);
        setMultiLayerL1FeeTotal(l1FeeTotal);
      } catch (e) {
        (0, _browser.captureException)(e);
        setMultiLayerL1FeeTotal(null);
        setMultiLayerL1ApprovalFeeTotal(null);
      }
    };
    getEstimatedL1Fees();
  }, [unsignedTransaction, approveTxParams, isMultiLayerFeeNetwork, chainId, usedQuote]);
  (0, _react.useEffect)(() => {
    if (isSmartTransaction) {
      // Removes a smart transactions error when the component loads.
      dispatch({
        type: _actionConstants.SET_SMART_TRANSACTIONS_ERROR,
        payload: null
      });
    }
  }, [isSmartTransaction, dispatch]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "view-quote"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__content', {
      'view-quote__content_modal': disableSubmissionDueToPriceWarning
    })
  }, /* istanbul ignore next */
  selectQuotePopoverShown && /*#__PURE__*/_react.default.createElement(_selectQuotePopover.default, {
    quoteDataRows: renderablePopoverData,
    onClose: () => setSelectQuotePopoverShown(false),
    onSubmit: aggId => dispatch((0, _swaps.swapsQuoteSelected)(aggId)),
    swapToSymbol: destinationTokenSymbol,
    initialAggId: usedQuote.aggregator,
    onQuoteDetailsIsOpened: trackQuoteDetailsOpened,
    hideEstimatedGasFee: smartTransactionsEnabled && smartTransactionsOptInStatus
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__warning-wrapper', {
      'view-quote__warning-wrapper--thin': !isShowingWarning
    })
  }, viewQuotePriceDifferenceComponent, (showInsufficientWarning || tokenBalanceUnavailable) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: actionableBalanceErrorMessage,
    onClose: /* istanbul ignore next */
    () => setWarningHidden(true)
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "view-quote__countdown-timer-container"
  }, /*#__PURE__*/_react.default.createElement(_countdownTimer.default, {
    timeStarted: quotesLastFetched,
    warningTime: "0:10",
    labelKey: "swapNewQuoteIn"
  })), /*#__PURE__*/_react.default.createElement(_mainQuoteSummary.default, {
    sourceValue: (0, _swapsUtils.calcTokenValue)(sourceTokenValue, sourceTokenDecimals),
    sourceDecimals: sourceTokenDecimals,
    sourceSymbol: sourceTokenSymbol,
    destinationValue: (0, _swapsUtils.calcTokenValue)(destinationTokenValue, destinationTokenDecimals),
    destinationDecimals: destinationTokenDecimals,
    destinationSymbol: destinationTokenSymbol,
    sourceIconUrl: sourceTokenIconUrl,
    destinationIconUrl: destinationIconUrl
  }), currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !(smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) && !showInsufficientWarning && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 0,
    marginBottom: 10
  }, /*#__PURE__*/_react.default.createElement(_pulseLoader.default, null)), (!currentSmartTransactionsEnabled || !smartTransactionsOptInStatus || (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees)) && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__fee-card-container', {
      'view-quote__fee-card-container--three-rows': approveTxParams && (!balanceError || warningHidden)
    })
  }, /*#__PURE__*/_react.default.createElement(_feeCard.default, {
    primaryFee: {
      fee: feeInEth,
      maxFee: maxFeeInEth
    },
    secondaryFee: {
      fee: feeInFiat,
      maxFee: maxFeeInFiat
    },
    hideTokenApprovalRow: !approveTxParams || balanceError && !warningHidden,
    tokenApprovalSourceTokenSymbol: sourceTokenSymbol,
    onTokenApprovalClick: onFeeCardTokenApprovalClick,
    metaMaskFee: String(metaMaskFee),
    numberOfQuotes: Object.values(quotes).length,
    onQuotesClick: /* istanbul ignore next */
    () => {
      trackAllAvailableQuotesOpened();
      setSelectQuotePopoverShown(true);
    },
    chainId: chainId,
    maxPriorityFeePerGasDecGWEI: (0, _conversion.hexWEIToDecGWEI)(maxPriorityFeePerGas),
    maxFeePerGasDecGWEI: (0, _conversion.hexWEIToDecGWEI)(maxFeePerGas)
  }))), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: /* istanbul ignore next */() => {
      setSubmitClicked(true);
      if (!balanceError) {
        if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
          dispatch((0, _swaps.signAndSendSwapsSmartTransaction)({
            unsignedTransaction,
            trackEvent,
            history,
            additionalTrackingParams
          }));
        } else {
          dispatch((0, _swaps.signAndSendTransactions)(history, trackEvent, additionalTrackingParams));
        }
      } else if (destinationToken.symbol === defaultSwapsToken.symbol) {
        history.push(_routes.DEFAULT_ROUTE);
      } else {
        history.push(`${_routes.ASSET_ROUTE}/${destinationToken.address}`);
      }
    },
    submitText: currentSmartTransactionsEnabled && smartTransactionsOptInStatus && swapsSTXLoading ? t('preparingSwap') : t('swap'),
    hideCancel: true,
    disabled: isSwapButtonDisabled,
    className: isShowingWarning ? 'view-quote__thin-swaps-footer' : '',
    showTopBorder: true
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\view-quote\\view-quote.js",}],
["F:\\metamask-extension\\ui\\pages\\token-allowance\\token-allowance.js", {"../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../shared/constants/tokens":"F:\\metamask-extension\\shared\\constants\\tokens.js","../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/security-provider.utils":"F:\\metamask-extension\\shared\\modules\\security-provider.utils.ts","../../components/app/approve-content-card/approve-content-card":"F:\\metamask-extension\\ui\\components\\app\\approve-content-card\\approve-content-card.js","../../components/app/confirm-page-container":"F:\\metamask-extension\\ui\\components\\app\\confirm-page-container\\index.js","../../components/app/confirm-page-container/confirm-page-container-content":"F:\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-content\\index.js","../../components/app/custom-nonce":"F:\\metamask-extension\\ui\\components\\app\\custom-nonce\\index.js","../../components/app/custom-spending-cap/custom-spending-cap":"F:\\metamask-extension\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap.js","../../components/app/ledger-instruction-field/ledger-instruction-field":"F:\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js","../../components/app/modals/contract-details-modal/contract-details-modal":"F:\\metamask-extension\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js","../../components/app/network-account-balance-header/network-account-balance-header":"F:\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js","../../components/app/security-provider-banner-message/security-provider-banner-message":"F:\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/box/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/contract-token-values/contract-token-values":"F:\\metamask-extension\\ui\\components\\ui\\contract-token-values\\contract-token-values.js","../../components/ui/dialog":"F:\\metamask-extension\\ui\\components\\ui\\dialog\\index.js","../../components/ui/page-container":"F:\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/review-spending-cap/review-spending-cap":"F:\\metamask-extension\\ui\\components\\ui\\review-spending-cap\\review-spending-cap.js","../../components/ui/simulation-error-message":"F:\\metamask-extension\\ui\\components\\ui\\simulation-error-message\\index.js","../../components/ui/url-icon/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\url-icon.js","../../contexts/gasFee":"F:\\metamask-extension\\ui\\contexts\\gasFee.js","../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../ducks/app/app":"F:\\metamask-extension\\ui\\ducks\\app\\app.ts","../../ducks/confirm-transaction/confirm-transaction.duck":"F:\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"F:\\metamask-extension\\ui\\ducks\\history\\history.js","../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../../hooks/useSimulationFailureWarning":"F:\\metamask-extension\\ui\\hooks\\useSimulationFailureWarning.js","../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../confirm-approve/confirm-approve.util":"F:\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Ctoken-allowance%5Ctoken-allowance.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenAllowance;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _box = _interopRequireDefault(require("../../components/ui/box/box"));
var _networkAccountBalanceHeader = _interopRequireDefault(require("../../components/app/network-account-balance-header/network-account-balance-header"));
var _urlIcon = _interopRequireDefault(require("../../components/ui/url-icon/url-icon"));
var _designSystem = require("../../helpers/constants/design-system");
var _i18n = require("../../contexts/i18n");
var _contractTokenValues = _interopRequireDefault(require("../../components/ui/contract-token-values/contract-token-values"));
var _button = _interopRequireDefault(require("../../components/ui/button"));
var _reviewSpendingCap = _interopRequireDefault(require("../../components/ui/review-spending-cap/review-spending-cap"));
var _pageContainer = require("../../components/ui/page-container");
var _contractDetailsModal = _interopRequireDefault(require("../../components/app/modals/contract-details-modal/contract-details-modal"));
var _selectors = require("../../selectors");
var _network = require("../../../shared/constants/network");
var _actions = require("../../store/actions");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _history = require("../../ducks/history/history");
var _approveContentCard = _interopRequireDefault(require("../../components/app/approve-content-card/approve-content-card"));
var _customSpendingCap = _interopRequireDefault(require("../../components/app/custom-spending-cap/custom-spending-cap"));
var _dialog = _interopRequireDefault(require("../../components/ui/dialog"));
var _gasFee = require("../../contexts/gasFee");
var _confirmApprove = require("../confirm-approve/confirm-approve.util");
var _app = require("../../ducks/app/app");
var _util = require("../../helpers/utils/util");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _tokens = require("../../../shared/constants/tokens");
var _securityProvider = require("../../../shared/modules/security-provider.utils");
var _confirmPageContainer = require("../../components/app/confirm-page-container");
var _useSimulationFailureWarning = require("../../hooks/useSimulationFailureWarning");
var _simulationErrorMessage = _interopRequireDefault(require("../../components/ui/simulation-error-message"));
var _ledgerInstructionField = _interopRequireDefault(require("../../components/app/ledger-instruction-field/ledger-instruction-field"));
var _securityProviderBannerMessage = _interopRequireDefault(require("../../components/app/security-provider-banner-message/security-provider-banner-message"));
var _componentLibrary = require("../../components/component-library");
var _confirmPageContainerContent = require("../../components/app/confirm-page-container/confirm-page-container-content");
var _customNonce = _interopRequireDefault(require("../../components/app/custom-nonce"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ALLOWED_HOSTS = ['portfolio.metamask.io'];
function TokenAllowance({
  origin,
  siteImage,
  showCustomizeGasModal,
  useNonceField,
  currentCurrency,
  nativeCurrency,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexTransactionTotal,
  hexMinimumTransactionFee,
  txData,
  isMultiLayerFeeNetwork,
  supportsEIP1559,
  userAddress,
  tokenAddress,
  data,
  isSetApproveForAll,
  isApprovalOrRejection,
  decimals,
  dappProposedTokenAmount,
  currentTokenBalance,
  toAddress,
  tokenSymbol,
  fromAddressIsLedger,
  warning
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const {
    hostname
  } = new URL(origin);
  const thisOriginIsAllowedToSkipFirstPage = ALLOWED_HOSTS.includes(hostname);
  const [customSpendingCap, setCustomSpendingCap] = (0, _react.useState)(dappProposedTokenAmount);
  const [showContractDetails, setShowContractDetails] = (0, _react.useState)(false);
  const [inputChangeInProgress, setInputChangeInProgress] = (0, _react.useState)(false);
  const [showFullTxDetails, setShowFullTxDetails] = (0, _react.useState)(false);
  const [isFirstPage, setIsFirstPage] = (0, _react.useState)(dappProposedTokenAmount !== '0' && !thisOriginIsAllowedToSkipFirstPage);
  const [errorText, setErrorText] = (0, _react.useState)('');
  const [userAcknowledgedGasMissing, setUserAcknowledgedGasMissing] = (0, _react.useState)(false);
  const renderSimulationFailureWarning = (0, _useSimulationFailureWarning.useSimulationFailureWarning)(userAcknowledgedGasMissing);
  const fromAccount = (0, _reactRedux.useSelector)(state => (0, _selectors.getTargetAccountWithSendEtherInfo)(state, userAddress));
  const networkIdentifier = (0, _reactRedux.useSelector)(_selectors.getNetworkIdentifier);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const unapprovedTxCount = (0, _reactRedux.useSelector)(_selectors.getUnapprovedTxCount);
  const unapprovedTxs = (0, _reactRedux.useSelector)(_selectors.getUnapprovedTransactions);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  const nextNonce = (0, _reactRedux.useSelector)(_selectors.getNextSuggestedNonce);
  const customNonceValue = (0, _reactRedux.useSelector)(_selectors.getCustomNonceValue);
  const replaceCommaToDot = inputValue => {
    return inputValue.replace(/,/gu, '.');
  };
  let customPermissionAmount = _tokens.NUM_W_OPT_DECIMAL_COMMA_OR_DOT_REGEX.test(customSpendingCap) ? replaceCommaToDot(customSpendingCap).toString() : '0';
  const maxTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(_tokens.MAX_TOKEN_ALLOWANCE_AMOUNT, decimals);
  if (customSpendingCap.length > 1 && Number(customSpendingCap)) {
    const customSpendLimitNumber = new _bignumber.default(customSpendingCap);
    if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
      customPermissionAmount = 0;
    }
  }
  const customTxParamsData = customPermissionAmount ? (0, _confirmApprove.getCustomTxParamsData)(data, {
    customPermissionAmount,
    decimals
  }) : null;
  let fullTxData = {
    ...txData
  };
  if (customTxParamsData) {
    fullTxData = {
      ...fullTxData,
      txParams: {
        ...fullTxData.txParams,
        data: customTxParamsData
      }
    };
  }
  const fee = (0, _reactRedux.useSelector)(state => (0, _selectors.transactionFeeSelector)(state, fullTxData));
  const methodData = (0, _reactRedux.useSelector)(state => (0, _selectors.getKnownMethodData)(state, data));
  const {
    balanceError
  } = (0, _gasFee.useGasFeeContext)();
  const disableNextButton = isFirstPage && (customSpendingCap === '' || errorText !== '');
  const disableApproveButton = !isFirstPage && balanceError;
  const networkName = _network.NETWORK_TO_NAME_MAP[fullTxData.chainId] || networkIdentifier;
  const customNonceMerge = transactionData => customNonceValue ? {
    ...transactionData,
    customNonceValue
  } : transactionData;
  const handleReject = () => {
    dispatch((0, _actions.updateCustomNonce)(''));
    dispatch((0, _app.setCustomTokenAmount)(''));
    dispatch((0, _actions.cancelTx)(fullTxData)).then(() => {
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
      history.push(mostRecentOverviewPage);
    });
  };
  const handleApprove = () => {
    const {
      name
    } = methodData;
    if (fee.gasEstimationObject.baseFeePerGas) {
      fullTxData.estimatedBaseFee = fee.gasEstimationObject.baseFeePerGas;
    }
    if (name) {
      fullTxData.contractMethodName = name;
    }
    if (dappProposedTokenAmount) {
      fullTxData.dappProposedTokenAmount = dappProposedTokenAmount;
      fullTxData.originalApprovalAmount = dappProposedTokenAmount;
    }
    if (customSpendingCap) {
      fullTxData.customTokenAmount = customSpendingCap;
      fullTxData.finalApprovalAmount = customSpendingCap;
    } else if (dappProposedTokenAmount !== undefined) {
      fullTxData.finalApprovalAmount = dappProposedTokenAmount;
    }
    if (currentTokenBalance) {
      fullTxData.currentTokenBalance = currentTokenBalance;
    }
    dispatch((0, _actions.updateCustomNonce)(''));
    dispatch((0, _actions.updateAndApproveTx)(customNonceMerge(fullTxData))).then(() => {
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
      history.push(mostRecentOverviewPage);
    });
  };
  const handleNextClick = () => {
    setShowFullTxDetails(false);
    setIsFirstPage(false);
  };
  const handleBackClick = () => {
    setShowFullTxDetails(false);
    setIsFirstPage(true);
  };
  const handleCancelAll = () => {
    dispatch((0, _actions.showModal)({
      name: 'REJECT_TRANSACTIONS',
      unapprovedTxCount,
      onSubmit: async () => {
        await dispatch((0, _actions.cancelTxs)((0, _util.valuesFor)(unapprovedTxs)));
        dispatch((0, _confirmTransaction.clearConfirmTransaction)());
        history.push(mostRecentOverviewPage);
      }
    }));
  };
  const handleNextNonce = () => {
    dispatch((0, _actions.getNextNonce)());
  };
  (0, _react.useEffect)(() => {
    handleNextNonce();
  }, [dispatch]);
  const handleUpdateCustomNonce = value => {
    dispatch((0, _actions.updateCustomNonce)(value));
  };
  const handleCustomizeNonceModal = ( /* eslint-disable no-shadow */
  useNonceField, nextNonce, customNonceValue, updateCustomNonce, getNextNonce
  /* eslint-disable no-shadow */) => {
    dispatch((0, _actions.showModal)({
      name: 'CUSTOMIZE_NONCE',
      useNonceField,
      nextNonce,
      customNonceValue,
      updateCustomNonce,
      getNextNonce
    }));
  };
  const isEmpty = customSpendingCap === '';
  const renderContractTokenValues = /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    key: tokenAddress
  }, /*#__PURE__*/_react.default.createElement(_contractTokenValues.default, {
    tokenName: tokenSymbol,
    address: tokenAddress,
    chainId: fullTxData.chainId,
    rpcPrefs: rpcPrefs
  }));
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container page-container"
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_confirmPageContainer.ConfirmPageContainerNavigation, null)), (0, _securityProvider.isSuspiciousResponse)(txData === null || txData === void 0 ? void 0 : txData.securityProviderResponse) && /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
    securityProviderResponse: txData.securityProviderResponse
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 4,
    paddingRight: 4,
    alignItems: _designSystem.AlignItems.center,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, !isFirstPage && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "inline",
    onClick: () => handleBackClick()
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textMuted,
    fontWeight: _designSystem.FontWeight.Bold
  }, '<', " ", t('back')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    textAlign: _designSystem.TextAlign.End
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textMuted,
    fontWeight: _designSystem.FontWeight.Bold
  }, isFirstPage ? 1 : 2, " ", t('ofTextNofM'), " 2"))), /*#__PURE__*/_react.default.createElement(_networkAccountBalanceHeader.default, {
    networkName: networkName,
    accountName: fromAccount.name,
    accountBalance: currentTokenBalance,
    tokenName: tokenSymbol,
    accountAddress: userAddress,
    chainId: fullTxData.chainId
  }), warning && /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container__custom-nonce-warning"
  }, /*#__PURE__*/_react.default.createElement(_confirmPageContainerContent.ConfirmPageContainerWarning, {
    warning: warning
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    marginTop: 6,
    marginRight: 12,
    marginBottom: 8,
    marginLeft: 12,
    paddingTop: 2,
    paddingRight: 4,
    paddingBottom: 2,
    paddingLeft: 2,
    borderColor: _designSystem.Color.borderMuted,
    borderStyle: _designSystem.BorderStyle.solid,
    borderWidth: 1,
    className: "token-allowance-container__icon-display-content"
  }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    className: "token-allowance-container__icon-display-content__siteimage-identicon",
    fallbackClassName: "token-allowance-container__icon-display-content__siteimage-identicon",
    name: origin,
    url: siteImage
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginLeft: 1
  }, origin))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginLeft: 4,
    marginRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingMd,
    align: _designSystem.TextAlign.Center
  }, isFirstPage ? t('spendingCapRequest', [renderContractTokenValues]) : /*#__PURE__*/_react.default.createElement(_box.default, null, customSpendingCap === '0' || isEmpty ? t('revokeSpendingCap', [renderContractTokenValues]) : t('spendingCapRequest', [renderContractTokenValues])))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => setShowContractDetails(true),
    className: "token-allowance-container__verify-link"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.Color.primaryDefault
  }, t('verifyContractDetails')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: [4, 4, 3, 4]
  }, isFirstPage ? /*#__PURE__*/_react.default.createElement(_customSpendingCap.default, {
    txParams: txData === null || txData === void 0 ? void 0 : txData.txParams,
    tokenName: tokenSymbol,
    currentTokenBalance: currentTokenBalance,
    dappProposedValue: dappProposedTokenAmount,
    siteOrigin: origin,
    passTheErrorText: value => setErrorText(value),
    decimals: decimals,
    setInputChangeInProgress: setInputChangeInProgress,
    customSpendingCap: customSpendingCap,
    setCustomSpendingCap: setCustomSpendingCap
  }) : /*#__PURE__*/_react.default.createElement(_reviewSpendingCap.default, {
    tokenName: tokenSymbol,
    currentTokenBalance: currentTokenBalance,
    tokenValue: isNaN(parseFloat(customSpendingCap)) ? dappProposedTokenAmount : replaceCommaToDot(customSpendingCap),
    onEdit: () => handleBackClick()
  })), !isFirstPage && balanceError && /*#__PURE__*/_react.default.createElement(_dialog.default, {
    type: "error",
    className: "send__error-dialog"
  }, t('insufficientFundsForGas')), !isFirstPage && /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container__card-wrapper"
  }, renderSimulationFailureWarning && /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 0,
    paddingRight: 4,
    paddingBottom: 4,
    paddingLeft: 4
  }, /*#__PURE__*/_react.default.createElement(_simulationErrorMessage.default, {
    userAcknowledgedGasMissing: userAcknowledgedGasMissing,
    setUserAcknowledgedGasMissing: () => setUserAcknowledgedGasMissing(true)
  })), /*#__PURE__*/_react.default.createElement(_approveContentCard.default, {
    symbol: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Tag
    }),
    title: t('transactionFee'),
    showEdit: true,
    showAdvanceGasFeeOptions: true,
    onEditClick: showCustomizeGasModal,
    renderTransactionDetailsContent: true,
    noBorder: useNonceField || !showFullTxDetails,
    supportsEIP1559: supportsEIP1559,
    isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
    ethTransactionTotal: ethTransactionTotal,
    nativeCurrency: nativeCurrency,
    fullTxData: fullTxData,
    userAcknowledgedGasMissing: userAcknowledgedGasMissing,
    renderSimulationFailureWarning: renderSimulationFailureWarning,
    hexTransactionTotal: hexTransactionTotal,
    hexMinimumTransactionFee: hexMinimumTransactionFee,
    fiatTransactionTotal: fiatTransactionTotal,
    currentCurrency: currentCurrency,
    useCurrencyRateCheck: useCurrencyRateCheck
  })), useNonceField && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginRight: 4,
    marginLeft: 4
  }, /*#__PURE__*/_react.default.createElement(_customNonce.default, {
    nextNonce: nextNonce,
    customNonceValue: customNonceValue,
    showCustomizeNonceModal: () => handleCustomizeNonceModal(useNonceField, nextNonce, customNonceValue, handleUpdateCustomNonce, handleNextNonce)
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => setShowFullTxDetails(!showFullTxDetails),
    className: "token-allowance-container__view-details"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.primaryDefault,
    marginRight: 1
  }, t('viewDetails')), showFullTxDetails ? /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-sm fa-angle-up"
  }) : /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-sm fa-angle-down"
  }))), showFullTxDetails ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    alignItems: _designSystem.AlignItems.center,
    className: "token-allowance-container__full-tx-content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container__data"
  }, /*#__PURE__*/_react.default.createElement(_approveContentCard.default, {
    symbol: /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-file"
    }),
    title: t('data'),
    renderDataContent: true,
    noBorder: true,
    supportsEIP1559: supportsEIP1559,
    isSetApproveForAll: isSetApproveForAll,
    fullTxData: fullTxData,
    userAcknowledgedGasMissing: userAcknowledgedGasMissing,
    renderSimulationFailureWarning: renderSimulationFailureWarning,
    isApprovalOrRejection: isApprovalOrRejection,
    data: customTxParamsData || data,
    useCurrencyRateCheck: useCurrencyRateCheck,
    hexMinimumTransactionFee: hexMinimumTransactionFee
  }))) : null, !isFirstPage && fromAddressIsLedger && /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 2,
    paddingRight: 2
  }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
    showDataInstruction: true
  })), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    cancelText: t('reject'),
    submitText: isFirstPage ? t('next') : t('approveButtonText'),
    onCancel: () => handleReject(),
    onSubmit: () => isFirstPage ? handleNextClick() : handleApprove(),
    disabled: inputChangeInProgress || disableNextButton || disableApproveButton
  }, unapprovedTxCount > 1 && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: e => {
      e.preventDefault();
      handleCancelAll();
    }
  }, t('rejectTxsN', [unapprovedTxCount]))), showContractDetails && /*#__PURE__*/_react.default.createElement(_contractDetailsModal.default, {
    tokenName: tokenSymbol,
    onClose: () => setShowContractDetails(false),
    tokenAddress: tokenAddress,
    toAddress: toAddress,
    chainId: fullTxData.chainId,
    rpcPrefs: rpcPrefs
  }));
}
TokenAllowance.propTypes = {
  /**
   * Dapp URL
   */
  origin: _propTypes.default.string,
  /**
   * Dapp image
   */
  siteImage: _propTypes.default.string,
  /**
   * Function that is supposed to open the customized gas modal
   */
  showCustomizeGasModal: _propTypes.default.func,
  /**
   * Whether nonce field should be used or not
   */
  useNonceField: _propTypes.default.bool,
  /**
   * Current fiat currency (e.g. USD)
   */
  currentCurrency: _propTypes.default.string,
  /**
   * Current native currency (e.g. RopstenETH)
   */
  nativeCurrency: _propTypes.default.string,
  /**
   * Total sum of the transaction in native currency
   */
  ethTransactionTotal: _propTypes.default.string,
  /**
   * Total sum of the transaction in fiat currency
   */
  fiatTransactionTotal: _propTypes.default.string,
  /**
   * Total sum of the transaction converted to hex value
   */
  hexTransactionTotal: _propTypes.default.string,
  /**
   * Minimum transaction fee converted to hex value
   */
  hexMinimumTransactionFee: _propTypes.default.string,
  /**
   * Current transaction
   */
  txData: _propTypes.default.object,
  /**
   * Is multi-layer fee network or not
   */
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  /**
   * Is the enhanced gas fee enabled or not
   */
  supportsEIP1559: _propTypes.default.bool,
  /**
   * User's address
   */
  userAddress: _propTypes.default.string,
  /**
   * Address of the token that is waiting to be allowed
   */
  tokenAddress: _propTypes.default.string,
  /**
   * Current transaction data
   */
  data: _propTypes.default.string,
  /**
   * Is set approve for all or not
   */
  isSetApproveForAll: _propTypes.default.bool,
  /**
   * Whether a current set approval for all transaction will approve or revoke access
   */
  isApprovalOrRejection: _propTypes.default.bool,
  /**
   * Number of decimals
   */
  decimals: _propTypes.default.string,
  /**
   * Token amount proposed by the Dapp
   */
  dappProposedTokenAmount: _propTypes.default.string,
  /**
   * Token balance of the current account
   */
  currentTokenBalance: _propTypes.default.string,
  /**
   * Contract address requesting spending cap
   */
  toAddress: _propTypes.default.string,
  /**
   * Symbol of the token that is waiting to be allowed
   */
  tokenSymbol: _propTypes.default.string,
  /**
   * Whether the address sending the transaction is a ledger address
   */
  fromAddressIsLedger: _propTypes.default.bool,
  /**
   * Customize nonce warning message
   */
  warning: _propTypes.default.string
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\token-allowance\\token-allowance.js",}],
["F:\\metamask-extension\\ui\\pages\\token-details\\index.js", {"./token-details-page":"F:\\metamask-extension\\ui\\pages\\token-details\\token-details-page.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Ctoken-details%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenDetailsPage.default;
  }
});
var _tokenDetailsPage = _interopRequireDefault(require("./token-details-page"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\token-details\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\token-details\\token-details-page.js", {"../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"F:\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/tooltip":"F:\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../hooks/useCopyToClipboard":"F:\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../hooks/useTokenFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../hooks/useTokenTracker":"F:\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Ctoken-details%5Ctoken-details-page.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenDetailsPage;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _metamask = require("../../ducks/metamask/metamask");
var _selectors = require("../../selectors");
var _useCopyToClipboard = require("../../hooks/useCopyToClipboard");
var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));
var _i18n = require("../../contexts/i18n");
var _useTokenTracker = require("../../hooks/useTokenTracker");
var _useTokenFiatAmount = require("../../hooks/useTokenFiatAmount");
var _actions = require("../../store/actions");
var _network = require("../../../shared/constants/network");
var _routes = require("../../helpers/constants/routes");
var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));
var _button = _interopRequireDefault(require("../../components/ui/button"));
var _box = _interopRequireDefault(require("../../components/ui/box"));
var _designSystem = require("../../helpers/constants/design-system");
var _stringUtils = require("../../../shared/modules/string-utils");
var _componentLibrary = require("../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function TokenDetailsPage() {
  var _tokenMetadata$aggreg, _tokensWithBalances$;
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const {
    address: tokenAddress
  } = (0, _reactRouterDom.useParams)();
  const tokenMetadata = tokenList[tokenAddress.toLowerCase()];
  const aggregators = tokenMetadata === null || tokenMetadata === void 0 ? void 0 : (_tokenMetadata$aggreg = tokenMetadata.aggregators) === null || _tokenMetadata$aggreg === void 0 ? void 0 : _tokenMetadata$aggreg.join(', ');
  const token = tokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const tokenBalance = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const tokenCurrencyBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token === null || token === void 0 ? void 0 : token.address, tokenBalance, token === null || token === void 0 ? void 0 : token.symbol);
  const {
    nickname,
    type: networkType
  } = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  if (!token) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "page-container token-details"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginLeft: 5,
    marginRight: 6
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    margin: 0,
    marginTop: 4,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault,
    className: "token-details__title"
  }, t('tokenDetails'), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => history.push(`${_routes.ASSET_ROUTE}/${token.address}`),
    className: "token-details__closeButton"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    align: _designSystem.TextAlign.Center,
    fontWeight: _designSystem.FontWeight.Bold,
    margin: 0,
    marginRight: 5,
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    color: _designSystem.TextColor.textDefault,
    className: "token-details__token-value"
  }, tokenBalance || ''), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    diameter: 32,
    address: token.address,
    image: tokenMetadata ? tokenMetadata.iconUrl : token.image
  }))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    margin: 0,
    marginTop: 4,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative
  }, tokenCurrencyBalance || ''), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    margin: 0,
    marginTop: 6,
    variant: _designSystem.TextVariant.bodyXs,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('tokenContractAddress')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    margin: 0,
    marginTop: 2,
    color: _designSystem.TextColor.textDefault,
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    className: "token-details__token-address"
  }, token.address), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard'),
    containerClassName: "token-details__copy-icon"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    ariaLabel: "copy",
    name: copied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    className: "token-details__copyIcon",
    onClick: () => handleCopy(token.address),
    color: _designSystem.IconColor.primaryDefault,
    size: _componentLibrary.ButtonIconSize.Sm
  }))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyXs,
    as: "h6",
    margin: 0,
    marginTop: 4,
    color: _designSystem.TextColor.textAlternative,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('tokenDecimalTitle')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    margin: 0,
    marginTop: 1,
    color: _designSystem.TextColor.textDefault
  }, token.decimals), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyXs,
    as: "h6",
    margin: 0,
    marginTop: 4,
    color: _designSystem.TextColor.textAlternative,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('network')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    margin: 1,
    marginTop: 0,
    color: _designSystem.TextColor.textDefault
  }, networkType === _network.NETWORK_TYPES.RPC ? nickname ?? t('privateNetwork') : t(networkType)), aggregators && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyXs,
    as: "h6",
    margin: 0,
    marginTop: 4,
    color: _designSystem.TextColor.textAlternative,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('tokenList')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    margin: 0,
    marginTop: 1,
    color: _designSystem.TextColor.textDefault
  }, `${aggregators}.`)), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "token-details__hide-token-button",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'HIDE_TOKEN_CONFIRMATION',
        token,
        history
      }));
    }
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.primaryDefault
  }, t('hideToken')))));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\token-details\\token-details-page.js",}],
["F:\\metamask-extension\\ui\\pages\\unlock-page\\index.js", {"./unlock-page.container":"F:\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cunlock-page%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _unlockPage = _interopRequireDefault(require("./unlock-page.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _unlockPage.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\unlock-page\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.component.js", {"../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/lib/ui-utils":"F:\\metamask-extension\\shared\\lib\\ui-utils.js","../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/mascot":"F:\\metamask-extension\\ui\\components\\ui\\mascot\\index.js","../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../helpers/utils/build-types":"F:\\metamask-extension\\ui\\helpers\\utils\\build-types.js","./unlock-page.util":"F:\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.util.js","events":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cunlock-page%5Cunlock-page.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _events = require("events");
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../components/ui/button"));
var _textField = _interopRequireDefault(require("../../components/ui/text-field"));
var _mascot = _interopRequireDefault(require("../../components/ui/mascot"));
var _routes = require("../../helpers/constants/routes");
var _metametrics = require("../../../shared/constants/metametrics");
var _uiUtils = require("../../../shared/lib/ui-utils");
var _buildTypes = require("../../helpers/utils/build-types");
var _unlockPage = require("./unlock-page.util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class UnlockPage extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      password: '',
      error: null
    });
    _defineProperty(this, "submitting", false);
    _defineProperty(this, "failed_attempts", 0);
    _defineProperty(this, "animationEventEmitter", new _events.EventEmitter());
    _defineProperty(this, "handleSubmit", async event => {
      event.preventDefault();
      event.stopPropagation();
      const {
        password
      } = this.state;
      const {
        onSubmit,
        forceUpdateMetamaskState
      } = this.props;
      if (password === '' || this.submitting) {
        return;
      }
      this.setState({
        error: null
      });
      this.submitting = true;
      try {
        await onSubmit(password);
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Navigation,
          event: _metametrics.MetaMetricsEventName.AppUnlocked,
          properties: {
            failed_attempts: this.failed_attempts
          }
        }, {
          isNewVisit: true
        });
      } catch ({
        message
      }) {
        this.failed_attempts += 1;
        if (message === 'Incorrect password') {
          await forceUpdateMetamaskState();
          this.context.trackEvent({
            category: _metametrics.MetaMetricsEventCategory.Navigation,
            event: _metametrics.MetaMetricsEventName.AppUnlockedFailed,
            properties: {
              reason: 'incorrect_password',
              failed_attempts: this.failed_attempts
            }
          });
        }
        this.setState({
          error: message
        });
        this.submitting = false;
      }
    });
  }
  UNSAFE_componentWillMount() {
    const {
      isUnlocked,
      history
    } = this.props;
    if (isUnlocked) {
      history.push(_routes.DEFAULT_ROUTE);
    }
  }
  handleInputChange({
    target
  }) {
    this.setState({
      password: target.value,
      error: null
    });
    // tell mascot to look at page action
    if (target.getBoundingClientRect) {
      const element = target;
      const boundingRect = element.getBoundingClientRect();
      const coordinates = (0, _unlockPage.getCaretCoordinates)(element, element.selectionEnd);
      this.animationEventEmitter.emit('point', {
        x: boundingRect.left + coordinates.left - element.scrollLeft,
        y: boundingRect.top + coordinates.top - element.scrollTop
      });
    }
  }
  renderSubmitButton() {
    const style = {
      backgroundColor: 'var(--color-primary-default)',
      color: 'var(--color-primary-inverse)',
      marginTop: '20px',
      height: '60px',
      fontWeight: '400',
      boxShadow: 'none',
      borderRadius: '100px'
    };
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "submit",
      "data-testid": "unlock-submit",
      style: style,
      disabled: !this.state.password,
      variant: "contained",
      size: "large",
      onClick: this.handleSubmit
    }, this.context.t('unlock'));
  }
  render() {
    const {
      password,
      error
    } = this.state;
    const {
      t
    } = this.context;
    const {
      onRestore
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page",
      "data-testid": "unlock-page"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__mascot-container"
    }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
      animationEventEmitter: this.animationEventEmitter,
      width: "120",
      height: "120"
    }), (0, _buildTypes.isBeta)() ? /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__mascot-container__beta"
    }, t('beta')) : null), /*#__PURE__*/_react.default.createElement("h1", {
      className: "unlock-page__title"
    }, t('welcomeBack')), /*#__PURE__*/_react.default.createElement("div", null, t('unlockMessage')), /*#__PURE__*/_react.default.createElement("form", {
      className: "unlock-page__form",
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "password",
      "data-testid": "unlock-password",
      label: t('password'),
      type: "password",
      value: password,
      onChange: event => this.handleInputChange(event),
      error: error,
      autoFocus: true,
      autoComplete: "current-password",
      theme: "material",
      fullWidth: true
    })), this.renderSubmitButton(), /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__links"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      key: "import-account",
      className: "unlock-page__link",
      onClick: () => onRestore()
    }, t('forgotPassword'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__support"
    }, t('needHelp', [/*#__PURE__*/_react.default.createElement("a", {
      href: _uiUtils.SUPPORT_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "need-help-link",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Navigation,
          event: _metametrics.MetaMetricsEventName.SupportLinkClicked,
          properties: {
            url: _uiUtils.SUPPORT_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.MetaMetricsContextProp.PageTitle]
        });
      }
    }, t('needHelpLinkText'))]))));
  }
}
exports.default = UnlockPage;
_defineProperty(UnlockPage, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});
_defineProperty(UnlockPage, "propTypes", {
  /**
   * History router for redirect after action
   */
  history: _propTypes.default.object.isRequired,
  /**
   * If isUnlocked is true will redirect to most recent route in history
   */
  isUnlocked: _propTypes.default.bool,
  /**
   * onClick handler for "Forgot password?" link
   */
  onRestore: _propTypes.default.func,
  /**
   * onSubmit handler when form is submitted
   */
  onSubmit: _propTypes.default.func,
  /**
   * Force update metamask data state
   */
  forceUpdateMetamaskState: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\unlock-page\\unlock-page.component.js",}],
["F:\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.container.js", {"../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./unlock-page.component":"F:\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cunlock-page%5Cunlock-page.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _redux = require("redux");
var _util = require("../../../app/scripts/lib/util");
var _app = require("../../../shared/constants/app");
var _routes = require("../../helpers/constants/routes");
var _actions = require("../../store/actions");
var _unlockPage = _interopRequireDefault(require("./unlock-page.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked
    }
  } = state;
  return {
    isUnlocked
  };
};
const mapDispatchToProps = dispatch => {
  return {
    tryUnlockMetamask: password => dispatch((0, _actions.tryUnlockMetamask)(password)),
    markPasswordForgotten: () => dispatch((0, _actions.markPasswordForgotten)()),
    forceUpdateMetamaskState: () => (0, _actions.forceUpdateMetamaskState)(dispatch)
  };
};
const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    // eslint-disable-next-line no-shadow
    markPasswordForgotten,
    // eslint-disable-next-line no-shadow
    tryUnlockMetamask,
    ...restDispatchProps
  } = dispatchProps;
  const {
    history,
    onSubmit: ownPropsSubmit,
    ...restOwnProps
  } = ownProps;
  const onImport = async () => {
    await markPasswordForgotten();
    history.push(_routes.RESTORE_VAULT_ROUTE);
    if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
      global.platform.openExtensionInBrowser(_routes.RESTORE_VAULT_ROUTE);
    }
  };
  const onSubmit = async password => {
    await tryUnlockMetamask(password);
    history.push(_routes.DEFAULT_ROUTE);
  };
  return {
    ...stateProps,
    ...restDispatchProps,
    ...restOwnProps,
    onRestore: onImport,
    onSubmit: ownPropsSubmit || onSubmit,
    history
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_unlockPage.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\unlock-page\\unlock-page.container.js",}],
["F:\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.util.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cunlock-page%5Cunlock-page.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCaretCoordinates = getCaretCoordinates;
function getCaretCoordinates(element, position) {
  const div = document.createElement('div');
  div.id = 'password-mirror-div';
  document.body.appendChild(div);
  const computed = window.getComputedStyle(element);
  div.textContent = new Array(position + 1).join('•');
  const span = document.createElement('span');
  span.textContent = '•';
  div.appendChild(span);
  const coordinates = {
    top: span.offsetTop + parseInt(computed.borderTopWidth, 10),
    left: span.offsetLeft + parseInt(computed.borderLeftWidth, 10)
  };
  document.body.removeChild(div);
  return coordinates;
}


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\unlock-page\\unlock-page.util.js",}],
["F:\\metamask-extension\\ui\\selectors\\approvals.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Capprovals.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApprovalFlows = getApprovalFlows;
exports.getApprovalRequestsByType = void 0;
exports.hasPendingApprovals = hasPendingApprovals;
function hasPendingApprovals(state, approvalType, predicate) {
  const pendingApprovalRequests = Object.values(state.metamask.pendingApprovals).filter(({
    type
  }) => type === approvalType);
  if (predicate) {
    return pendingApprovalRequests.some(predicate);
  }
  return pendingApprovalRequests.length > 0;
}
const getApprovalRequestsByType = (state, approvalType, predicate) => {
  const pendingApprovalRequests = Object.values(state.metamask.pendingApprovals).filter(({
    type
  }) => type === approvalType);
  if (predicate) {
    return pendingApprovalRequests.filter(predicate);
  }
  return pendingApprovalRequests;
};
exports.getApprovalRequestsByType = getApprovalRequestsByType;
function getApprovalFlows(state) {
  return state.metamask.approvalFlows;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\approvals.ts",}],
["F:\\metamask-extension\\ui\\selectors\\confirm-transaction.js", {".":"F:\\metamask-extension\\ui\\selectors\\index.js","../../shared/constants/gas":"F:\\metamask-extension\\shared\\constants\\gas.ts","../../shared/constants/transaction":"F:\\metamask-extension\\shared\\constants\\transaction.ts","../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../shared/modules/gas.utils":"F:\\metamask-extension\\shared\\modules\\gas.utils.js","../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../shared/modules/transaction.utils":"F:\\metamask-extension\\shared\\modules\\transaction.utils.js","../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/confirm-tx.util":"F:\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../helpers/utils/tx-helper":"F:\\metamask-extension\\ui\\helpers\\utils\\tx-helper.ts","./custom-gas":"F:\\metamask-extension\\ui\\selectors\\custom-gas.js","./selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","reselect":"F:\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Cconfirm-transaction.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unconfirmedTransactionsListSelector = exports.unconfirmedTransactionsHashSelector = exports.unconfirmedMessagesHashSelector = exports.txDataSelector = exports.transactionFeeSelector = exports.tokenAddressSelector = exports.sendTokenTokenAmountAndToAddressSelector = exports.currentCurrencySelector = exports.conversionRateSelector = exports.contractExchangeRateSelector = void 0;
var _reselect = require("reselect");
var _txHelper = _interopRequireDefault(require("../helpers/utils/tx-helper"));
var _confirmTx = require("../helpers/utils/confirm-tx.util");
var _transaction = require("../../shared/modules/transaction.utils");
var _metamask = require("../ducks/metamask/metamask");
var _transaction2 = require("../../shared/constants/transaction");
var _gas = require("../../shared/constants/gas");
var _gas2 = require("../../shared/modules/gas.utils");
var _stringUtils = require("../../shared/modules/string-utils");
var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");
var _conversion = require("../../shared/modules/conversion.utils");
var _customGas = require("./custom-gas");
var _selectors = require("./selectors");
var _ = require(".");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const unapprovedTxsSelector = state => state.metamask.unapprovedTxs;
const unapprovedMsgsSelector = state => state.metamask.unapprovedMsgs;
const unapprovedPersonalMsgsSelector = state => state.metamask.unapprovedPersonalMsgs;
const unapprovedDecryptMsgsSelector = state => state.metamask.unapprovedDecryptMsgs;
const unapprovedEncryptionPublicKeyMsgsSelector = state => state.metamask.unapprovedEncryptionPublicKeyMsgs;
const unapprovedTypedMessagesSelector = state => state.metamask.unapprovedTypedMessages;
const unconfirmedTransactionsListSelector = (0, _reselect.createSelector)(unapprovedTxsSelector, unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedTxs = {}, unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}, network, chainId) => (0, _txHelper.default)(unapprovedTxs, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedDecryptMsgs, unapprovedEncryptionPublicKeyMsgs, unapprovedTypedMessages, network, chainId) || []);
exports.unconfirmedTransactionsListSelector = unconfirmedTransactionsListSelector;
const unconfirmedTransactionsHashSelector = (0, _reselect.createSelector)(unapprovedTxsSelector, unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedTxs = {}, unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}, network, chainId) => {
  const filteredUnapprovedTxs = Object.keys(unapprovedTxs).reduce((acc, address) => {
    const transactions = {
      ...acc
    };
    if ((0, _transaction.transactionMatchesNetwork)(unapprovedTxs[address], chainId, network)) {
      transactions[address] = unapprovedTxs[address];
    }
    return transactions;
  }, {});
  return {
    ...filteredUnapprovedTxs,
    ...unapprovedMsgs,
    ...unapprovedPersonalMsgs,
    ...unapprovedDecryptMsgs,
    ...unapprovedEncryptionPublicKeyMsgs,
    ...unapprovedTypedMessages
  };
});
exports.unconfirmedTransactionsHashSelector = unconfirmedTransactionsHashSelector;
const unconfirmedMessagesHashSelector = (0, _reselect.createSelector)(unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, (unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}) => {
  return {
    ...unapprovedMsgs,
    ...unapprovedPersonalMsgs,
    ...unapprovedDecryptMsgs,
    ...unapprovedEncryptionPublicKeyMsgs,
    ...unapprovedTypedMessages
  };
});
exports.unconfirmedMessagesHashSelector = unconfirmedMessagesHashSelector;
const currentCurrencySelector = state => state.metamask.currentCurrency;
exports.currentCurrencySelector = currentCurrencySelector;
const conversionRateSelector = state => state.metamask.conversionRate;
exports.conversionRateSelector = conversionRateSelector;
const txDataSelector = state => state.confirmTransaction.txData;
exports.txDataSelector = txDataSelector;
const tokenDataSelector = state => state.confirmTransaction.tokenData;
const tokenPropsSelector = state => state.confirmTransaction.tokenProps;
const contractExchangeRatesSelector = state => state.metamask.contractExchangeRates;
const tokenDecimalsSelector = (0, _reselect.createSelector)(tokenPropsSelector, tokenProps => tokenProps && tokenProps.decimals);
const tokenDataArgsSelector = (0, _reselect.createSelector)(tokenDataSelector, tokenData => tokenData && tokenData.args || []);
const txParamsSelector = (0, _reselect.createSelector)(txDataSelector, txData => txData && txData.txParams || {});
const tokenAddressSelector = (0, _reselect.createSelector)(txParamsSelector, txParams => txParams && txParams.to);
exports.tokenAddressSelector = tokenAddressSelector;
const TOKEN_PARAM_TO = '_to';
const TOKEN_PARAM_VALUE = '_value';
const sendTokenTokenAmountAndToAddressSelector = (0, _reselect.createSelector)(tokenDataArgsSelector, tokenDecimalsSelector, (args, tokenDecimals) => {
  let toAddress = '';
  let tokenAmount = '0';

  // Token params here are ethers BigNumbers, which have a different
  // interface than bignumber.js
  if (args && args.length) {
    toAddress = args[TOKEN_PARAM_TO];
    let value = args[TOKEN_PARAM_VALUE].toString();
    if (tokenDecimals) {
      // bignumber.js return value
      value = (0, _transactionsControllerUtils.calcTokenAmount)(value, tokenDecimals).toFixed();
    }
    tokenAmount = (0, _confirmTx.roundExponential)(value);
  }
  return {
    toAddress,
    tokenAmount
  };
});
exports.sendTokenTokenAmountAndToAddressSelector = sendTokenTokenAmountAndToAddressSelector;
const contractExchangeRateSelector = (0, _reselect.createSelector)(contractExchangeRatesSelector, tokenAddressSelector, (contractExchangeRates, tokenAddress) => contractExchangeRates[Object.keys(contractExchangeRates).find(address => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress))]);
exports.contractExchangeRateSelector = contractExchangeRateSelector;
const transactionFeeSelector = function (state, txData) {
  var _txData$txParams, _txData$txParams8, _txData$txParams9, _txData$txParams10;
  const currentCurrency = currentCurrencySelector(state);
  const conversionRate = conversionRateSelector(state);
  const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state) || {};
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  const networkAndAccountSupportsEIP1559 = (0, _.checkNetworkAndAccountSupports1559)(state);
  const gasEstimationObject = {
    gasLimit: ((_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.gas) ?? '0x0'
  };
  if (networkAndAccountSupportsEIP1559) {
    var _txData$txParams2;
    const {
      gasPrice = '0'
    } = gasFeeEstimates;
    const selectedGasEstimates = gasFeeEstimates[txData.userFeeLevel] || {};
    if (((_txData$txParams2 = txData.txParams) === null || _txData$txParams2 === void 0 ? void 0 : _txData$txParams2.type) === _transaction2.TransactionEnvelopeType.legacy) {
      var _txData$txParams3;
      gasEstimationObject.gasPrice = ((_txData$txParams3 = txData.txParams) === null || _txData$txParams3 === void 0 ? void 0 : _txData$txParams3.gasPrice) ?? (0, _conversion.decGWEIToHexWEI)(gasPrice);
    } else {
      var _txData$txParams4, _txData$txParams5, _txData$txParams6, _txData$txParams7;
      const {
        suggestedMaxPriorityFeePerGas,
        suggestedMaxFeePerGas
      } = selectedGasEstimates;
      gasEstimationObject.maxFeePerGas = (_txData$txParams4 = txData.txParams) !== null && _txData$txParams4 !== void 0 && _txData$txParams4.maxFeePerGas && (txData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || !suggestedMaxFeePerGas) ? (_txData$txParams5 = txData.txParams) === null || _txData$txParams5 === void 0 ? void 0 : _txData$txParams5.maxFeePerGas : (0, _conversion.decGWEIToHexWEI)(suggestedMaxFeePerGas || gasPrice);
      gasEstimationObject.maxPriorityFeePerGas = (_txData$txParams6 = txData.txParams) !== null && _txData$txParams6 !== void 0 && _txData$txParams6.maxPriorityFeePerGas && (txData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || !suggestedMaxPriorityFeePerGas) ? (_txData$txParams7 = txData.txParams) === null || _txData$txParams7 === void 0 ? void 0 : _txData$txParams7.maxPriorityFeePerGas : suggestedMaxPriorityFeePerGas && (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas) || gasEstimationObject.maxFeePerGas;
      gasEstimationObject.baseFeePerGas = (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.estimatedBaseFee);
    }
  } else {
    switch (gasEstimateType) {
      case _gas.GasEstimateTypes.none:
        gasEstimationObject.gasPrice = ((_txData$txParams8 = txData.txParams) === null || _txData$txParams8 === void 0 ? void 0 : _txData$txParams8.gasPrice) ?? '0x0';
        break;
      case _gas.GasEstimateTypes.ethGasPrice:
        gasEstimationObject.gasPrice = ((_txData$txParams9 = txData.txParams) === null || _txData$txParams9 === void 0 ? void 0 : _txData$txParams9.gasPrice) ?? (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.gasPrice);
        break;
      case _gas.GasEstimateTypes.legacy:
        gasEstimationObject.gasPrice = ((_txData$txParams10 = txData.txParams) === null || _txData$txParams10 === void 0 ? void 0 : _txData$txParams10.gasPrice) ?? (0, _customGas.getAveragePriceEstimateInHexWEI)(state);
        break;
      case _gas.GasEstimateTypes.feeMarket:
        break;
      default:
        break;
    }
  }
  const {
    txParams: {
      value = '0x0'
    } = {}
  } = txData;
  const fiatTransactionAmount = (0, _conversion.getValueFromWeiHex)({
    value,
    fromCurrency: nativeCurrency,
    toCurrency: currentCurrency,
    conversionRate,
    numberOfDecimals: 2
  });
  const ethTransactionAmount = (0, _conversion.getValueFromWeiHex)({
    value,
    fromCurrency: nativeCurrency,
    toCurrency: nativeCurrency,
    conversionRate,
    numberOfDecimals: 6
  });
  const hexMinimumTransactionFee = (0, _gas2.getMinimumGasTotalInHexWei)(gasEstimationObject);
  const hexMaximumTransactionFee = (0, _gas2.getMaximumGasTotalInHexWei)(gasEstimationObject);
  const fiatMinimumTransactionFee = (0, _confirmTx.getTransactionFee)({
    value: hexMinimumTransactionFee,
    fromCurrency: nativeCurrency,
    toCurrency: currentCurrency,
    numberOfDecimals: 2,
    conversionRate
  });
  const fiatMaximumTransactionFee = (0, _confirmTx.getTransactionFee)({
    value: hexMaximumTransactionFee,
    fromCurrency: nativeCurrency,
    toCurrency: currentCurrency,
    numberOfDecimals: 2,
    conversionRate
  });
  const ethTransactionFee = (0, _confirmTx.getTransactionFee)({
    value: hexMinimumTransactionFee,
    fromCurrency: nativeCurrency,
    toCurrency: nativeCurrency,
    numberOfDecimals: 6,
    conversionRate
  });
  const fiatTransactionTotal = (0, _confirmTx.addFiat)(fiatMinimumTransactionFee, fiatTransactionAmount);
  const ethTransactionTotal = (0, _confirmTx.addEth)(ethTransactionFee, ethTransactionAmount);
  const hexTransactionTotal = (0, _conversion.sumHexes)(value, hexMinimumTransactionFee);
  return {
    hexTransactionAmount: value,
    fiatTransactionAmount,
    ethTransactionAmount,
    hexMinimumTransactionFee,
    fiatMinimumTransactionFee,
    hexMaximumTransactionFee,
    fiatMaximumTransactionFee,
    ethTransactionFee,
    fiatTransactionTotal,
    ethTransactionTotal,
    hexTransactionTotal,
    gasEstimationObject
  };
};
exports.transactionFeeSelector = transactionFeeSelector;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\confirm-transaction.js",}],
["F:\\metamask-extension\\ui\\selectors\\custom-gas.js", {".":"F:\\metamask-extension\\ui\\selectors\\index.js","../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../shared/constants/common":"F:\\metamask-extension\\shared\\constants\\common.ts","../../shared/constants/gas":"F:\\metamask-extension\\shared\\constants\\gas.ts","../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/Numeric":"F:\\metamask-extension\\shared\\modules\\Numeric.ts","../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../ducks/send":"F:\\metamask-extension\\ui\\ducks\\send\\index.js","../helpers/utils/confirm-tx.util":"F:\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../helpers/utils/formatters":"F:\\metamask-extension\\ui\\helpers\\utils\\formatters.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Ccustom-gas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basicPriceEstimateToETHTotal = basicPriceEstimateToETHTotal;
exports.getAverageEstimate = getAverageEstimate;
exports.getAveragePriceEstimateInHexWEI = getAveragePriceEstimateInHexWEI;
exports.getBasicGasEstimateLoadingStatus = getBasicGasEstimateLoadingStatus;
exports.getCustomGasLimit = getCustomGasLimit;
exports.getCustomGasPrice = getCustomGasPrice;
exports.getDefaultActiveButtonIndex = getDefaultActiveButtonIndex;
exports.getFastPriceEstimate = getFastPriceEstimate;
exports.getFastPriceEstimateInHexWEI = getFastPriceEstimateInHexWEI;
exports.getGasPriceInHexWei = getGasPriceInHexWei;
exports.getIsCustomNetworkGasPriceFetched = getIsCustomNetworkGasPriceFetched;
exports.getIsEthGasPriceFetched = getIsEthGasPriceFetched;
exports.getIsGasEstimatesFetched = getIsGasEstimatesFetched;
exports.getNoGasPriceFetched = getNoGasPriceFetched;
exports.getRenderableConvertedCurrencyFee = getRenderableConvertedCurrencyFee;
exports.getRenderableEthFee = getRenderableEthFee;
exports.getSafeLowEstimate = getSafeLowEstimate;
exports.isCustomPriceExcessive = isCustomPriceExcessive;
exports.isCustomPriceSafe = isCustomPriceSafe;
exports.isCustomPriceSafeForCustomNetwork = isCustomPriceSafeForCustomNetwork;
exports.priceEstimateToWei = priceEstimateToWei;
var _util = require("../../app/scripts/lib/util");
var _conversion = require("../../shared/modules/conversion.utils");
var _confirmTx = require("../helpers/utils/confirm-tx.util");
var _formatters = require("../helpers/utils/formatters");
var _send = require("../ducks/send");
var _gas = require("../../shared/constants/gas");
var _metamask = require("../ducks/metamask/metamask");
var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");
var _Numeric = require("../../shared/modules/Numeric");
var _common = require("../../shared/constants/common");
var _ = require(".");
function getCustomGasLimit(state) {
  return state.gas.customData.limit;
}
function getCustomGasPrice(state) {
  return state.gas.customData.price;
}
function getBasicGasEstimateLoadingStatus(state) {
  return getIsGasEstimatesFetched(state) === false;
}
function getAveragePriceEstimateInHexWEI(state) {
  const averagePriceEstimate = getAverageEstimate(state);
  return getGasPriceInHexWei(averagePriceEstimate);
}
function getFastPriceEstimateInHexWEI(state) {
  const fastPriceEstimate = getFastPriceEstimate(state);
  return getGasPriceInHexWei(fastPriceEstimate || '0x0');
}
function getDefaultActiveButtonIndex(gasButtonInfo, customGasPriceInHex, gasPrice) {
  return gasButtonInfo.map(({
    priceInHexWei
  }) => priceInHexWei).lastIndexOf((0, _util.addHexPrefix)(customGasPriceInHex || gasPrice));
}
function getSafeLowEstimate(state) {
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GasEstimateTypes.legacy ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low : null;
}
function getAverageEstimate(state) {
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GasEstimateTypes.legacy ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.medium : null;
}
function getFastPriceEstimate(state) {
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GasEstimateTypes.legacy ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.high : null;
}
function isCustomPriceSafe(state) {
  const safeLow = getSafeLowEstimate(state);
  const customGasPrice = getCustomGasPrice(state);
  if (!customGasPrice) {
    return true;
  }
  if (!safeLow) {
    return false;
  }
  const customPriceSafe = new _Numeric.Numeric(customGasPrice, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.GWEI).greaterThan(safeLow, 10);
  return customPriceSafe;
}
function isCustomPriceSafeForCustomNetwork(state) {
  const estimatedPrice = getAverageEstimate(state);
  const customGasPrice = getCustomGasPrice(state);
  if (!customGasPrice) {
    return true;
  }
  if (!estimatedPrice) {
    return false;
  }
  const customPriceSafe = new _Numeric.Numeric(customGasPrice, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.GWEI).greaterThan(estimatedPrice, 10);
  return customPriceSafe;
}
function isCustomPriceExcessive(state, checkSend = false) {
  const customPrice = checkSend ? (0, _send.getGasPrice)(state) : getCustomGasPrice(state);
  const fastPrice = getFastPriceEstimate(state);
  if (!customPrice || !fastPrice) {
    return false;
  }

  // Custom gas should be considered excessive when it is 1.5 times greater than the fastest estimate.
  const customPriceExcessive = new _Numeric.Numeric(customPrice, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.GWEI).greaterThan(Math.floor(fastPrice * 1.5), 10);
  return customPriceExcessive;
}
function basicPriceEstimateToETHTotal(estimate, gasLimit, numberOfDecimals = 9) {
  return new _Numeric.Numeric((0, _transactionsControllerUtils.calcGasTotal)(gasLimit, estimate), 16, _common.EtherDenomination.GWEI).round(numberOfDecimals).toBase(10).toString();
}
function getRenderableEthFee(estimate, gasLimit, numberOfDecimals = 9, nativeCurrency = 'ETH') {
  const value = new _Numeric.Numeric(estimate, 10).toBase(16).toString();
  const fee = basicPriceEstimateToETHTotal(value, gasLimit, numberOfDecimals);
  return (0, _formatters.formatETHFee)(fee, nativeCurrency);
}
function getRenderableConvertedCurrencyFee(estimate, gasLimit, convertedCurrency, conversionRate) {
  const value = new _Numeric.Numeric(estimate, 10).toBase(16).toString();
  const fee = basicPriceEstimateToETHTotal(value, gasLimit);
  const feeInCurrency = (0, _conversion.decEthToConvertedCurrency)(fee, convertedCurrency, conversionRate);
  return (0, _confirmTx.formatCurrency)(feeInCurrency, convertedCurrency);
}
function priceEstimateToWei(priceEstimate) {
  return new _Numeric.Numeric(priceEstimate, 16, _common.EtherDenomination.GWEI).toDenomination(_common.EtherDenomination.WEI).round(9).toString();
}
function getGasPriceInHexWei(price) {
  const value = new _Numeric.Numeric(price, 10).toBase(16).toString();
  return (0, _util.addHexPrefix)(priceEstimateToWei(value));
}
function getIsEthGasPriceFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GasEstimateTypes.ethGasPrice && (0, _.getIsMainnet)(state);
}
function getIsCustomNetworkGasPriceFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GasEstimateTypes.ethGasPrice && !(0, _.getIsMainnet)(state);
}
function getNoGasPriceFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GasEstimateTypes.none;
}
function getIsGasEstimatesFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  if ((0, _metamask.isEIP1559Network)(state)) {
    return false;
  }
  return gasEstimateType !== _gas.GasEstimateTypes.none;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\custom-gas.js",}],
["F:\\metamask-extension\\ui\\selectors\\first-time-flow.js", {"../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Cfirst-time-flow.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFirstTimeFlowType = void 0;
exports.getFirstTimeFlowTypeRoute = getFirstTimeFlowTypeRoute;
exports.getOnboardingInitiator = void 0;
var _routes = require("../helpers/constants/routes");
function getFirstTimeFlowTypeRoute(state) {
  const {
    firstTimeFlowType
  } = state.metamask;
  let nextRoute;
  if (firstTimeFlowType === 'create') {
    nextRoute = _routes.ONBOARDING_CREATE_PASSWORD_ROUTE;
  } else if (firstTimeFlowType === 'import') {
    nextRoute = _routes.ONBOARDING_IMPORT_WITH_SRP_ROUTE;
  } else {
    nextRoute = _routes.DEFAULT_ROUTE;
  }
  return nextRoute;
}
const getFirstTimeFlowType = state => {
  return state.metamask.firstTimeFlowType;
};
exports.getFirstTimeFlowType = getFirstTimeFlowType;
const getOnboardingInitiator = state => {
  const {
    onboardingTabs
  } = state.metamask;
  if (!onboardingTabs || Object.keys(onboardingTabs).length !== 1) {
    return null;
  }
  const location = Object.keys(onboardingTabs)[0];
  const tabId = onboardingTabs[location];
  return {
    location,
    tabId
  };
};
exports.getOnboardingInitiator = getOnboardingInitiator;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\first-time-flow.js",}],
["F:\\metamask-extension\\ui\\selectors\\index.js", {"./approvals":"F:\\metamask-extension\\ui\\selectors\\approvals.ts","./confirm-transaction":"F:\\metamask-extension\\ui\\selectors\\confirm-transaction.js","./custom-gas":"F:\\metamask-extension\\ui\\selectors\\custom-gas.js","./first-time-flow":"F:\\metamask-extension\\ui\\selectors\\first-time-flow.js","./metametrics":"F:\\metamask-extension\\ui\\selectors\\metametrics.js","./permissions":"F:\\metamask-extension\\ui\\selectors\\permissions.js","./selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","./transactions":"F:\\metamask-extension\\ui\\selectors\\transactions.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _confirmTransaction = require("./confirm-transaction");
Object.keys(_confirmTransaction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _confirmTransaction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _confirmTransaction[key];
    }
  });
});
var _customGas = require("./custom-gas");
Object.keys(_customGas).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _customGas[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _customGas[key];
    }
  });
});
var _firstTimeFlow = require("./first-time-flow");
Object.keys(_firstTimeFlow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _firstTimeFlow[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _firstTimeFlow[key];
    }
  });
});
var _metametrics = require("./metametrics");
Object.keys(_metametrics).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _metametrics[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _metametrics[key];
    }
  });
});
var _permissions = require("./permissions");
Object.keys(_permissions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _permissions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _permissions[key];
    }
  });
});
var _selectors = require("./selectors");
Object.keys(_selectors).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _selectors[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _selectors[key];
    }
  });
});
var _transactions = require("./transactions");
Object.keys(_transactions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _transactions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _transactions[key];
    }
  });
});
var _approvals = require("./approvals");
Object.keys(_approvals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _approvals[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _approvals[key];
    }
  });
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\index.js",}],
["F:\\metamask-extension\\ui\\selectors\\metametrics.js", {"reselect":"F:\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Cmetametrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectMatchingFragment = exports.selectFragments = exports.selectFragmentBySuccessEvent = exports.selectFragmentById = void 0;
var _reselect = require("reselect");
const selectFragments = state => state.metamask.fragments;
exports.selectFragments = selectFragments;
const selectFragmentBySuccessEvent = (0, _reselect.createSelector)(selectFragments, (_, fragmentOptions) => fragmentOptions, (fragments, fragmentOptions) => {
  if (fragmentOptions.persist) {
    return Object.values(fragments).find(fragment => fragment.successEvent === fragmentOptions.successEvent);
  }
  return undefined;
});
exports.selectFragmentBySuccessEvent = selectFragmentBySuccessEvent;
const selectFragmentById = (0, _reselect.createSelector)(selectFragments, (_, fragmentId) => fragmentId, (fragments, fragmentId) => {
  // A valid existing fragment must exist in state.
  // If these conditions are not meant we will create a new fragment.
  if (fragmentId && fragments !== null && fragments !== void 0 && fragments[fragmentId]) {
    return fragments[fragmentId];
  }
  return undefined;
});
exports.selectFragmentById = selectFragmentById;
const selectMatchingFragment = (0, _reselect.createSelector)((state, params) => selectFragmentBySuccessEvent(state, params.fragmentOptions), (state, params) => selectFragmentById(state, params.existingId), (matchedBySuccessEvent, matchedById) => matchedById ?? matchedBySuccessEvent);
exports.selectMatchingFragment = selectMatchingFragment;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\metametrics.js",}],
["F:\\metamask-extension\\ui\\selectors\\permissions.js", {".":"F:\\metamask-extension\\ui\\selectors\\index.js","../../shared/constants/permissions":"F:\\metamask-extension\\shared\\constants\\permissions.ts","./approvals":"F:\\metamask-extension\\ui\\selectors\\approvals.ts","@metamask/controller-utils":"F:\\metamask-extension\\node_modules\\@metamask\\controller-utils\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Cpermissions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activeTabHasPermissions = activeTabHasPermissions;
exports.getAccountToConnectToActiveTab = getAccountToConnectToActiveTab;
exports.getAddressConnectedSubjectMap = getAddressConnectedSubjectMap;
exports.getConnectedSubjectsForAllAddresses = getConnectedSubjectsForAllAddresses;
exports.getConnectedSubjectsForSelectedAddress = getConnectedSubjectsForSelectedAddress;
exports.getFirstPermissionRequest = getFirstPermissionRequest;
exports.getLastConnectedInfo = getLastConnectedInfo;
exports.getOrderedConnectedAccountsForActiveTab = getOrderedConnectedAccountsForActiveTab;
exports.getPermissionSubjects = getPermissionSubjects;
exports.getPermissions = getPermissions;
exports.getPermissionsForActiveTab = getPermissionsForActiveTab;
exports.getPermissionsRequests = getPermissionsRequests;
exports.getPermittedAccounts = getPermittedAccounts;
exports.getPermittedAccountsByOrigin = getPermittedAccountsByOrigin;
exports.getPermittedAccountsForCurrentTab = getPermittedAccountsForCurrentTab;
exports.getRequestState = getRequestState;
exports.getRequestType = getRequestType;
exports.getSubjectsWithPermission = getSubjectsWithPermission;
var _controllerUtils = require("@metamask/controller-utils");
var _permissions = require("../../shared/constants/permissions");
var _approvals = require("./approvals");
var _ = require(".");
// selectors

/**
 * Get the permission subjects object.
 *
 * @param {object} state - The current state.
 * @returns {object} The permissions subjects object.
 */
function getPermissionSubjects(state) {
  return state.metamask.subjects || {};
}

/**
 * Selects the permitted accounts from the eth_accounts permission given state
 * and an origin.
 *
 * @param {object} state - The current state.
 * @param {string} origin - The origin/subject to get the permitted accounts for.
 * @returns {Array<string>} An empty array or an array of accounts.
 */
function getPermittedAccounts(state, origin) {
  return getAccountsFromPermission(getAccountsPermissionFromSubject(subjectSelector(state, origin)));
}

/**
 * Selects the permitted accounts from the eth_accounts permission for the
 * origin of the current tab.
 *
 * @param {object} state - The current state.
 * @returns {Array<string>} An empty array or an array of accounts.
 */
function getPermittedAccountsForCurrentTab(state) {
  return getPermittedAccounts(state, (0, _.getOriginOfCurrentTab)(state));
}

/**
 * Returns a map of permitted accounts by origin for all origins.
 *
 * @param {object} state - The current state.
 * @returns {object} Permitted accounts by origin.
 */
function getPermittedAccountsByOrigin(state) {
  const subjects = getPermissionSubjects(state);
  return Object.keys(subjects).reduce((acc, subjectKey) => {
    const accounts = getAccountsFromSubject(subjects[subjectKey]);
    if (accounts.length > 0) {
      acc[subjectKey] = accounts;
    }
    return acc;
  }, {});
}

/**
 * Returns an array of connected subject objects, with the following properties:
 * - extensionId
 * - key (i.e. origin)
 * - name
 * - icon
 *
 * @param {object} state - The current state.
 * @returns {Array<object>} An array of connected subject objects.
 */
function getConnectedSubjectsForSelectedAddress(state) {
  const {
    selectedAddress
  } = state.metamask;
  const subjects = getPermissionSubjects(state);
  const subjectMetadata = (0, _.getSubjectMetadata)(state);
  const connectedSubjects = [];
  Object.entries(subjects).forEach(([subjectKey, subjectValue]) => {
    const exposedAccounts = getAccountsFromSubject(subjectValue);
    if (!exposedAccounts.includes(selectedAddress)) {
      return;
    }
    const {
      extensionId,
      name,
      iconUrl
    } = subjectMetadata[subjectKey] || {};
    connectedSubjects.push({
      extensionId,
      origin: subjectKey,
      name,
      iconUrl
    });
  });
  return connectedSubjects;
}
function getConnectedSubjectsForAllAddresses(state) {
  const subjects = getPermissionSubjects(state);
  const subjectMetadata = (0, _.getSubjectMetadata)(state);
  const accountsToConnections = {};
  Object.entries(subjects).forEach(([subjectKey, subjectValue]) => {
    const exposedAccounts = getAccountsFromSubject(subjectValue);
    exposedAccounts.forEach(address => {
      if (!accountsToConnections[address]) {
        accountsToConnections[address] = [];
      }
      accountsToConnections[address].push(subjectMetadata[subjectKey] || {});
    });
  });
  return accountsToConnections;
}
function getSubjectsWithPermission(state, permissionName) {
  const subjects = getPermissionSubjects(state);
  const connectedSubjects = [];
  Object.entries(subjects).forEach(([origin, {
    permissions
  }]) => {
    if (permissions[permissionName]) {
      const {
        extensionId,
        name,
        iconUrl
      } = (0, _.getTargetSubjectMetadata)(state, origin) || {};
      connectedSubjects.push({
        extensionId,
        origin,
        name,
        iconUrl
      });
    }
  });
  return connectedSubjects;
}

/**
 * Returns an object mapping addresses to objects mapping origins to connected
 * subject info. Subject info objects have the following properties:
 * - iconUrl
 * - name
 *
 * @param {object} state - The current state.
 * @returns {object} A mapping of addresses to a mapping of origins to
 * connected subject info.
 */
function getAddressConnectedSubjectMap(state) {
  const subjectMetadata = (0, _.getSubjectMetadata)(state);
  const accountsMap = getPermittedAccountsByOrigin(state);
  const addressConnectedIconMap = {};
  Object.keys(accountsMap).forEach(subjectKey => {
    const {
      iconUrl,
      name
    } = subjectMetadata[subjectKey] || {};
    accountsMap[subjectKey].forEach(address => {
      const nameToRender = name || subjectKey;
      addressConnectedIconMap[address] = addressConnectedIconMap[address] ? {
        ...addressConnectedIconMap[address],
        [subjectKey]: {
          iconUrl,
          name: nameToRender
        }
      } : {
        [subjectKey]: {
          iconUrl,
          name: nameToRender
        }
      };
    });
  });
  return addressConnectedIconMap;
}

// selector helpers

function getAccountsFromSubject(subject) {
  return getAccountsFromPermission(getAccountsPermissionFromSubject(subject));
}
function getAccountsPermissionFromSubject(subject = {}) {
  var _subject$permissions;
  return ((_subject$permissions = subject.permissions) === null || _subject$permissions === void 0 ? void 0 : _subject$permissions.eth_accounts) || {};
}
function getAccountsFromPermission(accountsPermission) {
  const accountsCaveat = getAccountsCaveatFromPermission(accountsPermission);
  return accountsCaveat && Array.isArray(accountsCaveat.value) ? accountsCaveat.value : [];
}
function getAccountsCaveatFromPermission(accountsPermission = {}) {
  return Array.isArray(accountsPermission.caveats) && accountsPermission.caveats.find(caveat => caveat.type === _permissions.CaveatTypes.restrictReturnedAccounts);
}
function subjectSelector(state, origin) {
  var _state$metamask$subje;
  return origin && ((_state$metamask$subje = state.metamask.subjects) === null || _state$metamask$subje === void 0 ? void 0 : _state$metamask$subje[origin]);
}
function getAccountToConnectToActiveTab(state) {
  const selectedAddress = (0, _.getSelectedAddress)(state);
  const connectedAccounts = getPermittedAccountsForCurrentTab(state);
  const {
    metamask: {
      identities
    }
  } = state;
  const numberOfAccounts = Object.keys(identities).length;
  if (connectedAccounts.length && connectedAccounts.length !== numberOfAccounts) {
    if (connectedAccounts.findIndex(address => address === selectedAddress) === -1) {
      return identities[selectedAddress];
    }
  }
  return undefined;
}
function getOrderedConnectedAccountsForActiveTab(state) {
  var _permissionHistory$ac, _permissionHistory$ac2;
  const {
    activeTab,
    metamask: {
      permissionHistory
    }
  } = state;
  const permissionHistoryByAccount = // eslint-disable-next-line camelcase
  (_permissionHistory$ac = permissionHistory[activeTab.origin]) === null || _permissionHistory$ac === void 0 ? void 0 : (_permissionHistory$ac2 = _permissionHistory$ac.eth_accounts) === null || _permissionHistory$ac2 === void 0 ? void 0 : _permissionHistory$ac2.accounts;
  const orderedAccounts = (0, _.getMetaMaskAccountsOrdered)(state);
  const connectedAccounts = getPermittedAccountsForCurrentTab(state);
  return orderedAccounts.filter(account => connectedAccounts.includes(account.address)).map(account => ({
    ...account,
    lastActive: permissionHistoryByAccount === null || permissionHistoryByAccount === void 0 ? void 0 : permissionHistoryByAccount[account.address]
  })).sort(({
    lastSelected: lastSelectedA
  }, {
    lastSelected: lastSelectedB
  }) => {
    if (lastSelectedA === lastSelectedB) {
      return 0;
    } else if (lastSelectedA === undefined) {
      return 1;
    } else if (lastSelectedB === undefined) {
      return -1;
    }
    return lastSelectedB - lastSelectedA;
  });
}
function getPermissionsForActiveTab(state) {
  var _subjects$activeTab$o;
  const {
    activeTab,
    metamask
  } = state;
  const {
    subjects = {}
  } = metamask;
  const permissions = ((_subjects$activeTab$o = subjects[activeTab.origin]) === null || _subjects$activeTab$o === void 0 ? void 0 : _subjects$activeTab$o.permissions) ?? {};
  return Object.keys(permissions).map(parentCapability => {
    return {
      key: parentCapability,
      value: permissions[parentCapability]
    };
  });
}
function activeTabHasPermissions(state) {
  var _subjects$activeTab$o2;
  const {
    activeTab,
    metamask
  } = state;
  const {
    subjects = {}
  } = metamask;
  return Boolean(Object.keys(((_subjects$activeTab$o2 = subjects[activeTab.origin]) === null || _subjects$activeTab$o2 === void 0 ? void 0 : _subjects$activeTab$o2.permissions) || {}).length > 0);
}

/**
 * Get the connected accounts history for all origins.
 *
 * @param {Record<string, unknown>} state - The MetaMask state.
 * @returns {Record<string, { accounts: Record<string, number> }>} An object
 * with account connection histories by origin.
 */
function getLastConnectedInfo(state) {
  const {
    permissionHistory = {}
  } = state.metamask;
  return Object.keys(permissionHistory).reduce((lastConnectedInfo, origin) => {
    if (permissionHistory[origin].eth_accounts) {
      lastConnectedInfo[origin] = JSON.parse(JSON.stringify(permissionHistory[origin].eth_accounts));
    }
    return lastConnectedInfo;
  }, {});
}
function getPermissionsRequests(state) {
  var _getApprovalRequestsB;
  return (_getApprovalRequestsB = (0, _approvals.getApprovalRequestsByType)(state, _controllerUtils.ApprovalType.WalletRequestPermissions)) === null || _getApprovalRequestsB === void 0 ? void 0 : _getApprovalRequestsB.map(({
    requestData
  }) => requestData);
}
function getFirstPermissionRequest(state) {
  const requests = getPermissionsRequests(state);
  return requests && requests[0] ? requests[0] : null;
}
function getPermissions(state, origin) {
  var _getPermissionSubject;
  return (_getPermissionSubject = getPermissionSubjects(state)[origin]) === null || _getPermissionSubject === void 0 ? void 0 : _getPermissionSubject.permissions;
}
function getRequestState(state, id) {
  var _state$metamask$pendi;
  return (_state$metamask$pendi = state.metamask.pendingApprovals[id]) === null || _state$metamask$pendi === void 0 ? void 0 : _state$metamask$pendi.requestState;
}
function getRequestType(state, id) {
  var _state$metamask$pendi2;
  return (_state$metamask$pendi2 = state.metamask.pendingApprovals[id]) === null || _state$metamask$pendi2 === void 0 ? void 0 : _state$metamask$pendi2.type;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\permissions.js",}],
["F:\\metamask-extension\\ui\\selectors\\selectors.js", {"../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../shared/constants/bridge":"F:\\metamask-extension\\shared\\constants\\bridge.ts","../../shared/constants/hardware-wallets":"F:\\metamask-extension\\shared\\constants\\hardware-wallets.ts","../../shared/constants/keyring":"F:\\metamask-extension\\shared\\constants\\keyring.ts","../../shared/constants/labels":"F:\\metamask-extension\\shared\\constants\\labels.ts","../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../shared/constants/terms":"F:\\metamask-extension\\shared\\constants\\terms.js","../../shared/constants/time":"F:\\metamask-extension\\shared\\constants\\time.ts","../../shared/constants/tokens":"F:\\metamask-extension\\shared\\constants\\tokens.js","../../shared/constants/transaction":"F:\\metamask-extension\\shared\\constants\\transaction.ts","../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/app/app":"F:\\metamask-extension\\ui\\ducks\\app\\app.ts","../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../pages/confirmation/templates":"F:\\metamask-extension\\ui\\pages\\confirmation\\templates\\index.js","@metamask/controller-utils":"F:\\metamask-extension\\node_modules\\@metamask\\controller-utils\\dist\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","reselect":"F:\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Cselectors.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accountsWithSendEtherInfoSelector = accountsWithSendEtherInfoSelector;
exports.checkNetworkAndAccountSupports1559 = checkNetworkAndAccountSupports1559;
exports.checkNetworkOrAccountNotSupports1559 = checkNetworkOrAccountNotSupports1559;
exports.deprecatedGetCurrentNetworkId = deprecatedGetCurrentNetworkId;
exports.doesAddressRequireLedgerHidConnection = doesAddressRequireLedgerHidConnection;
exports.getAccountName = getAccountName;
exports.getAccountType = getAccountType;
exports.getAccountTypeForKeyring = getAccountTypeForKeyring;
exports.getAccountsWithLabels = getAccountsWithLabels;
exports.getAddressBook = getAddressBook;
exports.getAddressBookEntry = getAddressBookEntry;
exports.getAddressBookEntryOrAccountName = getAddressBookEntryOrAccountName;
exports.getAdvancedGasFeeValues = getAdvancedGasFeeValues;
exports.getAdvancedInlineGasShown = getAdvancedInlineGasShown;
exports.getAllAccountsOnNetworkAreEmpty = getAllAccountsOnNetworkAreEmpty;
exports.getAllEnabledNetworks = getAllEnabledNetworks;
exports.getAllNetworks = getAllNetworks;
exports.getAppIsLoading = getAppIsLoading;
exports.getBlockExplorerLinkText = getBlockExplorerLinkText;
exports.getCurrentAccountWithSendEtherInfo = getCurrentAccountWithSendEtherInfo;
exports.getCurrentChainId = getCurrentChainId;
exports.getCurrentCurrency = getCurrentCurrency;
exports.getCurrentEthBalance = getCurrentEthBalance;
exports.getCurrentKeyring = getCurrentKeyring;
exports.getCurrentNetwork = getCurrentNetwork;
exports.getCurrentNetworkTransactionList = void 0;
exports.getCurrentQRHardwareState = getCurrentQRHardwareState;
exports.getCustomNonceValue = getCustomNonceValue;
exports.getCustomTokenAmount = getCustomTokenAmount;
exports.getDetectedTokensInCurrentNetwork = getDetectedTokensInCurrentNetwork;
exports.getDisabledRpcMethodPreferences = getDisabledRpcMethodPreferences;
exports.getEnsResolutionByAddress = getEnsResolutionByAddress;
exports.getFeatureFlags = getFeatureFlags;
exports.getFullTxData = void 0;
exports.getGasIsLoading = getGasIsLoading;
exports.getHardwareWalletType = getHardwareWalletType;
exports.getInfuraBlocked = getInfuraBlocked;
exports.getIpfsGateway = getIpfsGateway;
exports.getIsAdvancedGasFeeDefault = getIsAdvancedGasFeeDefault;
exports.getIsBridgeChain = getIsBridgeChain;
exports.getIsBridgeToken = void 0;
exports.getIsBuyableChain = getIsBuyableChain;
exports.getIsCustomNetwork = getIsCustomNetwork;
exports.getIsDynamicTokenListAvailable = getIsDynamicTokenListAvailable;
exports.getIsMainnet = getIsMainnet;
exports.getIsMultiLayerFeeNetwork = getIsMultiLayerFeeNetwork;
exports.getIsNetworkUsed = getIsNetworkUsed;
exports.getIsNonStandardEthChain = getIsNonStandardEthChain;
exports.getIsOptimism = getIsOptimism;
exports.getIsSwapsChain = getIsSwapsChain;
exports.getIsTestnet = getIsTestnet;
exports.getIsTokenDetectionInactiveOnMainnet = getIsTokenDetectionInactiveOnMainnet;
exports.getIsTokenDetectionSupported = getIsTokenDetectionSupported;
exports.getIsTransactionSecurityCheckEnabled = getIsTransactionSecurityCheckEnabled;
exports.getIstokenDetectionInactiveOnNonMainnetSupportedNetwork = getIstokenDetectionInactiveOnNonMainnetSupportedNetwork;
exports.getKnownMethodData = getKnownMethodData;
exports.getMetaMaskAccountsOrdered = exports.getMetaMaskAccountsConnected = exports.getMetaMaskAccounts = exports.getMemoizedMetadataContractName = exports.getMemoizedMetaMaskIdentities = exports.getMemoizedAddressBook = void 0;
exports.getMetaMaskAccountsRaw = getMetaMaskAccountsRaw;
exports.getMetaMaskCachedBalances = getMetaMaskCachedBalances;
exports.getMetaMaskIdentities = getMetaMaskIdentities;
exports.getMetaMaskKeyrings = getMetaMaskKeyrings;
exports.getMetaMetricsId = getMetaMetricsId;
exports.getMetadataContractName = getMetadataContractName;
exports.getNativeCurrencyImage = getNativeCurrencyImage;
exports.getNetworkConfigurations = getNetworkConfigurations;
exports.getNetworkIdentifier = getNetworkIdentifier;
exports.getNetworksTabSelectedNetworkConfigurationId = getNetworksTabSelectedNetworkConfigurationId;
exports.getNewNetworkAdded = getNewNetworkAdded;
exports.getNewNftAddedMessage = getNewNftAddedMessage;
exports.getNewTokensImported = getNewTokensImported;
exports.getNextSuggestedNonce = getNextSuggestedNonce;
exports.getNonTestNetworks = getNonTestNetworks;
exports.getNumberOfTokens = getNumberOfTokens;
exports.getOnboardedInThisUISession = getOnboardedInThisUISession;
exports.getOpenSeaEnabled = getOpenSeaEnabled;
exports.getOriginOfCurrentTab = getOriginOfCurrentTab;
exports.getPreferences = getPreferences;
exports.getRemoveNftMessage = getRemoveNftMessage;
exports.getRpcPrefsForCurrentProvider = getRpcPrefsForCurrentProvider;
exports.getSelectedAccount = getSelectedAccount;
exports.getSelectedAccountCachedBalance = getSelectedAccountCachedBalance;
exports.getSelectedAddress = getSelectedAddress;
exports.getSelectedIdentity = getSelectedIdentity;
exports.getShouldHideZeroBalanceTokens = getShouldHideZeroBalanceTokens;
exports.getShouldShowFiat = getShouldShowFiat;
exports.getShouldShowSeedPhraseReminder = getShouldShowSeedPhraseReminder;
exports.getShowBetaHeader = getShowBetaHeader;
exports.getShowOutdatedBrowserWarning = getShowOutdatedBrowserWarning;
exports.getShowProductTour = getShowProductTour;
exports.getShowRecoveryPhraseReminder = getShowRecoveryPhraseReminder;
exports.getShowTermsOfUse = getShowTermsOfUse;
exports.getShowTestNetworks = getShowTestNetworks;
exports.getShowWhatsNewPopup = getShowWhatsNewPopup;
exports.getSortedAnnouncementsToShow = getSortedAnnouncementsToShow;
exports.getSubjectMetadata = getSubjectMetadata;
exports.getSuggestedNfts = getSuggestedNfts;
exports.getSuggestedTokens = getSuggestedTokens;
exports.getSwapsDefaultToken = getSwapsDefaultToken;
exports.getTargetAccount = getTargetAccount;
exports.getTargetAccountWithSendEtherInfo = getTargetAccountWithSendEtherInfo;
exports.getTargetSubjectMetadata = getTargetSubjectMetadata;
exports.getTestNetworks = getTestNetworks;
exports.getTheme = getTheme;
exports.getTokenExchangeRates = exports.getTokenDetectionSupportNetworkByChainId = void 0;
exports.getTokenList = getTokenList;
exports.getTotalUnapprovedCount = getTotalUnapprovedCount;
exports.getTotalUnapprovedMessagesCount = getTotalUnapprovedMessagesCount;
exports.getTotalUnapprovedSignatureRequestCount = getTotalUnapprovedSignatureRequestCount;
exports.getTxData = exports.getTransaction = void 0;
exports.getUSDConversionRate = getUSDConversionRate;
exports.getUnapprovedConfirmations = getUnapprovedConfirmations;
exports.getUnapprovedTemplatedConfirmations = getUnapprovedTemplatedConfirmations;
exports.getUnapprovedTransactions = exports.getUnapprovedTransaction = void 0;
exports.getUnapprovedTxCount = getUnapprovedTxCount;
exports.getUseCurrencyRateCheck = getUseCurrencyRateCheck;
exports.getUseNftDetection = getUseNftDetection;
exports.getUseNonceField = getUseNonceField;
exports.getUseTokenDetection = getUseTokenDetection;
exports.getWeb3ShimUsageStateForOrigin = getWeb3ShimUsageStateForOrigin;
exports.hasUnsignedQRHardwareMessage = hasUnsignedQRHardwareMessage;
exports.hasUnsignedQRHardwareTransaction = hasUnsignedQRHardwareTransaction;
exports.isBalanceCached = isBalanceCached;
exports.isCurrentProviderCustom = isCurrentProviderCustom;
exports.isHardwareWallet = isHardwareWallet;
exports.isNetworkLoading = isNetworkLoading;
var _controllerUtils = require("@metamask/controller-utils");
var _reselect = require("reselect");
var _lodash = require("lodash");
var _util = require("../../app/scripts/lib/util");
var _network = require("../../shared/constants/network");
var _hardwareWallets = require("../../shared/constants/hardware-wallets");
var _keyring = require("../../shared/constants/keyring");
var _app = require("../../shared/constants/app");
var _labels = require("../../shared/constants/labels");
var _swaps = require("../../shared/constants/swaps");
var _bridge = require("../../shared/constants/bridge");
var _util2 = require("../helpers/utils/util");
var _templates = require("../pages/confirmation/templates");
var _tokens = require("../../shared/constants/tokens");
var _time = require("../../shared/constants/time");
var _terms = require("../../shared/constants/terms");
var _metamask = require("../ducks/metamask/metamask");
var _app2 = require("../ducks/app/app");
var _stringUtils = require("../../shared/modules/string-utils");
var _transaction = require("../../shared/constants/transaction");
var _conversion = require("../../shared/modules/conversion.utils");
/**
 * Returns true if the currently selected network is inaccessible or whether no
 * provider has been set yet for the currently selected network.
 *
 * @param {object} state - Redux state object.
 */
function isNetworkLoading(state) {
  return state.metamask.networkStatus !== _network.NetworkStatus.Available;
}
function getNetworkIdentifier(state) {
  const {
    type,
    nickname,
    rpcUrl
  } = (0, _metamask.getProviderConfig)(state);
  return nickname || rpcUrl || type;
}
function getCurrentChainId(state) {
  const {
    chainId
  } = (0, _metamask.getProviderConfig)(state);
  return chainId;
}
function getMetaMetricsId(state) {
  const {
    metaMetricsId
  } = state.metamask;
  return metaMetricsId;
}
function isCurrentProviderCustom(state) {
  const provider = (0, _metamask.getProviderConfig)(state);
  return provider.type === _network.NETWORK_TYPES.RPC && !Object.values(_network.CHAIN_IDS).includes(provider.chainId);
}
function getCurrentQRHardwareState(state) {
  const {
    qrHardware
  } = state.metamask;
  return qrHardware || {};
}
function hasUnsignedQRHardwareTransaction(state) {
  const {
    txParams
  } = state.confirmTransaction.txData;
  if (!txParams) {
    return false;
  }
  const {
    from
  } = txParams;
  const {
    keyrings
  } = state.metamask;
  const qrKeyring = keyrings.find(kr => kr.type === _keyring.KeyringType.qr);
  if (!qrKeyring) {
    return false;
  }
  return Boolean(qrKeyring.accounts.find(account => account.toLowerCase() === from.toLowerCase()));
}
function hasUnsignedQRHardwareMessage(state) {
  const {
    type,
    msgParams
  } = state.confirmTransaction.txData;
  if (!type || !msgParams) {
    return false;
  }
  const {
    from
  } = msgParams;
  const {
    keyrings
  } = state.metamask;
  const qrKeyring = keyrings.find(kr => kr.type === _keyring.KeyringType.qr);
  if (!qrKeyring) {
    return false;
  }
  switch (type) {
    case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
    case _app.MESSAGE_TYPE.ETH_SIGN:
    case _app.MESSAGE_TYPE.PERSONAL_SIGN:
      return Boolean(qrKeyring.accounts.find(account => account.toLowerCase() === from.toLowerCase()));
    default:
      return false;
  }
}
function getCurrentKeyring(state) {
  const identity = getSelectedIdentity(state);
  if (!identity) {
    return null;
  }
  const keyring = (0, _metamask.findKeyringForAddress)(state, identity.address);
  return keyring;
}

/**
 * The function returns true if network and account details are fetched and
 * both of them support EIP-1559.
 *
 * @param state
 */
function checkNetworkAndAccountSupports1559(state) {
  const networkSupports1559 = (0, _metamask.isEIP1559Network)(state);
  return networkSupports1559;
}

/**
 * The function returns true if network and account details are fetched and
 * either of them do not support EIP-1559.
 *
 * @param state
 */
function checkNetworkOrAccountNotSupports1559(state) {
  const networkNotSupports1559 = (0, _metamask.isNotEIP1559Network)(state);
  return networkNotSupports1559;
}

/**
 * Checks if the current wallet is a hardware wallet.
 *
 * @param {object} state
 * @returns {boolean}
 */
function isHardwareWallet(state) {
  var _keyring$type;
  const keyring = getCurrentKeyring(state);
  return Boolean(keyring === null || keyring === void 0 ? void 0 : (_keyring$type = keyring.type) === null || _keyring$type === void 0 ? void 0 : _keyring$type.includes('Hardware'));
}

/**
 * Get a HW wallet type, e.g. "Ledger Hardware"
 *
 * @param {object} state
 * @returns {string | undefined}
 */
function getHardwareWalletType(state) {
  const keyring = getCurrentKeyring(state);
  return isHardwareWallet(state) ? keyring.type : undefined;
}
function getAccountType(state) {
  const currentKeyring = getCurrentKeyring(state);
  return getAccountTypeForKeyring(currentKeyring);
}
function getAccountTypeForKeyring(keyring) {
  if (!keyring) {
    return '';
  }
  const {
    type
  } = keyring;
  switch (type) {
    case _keyring.KeyringType.trezor:
    case _keyring.KeyringType.ledger:
    case _keyring.KeyringType.lattice:
    case _keyring.KeyringType.qr:
      return 'hardware';
    case _keyring.KeyringType.imported:
      return 'imported';
    default:
      return 'default';
  }
}

/**
 * get the currently selected networkId which will be 'loading' when the
 * network changes. The network id should not be used in most cases,
 * instead use chainId in most situations. There are a limited number of
 * use cases to use this method still, such as when comparing transaction
 * metadata that predates the switch to using chainId.
 *
 * @deprecated - use getCurrentChainId instead
 * @param {object} state - redux state object
 */
function deprecatedGetCurrentNetworkId(state) {
  return state.metamask.networkId ?? 'loading';
}
const getMetaMaskAccounts = (0, _reselect.createSelector)(getMetaMaskAccountsRaw, getMetaMaskCachedBalances, (currentAccounts, cachedBalances) => Object.entries(currentAccounts).reduce((selectedAccounts, [accountID, account]) => {
  if (account.balance === null || account.balance === undefined) {
    return {
      ...selectedAccounts,
      [accountID]: {
        ...account,
        balance: cachedBalances && cachedBalances[accountID]
      }
    };
  }
  return {
    ...selectedAccounts,
    [accountID]: account
  };
}, {}));
exports.getMetaMaskAccounts = getMetaMaskAccounts;
function getSelectedAddress(state) {
  return state.metamask.selectedAddress;
}
function getSelectedIdentity(state) {
  const selectedAddress = getSelectedAddress(state);
  const {
    identities
  } = state.metamask;
  return identities[selectedAddress];
}
function getNumberOfTokens(state) {
  const {
    tokens
  } = state.metamask;
  return tokens ? tokens.length : 0;
}
function getMetaMaskKeyrings(state) {
  return state.metamask.keyrings;
}
function getMetaMaskIdentities(state) {
  return state.metamask.identities;
}
function getMetaMaskAccountsRaw(state) {
  return state.metamask.accounts;
}
function getMetaMaskCachedBalances(state) {
  const chainId = getCurrentChainId(state);

  // Fallback to fetching cached balances from network id
  // this can eventually be removed
  const network = deprecatedGetCurrentNetworkId(state);
  return state.metamask.cachedBalances[chainId] ?? state.metamask.cachedBalances[network];
}

/**
 * Get ordered (by keyrings) accounts with identity and balance
 */
const getMetaMaskAccountsOrdered = (0, _reselect.createSelector)(getMetaMaskKeyrings, getMetaMaskIdentities, getMetaMaskAccounts, (keyrings, identities, accounts) => keyrings.reduce((list, keyring) => list.concat(keyring.accounts), []).filter(address => Boolean(identities[address])).map(address => ({
  ...identities[address],
  ...accounts[address]
})));
exports.getMetaMaskAccountsOrdered = getMetaMaskAccountsOrdered;
const getMetaMaskAccountsConnected = (0, _reselect.createSelector)(getMetaMaskAccountsOrdered, connectedAccounts => connectedAccounts.map(({
  address
}) => address.toLowerCase()));
exports.getMetaMaskAccountsConnected = getMetaMaskAccountsConnected;
function isBalanceCached(state) {
  const selectedAccountBalance = state.metamask.accounts[getSelectedAddress(state)].balance;
  const cachedBalance = getSelectedAccountCachedBalance(state);
  return Boolean(!selectedAccountBalance && cachedBalance);
}
function getSelectedAccountCachedBalance(state) {
  const cachedBalances = getMetaMaskCachedBalances(state);
  const selectedAddress = getSelectedAddress(state);
  return cachedBalances && cachedBalances[selectedAddress];
}
function getSelectedAccount(state) {
  const accounts = getMetaMaskAccounts(state);
  const selectedAddress = getSelectedAddress(state);
  return accounts[selectedAddress];
}
function getTargetAccount(state, targetAddress) {
  const accounts = getMetaMaskAccounts(state);
  return accounts[targetAddress];
}
const getTokenExchangeRates = state => state.metamask.contractExchangeRates;
exports.getTokenExchangeRates = getTokenExchangeRates;
function getAddressBook(state) {
  const chainId = getCurrentChainId(state);
  if (!state.metamask.addressBook[chainId]) {
    return [];
  }
  return Object.values(state.metamask.addressBook[chainId]);
}
function getEnsResolutionByAddress(state, address) {
  if (state.metamask.ensResolutionsByAddress[address]) {
    return state.metamask.ensResolutionsByAddress[address];
  }
  const entry = getAddressBookEntry(state, address) || Object.values(state.metamask.identities).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, address));
  return (entry === null || entry === void 0 ? void 0 : entry.name) || '';
}
function getAddressBookEntry(state, address) {
  const addressBook = getAddressBook(state);
  const entry = addressBook.find(contact => (0, _stringUtils.isEqualCaseInsensitive)(contact.address, address));
  return entry;
}
function getAddressBookEntryOrAccountName(state, address) {
  const entry = getAddressBookEntry(state, address) || Object.values(state.metamask.identities).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, address));
  return entry && entry.name !== '' ? entry.name : address;
}
function getAccountName(identities, address) {
  const entry = Object.values(identities).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, address));
  return entry && entry.name !== '' ? entry.name : '';
}
function getMetadataContractName(state, address) {
  const tokenList = getTokenList(state);
  const entry = Object.values(tokenList).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, address));
  return entry && entry.name !== '' ? entry.name : '';
}
function accountsWithSendEtherInfoSelector(state) {
  const accounts = getMetaMaskAccounts(state);
  const identities = getMetaMaskIdentities(state);
  const accountsWithSendEtherInfo = Object.entries(identities).map(([key, identity]) => {
    return {
      ...identity,
      ...accounts[key]
    };
  });
  return accountsWithSendEtherInfo;
}
function getAccountsWithLabels(state) {
  return getMetaMaskAccountsOrdered(state).map(({
    address,
    name,
    balance
  }) => ({
    address,
    addressLabel: `${name.length < _labels.TRUNCATED_NAME_CHAR_LIMIT ? name : `${name.slice(0, _labels.TRUNCATED_NAME_CHAR_LIMIT - 1)}...`} (${(0, _util2.shortenAddress)(address)})`,
    label: name,
    balance
  }));
}
function getCurrentAccountWithSendEtherInfo(state) {
  const currentAddress = getSelectedAddress(state);
  const accounts = accountsWithSendEtherInfoSelector(state);
  return (0, _util2.getAccountByAddress)(accounts, currentAddress);
}
function getTargetAccountWithSendEtherInfo(state, targetAddress) {
  const accounts = accountsWithSendEtherInfoSelector(state);
  return (0, _util2.getAccountByAddress)(accounts, targetAddress);
}
function getCurrentEthBalance(state) {
  var _getCurrentAccountWit;
  return (_getCurrentAccountWit = getCurrentAccountWithSendEtherInfo(state)) === null || _getCurrentAccountWit === void 0 ? void 0 : _getCurrentAccountWit.balance;
}
function getGasIsLoading(state) {
  return state.appState.gasIsLoading;
}
function getAppIsLoading(state) {
  return state.appState.isLoading;
}
function getCurrentCurrency(state) {
  return state.metamask.currentCurrency;
}
function getTotalUnapprovedCount(state) {
  return state.metamask.pendingApprovalCount ?? 0;
}
function getTotalUnapprovedMessagesCount(state) {
  const {
    unapprovedMsgCount = 0,
    unapprovedPersonalMsgCount = 0,
    unapprovedDecryptMsgCount = 0,
    unapprovedEncryptionPublicKeyMsgCount = 0,
    unapprovedTypedMessagesCount = 0
  } = state.metamask;
  return unapprovedMsgCount + unapprovedPersonalMsgCount + unapprovedDecryptMsgCount + unapprovedEncryptionPublicKeyMsgCount + unapprovedTypedMessagesCount;
}
function getTotalUnapprovedSignatureRequestCount(state) {
  const {
    unapprovedMsgCount = 0,
    unapprovedPersonalMsgCount = 0,
    unapprovedTypedMessagesCount = 0
  } = state.metamask;
  return unapprovedMsgCount + unapprovedPersonalMsgCount + unapprovedTypedMessagesCount;
}
function getUnapprovedTxCount(state) {
  const {
    unapprovedTxs = {}
  } = state.metamask;
  return Object.keys(unapprovedTxs).length;
}
function getUnapprovedConfirmations(state) {
  const {
    pendingApprovals = {}
  } = state.metamask;
  return Object.values(pendingApprovals);
}
function getUnapprovedTemplatedConfirmations(state) {
  const unapprovedConfirmations = getUnapprovedConfirmations(state);
  return unapprovedConfirmations.filter(approval => _templates.TEMPLATED_CONFIRMATION_APPROVAL_TYPES.includes(approval.type));
}
function getSuggestedTokens(state) {
  var _getUnapprovedConfirm;
  return ((_getUnapprovedConfirm = getUnapprovedConfirmations(state)) === null || _getUnapprovedConfirm === void 0 ? void 0 : _getUnapprovedConfirm.filter(({
    type,
    requestData
  }) => {
    var _requestData$asset;
    return type === _controllerUtils.ApprovalType.WatchAsset && (requestData === null || requestData === void 0 ? void 0 : (_requestData$asset = requestData.asset) === null || _requestData$asset === void 0 ? void 0 : _requestData$asset.tokenId) === undefined;
  })) || [];
}
function getSuggestedNfts(state) {
  var _getUnapprovedConfirm2;
  return ((_getUnapprovedConfirm2 = getUnapprovedConfirmations(state)) === null || _getUnapprovedConfirm2 === void 0 ? void 0 : _getUnapprovedConfirm2.filter(({
    requestData,
    type
  }) => {
    var _requestData$asset2;
    return type === _controllerUtils.ApprovalType.WatchAsset && (requestData === null || requestData === void 0 ? void 0 : (_requestData$asset2 = requestData.asset) === null || _requestData$asset2 === void 0 ? void 0 : _requestData$asset2.tokenId) !== undefined;
  })) || [];
}
function getIsMainnet(state) {
  const chainId = getCurrentChainId(state);
  return chainId === _network.CHAIN_IDS.MAINNET;
}
function getIsTestnet(state) {
  const chainId = getCurrentChainId(state);
  return _network.TEST_CHAINS.includes(chainId);
}
function getIsNonStandardEthChain(state) {
  return !(getIsMainnet(state) || getIsTestnet(state) || false);
}
function getPreferences({
  metamask
}) {
  return metamask.preferences;
}
function getShowTestNetworks(state) {
  const {
    showTestNetworks
  } = getPreferences(state);
  return Boolean(showTestNetworks);
}
function getDisabledRpcMethodPreferences(state) {
  return state.metamask.disabledRpcMethodPreferences;
}
function getShouldShowFiat(state) {
  const isMainNet = getIsMainnet(state);
  const isCustomNetwork = getIsCustomNetwork(state);
  const conversionRate = (0, _metamask.getConversionRate)(state);
  const useCurrencyRateCheck = getUseCurrencyRateCheck(state);
  const {
    showFiatInTestnets
  } = getPreferences(state);
  return Boolean((isMainNet || isCustomNetwork || showFiatInTestnets) && useCurrencyRateCheck && conversionRate);
}
function getShouldHideZeroBalanceTokens(state) {
  const {
    hideZeroBalanceTokens
  } = getPreferences(state);
  return hideZeroBalanceTokens;
}
function getAdvancedInlineGasShown(state) {
  return Boolean(state.metamask.featureFlags.advancedInlineGas);
}
function getUseNonceField(state) {
  return Boolean(state.metamask.useNonceField);
}
function getCustomNonceValue(state) {
  return String(state.metamask.customNonceValue);
}
function getSubjectMetadata(state) {
  return state.metamask.subjectMetadata;
}
function getTargetSubjectMetadata(state, origin) {
  const metadata = getSubjectMetadata(state)[origin];
  return metadata;
}
function getRpcPrefsForCurrentProvider(state) {
  const {
    rpcPrefs
  } = (0, _metamask.getProviderConfig)(state);
  return rpcPrefs || {};
}
function getKnownMethodData(state, data) {
  if (!data) {
    return null;
  }
  const prefixedData = (0, _util.addHexPrefix)(data);
  const fourBytePrefix = prefixedData.slice(0, 10);
  const {
    knownMethodData
  } = state.metamask;
  return knownMethodData && knownMethodData[fourBytePrefix];
}
function getFeatureFlags(state) {
  return state.metamask.featureFlags;
}
function getOriginOfCurrentTab(state) {
  return state.activeTab.origin;
}
function getIpfsGateway(state) {
  return state.metamask.ipfsGateway;
}
function getInfuraBlocked(state) {
  return Boolean(state.metamask.infuraBlocked);
}
function getUSDConversionRate(state) {
  return state.metamask.usdConversionRate;
}
function getWeb3ShimUsageStateForOrigin(state, origin) {
  return state.metamask.web3ShimUsageOrigins[origin];
}

/**
 * @typedef {object} SwapsEthToken
 * @property {string} symbol - The symbol for ETH, namely "ETH"
 * @property {string} name - The name of the ETH currency, "Ether"
 * @property {string} address - A substitute address for the metaswap-api to
 * recognize the ETH token
 * @property {string} decimals - The number of ETH decimals, i.e. 18
 * @property {string} balance - The user's ETH balance in decimal wei, with a
 * precision of 4 decimal places
 * @property {string} string - The user's ETH balance in decimal ETH
 */

/**
 * Swaps related code uses token objects for various purposes. These objects
 * always have the following properties: `symbol`, `name`, `address`, and
 * `decimals`.
 *
 * When available for the current account, the objects can have `balance` and
 * `string` properties.
 * `balance` is the users token balance in decimal values, denominated in the
 * minimal token units (according to its decimals).
 * `string` is the token balance in a readable format, ready for rendering.
 *
 * Swaps treats the selected chain's currency as a token, and we use the token constants
 * in the SWAPS_CHAINID_DEFAULT_TOKEN_MAP to set the standard properties for
 * the token. The getSwapsDefaultToken selector extends that object with
 * `balance` and `string` values of the same type as in regular ERC-20 token
 * objects, per the above description.
 *
 * @param {object} state - the redux state object
 * @returns {SwapsEthToken} The token object representation of the currently
 * selected account's ETH balance, as expected by the Swaps API.
 */

function getSwapsDefaultToken(state) {
  const selectedAccount = getSelectedAccount(state);
  const {
    balance
  } = selectedAccount;
  const chainId = getCurrentChainId(state);
  const defaultTokenObject = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId];
  return {
    ...defaultTokenObject,
    balance: (0, _conversion.hexToDecimal)(balance),
    string: (0, _conversion.getValueFromWeiHex)({
      value: balance,
      numberOfDecimals: 4,
      toDenomination: 'ETH'
    })
  };
}
function getIsSwapsChain(state) {
  const chainId = getCurrentChainId(state);
  const isNotDevelopment = "development" !== 'development' && "development" !== 'testing';
  return isNotDevelopment ? _swaps.ALLOWED_PROD_SWAPS_CHAIN_IDS.includes(chainId) : _swaps.ALLOWED_DEV_SWAPS_CHAIN_IDS.includes(chainId);
}
function getIsBridgeChain(state) {
  const chainId = getCurrentChainId(state);
  return _bridge.ALLOWED_BRIDGE_CHAIN_IDS.includes(chainId);
}
const getIsBridgeToken = tokenAddress => state => {
  const chainId = getCurrentChainId(state);
  const isBridgeChain = getIsBridgeChain(state);
  return isBridgeChain && _bridge.ALLOWED_BRIDGE_TOKEN_ADDRESSES[chainId].includes(tokenAddress.toLowerCase());
};
exports.getIsBridgeToken = getIsBridgeToken;
function getIsBuyableChain(state) {
  const chainId = getCurrentChainId(state);
  return Object.keys(_network.BUYABLE_CHAINS_MAP).includes(chainId);
}
function getNativeCurrencyImage(state) {
  var _getNativeCurrency;
  const nativeCurrency = (_getNativeCurrency = (0, _metamask.getNativeCurrency)(state)) === null || _getNativeCurrency === void 0 ? void 0 : _getNativeCurrency.toUpperCase();
  return _network.NATIVE_CURRENCY_TOKEN_IMAGE_MAP[nativeCurrency];
}
function getNextSuggestedNonce(state) {
  return Number(state.metamask.nextNonce);
}
function getShowWhatsNewPopup(state) {
  return state.appState.showWhatsNewPopup;
}
const createDeepEqualSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _lodash.isEqual);
const getMemoizedMetaMaskIdentities = createDeepEqualSelector(getMetaMaskIdentities, identities => identities);
exports.getMemoizedMetaMaskIdentities = getMemoizedMetaMaskIdentities;
const getMemoizedAddressBook = createDeepEqualSelector(getAddressBook, addressBook => addressBook);
exports.getMemoizedAddressBook = getMemoizedAddressBook;
const getMemoizedMetadataContractName = createDeepEqualSelector(getTokenList, (_tokenList, address) => address, (tokenList, address) => {
  const entry = Object.values(tokenList).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, address));
  return entry && entry.name !== '' ? entry.name : '';
});
exports.getMemoizedMetadataContractName = getMemoizedMetadataContractName;
const getUnapprovedTransactions = state => state.metamask.unapprovedTxs;
exports.getUnapprovedTransactions = getUnapprovedTransactions;
const getCurrentNetworkTransactionList = state => state.metamask.currentNetworkTxList;
exports.getCurrentNetworkTransactionList = getCurrentNetworkTransactionList;
const getTxData = state => state.confirmTransaction.txData;
exports.getTxData = getTxData;
const getUnapprovedTransaction = createDeepEqualSelector(getUnapprovedTransactions, (_, transactionId) => transactionId, (unapprovedTxs, transactionId) => {
  return Object.values(unapprovedTxs).find(({
    id
  }) => id === transactionId) || {};
});
exports.getUnapprovedTransaction = getUnapprovedTransaction;
const getTransaction = createDeepEqualSelector(getCurrentNetworkTransactionList, (_, transactionId) => transactionId, (unapprovedTxs, transactionId) => {
  return Object.values(unapprovedTxs).find(({
    id
  }) => id === transactionId) || {};
});
exports.getTransaction = getTransaction;
const getFullTxData = createDeepEqualSelector(getTxData, (state, transactionId, status) => {
  if (status === _transaction.TransactionStatus.unapproved) {
    return getUnapprovedTransaction(state, transactionId);
  }
  return getTransaction(state, transactionId);
}, (_state, _transactionId, _status, customTxParamsData) => customTxParamsData, (txData, transaction, customTxParamsData) => {
  let fullTxData = {
    ...txData,
    ...transaction
  };
  if (transaction && transaction.simulationFails) {
    fullTxData.simulationFails = {
      ...transaction.simulationFails
    };
  }
  if (customTxParamsData) {
    fullTxData = {
      ...fullTxData,
      txParams: {
        ...fullTxData.txParams,
        data: customTxParamsData
      }
    };
  }
  return fullTxData;
});

/**
 * Get an object of announcement IDs and if they are allowed or not.
 *
 * @param {object} state
 * @returns {object}
 */
exports.getFullTxData = getFullTxData;
function getAllowedAnnouncementIds(state) {
  const currentKeyring = getCurrentKeyring(state);
  const currentKeyringIsLedger = (currentKeyring === null || currentKeyring === void 0 ? void 0 : currentKeyring.type) === _keyring.KeyringType.ledger;
  const supportsWebHid = window.navigator.hid !== undefined;
  const currentlyUsingLedgerLive = (0, _metamask.getLedgerTransportType)(state) === _hardwareWallets.LedgerTransportTypes.live;
  const isFirefox = window.navigator.userAgent.includes('Firefox');
  const isSwapsChain = getIsSwapsChain(state);
  return {
    1: false,
    2: false,
    3: false,
    4: false,
    5: false,
    6: false,
    7: false,
    8: supportsWebHid && currentKeyringIsLedger && currentlyUsingLedgerLive,
    9: false,
    10: false,
    11: false,
    12: false,
    13: false,
    14: false,
    15: false,
    16: false,
    17: false,
    18: false,
    19: false,
    20: currentKeyringIsLedger && isFirefox,
    21: isSwapsChain
  };
}

/**
 * @typedef {object} Announcement
 * @property {number} id - A unique identifier for the announcement
 * @property {string} date - A date in YYYY-MM-DD format, identifying when the notification was first committed
 */

/**
 * Announcements are managed by the announcement controller and referenced by
 * `state.metamask.announcements`. This function returns a list of announcements
 * the can be shown to the user. This list includes all announcements that do not
 * have a truthy `isShown` property.
 *
 * The returned announcements are sorted by date.
 *
 * @param {object} state - the redux state object
 * @returns {Announcement[]} An array of announcements that can be shown to the user
 */

function getSortedAnnouncementsToShow(state) {
  const announcements = Object.values(state.metamask.announcements);
  const allowedAnnouncementIds = getAllowedAnnouncementIds(state);
  const announcementsToShow = announcements.filter(announcement => !announcement.isShown && allowedAnnouncementIds[announcement.id]);
  const announcementsSortedByDate = announcementsToShow.sort((a, b) => new Date(b.date) - new Date(a.date));
  return announcementsSortedByDate;
}
function getShowRecoveryPhraseReminder(state) {
  const {
    recoveryPhraseReminderLastShown,
    recoveryPhraseReminderHasBeenShown
  } = state.metamask;
  const currentTime = new Date().getTime();
  const frequency = recoveryPhraseReminderHasBeenShown ? _time.DAY * 90 : _time.DAY * 2;
  return currentTime - recoveryPhraseReminderLastShown >= frequency;
}
function getShowTermsOfUse(state) {
  const {
    termsOfUseLastAgreed
  } = state.metamask;
  if (!termsOfUseLastAgreed) {
    return true;
  }
  return new Date(termsOfUseLastAgreed).getTime() < new Date(_terms.TERMS_OF_USE_LAST_UPDATED).getTime();
}
function getShowOutdatedBrowserWarning(state) {
  const {
    outdatedBrowserWarningLastShown
  } = state.metamask;
  if (!outdatedBrowserWarningLastShown) {
    return true;
  }
  const currentTime = new Date().getTime();
  return currentTime - outdatedBrowserWarningLastShown >= _time.DAY * 2;
}
function getShowBetaHeader(state) {
  return state.metamask.showBetaHeader;
}
function getShowProductTour(state) {
  return state.metamask.showProductTour;
}
/**
 * To get the useTokenDetection flag which determines whether a static or dynamic token list is used
 *
 * @param {*} state
 * @returns Boolean
 */
function getUseTokenDetection(state) {
  return Boolean(state.metamask.useTokenDetection);
}

/**
 * To get the useNftDetection flag which determines whether we autodetect NFTs
 *
 * @param {*} state
 * @returns Boolean
 */
function getUseNftDetection(state) {
  return Boolean(state.metamask.useNftDetection);
}

/**
 * To get the openSeaEnabled flag which determines whether we use OpenSea's API
 *
 * @param {*} state
 * @returns Boolean
 */
function getOpenSeaEnabled(state) {
  return Boolean(state.metamask.openSeaEnabled);
}

/**
 * To get the `theme` value which determines which theme is selected
 *
 * @param {*} state
 * @returns Boolean
 */
function getTheme(state) {
  return state.metamask.theme;
}

/**
 * To retrieve the token list for use throughout the UI. Will return the remotely fetched list
 * from the tokens controller if token detection is enabled, or the static list if not.
 *
 * @param {*} state
 * @returns {object}
 */
function getTokenList(state) {
  const isTokenDetectionInactiveOnMainnet = getIsTokenDetectionInactiveOnMainnet(state);
  const caseInSensitiveTokenList = isTokenDetectionInactiveOnMainnet ? _tokens.STATIC_MAINNET_TOKEN_LIST : state.metamask.tokenList;
  return caseInSensitiveTokenList;
}
function doesAddressRequireLedgerHidConnection(state, address) {
  const addressIsLedger = (0, _metamask.isAddressLedger)(state, address);
  const transportTypePreferenceIsWebHID = (0, _metamask.getLedgerTransportType)(state) === _hardwareWallets.LedgerTransportTypes.webhid;
  const webHidIsNotConnected = (0, _app2.getLedgerWebHidConnectedStatus)(state) !== _hardwareWallets.WebHIDConnectedStatuses.connected;
  const ledgerTransportStatus = (0, _app2.getLedgerTransportStatus)(state);
  const transportIsNotSuccessfullyCreated = ledgerTransportStatus !== _hardwareWallets.HardwareTransportStates.verified;
  return addressIsLedger && transportTypePreferenceIsWebHID && (webHidIsNotConnected || transportIsNotSuccessfullyCreated);
}
function getNewNftAddedMessage(state) {
  return state.appState.newNftAddedMessage;
}
function getRemoveNftMessage(state) {
  return state.appState.removeNftMessage;
}

/**
 * To retrieve the name of the new Network added using add network form
 *
 * @param {*} state
 * @returns string
 */
function getNewNetworkAdded(state) {
  return state.appState.newNetworkAddedName;
}
function getNetworksTabSelectedNetworkConfigurationId(state) {
  return state.appState.selectedNetworkConfigurationId;
}
function getNetworkConfigurations(state) {
  return state.metamask.networkConfigurations;
}
function getCurrentNetwork(state) {
  const allNetworks = getAllNetworks(state);
  const currentChainId = getCurrentChainId(state);
  return allNetworks.find(network => network.chainId === currentChainId);
}
function getAllEnabledNetworks(state) {
  const nonTestNetworks = getNonTestNetworks(state);
  const allNetworks = getAllNetworks(state);
  const showTestnetNetworks = getShowTestNetworks(state);
  return showTestnetNetworks ? allNetworks : nonTestNetworks;
}
function getTestNetworks(state) {
  const networkConfigurations = getNetworkConfigurations(state) || {};
  return [{
    chainId: _network.CHAIN_IDS.GOERLI,
    nickname: _network.GOERLI_DISPLAY_NAME,
    rpcUrl: _network.CHAIN_ID_TO_RPC_URL_MAP[_network.CHAIN_IDS.GOERLI],
    providerType: _network.NETWORK_TYPES.GOERLI,
    ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.GOERLI]
  }, {
    chainId: _network.CHAIN_IDS.SEPOLIA,
    nickname: _network.SEPOLIA_DISPLAY_NAME,
    rpcUrl: _network.CHAIN_ID_TO_RPC_URL_MAP[_network.CHAIN_IDS.SEPOLIA],
    providerType: _network.NETWORK_TYPES.SEPOLIA,
    ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.SEPOLIA]
  }, {
    chainId: _network.CHAIN_IDS.LINEA_GOERLI,
    nickname: _network.LINEA_GOERLI_DISPLAY_NAME,
    rpcUrl: _network.CHAIN_ID_TO_RPC_URL_MAP[_network.CHAIN_IDS.LINEA_GOERLI],
    rpcPrefs: {
      imageUrl: _network.LINEA_GOERLI_TOKEN_IMAGE_URL
    },
    providerType: _network.NETWORK_TYPES.LINEA_GOERLI,
    ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.LINEA_GOERLI]
  },
  // Localhosts
  ...Object.values(networkConfigurations).filter(({
    chainId
  }) => chainId === _network.CHAIN_IDS.LOCALHOST)];
}
function getNonTestNetworks(state) {
  const networkConfigurations = getNetworkConfigurations(state) || {};
  return [
  // Mainnet always first
  {
    chainId: _network.CHAIN_IDS.MAINNET,
    nickname: _network.MAINNET_DISPLAY_NAME,
    rpcUrl: _network.CHAIN_ID_TO_RPC_URL_MAP[_network.CHAIN_IDS.MAINNET],
    rpcPrefs: {
      imageUrl: _network.ETH_TOKEN_IMAGE_URL
    },
    providerType: _network.NETWORK_TYPES.MAINNET,
    ticker: _network.CURRENCY_SYMBOLS.ETH
  }, {
    chainId: _network.CHAIN_IDS.LINEA_MAINNET,
    nickname: _network.LINEA_MAINNET_DISPLAY_NAME,
    rpcUrl: _network.CHAIN_ID_TO_RPC_URL_MAP[_network.CHAIN_IDS.LINEA_MAINNET],
    rpcPrefs: {
      imageUrl: _network.LINEA_MAINNET_TOKEN_IMAGE_URL
    },
    providerType: _network.NETWORK_TYPES.LINEA_MAINNET,
    ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.LINEA_MAINNET]
  },
  // Custom networks added by the user
  ...Object.values(networkConfigurations).filter(({
    chainId
  }) => ![_network.CHAIN_IDS.LOCALHOST].includes(chainId))];
}
function getAllNetworks(state) {
  const networks = [
  // Mainnet and custom networks
  ...getNonTestNetworks(state),
  // Test networks
  ...getTestNetworks(state)];
  return networks;
}
function getIsOptimism(state) {
  return getCurrentChainId(state) === _network.CHAIN_IDS.OPTIMISM || getCurrentChainId(state) === _network.CHAIN_IDS.OPTIMISM_TESTNET;
}
function getIsMultiLayerFeeNetwork(state) {
  return getIsOptimism(state);
}
/**
 *  To retrieve the maxBaseFee and priotitFee teh user has set as default
 *
 * @param {*} state
 * @returns Boolean
 */
function getAdvancedGasFeeValues(state) {
  return state.metamask.advancedGasFee;
}

/**
 *  To check if the user has set advanced gas fee settings as default with a non empty  maxBaseFee and priotityFee.
 *
 * @param {*} state
 * @returns Boolean
 */
function getIsAdvancedGasFeeDefault(state) {
  const {
    advancedGasFee
  } = state.metamask;
  return Boolean(advancedGasFee === null || advancedGasFee === void 0 ? void 0 : advancedGasFee.maxBaseFee) && Boolean(advancedGasFee === null || advancedGasFee === void 0 ? void 0 : advancedGasFee.priorityFee);
}

/**
 * To get the name of the network that support token detection based in chainId.
 *
 * @param state
 * @returns string e.g. ethereum, bsc or polygon
 */
const getTokenDetectionSupportNetworkByChainId = state => {
  const chainId = getCurrentChainId(state);
  switch (chainId) {
    case _network.CHAIN_IDS.MAINNET:
      return _network.MAINNET_DISPLAY_NAME;
    case _network.CHAIN_IDS.BSC:
      return _network.BSC_DISPLAY_NAME;
    case _network.CHAIN_IDS.POLYGON:
      return _network.POLYGON_DISPLAY_NAME;
    case _network.CHAIN_IDS.AVALANCHE:
      return _network.AVALANCHE_DISPLAY_NAME;
    case _network.CHAIN_IDS.AURORA:
      return _network.AURORA_DISPLAY_NAME;
    default:
      return '';
  }
};
/**
 * To check if the chainId supports token detection,
 * currently it returns true for Ethereum Mainnet, Polygon, BSC, Avalanche and Aurora
 *
 * @param {*} state
 * @returns Boolean
 */
exports.getTokenDetectionSupportNetworkByChainId = getTokenDetectionSupportNetworkByChainId;
function getIsDynamicTokenListAvailable(state) {
  const chainId = getCurrentChainId(state);
  return [_network.CHAIN_IDS.MAINNET, _network.CHAIN_IDS.BSC, _network.CHAIN_IDS.POLYGON, _network.CHAIN_IDS.AVALANCHE, _network.CHAIN_IDS.AURORA].includes(chainId);
}

/**
 * To retrieve the list of tokens detected and saved on the state to detectedToken object.
 *
 * @param {*} state
 * @returns list of token objects
 */
function getDetectedTokensInCurrentNetwork(state) {
  var _state$metamask$allDe, _state$metamask$allDe2;
  const currentChainId = getCurrentChainId(state);
  const selectedAddress = getSelectedAddress(state);
  return (_state$metamask$allDe = state.metamask.allDetectedTokens) === null || _state$metamask$allDe === void 0 ? void 0 : (_state$metamask$allDe2 = _state$metamask$allDe[currentChainId]) === null || _state$metamask$allDe2 === void 0 ? void 0 : _state$metamask$allDe2[selectedAddress];
}

/**
 * To fetch the name of the tokens that are imported from tokens found page
 *
 * @param {*} state
 * @returns
 */
function getNewTokensImported(state) {
  return state.appState.newTokensImported;
}

/**
 * To check if the token detection is OFF and the network is Mainnet
 * so that the user can skip third party token api fetch
 * and use the static tokenlist from contract-metadata
 *
 * @param {*} state
 * @returns Boolean
 */
function getIsTokenDetectionInactiveOnMainnet(state) {
  const isMainnet = getIsMainnet(state);
  const useTokenDetection = getUseTokenDetection(state);
  return !useTokenDetection && isMainnet;
}

/**
 * To check for the chainId that supports token detection ,
 * currently it returns true for Ethereum Mainnet, Polygon, BSC, Avalanche and Aurora
 *
 * @param {*} state
 * @returns Boolean
 */
function getIsTokenDetectionSupported(state) {
  const useTokenDetection = getUseTokenDetection(state);
  const isDynamicTokenListAvailable = getIsDynamicTokenListAvailable(state);
  return useTokenDetection && isDynamicTokenListAvailable;
}

/**
 * To check if the token detection is OFF for the token detection supported networks
 * and the network is not Mainnet
 *
 * @param {*} state
 * @returns Boolean
 */
function getIstokenDetectionInactiveOnNonMainnetSupportedNetwork(state) {
  const useTokenDetection = getUseTokenDetection(state);
  const isMainnet = getIsMainnet(state);
  const isDynamicTokenListAvailable = getIsDynamicTokenListAvailable(state);
  return isDynamicTokenListAvailable && !useTokenDetection && !isMainnet;
}

/**
 * To get the `transactionSecurityCheckEnabled` value which determines whether we use the transaction security check
 *
 * @param {*} state
 * @returns Boolean
 */
function getIsTransactionSecurityCheckEnabled(state) {
  return state.metamask.transactionSecurityCheckEnabled;
}
function getIsCustomNetwork(state) {
  const chainId = getCurrentChainId(state);
  return !_network.CHAIN_ID_TO_RPC_URL_MAP[chainId];
}
function getBlockExplorerLinkText(state, accountDetailsModalComponent = false) {
  const isCustomNetwork = getIsCustomNetwork(state);
  const rpcPrefs = getRpcPrefsForCurrentProvider(state);
  let blockExplorerLinkText = {
    firstPart: 'addBlockExplorer',
    secondPart: ''
  };
  if (rpcPrefs.blockExplorerUrl) {
    blockExplorerLinkText = accountDetailsModalComponent ? {
      firstPart: 'blockExplorerView',
      secondPart: (0, _util2.getURLHostName)(rpcPrefs.blockExplorerUrl)
    } : {
      firstPart: 'viewinExplorer',
      secondPart: 'blockExplorerAccountAction'
    };
  } else if (isCustomNetwork === false) {
    blockExplorerLinkText = accountDetailsModalComponent ? {
      firstPart: 'etherscanViewOn',
      secondPart: ''
    } : {
      firstPart: 'viewOnEtherscan',
      secondPart: 'blockExplorerAccountAction'
    };
  }
  return blockExplorerLinkText;
}
function getIsNetworkUsed(state) {
  const chainId = getCurrentChainId(state);
  const {
    usedNetworks
  } = state.metamask;
  return Boolean(usedNetworks[chainId]);
}
function getAllAccountsOnNetworkAreEmpty(state) {
  const balances = getMetaMaskCachedBalances(state) ?? {};
  const hasNoNativeFundsOnAnyAccounts = Object.values(balances).every(balance => balance === '0x0' || balance === '0x00');
  const hasNoTokens = getNumberOfTokens(state) === 0;
  return hasNoNativeFundsOnAnyAccounts && hasNoTokens;
}
function getShouldShowSeedPhraseReminder(state) {
  const {
    tokens,
    seedPhraseBackedUp,
    dismissSeedBackUpReminder
  } = state.metamask;
  const accountBalance = getCurrentEthBalance(state) ?? 0;
  return seedPhraseBackedUp === false && (parseInt(accountBalance, 16) > 0 || tokens.length > 0) && dismissSeedBackUpReminder === false;
}
function getCustomTokenAmount(state) {
  return state.appState.customTokenAmount;
}
function getOnboardedInThisUISession(state) {
  return state.appState.onboardedInThisUISession;
}

/**
 * To get the useCurrencyRateCheck flag which to check if the user prefers currency conversion
 *
 * @param {*} state
 * @returns Boolean
 */
function getUseCurrencyRateCheck(state) {
  return Boolean(state.metamask.useCurrencyRateCheck);
}


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\selectors.js",}],
["F:\\metamask-extension\\ui\\selectors\\transactions.js", {"../../shared/constants/transaction":"F:\\metamask-extension\\shared\\constants\\transaction.ts","../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../shared/modules/transaction.utils":"F:\\metamask-extension\\shared\\modules\\transaction.utils.js","../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/transactions":"F:\\metamask-extension\\ui\\helpers\\constants\\transactions.js","../helpers/utils/tx-helper":"F:\\metamask-extension\\ui\\helpers\\utils\\tx-helper.ts","./approvals":"F:\\metamask-extension\\ui\\selectors\\approvals.ts","./selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","@metamask/controller-utils":"F:\\metamask-extension\\node_modules\\@metamask\\controller-utils\\dist\\index.js","reselect":"F:\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cselectors%5Ctransactions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.currentNetworkTxListSelector = void 0;
exports.hasTransactionPendingApprovals = hasTransactionPendingApprovals;
exports.unapprovedTypedMessagesSelector = exports.unapprovedPersonalMsgsSelector = exports.unapprovedMsgsSelector = exports.unapprovedMessagesSelector = exports.unapprovedEncryptionPublicKeyMsgsSelector = exports.unapprovedDecryptMsgsSelector = exports.transactionsSelector = exports.transactionSubSelector = exports.submittedPendingTransactionsSelector = exports.smartTransactionsListSelector = exports.selectedAddressTxListSelector = exports.nonceSortedTransactionsSelector = exports.nonceSortedPendingTransactionsSelector = exports.nonceSortedCompletedTransactionsSelector = exports.incomingTxListSelector = void 0;
var _reselect = require("reselect");
var _controllerUtils = require("@metamask/controller-utils");
var _transactions = require("../helpers/constants/transactions");
var _txHelper = _interopRequireDefault(require("../helpers/utils/tx-helper"));
var _transaction = require("../../shared/constants/transaction");
var _transaction2 = require("../../shared/modules/transaction.utils");
var _conversion = require("../../shared/modules/conversion.utils");
var _metamask = require("../ducks/metamask/metamask");
var _selectors = require("./selectors");
var _approvals = require("./approvals");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const INVALID_INITIAL_TRANSACTION_TYPES = [_transaction.TransactionType.cancel, _transaction.TransactionType.retry];
const incomingTxListSelector = state => {
  const {
    showIncomingTransactions
  } = state.metamask.featureFlags;
  if (!showIncomingTransactions) {
    return [];
  }
  const {
    networkId
  } = state.metamask;
  const {
    chainId
  } = (0, _metamask.getProviderConfig)(state);
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  return Object.values(state.metamask.incomingTransactions).filter(tx => tx.txParams.to === selectedAddress && (0, _transaction2.transactionMatchesNetwork)(tx, chainId, networkId));
};
exports.incomingTxListSelector = incomingTxListSelector;
const unapprovedMsgsSelector = state => state.metamask.unapprovedMsgs;
exports.unapprovedMsgsSelector = unapprovedMsgsSelector;
const currentNetworkTxListSelector = state => state.metamask.currentNetworkTxList;
exports.currentNetworkTxListSelector = currentNetworkTxListSelector;
const unapprovedPersonalMsgsSelector = state => state.metamask.unapprovedPersonalMsgs;
exports.unapprovedPersonalMsgsSelector = unapprovedPersonalMsgsSelector;
const unapprovedDecryptMsgsSelector = state => state.metamask.unapprovedDecryptMsgs;
exports.unapprovedDecryptMsgsSelector = unapprovedDecryptMsgsSelector;
const unapprovedEncryptionPublicKeyMsgsSelector = state => state.metamask.unapprovedEncryptionPublicKeyMsgs;
exports.unapprovedEncryptionPublicKeyMsgsSelector = unapprovedEncryptionPublicKeyMsgsSelector;
const unapprovedTypedMessagesSelector = state => state.metamask.unapprovedTypedMessages;
exports.unapprovedTypedMessagesSelector = unapprovedTypedMessagesSelector;
const smartTransactionsListSelector = state => {
  var _state$metamask$smart, _state$metamask$smart2, _state$metamask$smart3;
  return (_state$metamask$smart = state.metamask.smartTransactionsState) === null || _state$metamask$smart === void 0 ? void 0 : (_state$metamask$smart2 = _state$metamask$smart.smartTransactions) === null || _state$metamask$smart2 === void 0 ? void 0 : (_state$metamask$smart3 = _state$metamask$smart2[(0, _selectors.getCurrentChainId)(state)]) === null || _state$metamask$smart3 === void 0 ? void 0 : _state$metamask$smart3.filter(stx => !stx.confirmed).map(stx => {
    var _stx$status;
    return {
      ...stx,
      transactionType: _transaction.TransactionType.smart,
      status: (_stx$status = stx.status) !== null && _stx$status !== void 0 && _stx$status.startsWith('cancelled') ? _transaction.SmartTransactionStatus.cancelled : stx.status
    };
  });
};
exports.smartTransactionsListSelector = smartTransactionsListSelector;
const selectedAddressTxListSelector = (0, _reselect.createSelector)(_selectors.getSelectedAddress, currentNetworkTxListSelector, smartTransactionsListSelector, (selectedAddress, transactions = [], smTransactions = []) => {
  return transactions.filter(({
    txParams
  }) => txParams.from === selectedAddress).concat(smTransactions);
});
exports.selectedAddressTxListSelector = selectedAddressTxListSelector;
const unapprovedMessagesSelector = (0, _reselect.createSelector)(unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}, network, chainId) => (0, _txHelper.default)({}, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedDecryptMsgs, unapprovedEncryptionPublicKeyMsgs, unapprovedTypedMessages, network, chainId) || []);
exports.unapprovedMessagesSelector = unapprovedMessagesSelector;
const transactionSubSelector = (0, _reselect.createSelector)(unapprovedMessagesSelector, incomingTxListSelector, (unapprovedMessages = [], incomingTxList = []) => {
  return unapprovedMessages.concat(incomingTxList);
});
exports.transactionSubSelector = transactionSubSelector;
const transactionsSelector = (0, _reselect.createSelector)(transactionSubSelector, selectedAddressTxListSelector, (subSelectorTxList = [], selectedAddressTxList = []) => {
  const txsToRender = selectedAddressTxList.concat(subSelectorTxList);
  return txsToRender.sort((a, b) => b.time - a.time);
});

/**
 * @name insertOrderedNonce
 * @private
 * @description Inserts (mutates) a nonce into an array of ordered nonces, sorted in ascending
 * order.
 * @param {string[]} nonces - Array of nonce strings in hex
 * @param {string} nonceToInsert - Nonce string in hex to be inserted into the array of nonces.
 */
exports.transactionsSelector = transactionsSelector;
const insertOrderedNonce = (nonces, nonceToInsert) => {
  let insertIndex = nonces.length;
  for (let i = 0; i < nonces.length; i++) {
    const nonce = nonces[i];
    if (Number((0, _conversion.hexToDecimal)(nonce)) > Number((0, _conversion.hexToDecimal)(nonceToInsert))) {
      insertIndex = i;
      break;
    }
  }
  nonces.splice(insertIndex, 0, nonceToInsert);
};

/**
 * @name insertTransactionByTime
 * @private
 * @description Inserts (mutates) a transaction object into an array of ordered transactions, sorted
 * in ascending order by time.
 * @param {object[]} transactions - Array of transaction objects.
 * @param {object} transaction - Transaction object to be inserted into the array of transactions.
 */
const insertTransactionByTime = (transactions, transaction) => {
  const {
    time
  } = transaction;
  let insertIndex = transactions.length;
  for (let i = 0; i < transactions.length; i++) {
    const tx = transactions[i];
    if (tx.time > time) {
      insertIndex = i;
      break;
    }
  }
  transactions.splice(insertIndex, 0, transaction);
};

/**
 * Contains transactions and properties associated with those transactions of the same nonce.
 *
 * @typedef {object} transactionGroup
 * @property {string} nonce - The nonce that the transactions within this transactionGroup share.
 * @property {object[]} transactions - An array of transaction (txMeta) objects.
 * @property {object} initialTransaction - The transaction (txMeta) with the lowest "time".
 * @property {object} primaryTransaction - Either the latest transaction or the confirmed
 * transaction.
 * @property {boolean} hasRetried - True if a transaction in the group was a retry transaction.
 * @property {boolean} hasCancelled - True if a transaction in the group was a cancel transaction.
 */

/**
 * @name insertTransactionGroupByTime
 * @private
 * @description Inserts (mutates) a transactionGroup object into an array of ordered
 * transactionGroups, sorted in ascending order by nonce.
 * @param {transactionGroup[]} transactionGroups - Array of transactionGroup objects.
 * @param {transactionGroup} transactionGroup - transactionGroup object to be inserted into the
 * array of transactionGroups.
 */
const insertTransactionGroupByTime = (transactionGroups, transactionGroup) => {
  const {
    primaryTransaction: {
      time: groupToInsertTime
    } = {}
  } = transactionGroup;
  let insertIndex = transactionGroups.length;
  for (let i = 0; i < transactionGroups.length; i++) {
    const txGroup = transactionGroups[i];
    const {
      primaryTransaction: {
        time
      } = {}
    } = txGroup;
    if (time > groupToInsertTime) {
      insertIndex = i;
      break;
    }
  }
  transactionGroups.splice(insertIndex, 0, transactionGroup);
};

/**
 * @name mergeNonNonceTransactionGroups
 * @private
 * @description Inserts (mutates) transactionGroups that are not to be ordered by nonce into an array
 * of nonce-ordered transactionGroups by time.
 * @param {transactionGroup[]} orderedTransactionGroups - Array of transactionGroups ordered by
 * nonce.
 * @param {transactionGroup[]} nonNonceTransactionGroups - Array of transactionGroups not intended to be ordered by nonce,
 * but intended to be ordered by timestamp
 */
const mergeNonNonceTransactionGroups = (orderedTransactionGroups, nonNonceTransactionGroups) => {
  nonNonceTransactionGroups.forEach(transactionGroup => {
    insertTransactionGroupByTime(orderedTransactionGroups, transactionGroup);
  });
};

/**
 * @name nonceSortedTransactionsSelector
 * @description Returns an array of transactionGroups sorted by nonce in ascending order.
 * @returns {transactionGroup[]}
 */
const nonceSortedTransactionsSelector = (0, _reselect.createSelector)(transactionsSelector, (transactions = []) => {
  const unapprovedTransactionGroups = [];
  const incomingTransactionGroups = [];
  const orderedNonces = [];
  const nonceToTransactionsMap = {};
  transactions.forEach(transaction => {
    const {
      txParams: {
        nonce
      } = {},
      status,
      type,
      time: txTime,
      txReceipt
    } = transaction;

    // Don't group transactions by nonce if:
    // 1. Tx nonce is undefined
    // 2. Tx is incoming (deposit)
    // 3. Tx is custodial (mmi specific)
    let shouldNotBeGrouped = typeof nonce === 'undefined' || type === _transaction.TransactionType.incoming;
    if (shouldNotBeGrouped) {
      const transactionGroup = {
        transactions: [transaction],
        initialTransaction: transaction,
        primaryTransaction: transaction,
        hasRetried: false,
        hasCancelled: false,
        nonce
      };
      if (type === _transaction.TransactionType.incoming) {
        incomingTransactionGroups.push(transactionGroup);
      } else {
        insertTransactionGroupByTime(unapprovedTransactionGroups, transactionGroup);
      }
    } else if (nonce in nonceToTransactionsMap) {
      var _nonceProps$primaryTr, _nonceProps$primaryTr2, _nonceProps$initialTr;
      const nonceProps = nonceToTransactionsMap[nonce];
      insertTransactionByTime(nonceProps.transactions, transaction);
      const {
        primaryTransaction: {
          time: primaryTxTime = 0
        } = {},
        initialTransaction: {
          time: initialTxTime = 0
        } = {}
      } = nonceProps;

      // Current Transaction Logic Cases
      // --------------------------------------------------------------------
      // Current transaction: The transaction we are examining in this loop.
      // Each iteration should be in time order, but that is not guaranteed.
      // --------------------------------------------------------------------
      const currentTransaction = {
        // A on chain failure means the current transaction was submitted and
        // considered for inclusion in a block but something prevented it
        // from being included, such as slippage on gas prices and conversion
        // when doing a swap. These transactions will have a '0x0' value in
        // the txReceipt.status field.
        isOnChainFailure: (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === '0x0',
        // Another type of failure is a "off chain" or "network" failure,
        // where the error occurs on the JSON RPC call to the network client
        // (Like Infura). These transactions are never broadcast for
        // inclusion and the nonce associated with them is not consumed. When
        // this occurs  the next transaction will have the same nonce as the
        // current, failed transaction. A failed on chain transaction will
        // not have the FAILED status although it should (future TODO: add a
        // new FAILED_ON_CHAIN) status. I use the word "Ephemeral" here
        // because a failed transaction that does not get broadcast is not
        // known outside of the user's local MetaMask and the nonce
        // associated will be applied to the next.
        isEphemeral: status === _transaction.TransactionStatus.failed && (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) !== '0x0',
        // We never want to use a speed up (retry) or cancel as the initial
        // transaction in a group, regardless of time order. This is because
        // useTransactionDisplayData cannot parse a retry or cancel because
        // it lacks information on whether its a simple send, token transfer,
        // etc.
        isRetryOrCancel: INVALID_INITIAL_TRANSACTION_TYPES.includes(type),
        // Primary transactions usually are the latest transaction by time,
        // but not always. This value shows whether this transaction occurred
        // after the current primary.
        occurredAfterPrimary: txTime > primaryTxTime,
        // Priority Statuses are those that are ones either already confirmed
        // on chain, submitted to the network, or waiting for user approval.
        // These statuses typically indicate a transaction that needs to have
        // its status reflected in the UI.
        hasPriorityStatus: status in _transactions.PRIORITY_STATUS_HASH,
        // A confirmed transaction is the most valid transaction status to
        // display because no other transaction of the same nonce can have a
        // more valid status.
        isConfirmed: status === _transaction.TransactionStatus.confirmed,
        // Initial transactions usually are the earliest transaction by time,
        // but not always. THis value shows whether this transaction occurred
        // before the current initial.
        occurredBeforeInitial: txTime < initialTxTime,
        // We only allow users to retry the transaction in certain scenarios
        // to help shield from expensive operations and other unwanted side
        // effects. This value is used to determine if the entire transaction
        // group should be marked as having had a retry.
        isValidRetry: type === _transaction.TransactionType.retry && (status in _transactions.PRIORITY_STATUS_HASH || status === _transaction.TransactionStatus.dropped),
        // We only allow users to cancel the transaction in certain scenarios
        // to help shield from expensive operations and other unwanted side
        // effects. This value is used to determine if the entire transaction
        // group should be marked as having had a cancel.
        isValidCancel: type === _transaction.TransactionType.cancel && (status in _transactions.PRIORITY_STATUS_HASH || status === _transaction.TransactionStatus.dropped)
      };

      // We should never assign a retry or cancel transaction as the initial,
      // likewise an ephemeral transaction should not be initial.
      currentTransaction.eligibleForInitial = !currentTransaction.isRetryOrCancel && !currentTransaction.isEphemeral;

      // If a transaction failed on chain or was confirmed then it should
      // always be the primary because no other transaction is more valid.
      currentTransaction.shouldBePrimary = currentTransaction.isConfirmed || currentTransaction.isOnChainFailure;

      // Primary Transaction Logic Cases
      // --------------------------------------------------------------------
      // Primary transaction: The transaction for any given nonce which has
      // the most valid status on the network.
      // Example:
      // 1. Submit transaction A
      // 2. Speed up Transaction A.
      // 3. This creates a new Transaction (B) with higher gas params.
      // 4. Transaction A and Transaction B are both submitted.
      // 5. We expect Transaction B to be the most valid transaction to use
      //    for the status of the transaction group because it has higher
      //    gas params and should be included first.
      // The following logic variables are used for edge cases that protect
      // against UI bugs when this breaks down.
      const previousPrimaryTransaction = {
        // As we loop through the transactions in state we may temporarily
        // assign a primaryTransaction that is an "Ephemeral" transaction,
        // which is one that failed before being broadcast for inclusion in a
        // block. When this happens, and we have another transaction to
        // consider in a nonce group, we should use the new transaction.
        isEphemeral: nonceProps.primaryTransaction.status === _transaction.TransactionStatus.failed && ((_nonceProps$primaryTr = nonceProps.primaryTransaction) === null || _nonceProps$primaryTr === void 0 ? void 0 : (_nonceProps$primaryTr2 = _nonceProps$primaryTr.txReceipt) === null || _nonceProps$primaryTr2 === void 0 ? void 0 : _nonceProps$primaryTr2.status) !== '0x0'
      };

      // Initial Transaction Logic Cases
      // --------------------------------------------------------------------
      // Initial Transaction: The transaciton that most likely represents the
      // user's intent when creating/approving the transaction. In most cases
      // this is the first transaction of a nonce group, by time, but this
      // breaks down in the case of users with the advanced setting enabled
      // to set their own nonces manually. In that case a user may submit two
      // completely different transactions of the same nonce and they will be
      // bundled together by this selector as the same activity entry.
      const previousInitialTransaction = {
        // As we loop through the transactions in state we may temporarily
        // assign a initialTransaction that is an "Ephemeral" transaction,
        // which is one that failed before being broadcast for inclusion in a
        // block. When this happens, and we have another transaction to
        // consider in a nonce group, we should use the new transaction.
        isEphemeral: nonceProps.initialTransaction.status === _transaction.TransactionStatus.failed && ((_nonceProps$initialTr = nonceProps.initialTransaction.txReceipt) === null || _nonceProps$initialTr === void 0 ? void 0 : _nonceProps$initialTr.status) !== '0x0'
      };

      // Check the above logic cases and assign a new primaryTransaction if
      // appropriate
      if (currentTransaction.shouldBePrimary || previousPrimaryTransaction.isEphemeral || currentTransaction.occurredAfterPrimary && currentTransaction.hasPriorityStatus) {
        nonceProps.primaryTransaction = transaction;
      }

      // Check the above logic cases and assign a new initialTransaction if
      // appropriate
      if (currentTransaction.occurredBeforeInitial && currentTransaction.eligibleForInitial || previousInitialTransaction.isEphemeral && currentTransaction.eligibleForInitial) {
        nonceProps.initialTransaction = transaction;
      }
      if (currentTransaction.isValidRetry) {
        nonceProps.hasRetried = true;
      }
      if (currentTransaction.isValidCancel) {
        nonceProps.hasCancelled = true;
      }
    } else {
      nonceToTransactionsMap[nonce] = {
        nonce,
        transactions: [transaction],
        initialTransaction: transaction,
        primaryTransaction: transaction,
        hasRetried: transaction.type === _transaction.TransactionType.retry && (transaction.status in _transactions.PRIORITY_STATUS_HASH || transaction.status === _transaction.TransactionStatus.dropped),
        hasCancelled: transaction.type === _transaction.TransactionType.cancel && (transaction.status in _transactions.PRIORITY_STATUS_HASH || transaction.status === _transaction.TransactionStatus.dropped)
      };
      insertOrderedNonce(orderedNonces, nonce);
    }
  });
  const orderedTransactionGroups = orderedNonces.map(nonce => nonceToTransactionsMap[nonce]);
  mergeNonNonceTransactionGroups(orderedTransactionGroups, incomingTransactionGroups);
  return unapprovedTransactionGroups.concat(orderedTransactionGroups).map(txGroup => {
    var _txGroup$initialTrans;
    // In the case that we have a cancel or retry as initial transaction
    // and there is a valid transaction in the group, we should reassign
    // the other valid transaction as initial. In this case validity of the
    // transaction is expanded to include off-chain failures because it is
    // valid to retry those with higher gas prices.
    if (INVALID_INITIAL_TRANSACTION_TYPES.includes((_txGroup$initialTrans = txGroup.initialTransaction) === null || _txGroup$initialTrans === void 0 ? void 0 : _txGroup$initialTrans.type)) {
      const nonRetryOrCancel = txGroup.transactions.find(tx => !INVALID_INITIAL_TRANSACTION_TYPES.includes(tx.type));
      if (nonRetryOrCancel) {
        return {
          ...txGroup,
          initialTransaction: nonRetryOrCancel
        };
      }
    }
    return txGroup;
  });
});

/**
 * @name nonceSortedPendingTransactionsSelector
 * @description Returns an array of transactionGroups where transactions are still pending sorted by
 * nonce in descending order.
 * @returns {transactionGroup[]}
 */
exports.nonceSortedTransactionsSelector = nonceSortedTransactionsSelector;
const nonceSortedPendingTransactionsSelector = (0, _reselect.createSelector)(nonceSortedTransactionsSelector, (transactions = []) => transactions.filter(({
  primaryTransaction
}) => primaryTransaction.status in _transactions.PENDING_STATUS_HASH));

/**
 * @name nonceSortedCompletedTransactionsSelector
 * @description Returns an array of transactionGroups where transactions are confirmed sorted by
 * nonce in descending order.
 * @returns {transactionGroup[]}
 */
exports.nonceSortedPendingTransactionsSelector = nonceSortedPendingTransactionsSelector;
const nonceSortedCompletedTransactionsSelector = (0, _reselect.createSelector)(nonceSortedTransactionsSelector, (transactions = []) => transactions.filter(({
  primaryTransaction
}) => !(primaryTransaction.status in _transactions.PENDING_STATUS_HASH)).reverse());
exports.nonceSortedCompletedTransactionsSelector = nonceSortedCompletedTransactionsSelector;
const submittedPendingTransactionsSelector = (0, _reselect.createSelector)(transactionsSelector, (transactions = []) => transactions.filter(transaction => transaction.status === _transaction.TransactionStatus.submitted));
exports.submittedPendingTransactionsSelector = submittedPendingTransactionsSelector;
const hasUnapprovedTransactionsInCurrentNetwork = state => {
  const {
    unapprovedTxs
  } = state.metamask;
  const unapprovedTxRequests = (0, _approvals.getApprovalRequestsByType)(state, _controllerUtils.ApprovalType.Transaction);
  const chainId = (0, _selectors.getCurrentChainId)(state);
  const filteredUnapprovedTxInCurrentNetwork = unapprovedTxRequests.filter(({
    id
  }) => unapprovedTxs[id] && (0, _transaction2.transactionMatchesNetwork)(unapprovedTxs[id], chainId));
  return filteredUnapprovedTxInCurrentNetwork.length > 0;
};
const TRANSACTION_APPROVAL_TYPES = [_controllerUtils.ApprovalType.EthDecrypt, _controllerUtils.ApprovalType.EthGetEncryptionPublicKey, _controllerUtils.ApprovalType.EthSign, _controllerUtils.ApprovalType.EthSignTypedData, _controllerUtils.ApprovalType.PersonalSign];
function hasTransactionPendingApprovals(state) {
  return hasUnapprovedTransactionsInCurrentNetwork(state) || TRANSACTION_APPROVAL_TYPES.some(type => (0, _approvals.hasPendingApprovals)(state, type));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\selectors\\transactions.js",}],
["F:\\metamask-extension\\ui\\store\\action-queue\\index.ts", {"../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/modules/mv3.utils":"F:\\metamask-extension\\shared\\modules\\mv3.utils.js","../actions":"F:\\metamask-extension\\ui\\store\\actions.ts","pify":"F:\\metamask-extension\\node_modules\\pify\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cstore%5Caction-queue%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._setBackgroundConnection = _setBackgroundConnection;
exports.callBackgroundMethod = void 0;
exports.dropQueue = dropQueue;
exports.generateActionId = void 0;
exports.submitRequestToBackground = submitRequestToBackground;
var _pify = _interopRequireDefault(require("pify"));
var _metametrics = require("../../../shared/constants/metametrics");
var _mv = require("../../../shared/modules/mv3.utils");
var _actions = require("../actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// // A simplified pify maybe?
// function pify(apiObject) {
//   return Object.keys(apiObject).reduce((promisifiedAPI, key) => {
//     if (apiObject[key].apply) { // depending on our browser support we might use a nicer check for functions here
//       promisifiedAPI[key] = function (...args) {
//         return new Promise((resolve, reject) => {
//           return apiObject[key](
//             ...args,
//             (err, result) => {
//               if (err) {
//                 reject(err);
//               } else {
//                 resolve(result);
//               }
//             },
//           );
//         });
//       };
//     }
//     return promisifiedAPI;
//   }, {});
// }
let background = null;
let promisifiedBackground = null;
const actionRetryQueue = [];
const generateActionId = () => Date.now() + Math.random();
exports.generateActionId = generateActionId;
function failQueue() {
  actionRetryQueue.forEach(({
    reject
  }) => reject(Error('Background operation cancelled while waiting for connection.')));
}

/**
 * Drops the entire actions queue. Rejects all actions in the queue unless silently==true
 * Does not affect the single action that is currently being processed.
 *
 * @param [silently]
 */
function dropQueue(silently) {
  if (!silently) {
    failQueue();
  }
  actionRetryQueue.length = 0;
}

// add action to queue
const executeActionOrAddToRetryQueue = item => {
  var _background;
  if (actionRetryQueue.some(act => act.actionId === item.actionId)) {
    return;
  }
  if ((_background = background) !== null && _background !== void 0 && _background.connectionStream.readable) {
    executeAction({
      action: item,
      disconnectSideeffect: () => actionRetryQueue.push(item)
    });
  } else {
    actionRetryQueue.push(item);
  }
};

/**
 * Promise-style call to background method
 * In MV2: invokes promisifiedBackground method directly.
 * In MV3: action is added to retry queue, along with resolve handler to be executed on completion,
 * the queue is then immediately processed if background connection is available.
 * On completion (successful or error) the action is removed from the retry queue.
 *
 * @param method - name of the background method
 * @param [args] - arguments to that method, if any
 * @param [actionId] - if an action with the === same id is submitted, it'll be ignored if already in queue waiting for a retry.
 * @returns
 */
function submitRequestToBackground(method, args, actionId = generateActionId() // current date is not guaranteed to be unique
) {
  var _promisifiedBackgroun;
  if (_mv.isManifestV3) {
    return new Promise((resolve, reject) => {
      executeActionOrAddToRetryQueue({
        actionId,
        request: {
          method,
          args: args ?? []
        },
        resolve,
        reject
      });
    });
  }
  return (_promisifiedBackgroun = promisifiedBackground) === null || _promisifiedBackgroun === void 0 ? void 0 : _promisifiedBackgroun[method](...(args ?? []));
}
/**
 * [Deprecated] Callback-style call to background method
 * In MV2: invokes promisifiedBackground method directly.
 * In MV3: action is added to retry queue, along with resolve handler to be executed on completion,
 * the queue is then immediately processed if background connection is available.
 * On completion (successful or error) the action is removed from the retry queue.
 *
 * @deprecated Use async `submitRequestToBackground` function instead.
 * @param method - name of the background method
 * @param [args] - arguments to that method, if any
 * @param callback - Node style (error, result) callback for finishing the operation
 * @param [actionId] - if an action with the === same id is submitted, it'll be ignored if already in queue.
 */
const callBackgroundMethod = (method, args, callback, actionId = generateActionId() // current date is not guaranteed to be unique
) => {
  if (_mv.isManifestV3) {
    const resolve = value => callback(undefined, value);
    const reject = err => callback(err, undefined);
    executeActionOrAddToRetryQueue({
      actionId,
      request: {
        method,
        args: args ?? []
      },
      resolve,
      reject
    });
  } else {
    var _background2;
    (_background2 = background) === null || _background2 === void 0 ? void 0 : _background2[method](...args, callback);
  }
};
exports.callBackgroundMethod = callBackgroundMethod;
async function executeAction({
  action,
  disconnectSideeffect
}) {
  const {
    request: {
      method,
      args
    },
    resolve,
    reject
  } = action;
  try {
    var _promisifiedBackgroun2;
    resolve(await ((_promisifiedBackgroun2 = promisifiedBackground) === null || _promisifiedBackgroun2 === void 0 ? void 0 : _promisifiedBackgroun2[method](...args)));
  } catch (err) {
    var _background3;
    if ((_background3 = background) !== null && _background3 !== void 0 && _background3.DisconnectError &&
    // necessary to not break compatibility with background stubs or non-default implementations
    err instanceof background.DisconnectError) {
      disconnectSideeffect(action);
    } else {
      reject(err);
    }
  }
}
let processingQueue = false;

// Clears list of pending action in actionRetryQueue
// The results of background calls are wired up to the original promises that's been returned
// The first method on the queue gets called synchronously to make testing and reasoning about
//  a single request to an open connection easier.
async function processActionRetryQueue() {
  if (processingQueue) {
    return;
  }
  processingQueue = true;
  try {
    if (actionRetryQueue.length > 0) {
      const metametricsPayload = {
        category: _metametrics.MetaMetricsEventCategory.ServiceWorkers,
        event: _metametrics.MetaMetricsEventName.ServiceWorkerRestarted,
        properties: {
          service_worker_action_queue_methods: actionRetryQueue.map(action => action.request.method)
        }
      };
      (0, _actions.trackMetaMetricsEvent)(metametricsPayload);
    }
    while ((_background4 = background) !== null && _background4 !== void 0 && _background4.connectionStream.readable && actionRetryQueue.length > 0) {
      var _background4;
      // If background disconnects and fails the action, the next one will not be taken off the queue.
      // Retrying an action that failed because of connection loss while it was processing is not supported.
      const item = actionRetryQueue.shift();
      await executeAction({
        action: item,
        disconnectSideeffect: () => actionRetryQueue.unshift(item)
      });
    }
  } catch (e) {
    // error in the queue mechanism itself, the action was malformed
    console.error(e);
  }
  processingQueue = false;
}

/**
 * Sets/replaces the background connection reference
 * Under MV3 it also triggers queue processing if the new background is connected
 *
 * @param backgroundConnection
 */
async function _setBackgroundConnection(backgroundConnection) {
  background = backgroundConnection;
  promisifiedBackground = (0, _pify.default)(background);
  if (_mv.isManifestV3) {
    if (processingQueue) {
      console.warn('_setBackgroundConnection called while a queue was processing and not disconnected yet');
    }
    // Process all actions collected while connection stream was not available.
    processActionRetryQueue();
  }
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\action-queue\\index.ts",}],
["F:\\metamask-extension\\ui\\store\\actionConstants.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cstore%5CactionConstants.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_TRANSACTION_PARAMS = exports.UPDATE_METAMASK_STATE = exports.UPDATE_CUSTOM_NONCE = exports.UNLOCK_SUCCEEDED = exports.UNLOCK_IN_PROGRESS = exports.UNLOCK_FAILED = exports.TRANSACTION_ERROR = exports.TOGGLE_NETWORK_MENU = exports.TOGGLE_GAS_LOADING_ANIMATION = exports.TOGGLE_CURRENCY_INPUT_SWITCH = exports.TOGGLE_ACCOUNT_MENU = exports.SHOW_SEND_TOKEN_PAGE = exports.SHOW_PRIVATE_KEY = exports.SHOW_LOADING = exports.SHOW_CONF_TX_PAGE = exports.SHOW_ACCOUNTS_PAGE = exports.SET_WEBHID_CONNECTED_STATUS = exports.SET_SMART_TRANSACTIONS_ERROR = exports.SET_SELECTED_NETWORK_CONFIGURATION_ID = exports.SET_REQUEST_ACCOUNT_TABS = exports.SET_REMOVE_NFT_MESSAGE = exports.SET_PENDING_TOKENS = exports.SET_PARTICIPATE_IN_METAMETRICS = exports.SET_OPEN_METAMASK_TAB_IDS = exports.SET_NEXT_NONCE = exports.SET_NEW_TOKENS_IMPORTED = exports.SET_NEW_NFT_ADDED_MESSAGE = exports.SET_NEW_NETWORK_ADDED = exports.SET_MOUSE_USER_STATE = exports.SET_LEDGER_TRANSPORT_STATUS = exports.SET_HARDWARE_WALLET_DEFAULT_HD_PATH = exports.SET_FIRST_TIME_FLOW_TYPE = exports.SET_CUSTOM_TOKEN_AMOUNT = exports.SET_CURRENT_LOCALE = exports.SET_ACCOUNT_LABEL = exports.SET_ACCOUNT_DETAILS_ADDRESS = exports.SELECTED_ADDRESS_CHANGED = exports.SELECTED_ACCOUNT_CHANGED = exports.QR_CODE_DETECTED = exports.ONBOARDED_IN_THIS_UI_SESSION = exports.NETWORK_DROPDOWN_OPEN = exports.NETWORK_DROPDOWN_CLOSE = exports.MODAL_OPEN = exports.MODAL_CLOSE = exports.LOCK_METAMASK = exports.LOADING_METHOD_DATA_STARTED = exports.LOADING_METHOD_DATA_FINISHED = exports.HIDE_WHATS_NEW_POPUP = exports.HIDE_WARNING = exports.HIDE_LOADING = exports.GO_HOME = exports.GAS_FEE_ESTIMATES_UPDATED = exports.DISPLAY_WARNING = exports.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = exports.COMPLETE_ONBOARDING = exports.COMPLETED_TX = exports.CLOSE_WELCOME_SCREEN = exports.CLEAR_PENDING_TOKENS = exports.CLEAR_ACCOUNT_DETAILS = exports.CHAIN_CHANGED = exports.CAPTURE_SINGLE_EXCEPTION = exports.ALERT_OPEN = exports.ALERT_CLOSE = exports.ADDRESS_BOOK_UPDATED = exports.ACCOUNT_CHANGED = void 0;
const GO_HOME = 'GO_HOME';
// modal state
exports.GO_HOME = GO_HOME;
const MODAL_OPEN = 'UI_MODAL_OPEN';
exports.MODAL_OPEN = MODAL_OPEN;
const MODAL_CLOSE = 'UI_MODAL_CLOSE';
// alert state
exports.MODAL_CLOSE = MODAL_CLOSE;
const ALERT_OPEN = 'UI_ALERT_OPEN';
exports.ALERT_OPEN = ALERT_OPEN;
const ALERT_CLOSE = 'UI_ALERT_CLOSE';
exports.ALERT_CLOSE = ALERT_CLOSE;
const QR_CODE_DETECTED = 'UI_QR_CODE_DETECTED';
// network dropdown open
exports.QR_CODE_DETECTED = QR_CODE_DETECTED;
const NETWORK_DROPDOWN_OPEN = 'UI_NETWORK_DROPDOWN_OPEN';
exports.NETWORK_DROPDOWN_OPEN = NETWORK_DROPDOWN_OPEN;
const NETWORK_DROPDOWN_CLOSE = 'UI_NETWORK_DROPDOWN_CLOSE';
// remote state
exports.NETWORK_DROPDOWN_CLOSE = NETWORK_DROPDOWN_CLOSE;
const UPDATE_METAMASK_STATE = 'UPDATE_METAMASK_STATE';
exports.UPDATE_METAMASK_STATE = UPDATE_METAMASK_STATE;
const SELECTED_ADDRESS_CHANGED = 'SELECTED_ADDRESS_CHANGED';
exports.SELECTED_ADDRESS_CHANGED = SELECTED_ADDRESS_CHANGED;
const SELECTED_ACCOUNT_CHANGED = 'SELECTED_ACCOUNT_CHANGED';
exports.SELECTED_ACCOUNT_CHANGED = SELECTED_ACCOUNT_CHANGED;
const ACCOUNT_CHANGED = 'ACCOUNT_CHANGED';
exports.ACCOUNT_CHANGED = ACCOUNT_CHANGED;
const CHAIN_CHANGED = 'CHAIN_CHANGED';
exports.CHAIN_CHANGED = CHAIN_CHANGED;
const ADDRESS_BOOK_UPDATED = 'ADDRESS_BOOK_UPDATED';
exports.ADDRESS_BOOK_UPDATED = ADDRESS_BOOK_UPDATED;
const GAS_FEE_ESTIMATES_UPDATED = 'GAS_FEE_ESTIMATES_UPDATED';
exports.GAS_FEE_ESTIMATES_UPDATED = GAS_FEE_ESTIMATES_UPDATED;
const CLOSE_WELCOME_SCREEN = 'CLOSE_WELCOME_SCREEN';
// unlock screen
exports.CLOSE_WELCOME_SCREEN = CLOSE_WELCOME_SCREEN;
const UNLOCK_IN_PROGRESS = 'UNLOCK_IN_PROGRESS';
exports.UNLOCK_IN_PROGRESS = UNLOCK_IN_PROGRESS;
const UNLOCK_FAILED = 'UNLOCK_FAILED';
exports.UNLOCK_FAILED = UNLOCK_FAILED;
const UNLOCK_SUCCEEDED = 'UNLOCK_SUCCEEDED';
exports.UNLOCK_SUCCEEDED = UNLOCK_SUCCEEDED;
const LOCK_METAMASK = 'LOCK_METAMASK';
// error handling
exports.LOCK_METAMASK = LOCK_METAMASK;
const DISPLAY_WARNING = 'DISPLAY_WARNING';
exports.DISPLAY_WARNING = DISPLAY_WARNING;
const HIDE_WARNING = 'HIDE_WARNING';
exports.HIDE_WARNING = HIDE_WARNING;
const CAPTURE_SINGLE_EXCEPTION = 'CAPTURE_SINGLE_EXCEPTION';
// accounts screen
exports.CAPTURE_SINGLE_EXCEPTION = CAPTURE_SINGLE_EXCEPTION;
const SHOW_ACCOUNTS_PAGE = 'SHOW_ACCOUNTS_PAGE';
exports.SHOW_ACCOUNTS_PAGE = SHOW_ACCOUNTS_PAGE;
const SHOW_CONF_TX_PAGE = 'SHOW_CONF_TX_PAGE';
// account detail screen
exports.SHOW_CONF_TX_PAGE = SHOW_CONF_TX_PAGE;
const SHOW_SEND_TOKEN_PAGE = 'SHOW_SEND_TOKEN_PAGE';
exports.SHOW_SEND_TOKEN_PAGE = SHOW_SEND_TOKEN_PAGE;
const SHOW_PRIVATE_KEY = 'SHOW_PRIVATE_KEY';
exports.SHOW_PRIVATE_KEY = SHOW_PRIVATE_KEY;
const SET_ACCOUNT_LABEL = 'SET_ACCOUNT_LABEL';
exports.SET_ACCOUNT_LABEL = SET_ACCOUNT_LABEL;
const CLEAR_ACCOUNT_DETAILS = 'CLEAR_ACCOUNT_DETAILS';
exports.CLEAR_ACCOUNT_DETAILS = CLEAR_ACCOUNT_DETAILS;
const SET_ACCOUNT_DETAILS_ADDRESS = 'SET_ACCOUNT_DETAILS_ADDRESS';
// tx conf screen
exports.SET_ACCOUNT_DETAILS_ADDRESS = SET_ACCOUNT_DETAILS_ADDRESS;
const COMPLETED_TX = 'COMPLETED_TX';
exports.COMPLETED_TX = COMPLETED_TX;
const TRANSACTION_ERROR = 'TRANSACTION_ERROR';
exports.TRANSACTION_ERROR = TRANSACTION_ERROR;
const UPDATE_TRANSACTION_PARAMS = 'UPDATE_TRANSACTION_PARAMS';
exports.UPDATE_TRANSACTION_PARAMS = UPDATE_TRANSACTION_PARAMS;
const SET_NEXT_NONCE = 'SET_NEXT_NONCE';
// config screen
exports.SET_NEXT_NONCE = SET_NEXT_NONCE;
const SET_HARDWARE_WALLET_DEFAULT_HD_PATH = 'SET_HARDWARE_WALLET_DEFAULT_HD_PATH';
// loading overlay
exports.SET_HARDWARE_WALLET_DEFAULT_HD_PATH = SET_HARDWARE_WALLET_DEFAULT_HD_PATH;
const SHOW_LOADING = 'SHOW_LOADING_INDICATION';
exports.SHOW_LOADING = SHOW_LOADING;
const HIDE_LOADING = 'HIDE_LOADING_INDICATION';
exports.HIDE_LOADING = HIDE_LOADING;
const TOGGLE_ACCOUNT_MENU = 'TOGGLE_ACCOUNT_MENU';
exports.TOGGLE_ACCOUNT_MENU = TOGGLE_ACCOUNT_MENU;
const TOGGLE_NETWORK_MENU = 'TOGGLE_NETWORK_MENU';

// preferences
exports.TOGGLE_NETWORK_MENU = TOGGLE_NETWORK_MENU;
const UPDATE_CUSTOM_NONCE = 'UPDATE_CUSTOM_NONCE';
exports.UPDATE_CUSTOM_NONCE = UPDATE_CUSTOM_NONCE;
const SET_PARTICIPATE_IN_METAMETRICS = 'SET_PARTICIPATE_IN_METAMETRICS';

// locale
exports.SET_PARTICIPATE_IN_METAMETRICS = SET_PARTICIPATE_IN_METAMETRICS;
const SET_CURRENT_LOCALE = 'SET_CURRENT_LOCALE';

// Onboarding
exports.SET_CURRENT_LOCALE = SET_CURRENT_LOCALE;
const COMPLETE_ONBOARDING = 'COMPLETE_ONBOARDING';
exports.COMPLETE_ONBOARDING = COMPLETE_ONBOARDING;
const ONBOARDED_IN_THIS_UI_SESSION = 'ONBOARDED_IN_THIS_UI_SESSION';
exports.ONBOARDED_IN_THIS_UI_SESSION = ONBOARDED_IN_THIS_UI_SESSION;
const SET_MOUSE_USER_STATE = 'SET_MOUSE_USER_STATE';

// Ledger
exports.SET_MOUSE_USER_STATE = SET_MOUSE_USER_STATE;
const SET_WEBHID_CONNECTED_STATUS = 'SET_WEBHID_CONNECTED_STATUS';
exports.SET_WEBHID_CONNECTED_STATUS = SET_WEBHID_CONNECTED_STATUS;
const SET_LEDGER_TRANSPORT_STATUS = 'SET_LEDGER_TRANSPORT_STATUS';

// Network
exports.SET_LEDGER_TRANSPORT_STATUS = SET_LEDGER_TRANSPORT_STATUS;
const SET_PENDING_TOKENS = 'SET_PENDING_TOKENS';
exports.SET_PENDING_TOKENS = SET_PENDING_TOKENS;
const CLEAR_PENDING_TOKENS = 'CLEAR_PENDING_TOKENS';
exports.CLEAR_PENDING_TOKENS = CLEAR_PENDING_TOKENS;
const SET_FIRST_TIME_FLOW_TYPE = 'SET_FIRST_TIME_FLOW_TYPE';
exports.SET_FIRST_TIME_FLOW_TYPE = SET_FIRST_TIME_FLOW_TYPE;
const SET_SELECTED_NETWORK_CONFIGURATION_ID = 'SET_SELECTED_NETWORK_CONFIGURATION_ID';
exports.SET_SELECTED_NETWORK_CONFIGURATION_ID = SET_SELECTED_NETWORK_CONFIGURATION_ID;
const SET_NEW_NETWORK_ADDED = 'SET_NEW_NETWORK_ADDED';
exports.SET_NEW_NETWORK_ADDED = SET_NEW_NETWORK_ADDED;
const SET_NEW_NFT_ADDED_MESSAGE = 'SET_NEW_NFT_ADDED_MESSAGE';
exports.SET_NEW_NFT_ADDED_MESSAGE = SET_NEW_NFT_ADDED_MESSAGE;
const SET_REMOVE_NFT_MESSAGE = 'SET_REMOVE_NFT_MESSAGE';
exports.SET_REMOVE_NFT_MESSAGE = SET_REMOVE_NFT_MESSAGE;
const LOADING_METHOD_DATA_STARTED = 'LOADING_METHOD_DATA_STARTED';
exports.LOADING_METHOD_DATA_STARTED = LOADING_METHOD_DATA_STARTED;
const LOADING_METHOD_DATA_FINISHED = 'LOADING_METHOD_DATA_FINISHED';
exports.LOADING_METHOD_DATA_FINISHED = LOADING_METHOD_DATA_FINISHED;
const SET_REQUEST_ACCOUNT_TABS = 'SET_REQUEST_ACCOUNT_TABS';
exports.SET_REQUEST_ACCOUNT_TABS = SET_REQUEST_ACCOUNT_TABS;
const SET_OPEN_METAMASK_TAB_IDS = 'SET_OPEN_METAMASK_TAB_IDS';

// Home Screen
exports.SET_OPEN_METAMASK_TAB_IDS = SET_OPEN_METAMASK_TAB_IDS;
const HIDE_WHATS_NEW_POPUP = 'HIDE_WHATS_NEW_POPUP';
exports.HIDE_WHATS_NEW_POPUP = HIDE_WHATS_NEW_POPUP;
const TOGGLE_GAS_LOADING_ANIMATION = 'TOGGLE_GAS_LOADING_ANIMATION';

// Smart Transactions
exports.TOGGLE_GAS_LOADING_ANIMATION = TOGGLE_GAS_LOADING_ANIMATION;
const SET_SMART_TRANSACTIONS_ERROR = 'SET_SMART_TRANSACTIONS_ERROR';
exports.SET_SMART_TRANSACTIONS_ERROR = SET_SMART_TRANSACTIONS_ERROR;
const DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = 'DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE';
exports.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE;
const TOGGLE_CURRENCY_INPUT_SWITCH = 'TOGGLE_CURRENCY_INPUT_SWITCH';

// Token detection v2
exports.TOGGLE_CURRENCY_INPUT_SWITCH = TOGGLE_CURRENCY_INPUT_SWITCH;
const SET_NEW_TOKENS_IMPORTED = 'SET_NEW_TOKENS_IMPORTED';

// Token allowance
exports.SET_NEW_TOKENS_IMPORTED = SET_NEW_TOKENS_IMPORTED;
const SET_CUSTOM_TOKEN_AMOUNT = 'SET_CUSTOM_TOKEN_AMOUNT';
exports.SET_CUSTOM_TOKEN_AMOUNT = SET_CUSTOM_TOKEN_AMOUNT;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\actionConstants.ts",}],
["F:\\metamask-extension\\ui\\store\\actions.ts", {"../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../shared/constants/common":"F:\\metamask-extension\\shared\\constants\\common.ts","../../shared/constants/hardware-wallets":"F:\\metamask-extension\\shared\\constants\\hardware-wallets.ts","../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../shared/lib/switch-direction":"F:\\metamask-extension\\shared\\lib\\switch-direction.js","../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../shared/modules/error":"F:\\metamask-extension\\shared\\modules\\error.ts","../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../shared/modules/i18n":"F:\\metamask-extension\\shared\\modules\\i18n.ts","../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/alerts/unconnected-account":"F:\\metamask-extension\\ui\\ducks\\alerts\\unconnected-account.js","../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../ducks/send":"F:\\metamask-extension\\ui\\ducks\\send\\index.js","../helpers/utils/transactions.util":"F:\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../pages/swaps/swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","./action-queue":"F:\\metamask-extension\\ui\\store\\action-queue\\index.ts","./actionConstants":"F:\\metamask-extension\\ui\\store\\actionConstants.ts","@sentry/browser":"F:\\metamask-extension\\node_modules\\@sentry\\browser\\cjs\\index.js","buffer":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","eth-rpc-errors":"F:\\metamask-extension\\node_modules\\eth-rpc-errors\\dist\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","loglevel":"F:\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cstore%5Cactions.ts
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addImportedTokens = addImportedTokens;
exports.addNewAccount = addNewAccount;
exports.addNft = addNft;
exports.addNftVerifyOwnership = addNftVerifyOwnership;
exports.addPermittedAccount = addPermittedAccount;
exports.addPollingTokenToAppState = addPollingTokenToAppState;
exports.addToAddressBook = addToAddressBook;
exports.addToken = addToken;
exports.addTokens = addTokens;
exports.addUnapprovedTransaction = addUnapprovedTransaction;
exports.addUnapprovedTransactionAndRouteToConfirmationPage = addUnapprovedTransactionAndRouteToConfirmationPage;
exports.approvePermissionsRequest = approvePermissionsRequest;
exports.attemptLedgerTransportCreation = attemptLedgerTransportCreation;
exports.backupUserData = backupUserData;
exports.cancelDecryptMsg = cancelDecryptMsg;
exports.cancelEncryptionPublicKeyMsg = cancelEncryptionPublicKeyMsg;
exports.cancelQRHardwareSignRequest = cancelQRHardwareSignRequest;
exports.cancelSmartTransaction = cancelSmartTransaction;
exports.cancelSyncQRHardware = cancelSyncQRHardware;
exports.cancelTx = cancelTx;
exports.cancelTxs = cancelTxs;
exports.captureSingleException = captureSingleException;
exports.checkAndUpdateAllNftsOwnershipStatus = checkAndUpdateAllNftsOwnershipStatus;
exports.checkAndUpdateSingleNftOwnershipStatus = checkAndUpdateSingleNftOwnershipStatus;
exports.checkHardwareStatus = checkHardwareStatus;
exports.clearAccountDetails = clearAccountDetails;
exports.clearPendingTokens = clearPendingTokens;
exports.clearSmartTransactionFees = clearSmartTransactionFees;
exports.clearSwapsQuotes = clearSwapsQuotes;
exports.closeCurrentNotificationWindow = closeCurrentNotificationWindow;
exports.closeNotificationPopup = closeNotificationPopup;
exports.closeWelcomeScreen = closeWelcomeScreen;
exports.completeOnboarding = completeOnboarding;
exports.completedTx = completedTx;
exports.connectHardware = connectHardware;
exports.createCancelTransaction = createCancelTransaction;
exports.createEventFragment = createEventFragment;
exports.createNewVault = createNewVault;
exports.createNewVaultAndGetSeedPhrase = createNewVaultAndGetSeedPhrase;
exports.createNewVaultAndRestore = createNewVaultAndRestore;
exports.createRetryTransaction = createRetryTransaction;
exports.createSpeedUpTransaction = createSpeedUpTransaction;
exports.createTransactionEventFragment = createTransactionEventFragment;
exports.decryptMsg = decryptMsg;
exports.decryptMsgInline = decryptMsgInline;
exports.detectNewTokens = detectNewTokens;
exports.detectNfts = detectNfts;
exports.disconnectGasFeeEstimatePoller = disconnectGasFeeEstimatePoller;
exports.dismissSmartTransactionsErrorMessage = dismissSmartTransactionsErrorMessage;
exports.displayWarning = displayWarning;
exports.editAndSetNetworkConfiguration = editAndSetNetworkConfiguration;
exports.encryptionPublicKeyMsg = encryptionPublicKeyMsg;
exports.estimateGas = estimateGas;
exports.exportAccount = exportAccount;
exports.exportAccounts = exportAccounts;
exports.fetchAndSetQuotes = fetchAndSetQuotes;
exports.fetchSmartTransactionFees = fetchSmartTransactionFees;
exports.fetchSmartTransactionsLiveness = fetchSmartTransactionsLiveness;
exports.finalizeEventFragment = finalizeEventFragment;
exports.forceUpdateMetamaskState = forceUpdateMetamaskState;
exports.forgetDevice = forgetDevice;
exports.getBalancesInSingleCall = getBalancesInSingleCall;
exports.getContractMethodData = getContractMethodData;
exports.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;
exports.getGasFeeEstimatesAndStartPolling = getGasFeeEstimatesAndStartPolling;
exports.getGasFeeTimeEstimate = getGasFeeTimeEstimate;
exports.getNextNonce = getNextNonce;
exports.getOpenMetamaskTabsIds = getOpenMetamaskTabsIds;
exports.getRequestAccountTabIds = getRequestAccountTabIds;
exports.getRpcMethodPreferences = getRpcMethodPreferences;
exports.getTokenStandardAndDetails = getTokenStandardAndDetails;
exports.getTransactions = getTransactions;
exports.goHome = goHome;
exports.hideAlert = hideAlert;
exports.hideBetaHeader = hideBetaHeader;
exports.hideLoadingIndication = hideLoadingIndication;
exports.hideModal = hideModal;
exports.hideNetworkDropdown = hideNetworkDropdown;
exports.hideProductTour = hideProductTour;
exports.hideTestNetMessage = hideTestNetMessage;
exports.hideWarning = hideWarning;
exports.ignoreTokens = ignoreTokens;
exports.importNewAccount = importNewAccount;
exports.isNftOwner = isNftOwner;
exports.lockMetamask = lockMetamask;
exports.markPasswordForgotten = markPasswordForgotten;
exports.qrCodeDetected = qrCodeDetected;
exports.rejectAllMessages = rejectAllMessages;
exports.rejectPendingApproval = rejectPendingApproval;
exports.rejectPermissionsRequest = rejectPermissionsRequest;
exports.removeAccount = removeAccount;
exports.removeAndIgnoreNft = removeAndIgnoreNft;
exports.removeFromAddressBook = removeFromAddressBook;
exports.removeNetworkConfiguration = removeNetworkConfiguration;
exports.removeNft = removeNft;
exports.removePermissionsFor = removePermissionsFor;
exports.removePermittedAccount = removePermittedAccount;
exports.removePollingTokenFromAppState = removePollingTokenFromAppState;
exports.requestAccountsPermissionWithId = requestAccountsPermissionWithId;
exports.requestRevealSeedWords = requestRevealSeedWords;
exports.requestUserApproval = requestUserApproval;
exports.resetAccount = resetAccount;
exports.resetBackgroundSwapsState = resetBackgroundSwapsState;
exports.resetSwapsPostFetchState = resetSwapsPostFetchState;
exports.resolvePendingApproval = resolvePendingApproval;
exports.restoreUserData = restoreUserData;
exports.rollbackToPreviousProvider = rollbackToPreviousProvider;
exports.safeRefetchQuotes = safeRefetchQuotes;
exports.setAccountDetailsAddress = setAccountDetailsAddress;
exports.setAccountLabel = setAccountLabel;
exports.setActiveNetwork = setActiveNetwork;
exports.setAdvancedGasFee = setAdvancedGasFee;
exports.setAlertEnabledness = setAlertEnabledness;
exports.setAutoLockTimeLimit = setAutoLockTimeLimit;
exports.setBackgroundSwapRouteState = setBackgroundSwapRouteState;
exports.setCompletedOnboarding = setCompletedOnboarding;
exports.setConnectedStatusPopoverHasBeenShown = setConnectedStatusPopoverHasBeenShown;
exports.setCurrentCurrency = setCurrentCurrency;
exports.setCurrentLocale = setCurrentLocale;
exports.setCustomApproveTxData = setCustomApproveTxData;
exports.setDefaultHomeActiveTabName = setDefaultHomeActiveTabName;
exports.setDisabledRpcMethodPreference = setDisabledRpcMethodPreference;
exports.setDismissSeedBackUpReminder = setDismissSeedBackUpReminder;
exports.setFeatureFlag = setFeatureFlag;
exports.setFirstTimeFlowType = setFirstTimeFlowType;
exports.setFirstTimeUsedNetwork = setFirstTimeUsedNetwork;
exports.setHardwareWalletDefaultHdPath = setHardwareWalletDefaultHdPath;
exports.setHideZeroBalanceTokens = setHideZeroBalanceTokens;
exports.setInitialGasEstimate = setInitialGasEstimate;
exports.setIpfsGateway = setIpfsGateway;
exports.setLastActiveTime = setLastActiveTime;
exports.setLedgerTransportPreference = setLedgerTransportPreference;
exports.setMouseUserState = setMouseUserState;
exports.setNewNetworkAdded = setNewNetworkAdded;
exports.setNewNftAddedMessage = setNewNftAddedMessage;
exports.setNewTokensImported = setNewTokensImported;
exports.setNextNonce = setNextNonce;
exports.setOpenMetamaskTabsIDs = setOpenMetamaskTabsIDs;
exports.setOpenSeaEnabled = setOpenSeaEnabled;
exports.setOutdatedBrowserWarningLastShown = setOutdatedBrowserWarningLastShown;
exports.setParticipateInMetaMetrics = setParticipateInMetaMetrics;
exports.setPendingTokens = setPendingTokens;
exports.setPreference = setPreference;
exports.setProviderType = setProviderType;
exports.setRecoveryPhraseReminderHasBeenShown = setRecoveryPhraseReminderHasBeenShown;
exports.setRecoveryPhraseReminderLastShown = setRecoveryPhraseReminderLastShown;
exports.setRemoveNftMessage = setRemoveNftMessage;
exports.setRequestAccountTabIds = setRequestAccountTabIds;
exports.setSeedPhraseBackedUp = setSeedPhraseBackedUp;
exports.setSelectedAccount = setSelectedAccount;
exports.setSelectedAddress = setSelectedAddress;
exports.setSelectedNetworkConfigurationId = setSelectedNetworkConfigurationId;
exports.setSelectedQuoteAggId = setSelectedQuoteAggId;
exports.setShowFiatConversionOnTestnetsPreference = setShowFiatConversionOnTestnetsPreference;
exports.setShowTestNetworks = setShowTestNetworks;
exports.setSmartTransactionsOptInStatus = setSmartTransactionsOptInStatus;
exports.setSmartTransactionsRefreshInterval = setSmartTransactionsRefreshInterval;
exports.setSwapsErrorKey = setSwapsErrorKey;
exports.setSwapsFeatureFlags = setSwapsFeatureFlags;
exports.setSwapsLiveness = setSwapsLiveness;
exports.setSwapsQuotesPollingLimitEnabled = setSwapsQuotesPollingLimitEnabled;
exports.setSwapsTokens = setSwapsTokens;
exports.setSwapsTxGasLimit = setSwapsTxGasLimit;
exports.setSwapsTxGasPrice = setSwapsTxGasPrice;
exports.setTermsOfUseLastAgreed = setTermsOfUseLastAgreed;
exports.setTheme = setTheme;
exports.setTransactionSecurityCheckEnabled = setTransactionSecurityCheckEnabled;
exports.setUnconnectedAccountAlertShown = setUnconnectedAccountAlertShown;
exports.setUseBlockie = setUseBlockie;
exports.setUseCurrencyRateCheck = setUseCurrencyRateCheck;
exports.setUseMultiAccountBalanceChecker = setUseMultiAccountBalanceChecker;
exports.setUseNativeCurrencyAsPrimaryCurrencyPreference = setUseNativeCurrencyAsPrimaryCurrencyPreference;
exports.setUseNftDetection = setUseNftDetection;
exports.setUseNonceField = setUseNonceField;
exports.setUsePhishDetect = setUsePhishDetect;
exports.setUseTokenDetection = setUseTokenDetection;
exports.setWeb3ShimUsageAlertDismissed = setWeb3ShimUsageAlertDismissed;
exports.showAccountsPage = showAccountsPage;
exports.showAlert = showAlert;
exports.showConfTxPage = showConfTxPage;
exports.showLoadingIndication = showLoadingIndication;
exports.showModal = showModal;
exports.showNetworkDropdown = showNetworkDropdown;
exports.showPrivateKey = showPrivateKey;
exports.showQrScanner = showQrScanner;
exports.showSendTokenPage = showSendTokenPage;
exports.signAndSendSmartTransaction = signAndSendSmartTransaction;
exports.stopPollingForQuotes = stopPollingForQuotes;
exports.submitPassword = submitPassword;
exports.submitQRHardwareCryptoAccount = submitQRHardwareCryptoAccount;
exports.submitQRHardwareCryptoHDKey = submitQRHardwareCryptoHDKey;
exports.submitQRHardwareSignature = submitQRHardwareSignature;
exports.toggleAccountMenu = toggleAccountMenu;
exports.toggleNetworkMenu = toggleNetworkMenu;
exports.trackMetaMetricsEvent = trackMetaMetricsEvent;
exports.trackMetaMetricsPage = trackMetaMetricsPage;
exports.tryReverseResolveAddress = tryReverseResolveAddress;
exports.tryUnlockMetamask = tryUnlockMetamask;
exports.unMarkPasswordForgotten = unMarkPasswordForgotten;
exports.unlockAndGetSeedPhrase = unlockAndGetSeedPhrase;
exports.unlockFailed = unlockFailed;
exports.unlockHardwareWalletAccounts = unlockHardwareWalletAccounts;
exports.unlockInProgress = unlockInProgress;
exports.unlockSucceeded = unlockSucceeded;
exports.updateAndApproveTx = updateAndApproveTx;
exports.updateCurrentLocale = updateCurrentLocale;
exports.updateCustomNonce = updateCustomNonce;
exports.updateCustomSwapsEIP1559GasParams = updateCustomSwapsEIP1559GasParams;
exports.updateEditableParams = updateEditableParams;
exports.updateEventFragment = updateEventFragment;
exports.updateMetamaskState = updateMetamaskState;
exports.updateNftDropDownState = updateNftDropDownState;
exports.updatePreviousGasParams = updatePreviousGasParams;
exports.updateSmartTransaction = updateSmartTransaction;
exports.updateSwapsUserFeeLevel = updateSwapsUserFeeLevel;
exports.updateTokenType = updateTokenType;
exports.updateTransaction = updateTransaction;
exports.updateTransactionGasFees = updateTransactionGasFees;
exports.updateTransactionParams = updateTransactionParams;
exports.updateTransactionSendFlowHistory = updateTransactionSendFlowHistory;
exports.updateViewedNotifications = updateViewedNotifications;
exports.upsertNetworkConfiguration = upsertNetworkConfiguration;
exports.verifyPassword = verifyPassword;
exports.verifySeedPhrase = verifySeedPhrase;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _browser = require("@sentry/browser");
var _lodash = require("lodash");
var _ethRpcErrors = require("eth-rpc-errors");
var _transactions = require("../helpers/utils/transactions.util");
var _switchDirection = _interopRequireDefault(require("../../shared/lib/switch-direction"));
var _app = require("../../shared/constants/app");
var _util = require("../../app/scripts/lib/util");
var _selectors = require("../selectors");
var _send = require("../ducks/send");
var _unconnectedAccount = require("../ducks/alerts/unconnected-account");
var _metamask = require("../ducks/metamask/metamask");
var _hexstringUtils = require("../../shared/modules/hexstring-utils");
var _hardwareWallets = require("../../shared/constants/hardware-wallets");
var _metametrics = require("../../shared/constants/metametrics");
var _swaps = require("../pages/swaps/swaps.util");
var _stringUtils = require("../../shared/modules/string-utils");
var _i18n = require("../../shared/modules/i18n");
var _conversion = require("../../shared/modules/conversion.utils");
var _common = require("../../shared/constants/common");
var _error = require("../../shared/modules/error");
var actionConstants = _interopRequireWildcard(require("./actionConstants"));
var _actionQueue = require("./action-queue");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function goHome() {
  return {
    type: actionConstants.GO_HOME
  };
}
// async actions

function tryUnlockMetamask(password) {
  return dispatch => {
    dispatch(showLoadingIndication());
    dispatch(unlockInProgress());
    _loglevel.default.debug(`background.submitPassword`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('submitPassword', [password], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    }).then(() => {
      dispatch(unlockSucceeded());
      return forceUpdateMetamaskState(dispatch);
    }).then(() => {
      dispatch(hideLoadingIndication());
    }).catch(err => {
      dispatch(unlockFailed(err.message));
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}

/**
 * Adds a new account where all data is encrypted using the given password and
 * where all addresses are generated from a given seed phrase.
 *
 * @param password - The password.
 * @param seedPhrase - The seed phrase.
 * @returns The updated state of the keyring controller.
 */
function createNewVaultAndRestore(password, seedPhrase) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.createNewVaultAndRestore`);

    // Encode the secret recovery phrase as an array of integers so that it is
    // serialized as JSON properly.
    const encodedSeedPhrase = Array.from(Buffer.from(seedPhrase, 'utf8').values());

    // TODO: Add types for vault
    let vault;
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createNewVaultAndRestore', [password, encodedSeedPhrase], (err, _vault) => {
        if (err) {
          reject(err);
          return;
        }
        vault = _vault;
        resolve();
      });
    }).then(() => dispatch(unMarkPasswordForgotten())).then(() => {
      dispatch(showAccountsPage());
      dispatch(hideLoadingIndication());
      return vault;
    }).catch(err => {
      dispatch(displayWarning(err.message));
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}
function createNewVaultAndGetSeedPhrase(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await createNewVault(password);
      const seedPhrase = await verifySeedPhrase();
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error));
      if ((0, _error.isErrorWithMessage)(error)) {
        throw new Error(error.message);
      } else {
        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function unlockAndGetSeedPhrase(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await submitPassword(password);
      const seedPhrase = await verifySeedPhrase();
      await forceUpdateMetamaskState(dispatch);
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error));
      if ((0, _error.isErrorWithMessage)(error)) {
        throw new Error(error.message);
      } else {
        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function submitPassword(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('submitPassword', [password], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve();
    });
  });
}
function createNewVault(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('createNewVaultAndKeychain', [password], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve(true);
    });
  });
}
function verifyPassword(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve(true);
    });
  });
}
async function verifySeedPhrase() {
  const encodedSeedPhrase = await (0, _actionQueue.submitRequestToBackground)('verifySeedPhrase');
  return Buffer.from(encodedSeedPhrase).toString('utf8');
}
function requestRevealSeedWords(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.verifyPassword`);
    try {
      await verifyPassword(password);
      const seedPhrase = await verifySeedPhrase();
      return seedPhrase;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function tryReverseResolveAddress(address) {
  return () => {
    return new Promise(resolve => {
      (0, _actionQueue.callBackgroundMethod)('tryReverseResolveAddress', [address], err => {
        if (err) {
          (0, _error.logErrorWithMessage)(err);
        }
        resolve();
      });
    });
  };
}
function resetAccount() {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('resetAccount', [], (err, account) => {
        dispatch(hideLoadingIndication());
        if (err) {
          if ((0, _error.isErrorWithMessage)(err)) {
            dispatch(displayWarning(err.message));
          }
          reject(err);
          return;
        }
        _loglevel.default.info(`Transaction history reset for ${account}`);
        dispatch(showAccountsPage());
        resolve(account);
      });
    });
  };
}
function removeAccount(address) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('removeAccount', [address], (error, account) => {
          if (error) {
            reject(error);
            return;
          }
          resolve(account);
        });
      });
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    _loglevel.default.info(`Account removed: ${address}`);
    dispatch(showAccountsPage());
  };
}
function importNewAccount(strategy, args, loadingMessage) {
  return async dispatch => {
    let newState;
    dispatch(showLoadingIndication(loadingMessage));
    try {
      _loglevel.default.debug(`background.importAccountWithStrategy`);
      await (0, _actionQueue.submitRequestToBackground)('importAccountWithStrategy', [strategy, args]);
      _loglevel.default.debug(`background.getState`);
      newState = await (0, _actionQueue.submitRequestToBackground)('getState');
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    return newState;
  };
}
function addNewAccount() {
  _loglevel.default.debug(`background.addNewAccount`);
  return async (dispatch, getState) => {
    const oldIdentities = getState().metamask.identities;
    dispatch(showLoadingIndication());
    let newIdentities;
    try {
      const {
        identities
      } = await (0, _actionQueue.submitRequestToBackground)('addNewAccount', [Object.keys(oldIdentities).length]);
      newIdentities = identities;
    } catch (error) {
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    const newAccountAddress = Object.keys(newIdentities).find(address => !oldIdentities[address]);
    await forceUpdateMetamaskState(dispatch);
    return newAccountAddress;
  };
}
function checkHardwareStatus(deviceName, hdPath) {
  _loglevel.default.debug(`background.checkHardwareStatus`, deviceName, hdPath);
  return async dispatch => {
    dispatch(showLoadingIndication());
    let unlocked = false;
    try {
      unlocked = await (0, _actionQueue.submitRequestToBackground)('checkHardwareStatus', [deviceName, hdPath]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    await forceUpdateMetamaskState(dispatch);
    return unlocked;
  };
}
function forgetDevice(deviceName) {
  _loglevel.default.debug(`background.forgetDevice`, deviceName);
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('forgetDevice', [deviceName]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    await forceUpdateMetamaskState(dispatch);
  };
}

// TODO: Define an Account Type for the return type of this method and anywhere
// else dealing with accounts.
function connectHardware(deviceName, page, hdPath, t) {
  _loglevel.default.debug(`background.connectHardware`, deviceName, page, hdPath);
  return async (dispatch, getState) => {
    const {
      ledgerTransportType
    } = getState().metamask;
    dispatch(showLoadingIndication(`Looking for your ${(0, _lodash.capitalize)(deviceName)}...`));
    let accounts;
    try {
      if (deviceName === _hardwareWallets.HardwareDeviceNames.ledger) {
        await (0, _actionQueue.submitRequestToBackground)('establishLedgerTransportPreference');
      }
      if (deviceName === _hardwareWallets.HardwareDeviceNames.ledger && ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          // The types for web hid were provided by @types/w3c-web-hid and may
          // not be fully formed or correct, because LEDGER_USB_VENDOR_ID is a
          // string and this integration with Navigator.hid works before
          // TypeScript. As a note, on the next declaration we convert the
          // LEDGER_USB_VENDOR_ID to a number for a different API so....
          // TODO: Get David Walsh's opinion here
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const userApprovedWebHidConnection = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        if (!userApprovedWebHidConnection) {
          throw new Error(t('ledgerWebHIDNotConnectedErrorMessage'));
        }
      }
      accounts = await (0, _actionQueue.submitRequestToBackground)('connectHardware', [deviceName, page, hdPath]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      if (deviceName === _hardwareWallets.HardwareDeviceNames.ledger && ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid && (0, _error.isErrorWithMessage)(error) && error.message.match('Failed to open the device')) {
        dispatch(displayWarning(t('ledgerDeviceOpenFailureMessage')));
        throw new Error(t('ledgerDeviceOpenFailureMessage'));
      } else {
        if (deviceName !== _hardwareWallets.HardwareDeviceNames.qr) {
          dispatch(displayWarning(error));
        }
        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }
    await forceUpdateMetamaskState(dispatch);
    return accounts;
  };
}
function unlockHardwareWalletAccounts(indexes, deviceName, hdPath, hdPathDescription) {
  _loglevel.default.debug(`background.unlockHardwareWalletAccount`, indexes, deviceName, hdPath, hdPathDescription);
  return async dispatch => {
    dispatch(showLoadingIndication());
    for (const index of indexes) {
      try {
        await (0, _actionQueue.submitRequestToBackground)('unlockHardwareWalletAccount', [index, deviceName, hdPath, hdPathDescription]);
      } catch (err) {
        (0, _error.logErrorWithMessage)(err);
        dispatch(displayWarning(err));
        dispatch(hideLoadingIndication());
        throw err;
      }
    }
    dispatch(hideLoadingIndication());
    return undefined;
  };
}
function showQrScanner() {
  return dispatch => {
    dispatch(showModal({
      name: 'QR_SCANNER'
    }));
  };
}
function setCurrentCurrency(currencyCode) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setCurrentCurrency`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setCurrentCurrency', [currencyCode]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function decryptMsgInline(decryptedMsgData) {
  _loglevel.default.debug('action - decryptMsgInline');
  return async dispatch => {
    _loglevel.default.debug(`actions calling background.decryptMessageInline`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('decryptMessageInline', [decryptedMsgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    }
    dispatch(updateMetamaskState(newState));
    return newState.unapprovedDecryptMsgs[decryptedMsgData.metamaskId];
  };
}
function decryptMsg(decryptedMsgData) {
  _loglevel.default.debug('action - decryptMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.decryptMessage`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('decryptMessage', [decryptedMsgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(decryptedMsgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return decryptedMsgData;
  };
}
function encryptionPublicKeyMsg(msgData) {
  _loglevel.default.debug('action - encryptionPublicKeyMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.encryptionPublicKey`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('encryptionPublicKey', [msgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function updateCustomNonce(value) {
  return {
    type: actionConstants.UPDATE_CUSTOM_NONCE,
    value
  };
}
const updateMetamaskStateFromBackground = () => {
  _loglevel.default.debug(`background.getState`);
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('getState', [], (error, newState) => {
      if (error) {
        reject(error);
        return;
      }
      resolve(newState);
    });
  });
};

/**
 * TODO: update previousGasParams to use typed gas params object
 * TODO: codeword: NOT_A_THUNK @brad-decker
 *
 * @param txId - MetaMask internal transaction id
 * @param previousGasParams - Object of gas params to set as previous
 */
function updatePreviousGasParams(txId, previousGasParams) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updatePreviousGasParams', [txId, previousGasParams]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}
function updateEditableParams(txId, editableParams) {
  return async dispatch => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateEditableParams', [txId, editableParams]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    await forceUpdateMetamaskState(dispatch);
    return updatedTransaction;
  };
}

/**
 * Appends new send flow history to a transaction
 * TODO: codeword: NOT_A_THUNK @brad-decker
 *
 * @param txId - the id of the transaction to update
 * @param currentSendFlowHistoryLength - sendFlowHistory entries currently
 * @param sendFlowHistory - the new send flow history to append to the
 * transaction
 * @returns
 */
function updateTransactionSendFlowHistory(txId, currentSendFlowHistoryLength, sendFlowHistory) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateTransactionSendFlowHistory', [txId, currentSendFlowHistoryLength, sendFlowHistory]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}
async function backupUserData() {
  let backedupData;
  try {
    backedupData = await (0, _actionQueue.submitRequestToBackground)('backupUserData');
  } catch (error) {
    (0, _error.logErrorWithMessage)(error);
    throw error;
  }
  return backedupData;
}
async function restoreUserData(jsonString) {
  try {
    await (0, _actionQueue.submitRequestToBackground)('restoreUserData', [jsonString]);
  } catch (error) {
    (0, _error.logErrorWithMessage)(error);
    throw error;
  }
  return true;
}

// TODO: codeword: NOT_A_THUNK @brad-decker
function updateTransactionGasFees(txId, txGasFees) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateTransactionGasFees', [txId, txGasFees]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}
function updateTransaction(txMeta, dontShowLoadingIndicator) {
  return async dispatch => {
    !dontShowLoadingIndicator && dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('updateTransaction', [txMeta]);
    } catch (error) {
      dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));
      dispatch(hideLoadingIndication());
      dispatch(goHome());
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    try {
      dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      dispatch(showConfTxPage({
        id: txMeta.id
      }));
      return txMeta;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

/**
 * Action to create a new transaction in the controller and route to the
 * confirmation page. Returns the newly created txMeta in case additional logic
 * should be applied to the transaction after creation.
 *
 * @param method
 * @param txParams - The transaction parameters
 * @param type - The type of the transaction being added.
 * @param sendFlowHistory - The history of the send flow at time of creation.
 * @returns
 */
function addUnapprovedTransactionAndRouteToConfirmationPage(method, txParams, type, sendFlowHistory) {
  return async dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    try {
      _loglevel.default.debug('background.addUnapprovedTransaction');
      const txMeta = await (0, _actionQueue.submitRequestToBackground)('addUnapprovedTransaction', [method, txParams, _app.ORIGIN_METAMASK, type, sendFlowHistory, actionId], actionId);
      dispatch(showConfTxPage());
      return txMeta;
    } catch (error) {
      dispatch(hideLoadingIndication());
      dispatch(displayWarning(error));
    }
    return null;
  };
}

/**
 * Wrapper around the promisifedBackground to create a new unapproved
 * transaction in the background and return the newly created txMeta.
 * This method does not show errors or route to a confirmation page and is
 * used primarily for swaps functionality.
 *
 * @param method
 * @param txParams - the transaction parameters
 * @param type - The type of the transaction being added.
 * @param options - Additional options for the transaction.
 * @param options.requireApproval - Whether the transaction requires approval.
 * @param options.swaps - Options specific to swaps transactions.
 * @param options.swaps.hasApproveTx - Whether the swap required an approval transaction.
 * @param options.swaps.meta - Additional transaction metadata required by swaps.
 * @returns
 */
async function addUnapprovedTransaction(method, txParams, type, options) {
  _loglevel.default.debug('background.addUnapprovedTransaction');
  const actionId = (0, _actionQueue.generateActionId)();
  const txMeta = await (0, _actionQueue.submitRequestToBackground)('addUnapprovedTransaction', [method, txParams, _app.ORIGIN_METAMASK, type, undefined, actionId, options], actionId);
  return txMeta;
}
function updateAndApproveTx(txMeta, dontShowLoadingIndicator) {
  return dispatch => {
    !dontShowLoadingIndicator && dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('resolvePendingApproval', [String(txMeta.id), {
        txMeta,
        actionId
      }, {
        waitForResult: true
      }], err => {
        dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));
        dispatch((0, _send.resetSendState)());
        if (err) {
          dispatch(goHome());
          (0, _error.logErrorWithMessage)(err);
          reject(err);
          return;
        }
        resolve(txMeta);
      });
    }).then(() => updateMetamaskStateFromBackground()).then(newState => dispatch(updateMetamaskState(newState))).then(() => {
      dispatch((0, _send.resetSendState)());
      dispatch(completedTx(txMeta.id));
      dispatch(hideLoadingIndication());
      dispatch(updateCustomNonce(''));
      dispatch(closeCurrentNotificationWindow());
      return txMeta;
    }).catch(err => {
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}
async function getTransactions(filters = {}) {
  return await (0, _actionQueue.submitRequestToBackground)('getTransactions', [filters]);
}
function completedTx(txId) {
  return dispatch => {
    dispatch({
      type: actionConstants.COMPLETED_TX,
      value: {
        id: txId
      }
    });
  };
}
function updateTransactionParams(txId, txParams) {
  return {
    type: actionConstants.UPDATE_TRANSACTION_PARAMS,
    id: txId,
    value: txParams
  };
}

// TODO: Clean this up.

function cancelDecryptMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelDecryptMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function cancelEncryptionPublicKeyMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelEncryptionPublicKey', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function cancelTx(txMeta, _showLoadingIndication = true) {
  return dispatch => {
    _showLoadingIndication && dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('rejectPendingApproval', [String(txMeta.id), _ethRpcErrors.ethErrors.provider.userRejectedRequest().serialize()], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    }).then(() => updateMetamaskStateFromBackground()).then(newState => dispatch(updateMetamaskState(newState))).then(() => {
      dispatch((0, _send.resetSendState)());
      dispatch(completedTx(txMeta.id));
      dispatch(hideLoadingIndication());
      dispatch(closeCurrentNotificationWindow());
      return txMeta;
    }).catch(error => {
      dispatch(hideLoadingIndication());
      throw error;
    });
  };
}

/**
 * Cancels all of the given transactions
 *
 * @param txMetaList
 * @returns
 */
function cancelTxs(txMetaList) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      const txIds = txMetaList.map(({
        id
      }) => id);
      const cancellations = txIds.map(id => new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('rejectPendingApproval', [String(id), _ethRpcErrors.ethErrors.provider.userRejectedRequest().serialize()], err => {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      }));
      await Promise.all(cancellations);
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      dispatch((0, _send.resetSendState)());
      txIds.forEach(id => {
        dispatch(completedTx(id));
      });
    } finally {
      if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
        closeNotificationPopup();
      } else {
        dispatch(hideLoadingIndication());
      }
    }
  };
}
function markPasswordForgotten() {
  return async dispatch => {
    try {
      await new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('markPasswordForgotten', [], error => {
          if (error) {
            reject(error);
            return;
          }
          resolve();
        });
      });
    } finally {
      // TODO: handle errors
      dispatch(hideLoadingIndication());
      await forceUpdateMetamaskState(dispatch);
    }
  };
}
function unMarkPasswordForgotten() {
  return dispatch => {
    return new Promise(resolve => {
      (0, _actionQueue.callBackgroundMethod)('unMarkPasswordForgotten', [], () => {
        resolve();
      });
    }).then(() => forceUpdateMetamaskState(dispatch));
  };
}
function closeWelcomeScreen() {
  return {
    type: actionConstants.CLOSE_WELCOME_SCREEN
  };
}

//
// unlock screen
//

function unlockInProgress() {
  return {
    type: actionConstants.UNLOCK_IN_PROGRESS
  };
}
function unlockFailed(message) {
  return {
    type: actionConstants.UNLOCK_FAILED,
    value: message
  };
}
function unlockSucceeded(message) {
  return {
    type: actionConstants.UNLOCK_SUCCEEDED,
    value: message
  };
}
function updateMetamaskState(newState) {
  return (dispatch, getState) => {
    var _newState$addressBook, _currentState$address;
    const state = getState();
    const providerConfig = (0, _metamask.getProviderConfig)(state);
    const {
      metamask: currentState
    } = state;
    const {
      currentLocale,
      selectedAddress
    } = currentState;
    const {
      currentLocale: newLocale,
      selectedAddress: newSelectedAddress,
      providerConfig: newProviderConfig
    } = newState;
    if (currentLocale && newLocale && currentLocale !== newLocale) {
      dispatch(updateCurrentLocale(newLocale));
    }
    if (selectedAddress !== newSelectedAddress) {
      dispatch({
        type: actionConstants.SELECTED_ADDRESS_CHANGED
      });
    }
    const newAddressBook = ((_newState$addressBook = newState.addressBook) === null || _newState$addressBook === void 0 ? void 0 : _newState$addressBook[newProviderConfig === null || newProviderConfig === void 0 ? void 0 : newProviderConfig.chainId]) ?? {};
    const oldAddressBook = ((_currentState$address = currentState.addressBook) === null || _currentState$address === void 0 ? void 0 : _currentState$address[providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.chainId]) ?? {};
    const newAccounts = (0, _selectors.getMetaMaskAccounts)({
      metamask: newState
    });
    const oldAccounts = (0, _selectors.getMetaMaskAccounts)({
      metamask: currentState
    });
    const newSelectedAccount = newAccounts[newSelectedAddress];
    const oldSelectedAccount = newAccounts[selectedAddress];
    // dispatch an ACCOUNT_CHANGED for any account whose balance or other
    // properties changed in this update
    Object.entries(oldAccounts).forEach(([address, oldAccount]) => {
      if (!(0, _lodash.isEqual)(oldAccount, newAccounts[address])) {
        dispatch({
          type: actionConstants.ACCOUNT_CHANGED,
          payload: {
            account: newAccounts[address]
          }
        });
      }
    });
    // Also emit an event for the selected account changing, either due to a
    // property update or if the entire account changes.
    if ((0, _lodash.isEqual)(oldSelectedAccount, newSelectedAccount) === false) {
      dispatch({
        type: actionConstants.SELECTED_ACCOUNT_CHANGED,
        payload: {
          account: newSelectedAccount
        }
      });
    }
    // We need to keep track of changing address book entries
    if ((0, _lodash.isEqual)(oldAddressBook, newAddressBook) === false) {
      dispatch({
        type: actionConstants.ADDRESS_BOOK_UPDATED,
        payload: {
          addressBook: newAddressBook
        }
      });
    }

    // track when gasFeeEstimates change
    if ((0, _lodash.isEqual)(currentState.gasFeeEstimates, newState.gasFeeEstimates) === false) {
      dispatch({
        type: actionConstants.GAS_FEE_ESTIMATES_UPDATED,
        payload: {
          gasFeeEstimates: newState.gasFeeEstimates,
          gasEstimateType: newState.gasEstimateType
        }
      });
    }
    dispatch({
      type: actionConstants.UPDATE_METAMASK_STATE,
      value: newState
    });
    if (providerConfig.chainId !== newProviderConfig.chainId) {
      dispatch({
        type: actionConstants.CHAIN_CHANGED,
        payload: newProviderConfig.chainId
      });
      // We dispatch this action to ensure that the send state stays up to date
      // after the chain changes. This async thunk will fail gracefully in the
      // event that we are not yet on the send flow with a draftTransaction in
      // progress.

      dispatch((0, _send.initializeSendState)({
        chainHasChanged: true
      }));
    }
  };
}
const backgroundSetLocked = () => {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('setLocked', [], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve();
    });
  });
};
function lockMetamask() {
  _loglevel.default.debug(`background.setLocked`);
  return dispatch => {
    dispatch(showLoadingIndication());
    return backgroundSetLocked().then(() => updateMetamaskStateFromBackground()).catch(error => {
      dispatch(displayWarning(error.message));
      return Promise.reject(error);
    }).then(newState => {
      dispatch(updateMetamaskState(newState));
      dispatch(hideLoadingIndication());
      dispatch({
        type: actionConstants.LOCK_METAMASK
      });
    }).catch(() => {
      dispatch(hideLoadingIndication());
      dispatch({
        type: actionConstants.LOCK_METAMASK
      });
    });
  };
}
async function _setSelectedAddress(address) {
  _loglevel.default.debug(`background.setSelectedAddress`);
  await (0, _actionQueue.submitRequestToBackground)('setSelectedAddress', [address]);
}
function setSelectedAddress(address) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setSelectedAddress`);
    try {
      await _setSelectedAddress(address);
    } catch (error) {
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function setSelectedAccount(address) {
  return async (dispatch, getState) => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setSelectedAddress`);
    const state = getState();
    const unconnectedAccountAccountAlertIsEnabled = (0, _metamask.getUnconnectedAccountAlertEnabledness)(state);
    const activeTabOrigin = state.activeTab.origin;
    const selectedAddress = (0, _selectors.getSelectedAddress)(state);
    const permittedAccountsForCurrentTab = (0, _selectors.getPermittedAccountsForCurrentTab)(state);
    const currentTabIsConnectedToPreviousAddress = Boolean(activeTabOrigin) && permittedAccountsForCurrentTab.includes(selectedAddress);
    const currentTabIsConnectedToNextAddress = Boolean(activeTabOrigin) && permittedAccountsForCurrentTab.includes(address);
    const switchingToUnconnectedAddress = currentTabIsConnectedToPreviousAddress && !currentTabIsConnectedToNextAddress;
    try {
      await _setSelectedAddress(address);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
    if (unconnectedAccountAccountAlertIsEnabled && switchingToUnconnectedAddress) {
      dispatch((0, _unconnectedAccount.switchedToUnconnectedAccount)());
      await setUnconnectedAccountAlertShown(activeTabOrigin);
    }
  };
}
function addPermittedAccount(origin, address) {
  return async dispatch => {
    await new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('addPermittedAccount', [origin, address], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    });
    await forceUpdateMetamaskState(dispatch);
  };
}
function removePermittedAccount(origin, address) {
  return async dispatch => {
    await new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('removePermittedAccount', [origin, address], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    });
    await forceUpdateMetamaskState(dispatch);
  };
}
function showAccountsPage() {
  return {
    type: actionConstants.SHOW_ACCOUNTS_PAGE
  };
}
function showConfTxPage({
  id
} = {}) {
  return {
    type: actionConstants.SHOW_CONF_TX_PAGE,
    id
  };
}
function addToken(address, symbol, decimals, image, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add token without address');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('addToken', [address, symbol, decimals, image]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

/**
 * To add the tokens user selected to state
 *
 * @param tokensToImport
 */
function addImportedTokens(tokensToImport) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('addImportedTokens', [tokensToImport]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
    } finally {
      await forceUpdateMetamaskState(dispatch);
    }
  };
}

/**
 * To add ignored token addresses to state
 *
 * @param options
 * @param options.tokensToIgnore
 * @param options.dontShowLoadingIndicator
 */
function ignoreTokens({
  tokensToIgnore,
  dontShowLoadingIndicator = false
}) {
  const _tokensToIgnore = Array.isArray(tokensToIgnore) ? tokensToIgnore : [tokensToIgnore];
  return async dispatch => {
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('ignoreTokens', [_tokensToIgnore]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

/**
 * To fetch the ERC20 tokens with non-zero balance in a single call
 *
 * @param tokens
 */
async function getBalancesInSingleCall(tokens) {
  return await (0, _actionQueue.submitRequestToBackground)('getBalancesInSingleCall', [tokens]);
}
function addNft(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot add NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('addNft', [address, tokenID]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
function addNftVerifyOwnership(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot add NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('addNftVerifyOwnership', [address, tokenID]);
    } catch (error) {
      if ((0, _error.isErrorWithMessage)(error) && (error.message.includes('This NFT is not owned by the user') || error.message.includes('Unable to verify ownership'))) {
        throw error;
      } else {
        (0, _error.logErrorWithMessage)(error);
        dispatch(displayWarning(error));
      }
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
function removeAndIgnoreNft(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot ignore NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot ignore NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('removeAndIgnoreNft', [address, tokenID]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
function removeNft(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot remove NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot remove NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('removeNft', [address, tokenID]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
async function checkAndUpdateAllNftsOwnershipStatus() {
  await (0, _actionQueue.submitRequestToBackground)('checkAndUpdateAllNftsOwnershipStatus');
}
async function isNftOwner(ownerAddress, nftAddress, nftId) {
  return await (0, _actionQueue.submitRequestToBackground)('isNftOwner', [ownerAddress, nftAddress, nftId]);
}
async function checkAndUpdateSingleNftOwnershipStatus(nft) {
  await (0, _actionQueue.submitRequestToBackground)('checkAndUpdateSingleNftOwnershipStatus', [nft, false]);
}
// When we upgrade to TypeScript 4.5 this is part of the language. It will get
// the underlying type of a Promise generic type. So Awaited<Promise<void>> is
// void.

async function getTokenStandardAndDetails(address, userAddress, tokenId) {
  return await (0, _actionQueue.submitRequestToBackground)('getTokenStandardAndDetails', [address, userAddress, tokenId]);
}
function addTokens(tokens) {
  return dispatch => {
    if (Array.isArray(tokens)) {
      return Promise.all(tokens.map(({
        address,
        symbol,
        decimals
      }) => dispatch(addToken(address, symbol, decimals))));
    }
    return Promise.all(Object.entries(tokens).map(([_, {
      address,
      symbol,
      decimals
    }]) => dispatch(addToken(address, symbol, decimals))));
  };
}
function clearPendingTokens() {
  return {
    type: actionConstants.CLEAR_PENDING_TOKENS
  };
}
function createCancelTransaction(txId, customGasSettings, options = {}) {
  _loglevel.default.debug('background.cancelTransaction');
  let newTxId;
  return dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createCancelTransaction', [txId, customGasSettings, {
        ...options,
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        if (newState) {
          const {
            currentNetworkTxList
          } = newState;
          const {
            id
          } = currentNetworkTxList[currentNetworkTxList.length - 1];
          newTxId = id;
          resolve(newState);
        }
      }, actionId);
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTxId);
  };
}
function createSpeedUpTransaction(txId, customGasSettings, options = {}) {
  _loglevel.default.debug('background.createSpeedUpTransaction');
  let newTx;
  return dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createSpeedUpTransaction', [txId, customGasSettings, {
        ...options,
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        if (newState) {
          const {
            currentNetworkTxList
          } = newState;
          newTx = currentNetworkTxList[currentNetworkTxList.length - 1];
          resolve(newState);
        }
      }, actionId);
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTx);
  };
}
function createRetryTransaction(txId, customGasSettings) {
  let newTx;
  return dispatch => {
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('createSpeedUpTransaction', [txId, customGasSettings, {
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        if (newState) {
          const {
            currentNetworkTxList
          } = newState;
          newTx = currentNetworkTxList[currentNetworkTxList.length - 1];
          resolve(newState);
        }
      });
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTx);
  };
}

//
// config
//

function setProviderType(type) {
  return async dispatch => {
    _loglevel.default.debug(`background.setProviderType`, type);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setProviderType', [type]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function upsertNetworkConfiguration({
  rpcUrl,
  chainId,
  nickname,
  rpcPrefs,
  ticker = _common.EtherDenomination.ETH
}, {
  setActive,
  source
}) {
  return async dispatch => {
    _loglevel.default.debug(`background.upsertNetworkConfiguration: ${rpcUrl} ${chainId} ${ticker} ${nickname}`);
    let networkConfigurationId;
    try {
      networkConfigurationId = await (0, _actionQueue.submitRequestToBackground)('upsertNetworkConfiguration', [{
        rpcUrl,
        chainId,
        ticker,
        nickname: nickname || rpcUrl,
        rpcPrefs
      }, {
        setActive,
        source,
        referrer: _app.ORIGIN_METAMASK
      }]);
    } catch (error) {
      _loglevel.default.error(error);
      dispatch(displayWarning('Had a problem adding network!'));
    }
    return networkConfigurationId;
  };
}
function editAndSetNetworkConfiguration({
  networkConfigurationId,
  rpcUrl,
  chainId,
  nickname,
  rpcPrefs,
  ticker = _common.EtherDenomination.ETH
}, {
  source
}) {
  return async dispatch => {
    _loglevel.default.debug(`background.removeNetworkConfiguration: ${networkConfigurationId}`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('removeNetworkConfiguration', [networkConfigurationId]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem removing network!'));
      return;
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('upsertNetworkConfiguration', [{
        rpcUrl,
        chainId,
        ticker,
        nickname: nickname || rpcUrl,
        rpcPrefs
      }, {
        setActive: true,
        referrer: _app.ORIGIN_METAMASK,
        source
      }]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function setActiveNetwork(networkConfigurationId) {
  return async dispatch => {
    _loglevel.default.debug(`background.setActiveNetwork: ${networkConfigurationId}`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setActiveNetwork', [networkConfigurationId]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function rollbackToPreviousProvider() {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('rollbackToPreviousProvider');
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function removeNetworkConfiguration(networkConfigurationId) {
  return dispatch => {
    _loglevel.default.debug(`background.removeNetworkConfiguration: ${networkConfigurationId}`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('removeNetworkConfiguration', [networkConfigurationId], err => {
        if (err) {
          (0, _error.logErrorWithMessage)(err);
          dispatch(displayWarning('Had a problem removing network!'));
          reject(err);
          return;
        }
        resolve();
      });
    });
  };
}

// Calls the addressBookController to add a new address.
function addToAddressBook(recipient, nickname = '', memo = '') {
  _loglevel.default.debug(`background.addToAddressBook`);
  return async (dispatch, getState) => {
    const {
      chainId
    } = (0, _metamask.getProviderConfig)(getState());
    let set;
    try {
      set = await (0, _actionQueue.submitRequestToBackground)('setAddressBook', [(0, _hexstringUtils.toChecksumHexAddress)(recipient), nickname, chainId, memo]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Address book failed to update'));
      throw error;
    }
    if (!set) {
      dispatch(displayWarning('Address book failed to update'));
    }
  };
}

/**
 * @description Calls the addressBookController to remove an existing address.
 * @param chainId
 * @param addressToRemove - Address of the entry to remove from the address book
 */
function removeFromAddressBook(chainId, addressToRemove) {
  _loglevel.default.debug(`background.removeFromAddressBook`);
  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('removeFromAddressBook', [chainId, (0, _hexstringUtils.toChecksumHexAddress)(addressToRemove)]);
  };
}
function showNetworkDropdown() {
  return {
    type: actionConstants.NETWORK_DROPDOWN_OPEN
  };
}
function hideNetworkDropdown() {
  return {
    type: actionConstants.NETWORK_DROPDOWN_CLOSE
  };
}
function showModal(payload) {
  return {
    type: actionConstants.MODAL_OPEN,
    payload
  };
}
function hideModal() {
  return {
    type: actionConstants.MODAL_CLOSE
  };
}
function closeCurrentNotificationWindow() {
  return (_, getState) => {
    const state = getState();
    const approvalFlows = (0, _selectors.getApprovalFlows)(state);
    if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION && !(0, _selectors.hasTransactionPendingApprovals)(state) && approvalFlows.length === 0) {
      closeNotificationPopup();
    }
  };
}
function showAlert(msg) {
  return {
    type: actionConstants.ALERT_OPEN,
    payload: msg
  };
}
function hideAlert() {
  return {
    type: actionConstants.ALERT_CLOSE
  };
}

/**
 * TODO: this should be moved somewhere else when it makese sense to do so
 */

function updateNftDropDownState(value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('updateNftDropDownState', [value]);
    await forceUpdateMetamaskState(dispatch);
  };
}
/**
 * This action will receive two types of values via qrCodeData
 * an object with the following structure {type, values}
 * or null (used to clear the previous value)
 *
 * @param qrCodeData
 */
function qrCodeDetected(qrCodeData) {
  return async dispatch => {
    await dispatch({
      type: actionConstants.QR_CODE_DETECTED,
      value: qrCodeData
    });

    // If on the send page, the send slice will listen for the QR_CODE_DETECTED
    // action and update its state. Address changes need to recompute gasLimit
    // so we fire this method so that the send page gasLimit can be recomputed
    dispatch((0, _send.computeEstimatedGasLimit)());
  };
}
function showLoadingIndication(message) {
  return {
    type: actionConstants.SHOW_LOADING,
    payload: message
  };
}
function setHardwareWalletDefaultHdPath({
  device,
  path
}) {
  return {
    type: actionConstants.SET_HARDWARE_WALLET_DEFAULT_HD_PATH,
    payload: {
      device,
      path
    }
  };
}
function hideLoadingIndication() {
  return {
    type: actionConstants.HIDE_LOADING
  };
}
function displayWarning(payload) {
  if ((0, _error.isErrorWithMessage)(payload)) {
    return {
      type: actionConstants.DISPLAY_WARNING,
      payload: payload.message
    };
  } else if (typeof payload === 'string') {
    return {
      type: actionConstants.DISPLAY_WARNING,
      payload
    };
  }
  return {
    type: actionConstants.DISPLAY_WARNING,
    payload: `${payload}`
  };
}
function hideWarning() {
  return {
    type: actionConstants.HIDE_WARNING
  };
}
function exportAccount(password, address) {
  return function (dispatch) {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.verifyPassword`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], function (err) {
        if (err) {
          _loglevel.default.error('Error in verifying password.');
          dispatch(hideLoadingIndication());
          dispatch(displayWarning('Incorrect Password.'));
          reject(err);
          return;
        }
        _loglevel.default.debug(`background.exportAccount`);
        (0, _actionQueue.callBackgroundMethod)('exportAccount', [address, password], function (err2, result) {
          dispatch(hideLoadingIndication());
          if (err2) {
            (0, _error.logErrorWithMessage)(err2);
            dispatch(displayWarning('Had a problem exporting the account.'));
            reject(err2);
            return;
          }
          dispatch(showPrivateKey(result));
          resolve(result);
        });
      });
    });
  };
}
function exportAccounts(password, addresses) {
  return function (dispatch) {
    _loglevel.default.debug(`background.verifyPassword`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], function (err) {
        if (err) {
          _loglevel.default.error('Error in submitting password.');
          reject(err);
          return;
        }
        _loglevel.default.debug(`background.exportAccounts`);
        const accountPromises = addresses.map(address => new Promise((resolve2, reject2) => (0, _actionQueue.callBackgroundMethod)('exportAccount', [address, password], function (err2, result) {
          if (err2) {
            (0, _error.logErrorWithMessage)(err2);
            dispatch(displayWarning('Had a problem exporting the account.'));
            reject2(err2);
            return;
          }
          resolve2(result);
        })));
        resolve(Promise.all(accountPromises));
      });
    });
  };
}
function showPrivateKey(key) {
  return {
    type: actionConstants.SHOW_PRIVATE_KEY,
    payload: key
  };
}
function setAccountLabel(account, label) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setAccountLabel`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setAccountLabel', [account, label], err => {
        dispatch(hideLoadingIndication());
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        dispatch({
          type: actionConstants.SET_ACCOUNT_LABEL,
          value: {
            account,
            label
          }
        });
        resolve(account);
      });
    });
  };
}
function clearAccountDetails() {
  return {
    type: actionConstants.CLEAR_ACCOUNT_DETAILS
  };
}
function showSendTokenPage() {
  return {
    type: actionConstants.SHOW_SEND_TOKEN_PAGE
  };
}

// TODO: Lift to shared folder when it makes sense

function setFeatureFlag(feature, activated, notificationType) {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setFeatureFlag', [feature, activated], (err, updatedFeatureFlags) => {
        dispatch(hideLoadingIndication());
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        notificationType && dispatch(showModal({
          name: notificationType
        }));
        resolve(updatedFeatureFlags);
      });
    });
  };
}
function setPreference(preference, value) {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setPreference', [preference, value], (err, updatedPreferences) => {
        dispatch(hideLoadingIndication());
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        resolve(updatedPreferences);
      });
    });
  };
}
function setDefaultHomeActiveTabName(value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setDefaultHomeActiveTabName', [value]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setUseNativeCurrencyAsPrimaryCurrencyPreference(value) {
  return setPreference('useNativeCurrencyAsPrimaryCurrency', value);
}
function setHideZeroBalanceTokens(value) {
  return setPreference('hideZeroBalanceTokens', value);
}
function setShowFiatConversionOnTestnetsPreference(value) {
  return setPreference('showFiatInTestnets', value);
}
function setShowTestNetworks(value) {
  return setPreference('showTestNetworks', value);
}
function setAutoLockTimeLimit(value) {
  return setPreference('autoLockTimeLimit', value);
}
function setCompletedOnboarding() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('completeOnboarding');
      dispatch(completeOnboarding());
    } catch (err) {
      dispatch(displayWarning(err));
      throw err;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function completeOnboarding() {
  return {
    type: actionConstants.COMPLETE_ONBOARDING
  };
}
function setMouseUserState(isMouseUser) {
  return {
    type: actionConstants.SET_MOUSE_USER_STATE,
    payload: isMouseUser
  };
}
async function forceUpdateMetamaskState(dispatch) {
  _loglevel.default.debug(`background.getState`);
  let newState;
  try {
    newState = await (0, _actionQueue.submitRequestToBackground)('getState');
  } catch (error) {
    dispatch(displayWarning(error));
    throw error;
  }
  dispatch(updateMetamaskState(newState));
  return newState;
}
function toggleAccountMenu() {
  return {
    type: actionConstants.TOGGLE_ACCOUNT_MENU
  };
}
function toggleNetworkMenu() {
  return {
    type: actionConstants.TOGGLE_NETWORK_MENU
  };
}
function setAccountDetailsAddress(address) {
  return {
    type: actionConstants.SET_ACCOUNT_DETAILS_ADDRESS,
    payload: address
  };
}
function setParticipateInMetaMetrics(participationPreference) {
  return dispatch => {
    _loglevel.default.debug(`background.setParticipateInMetaMetrics`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setParticipateInMetaMetrics', [participationPreference], (err, metaMetricsId) => {
        _loglevel.default.debug(err);
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        dispatch({
          type: actionConstants.SET_PARTICIPATE_IN_METAMETRICS,
          value: participationPreference
        });
        resolve([participationPreference, metaMetricsId]);
      });
    });
  };
}
function setUseBlockie(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseBlockie`);
    (0, _actionQueue.callBackgroundMethod)('setUseBlockie', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseNonceField(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseNonceField`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setUseNonceField', [val]);
    } catch (error) {
      dispatch(displayWarning(error));
    }
    dispatch(hideLoadingIndication());
  };
}
function setUsePhishDetect(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUsePhishDetect`);
    (0, _actionQueue.callBackgroundMethod)('setUsePhishDetect', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseMultiAccountBalanceChecker(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseMultiAccountBalanceChecker`);
    (0, _actionQueue.callBackgroundMethod)('setUseMultiAccountBalanceChecker', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseTokenDetection(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseTokenDetection`);
    (0, _actionQueue.callBackgroundMethod)('setUseTokenDetection', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseNftDetection(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseNftDetection`);
    (0, _actionQueue.callBackgroundMethod)('setUseNftDetection', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseCurrencyRateCheck(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseCurrencyRateCheck`);
    (0, _actionQueue.callBackgroundMethod)('setUseCurrencyRateCheck', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setOpenSeaEnabled(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setOpenSeaEnabled`);
    (0, _actionQueue.callBackgroundMethod)('setOpenSeaEnabled', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}

// DetectTokenController
function detectNewTokens() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.detectNewTokens`);
    await (0, _actionQueue.submitRequestToBackground)('detectNewTokens');
    dispatch(hideLoadingIndication());
    await forceUpdateMetamaskState(dispatch);
  };
}
function detectNfts() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.detectNfts`);
    await (0, _actionQueue.submitRequestToBackground)('detectNfts');
    dispatch(hideLoadingIndication());
    await forceUpdateMetamaskState(dispatch);
  };
}
function setAdvancedGasFee(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setAdvancedGasFee`);
    (0, _actionQueue.callBackgroundMethod)('setAdvancedGasFee', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setTheme(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setTheme`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setTheme', [val]);
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function setIpfsGateway(val) {
  return dispatch => {
    _loglevel.default.debug(`background.setIpfsGateway`);
    (0, _actionQueue.callBackgroundMethod)('setIpfsGateway', [val], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function updateCurrentLocale(key) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _i18n.loadRelativeTimeFormatLocaleData)(key);
      const localeMessages = await (0, _i18n.fetchLocale)(key);
      const textDirection = await (0, _actionQueue.submitRequestToBackground)('setCurrentLocale', [key]);
      await (0, _switchDirection.default)(textDirection);
      dispatch(setCurrentLocale(key, localeMessages));
    } catch (error) {
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function setCurrentLocale(locale, messages) {
  return {
    type: actionConstants.SET_CURRENT_LOCALE,
    payload: {
      locale,
      messages
    }
  };
}
function setPendingTokens(pendingTokens) {
  const {
    customToken,
    selectedTokens = {},
    tokenAddressList = []
  } = pendingTokens;
  const tokens = customToken !== null && customToken !== void 0 && customToken.address && customToken !== null && customToken !== void 0 && customToken.symbol && Boolean((customToken === null || customToken === void 0 ? void 0 : customToken.decimals) >= 0 && (customToken === null || customToken === void 0 ? void 0 : customToken.decimals) <= 36) ? {
    ...selectedTokens,
    [customToken.address]: {
      ...customToken,
      isCustom: true
    }
  } : selectedTokens;
  Object.keys(tokens).forEach(tokenAddress => {
    tokens[tokenAddress].unlisted = !tokenAddressList.find(addr => (0, _stringUtils.isEqualCaseInsensitive)(addr, tokenAddress));
  });
  return {
    type: actionConstants.SET_PENDING_TOKENS,
    payload: tokens
  };
}

// Swaps

function setSwapsLiveness(swapsLiveness) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsLiveness', [swapsLiveness]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsFeatureFlags(featureFlags) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsFeatureFlags', [featureFlags]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function fetchAndSetQuotes(fetchParams, fetchParamsMetaData) {
  return async dispatch => {
    const [quotes, selectedAggId] = await (0, _actionQueue.submitRequestToBackground)('fetchAndSetQuotes', [fetchParams, fetchParamsMetaData]);
    await forceUpdateMetamaskState(dispatch);
    return [quotes, selectedAggId];
  };
}
function setSelectedQuoteAggId(aggId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSelectedQuoteAggId', [aggId]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsTokens(tokens) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTokens', [tokens]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function clearSwapsQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('clearSwapsQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}
function resetBackgroundSwapsState() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resetSwapsState');
    await forceUpdateMetamaskState(dispatch);
  };
}
function setCustomApproveTxData(data) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setCustomApproveTxData', [data]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsTxGasPrice(gasPrice) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasPrice', [gasPrice]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsTxGasLimit(gasLimit) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit, true]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function updateCustomSwapsEIP1559GasParams({
  gasLimit,
  maxFeePerGas,
  maxPriorityFeePerGas
}) {
  return async dispatch => {
    await Promise.all([(0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit]), (0, _actionQueue.submitRequestToBackground)('setSwapsTxMaxFeePerGas', [maxFeePerGas]), (0, _actionQueue.submitRequestToBackground)('setSwapsTxMaxFeePriorityPerGas', [maxPriorityFeePerGas])]);
    await forceUpdateMetamaskState(dispatch);
  };
}

// Note that the type widening happening below will resolve when we switch gas
// constants to TypeScript, at which point we'll get better type safety.
// TODO: Remove this comment when gas constants is typescript
function updateSwapsUserFeeLevel(swapsCustomUserFeeLevel) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsUserFeeLevel', [swapsCustomUserFeeLevel]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsQuotesPollingLimitEnabled(quotesPollingLimitEnabled) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsQuotesPollingLimitEnabled', [quotesPollingLimitEnabled]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function safeRefetchQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('safeRefetchQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}
function stopPollingForQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('stopPollingForQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}
function setBackgroundSwapRouteState(routeState) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setBackgroundSwapRouteState', [routeState]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function resetSwapsPostFetchState() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resetPostFetchState');
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsErrorKey(errorKey) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsErrorKey', [errorKey]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setInitialGasEstimate(initialAggId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setInitialGasEstimate', [initialAggId]);
    await forceUpdateMetamaskState(dispatch);
  };
}

// Permissions

function requestAccountsPermissionWithId(origin) {
  return async dispatch => {
    const id = await (0, _actionQueue.submitRequestToBackground)('requestAccountsPermissionWithId', [origin]);
    await forceUpdateMetamaskState(dispatch);
    return id;
  };
}

/**
 * Approves the permissions request.
 *
 * @param request - The permissions request to approve.
 */
function approvePermissionsRequest(request) {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('approvePermissionsRequest', [request], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
      forceUpdateMetamaskState(dispatch);
    });
  };
}

/**
 * Rejects the permissions request with the given ID.
 *
 * @param requestId - The id of the request to be rejected
 */
function rejectPermissionsRequest(requestId) {
  return dispatch => {
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('rejectPermissionsRequest', [requestId], err => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);
      });
    });
  };
}

/**
 * Clears the given permissions for the given origin.
 *
 * @param subjects
 */
function removePermissionsFor(subjects) {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('removePermissionsFor', [subjects], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}

// Pending Approvals

/**
 * Resolves a pending approval and closes the current notification window if no
 * further approvals are pending after the background state updates.
 *
 * @param id - The pending approval id
 * @param [value] - The value required to confirm a pending approval
 */
function resolvePendingApproval(id, value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resolvePendingApproval', [id, value]);
    // Before closing the current window, check if any additional confirmations
    // are added as a result of this confirmation being accepted
    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);
    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}

/**
 * Rejects a pending approval and closes the current notification window if no
 * further approvals are pending after the background state updates.
 *
 * @param id - The pending approval id
 * @param [error] - The error to throw when rejecting the approval
 */
function rejectPendingApproval(id, error) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('rejectPendingApproval', [id, error]);
    // Before closing the current window, check if any additional confirmations
    // are added as a result of this confirmation being rejected
    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);
    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}

/**
 * Rejects all approvals for the given messages
 *
 * @param messageList - The list of messages to reject
 */
function rejectAllMessages(messageList) {
  return async dispatch => {
    const userRejectionError = (0, _ethRpcErrors.serializeError)(_ethRpcErrors.ethErrors.provider.userRejectedRequest());
    await Promise.all(messageList.map(async ({
      id
    }) => await (0, _actionQueue.submitRequestToBackground)('rejectPendingApproval', [id, userRejectionError])));
    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);
    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}
function setFirstTimeFlowType(type) {
  return dispatch => {
    _loglevel.default.debug(`background.setFirstTimeFlowType`);
    (0, _actionQueue.callBackgroundMethod)('setFirstTimeFlowType', [type], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
    dispatch({
      type: actionConstants.SET_FIRST_TIME_FLOW_TYPE,
      value: type
    });
  };
}
function setSelectedNetworkConfigurationId(networkConfigurationId) {
  return {
    type: actionConstants.SET_SELECTED_NETWORK_CONFIGURATION_ID,
    payload: networkConfigurationId
  };
}
function setNewNetworkAdded({
  networkConfigurationId,
  nickname
}) {
  return {
    type: actionConstants.SET_NEW_NETWORK_ADDED,
    payload: {
      networkConfigurationId,
      nickname
    }
  };
}
function setNewNftAddedMessage(newNftAddedMessage) {
  return {
    type: actionConstants.SET_NEW_NFT_ADDED_MESSAGE,
    payload: newNftAddedMessage
  };
}
function setRemoveNftMessage(removeNftMessage) {
  return {
    type: actionConstants.SET_REMOVE_NFT_MESSAGE,
    payload: removeNftMessage
  };
}
function setNewTokensImported(newTokensImported) {
  return {
    type: actionConstants.SET_NEW_TOKENS_IMPORTED,
    payload: newTokensImported
  };
}
function setLastActiveTime() {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('setLastActiveTime', [], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setDismissSeedBackUpReminder(value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setDismissSeedBackUpReminder', [value]);
    dispatch(hideLoadingIndication());
  };
}
function setDisabledRpcMethodPreference(methodName, value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setDisabledRpcMethodPreference', [methodName, value]);
    dispatch(hideLoadingIndication());
  };
}
function getRpcMethodPreferences() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('getRpcMethodPreferences', []);
    dispatch(hideLoadingIndication());
  };
}
function setConnectedStatusPopoverHasBeenShown() {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setConnectedStatusPopoverHasBeenShown', [], err => {
      if ((0, _error.isErrorWithMessage)(err)) {
        throw new Error(err.message);
      }
    });
  };
}
function setRecoveryPhraseReminderHasBeenShown() {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setRecoveryPhraseReminderHasBeenShown', [], err => {
      if ((0, _error.isErrorWithMessage)(err)) {
        throw new Error(err.message);
      }
    });
  };
}
function setRecoveryPhraseReminderLastShown(lastShown) {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setRecoveryPhraseReminderLastShown', [lastShown], err => {
      if ((0, _error.isErrorWithMessage)(err)) {
        throw new Error(err.message);
      }
    });
  };
}
function setTermsOfUseLastAgreed(lastAgreed) {
  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('setTermsOfUseLastAgreed', [lastAgreed]);
  };
}
function setOutdatedBrowserWarningLastShown(lastShown) {
  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('setOutdatedBrowserWarningLastShown', [lastShown]);
  };
}
function getContractMethodData(data = '') {
  return async (dispatch, getState) => {
    const prefixedData = (0, _util.addHexPrefix)(data);
    const fourBytePrefix = prefixedData.slice(0, 10);
    if (fourBytePrefix.length < 10) {
      return {};
    }
    const {
      knownMethodData
    } = getState().metamask;
    if (knownMethodData !== null && knownMethodData !== void 0 && knownMethodData[fourBytePrefix] && Object.keys(knownMethodData[fourBytePrefix]).length !== 0) {
      return knownMethodData[fourBytePrefix];
    }
    _loglevel.default.debug(`loadingMethodData`);
    const {
      name,
      params
    } = await (0, _transactions.getMethodDataAsync)(fourBytePrefix);
    (0, _actionQueue.callBackgroundMethod)('addKnownMethodData', [fourBytePrefix, {
      name,
      params
    }], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
    return {
      name,
      params
    };
  };
}
function setSeedPhraseBackedUp(seedPhraseBackupState) {
  return dispatch => {
    _loglevel.default.debug(`background.setSeedPhraseBackedUp`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setSeedPhraseBackedUp', [seedPhraseBackupState], err => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);
      });
    });
  };
}
function setNextNonce(nextNonce) {
  return {
    type: actionConstants.SET_NEXT_NONCE,
    payload: nextNonce
  };
}

/**
 * This function initiates the nonceLock in the background for the given
 * address, and returns the next nonce to use. It then calls setNextNonce which
 * sets the nonce in state on the nextNonce key. NOTE: The nextNonce key is
 * actually ephemeral application state. It does not appear to be part of the
 * background state.
 *
 * TODO: move this to a different slice, MetaMask slice will eventually be
 * deprecated because it should not contain any ephemeral/app state but just
 * background state. In addition we should key nextNonce by address to prevent
 * accidental usage of a stale nonce as the call to getNextNonce only works for
 * the currently selected address.
 *
 * @returns
 */
function getNextNonce() {
  return async (dispatch, getState) => {
    const address = getState().metamask.selectedAddress;
    let nextNonce;
    try {
      nextNonce = await (0, _actionQueue.submitRequestToBackground)('getNextNonce', [address]);
    } catch (error) {
      dispatch(displayWarning(error));
      throw error;
    }
    dispatch(setNextNonce(nextNonce));
    return nextNonce;
  };
}
function setRequestAccountTabIds(requestAccountTabIds) {
  return {
    type: actionConstants.SET_REQUEST_ACCOUNT_TABS,
    payload: requestAccountTabIds
  };
}
function getRequestAccountTabIds() {
  return async dispatch => {
    const requestAccountTabIds = await (0, _actionQueue.submitRequestToBackground)('getRequestAccountTabIds');
    dispatch(setRequestAccountTabIds(requestAccountTabIds));
  };
}
function setOpenMetamaskTabsIDs(openMetaMaskTabIDs) {
  return {
    type: actionConstants.SET_OPEN_METAMASK_TAB_IDS,
    payload: openMetaMaskTabIDs
  };
}
function getOpenMetamaskTabsIds() {
  return async dispatch => {
    const openMetaMaskTabIDs = await (0, _actionQueue.submitRequestToBackground)('getOpenMetamaskTabsIds');
    dispatch(setOpenMetamaskTabsIDs(openMetaMaskTabIDs));
  };
}
function setLedgerTransportPreference(value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setLedgerTransportPreference', [value]);
    dispatch(hideLoadingIndication());
  };
}
async function attemptLedgerTransportCreation() {
  return await (0, _actionQueue.submitRequestToBackground)('attemptLedgerTransportCreation');
}

/**
 * This method deduplicates error reports to sentry by maintaining a state
 * object 'singleExceptions' in the app slice. The only place this state object
 * is accessed from is within this method, to check if it has already seen and
 * therefore tracked this error. This is to avoid overloading sentry with lots
 * of duplicate errors.
 *
 * @param error
 * @returns
 */
function captureSingleException(error) {
  return async (dispatch, getState) => {
    const {
      singleExceptions
    } = getState().appState;
    if (!(error in singleExceptions)) {
      dispatch({
        type: actionConstants.CAPTURE_SINGLE_EXCEPTION,
        value: error
      });
      (0, _browser.captureException)(Error(error));
    }
  };
}

// Wrappers around promisifedBackground
/**
 * The "actions" below are not actions nor action creators. They cannot use
 * dispatch nor should they be dispatched when used. Instead they can be
 * called directly. These wrappers will be moved into their location at some
 * point in the future.
 */

function estimateGas(params) {
  return (0, _actionQueue.submitRequestToBackground)('estimateGas', [params]);
}
async function updateTokenType(tokenAddress) {
  try {
    return await (0, _actionQueue.submitRequestToBackground)('updateTokenType', [tokenAddress]);
  } catch (error) {
    (0, _error.logErrorWithMessage)(error);
  }
  return undefined;
}

/**
 * initiates polling for gas fee estimates.
 *
 * @returns a unique identify of the polling request that can be used
 * to remove that request from consideration of whether polling needs to
 * continue.
 */
function getGasFeeEstimatesAndStartPolling() {
  return (0, _actionQueue.submitRequestToBackground)('getGasFeeEstimatesAndStartPolling');
}

/**
 * Informs the GasFeeController that a specific token is no longer requiring
 * gas fee estimates. If all tokens unsubscribe the controller stops polling.
 *
 * @param pollToken - Poll token received from calling
 * `getGasFeeEstimatesAndStartPolling`.
 */
function disconnectGasFeeEstimatePoller(pollToken) {
  return (0, _actionQueue.submitRequestToBackground)('disconnectGasFeeEstimatePoller', [pollToken]);
}
async function addPollingTokenToAppState(pollingToken) {
  return (0, _actionQueue.submitRequestToBackground)('addPollingTokenToAppState', [pollingToken, _app.POLLING_TOKEN_ENVIRONMENT_TYPES[(0, _util.getEnvironmentType)()]]);
}
async function removePollingTokenFromAppState(pollingToken) {
  return (0, _actionQueue.submitRequestToBackground)('removePollingTokenFromAppState', [pollingToken, _app.POLLING_TOKEN_ENVIRONMENT_TYPES[(0, _util.getEnvironmentType)()]]);
}
function getGasFeeTimeEstimate(maxPriorityFeePerGas, maxFeePerGas) {
  return (0, _actionQueue.submitRequestToBackground)('getGasFeeTimeEstimate', [maxPriorityFeePerGas, maxFeePerGas]);
}
async function closeNotificationPopup() {
  await (0, _actionQueue.submitRequestToBackground)('markNotificationPopupAsAutomaticallyClosed');
  global.platform.closeCurrentWindow();
}

/**
 * @param payload - details of the event to track
 * @param options - options for routing/handling of event
 * @returns
 */
function trackMetaMetricsEvent(payload, options) {
  return (0, _actionQueue.submitRequestToBackground)('trackMetaMetricsEvent', [{
    ...payload,
    actionId: (0, _actionQueue.generateActionId)()
  }, options]);
}
function createEventFragment(options) {
  const actionId = (0, _actionQueue.generateActionId)();
  return (0, _actionQueue.submitRequestToBackground)('createEventFragment', [{
    ...options,
    actionId
  }]);
}
function createTransactionEventFragment(transactionId, event) {
  const actionId = (0, _actionQueue.generateActionId)();
  return (0, _actionQueue.submitRequestToBackground)('createTransactionEventFragment', [transactionId, event, actionId]);
}
function updateEventFragment(id, payload) {
  return (0, _actionQueue.submitRequestToBackground)('updateEventFragment', [id, payload]);
}
function finalizeEventFragment(id, options) {
  return (0, _actionQueue.submitRequestToBackground)('finalizeEventFragment', [id, options]);
}

/**
 * @param payload - details of the page viewed
 * @param options - options for handling the page view
 */
function trackMetaMetricsPage(payload, options) {
  return (0, _actionQueue.submitRequestToBackground)('trackMetaMetricsPage', [{
    ...payload,
    actionId: (0, _actionQueue.generateActionId)()
  }, options]);
}
function updateViewedNotifications(notificationIdViewedStatusMap) {
  return (0, _actionQueue.submitRequestToBackground)('updateViewedNotifications', [notificationIdViewedStatusMap]);
}
async function setAlertEnabledness(alertId, enabledness) {
  await (0, _actionQueue.submitRequestToBackground)('setAlertEnabledness', [alertId, enabledness]);
}
async function setUnconnectedAccountAlertShown(origin) {
  await (0, _actionQueue.submitRequestToBackground)('setUnconnectedAccountAlertShown', [origin]);
}
async function setWeb3ShimUsageAlertDismissed(origin) {
  await (0, _actionQueue.submitRequestToBackground)('setWeb3ShimUsageAlertDismissed', [origin]);
}

// Smart Transactions Controller
async function setSmartTransactionsOptInStatus(optInState, prevOptInState) {
  trackMetaMetricsEvent({
    actionId: (0, _actionQueue.generateActionId)(),
    event: 'STX OptIn',
    category: _metametrics.MetaMetricsEventCategory.Swaps,
    sensitiveProperties: {
      stx_enabled: true,
      current_stx_enabled: true,
      stx_user_opt_in: optInState,
      stx_prev_user_opt_in: prevOptInState
    }
  });
  await (0, _actionQueue.submitRequestToBackground)('setSmartTransactionsOptInStatus', [optInState]);
}
function clearSmartTransactionFees() {
  (0, _actionQueue.submitRequestToBackground)('clearSmartTransactionFees');
}
function fetchSmartTransactionFees(unsignedTransaction, approveTxParams) {
  return async dispatch => {
    if (approveTxParams) {
      approveTxParams.value = '0x0';
    }
    try {
      const smartTransactionFees = await await (0, _actionQueue.submitRequestToBackground)('fetchSmartTransactionFees', [unsignedTransaction, approveTxParams]);
      dispatch({
        type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
        payload: null
      });
      return smartTransactionFees;
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}
const createSignedTransactions = async (unsignedTransaction, fees, areCancelTransactions) => {
  const unsignedTransactionsWithFees = fees.map(fee => {
    const unsignedTransactionWithFees = {
      ...unsignedTransaction,
      maxFeePerGas: (0, _conversion.decimalToHex)(fee.maxFeePerGas),
      maxPriorityFeePerGas: (0, _conversion.decimalToHex)(fee.maxPriorityFeePerGas),
      gas: areCancelTransactions ? (0, _conversion.decimalToHex)(21000) // It has to be 21000 for cancel transactions, otherwise the API would reject it.
      : unsignedTransaction.gas,
      value: unsignedTransaction.value
    };
    if (areCancelTransactions) {
      unsignedTransactionWithFees.to = unsignedTransactionWithFees.from;
      unsignedTransactionWithFees.data = '0x';
    }
    return unsignedTransactionWithFees;
  });
  const signedTransactions = await (0, _actionQueue.submitRequestToBackground)('approveTransactionsWithSameNonce', [unsignedTransactionsWithFees]);
  return signedTransactions;
};
function signAndSendSmartTransaction({
  unsignedTransaction,
  smartTransactionFees
}) {
  return async dispatch => {
    const signedTransactions = await createSignedTransactions(unsignedTransaction, smartTransactionFees.fees);
    const signedCanceledTransactions = await createSignedTransactions(unsignedTransaction, smartTransactionFees.cancelFees, true);
    try {
      const response = await (0, _actionQueue.submitRequestToBackground)('submitSignedTransactions', [{
        signedTransactions,
        signedCanceledTransactions,
        txParams: unsignedTransaction
      }]); // Returns e.g.: { uuid: 'dP23W7c2kt4FK9TmXOkz1UM2F20' }
      return response.uuid;
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}
function updateSmartTransaction(uuid, txMeta) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('updateSmartTransaction', [{
        uuid,
        ...txMeta
      }]);
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}
function setSmartTransactionsRefreshInterval(refreshInterval) {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('setStatusRefreshInterval', [refreshInterval]);
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
    }
  };
}
function cancelSmartTransaction(uuid) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('cancelSmartTransaction', [uuid]);
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}

// TODO: codeword NOT_A_THUNK @brad-decker
function fetchSmartTransactionsLiveness() {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('fetchSmartTransactionsLiveness');
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
    }
  };
}
function dismissSmartTransactionsErrorMessage() {
  return {
    type: actionConstants.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE
  };
}

// App state
function hideTestNetMessage() {
  return (0, _actionQueue.submitRequestToBackground)('setShowTestnetMessageInDropdown', [false]);
}
function hideBetaHeader() {
  return (0, _actionQueue.submitRequestToBackground)('setShowBetaHeader', [false]);
}
function hideProductTour() {
  return (0, _actionQueue.submitRequestToBackground)('setShowProductTour', [false]);
}

// TODO: codeword NOT_A_THUNK @brad-decker
function setTransactionSecurityCheckEnabled(transactionSecurityCheckEnabled) {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('setTransactionSecurityCheckEnabled', [transactionSecurityCheckEnabled]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
    }
  };
}
function setFirstTimeUsedNetwork(chainId) {
  return (0, _actionQueue.submitRequestToBackground)('setFirstTimeUsedNetwork', [chainId]);
}

// QR Hardware Wallets
async function submitQRHardwareCryptoHDKey(cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareCryptoHDKey', [cbor]);
}
async function submitQRHardwareCryptoAccount(cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareCryptoAccount', [cbor]);
}
function cancelSyncQRHardware() {
  return async dispatch => {
    dispatch(hideLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('cancelSyncQRHardware');
  };
}
async function submitQRHardwareSignature(requestId, cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareSignature', [requestId, cbor]);
}
function cancelQRHardwareSignRequest() {
  return async dispatch => {
    dispatch(hideLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('cancelQRHardwareSignRequest');
  };
}
function requestUserApproval({
  origin,
  type,
  requestData
}) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('requestUserApproval', [{
        origin,
        type,
        requestData
      }]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had trouble requesting user approval'));
    }
  };
}
async function getCurrentNetworkEIP1559Compatibility() {
  let networkEIP1559Compatibility;
  try {
    networkEIP1559Compatibility = await (0, _actionQueue.submitRequestToBackground)('getCurrentNetworkEIP1559Compatibility');
  } catch (error) {
    console.error(error);
  }
  return networkEIP1559Compatibility;
}


}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\actions.ts",}],
["F:\\metamask-extension\\ui\\store\\store.ts", {"../ducks":"F:\\metamask-extension\\ui\\ducks\\index.js","@reduxjs/toolkit":"F:\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js","remote-redux-devtools":"F:\\metamask-extension\\node_modules\\remote-redux-devtools\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cstore%5Cstore.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;
var _toolkit = require("@reduxjs/toolkit");
var _remoteReduxDevtools = _interopRequireDefault(require("remote-redux-devtools"));
var _ducks = _interopRequireDefault(require("../ducks"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * This interface is temporary and is copied from the message-manager.js file
 * and is the 'msgParams' key of the interface declared there. We should get a
 * universal Message type to use for this, the Message manager and all
 * the other types of messages.
 *
 * TODO: Replace this
 */

/**
 * This interface is a temporary interface to describe the state tree that is
 * sent from the background. Ideally we can build this using Types in the
 * backend when we compose the stores, then we can import it here and use it.
 *
 * Some of this is duplicated in the metamask redux duck. In *most* cases the
 * state received from the background takes precedence over anything in the
 * metamask reducer.
 */

function configureStore(preloadedState) {
  const debugModeEnabled = Boolean(true);
  const isDev = debugModeEnabled && !false;
  const enhancers = [];
  if (isDev) {
    enhancers.push((0, _remoteReduxDevtools.default)({
      name: 'MetaMask',
      hostname: 'localhost',
      port: 8000,
      realtime: true
    }));
  }
  return (0, _toolkit.configureStore)({
    reducer: _ducks.default,
    middleware: getDefaultMiddleware => getDefaultMiddleware({
      /**
       * We do not persist the redux tree for rehydration, so checking for
       * serializable state keys is not relevant for now. Any state that persists
       * is managed in the background. We may at some point want this, but we can
       * gradually implement by using the ignore options to ignore those actions
       * and state keys that are not serializable, preventing us from adding new
       * actions and state that would violate our ability to persist state keys.
       * NOTE: redux-thunk is included by default in the middleware below.
       */
      serializableCheck: false,
      /**
       * immutableCheck controls whether we get warnings about mutation of
       * state, which will be true in dev. However in test lavamoat complains
       * about something the middleware is doing. It would be good to figure
       * that out and enable this in test environments so that mutation
       * causes E2E failures.
       */
      immutableCheck: isDev ? {
        warnAfter: 100
      } : false
    }),
    devTools: false,
    enhancers,
    preloadedState
  });
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\store.ts",}],
["F:\\metamask-extension\\app\\scripts\\ui.js", {"../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../shared/lib/error-utils":"F:\\metamask-extension\\shared\\lib\\error-utils.js","../../shared/lib/ui-utils":"F:\\metamask-extension\\shared\\lib\\ui-utils.js","../../shared/modules/browser-runtime.utils":"F:\\metamask-extension\\shared\\modules\\browser-runtime.utils.js","../../shared/modules/mv3.utils":"F:\\metamask-extension\\shared\\modules\\mv3.utils.js","../../ui":"F:\\metamask-extension\\ui\\index.js","./lib/metaRPCClientFactory":"F:\\metamask-extension\\app\\scripts\\lib\\metaRPCClientFactory.js","./lib/stream-utils":"F:\\metamask-extension\\app\\scripts\\lib\\stream-utils.js","./lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","./platforms/extension":"F:\\metamask-extension\\app\\scripts\\platforms\\extension.js","@formatjs/intl-relativetimeformat/polyfill":"F:\\metamask-extension\\node_modules\\@formatjs\\intl-relativetimeformat\\polyfill.js","eth-query":"F:\\metamask-extension\\node_modules\\eth-query\\index.js","ethjs":"F:\\metamask-extension\\node_modules\\ethjs\\lib\\index.js","extension-port-stream":"F:\\metamask-extension\\node_modules\\extension-port-stream\\dist\\index.js","loglevel":"F:\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","react-devtools":"F:\\metamask-extension\\node_modules\\react-devtools\\index.js","web3-stream-provider":"F:\\metamask-extension\\node_modules\\web3-stream-provider\\index.js","webextension-polyfill":"F:\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Capp%5Cscripts%5Cui.js
      return function (require, module, exports) {
"use strict";

require("@formatjs/intl-relativetimeformat/polyfill");
require("react-devtools");
var _extensionPortStream = _interopRequireDefault(require("extension-port-stream"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _ethjs = _interopRequireDefault(require("ethjs"));
var _ethQuery = _interopRequireDefault(require("eth-query"));
var _web3StreamProvider = _interopRequireDefault(require("web3-stream-provider"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _ui = _interopRequireWildcard(require("../../ui"));
var _app = require("../../shared/constants/app");
var _mv = require("../../shared/modules/mv3.utils");
var _browserRuntime = require("../../shared/modules/browser-runtime.utils");
var _uiUtils = require("../../shared/lib/ui-utils");
var _errorUtils = require("../../shared/lib/error-utils");
var _extension = _interopRequireDefault(require("./platforms/extension"));
var _streamUtils = require("./lib/stream-utils");
var _util = require("./lib/util");
var _metaRPCClientFactory = _interopRequireDefault(require("./lib/metaRPCClientFactory"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// polyfills

// dev only, "react-devtools" import is skipped in prod builds

const container = document.getElementById('app-content');
const ONE_SECOND_IN_MILLISECONDS = 1_000;

// Service Worker Keep Alive Message Constants
const WORKER_KEEP_ALIVE_INTERVAL = ONE_SECOND_IN_MILLISECONDS;
const WORKER_KEEP_ALIVE_MESSAGE = 'WORKER_KEEP_ALIVE_MESSAGE';
const ACK_KEEP_ALIVE_WAIT_TIME = 60_000; // 1 minute
const ACK_KEEP_ALIVE_MESSAGE = 'ACK_KEEP_ALIVE_MESSAGE';

// Timeout for initializing phishing warning page.
const PHISHING_WARNING_PAGE_TIMEOUT = ONE_SECOND_IN_MILLISECONDS;
const PHISHING_WARNING_SW_STORAGE_KEY = 'phishing-warning-sw-registered';
let lastMessageReceivedTimestamp = Date.now();
let extensionPort;
let ackTimeoutToDisplayError;

/*
 * As long as UI is open it will keep sending messages to service worker
 * In service worker as this message is received
 * if service worker is inactive it is reactivated and script re-loaded
 * Time has been kept to 1000ms but can be reduced for even faster re-activation of service worker
 */
if (_mv.isManifestV3) {
  // Checking for SW aliveness (or stuckness) flow
  // 1. Check if we have an extensionPort, if yes
  // 2a. Send a keep alive message to the background via extensionPort
  // 2b. Add a listener to it (if not already added)
  // 3a. Set a timeout to check if we have received an ACK from background
  // 3b. If we have not received an ACK within ACK_KEEP_ALIVE_WAIT_TIME,
  //     we know the background is stuck or dead
  // 4. If we recieve an ACK_KEEP_ALIVE_MESSAGE from the service worker, we know it is alive

  const ackKeepAliveListener = message => {
    if (message.name === ACK_KEEP_ALIVE_MESSAGE) {
      lastMessageReceivedTimestamp = Date.now();
      clearTimeout(ackTimeoutToDisplayError);
    }
  };
  const keepAliveInterval = setInterval(() => {
    _webextensionPolyfill.default.runtime.sendMessage({
      name: WORKER_KEEP_ALIVE_MESSAGE
    });
    if (extensionPort !== null && extensionPort !== undefined) {
      extensionPort.postMessage({
        name: WORKER_KEEP_ALIVE_MESSAGE
      });
      if (extensionPort.onMessage.hasListener(ackKeepAliveListener) === false) {
        extensionPort.onMessage.addListener(ackKeepAliveListener);
      }
    }
    ackTimeoutToDisplayError = setTimeout(() => {
      if (Date.now() - lastMessageReceivedTimestamp > ACK_KEEP_ALIVE_WAIT_TIME) {
        clearInterval(keepAliveInterval);
        displayCriticalError('somethingIsWrong', new Error("Something's gone wrong. Try reloading the page."));
      }
    }, ACK_KEEP_ALIVE_WAIT_TIME);
  }, WORKER_KEEP_ALIVE_INTERVAL);
}
start().catch(_loglevel.default.error);
async function start() {
  // create platform global
  global.platform = new _extension.default();

  // identify window type (popup, notification)
  const windowType = (0, _util.getEnvironmentType)();
  let isUIInitialised = false;

  // setup stream to background
  extensionPort = _webextensionPolyfill.default.runtime.connect({
    name: windowType
  });
  let connectionStream = new _extensionPortStream.default(extensionPort);
  const activeTab = await queryCurrentActiveTab(windowType);
  let loadPhishingWarningPage;
  if (_mv.isManifestV3) {
    /*
     * In case of MV3 the issue of blank screen was very frequent, it is caused by UI initialising before background is ready to send state.
     * Code below ensures that UI is rendered only after "CONNECTION_READY" or "startUISync"
     * messages are received thus the background is ready, and ensures that streams and
     * phishing warning page load only after the "startUISync" message is received.
     * In case the UI is already rendered, only update the streams.
     */
    const messageListener = async message => {
      var _message$data;
      if ((message === null || message === void 0 ? void 0 : (_message$data = message.data) === null || _message$data === void 0 ? void 0 : _message$data.method) === 'startUISync') {
        if (isUIInitialised) {
          // Currently when service worker is revived we create new streams
          // in later version we might try to improve it by reviving same streams.
          updateUiStreams();
        } else {
          initializeUiWithTab(activeTab);
        }
        await loadPhishingWarningPage();
      }
    };

    /**
     * An error thrown if the phishing warning page takes too long to load.
     */
    class PhishingWarningPageTimeoutError extends Error {
      constructor() {
        super('Timeout failed');
      }
    }

    /**
     * Load the phishing warning page temporarily to ensure the service
     * worker has been registered, so that the warning page works offline.
     */
    loadPhishingWarningPage = async function () {
      // Check session storage for whether we've already initialized the phishing warning
      // service worker in this browser session and do not attempt to re-initialize if so.
      const phishingSWMemoryFetch = await _webextensionPolyfill.default.storage.session.get(PHISHING_WARNING_SW_STORAGE_KEY);
      if (phishingSWMemoryFetch[PHISHING_WARNING_SW_STORAGE_KEY]) {
        return;
      }
      const currentPlatform = (0, _util.getPlatform)();
      let iframe;
      try {
        const extensionStartupPhishingPageUrl = new URL("https://metamask.github.io/phishing-warning/v2.1.0/");
        // The `extensionStartup` hash signals to the phishing warning page that it should not bother
        // setting up streams for user interaction. Otherwise this page load would cause a console
        // error.
        extensionStartupPhishingPageUrl.hash = '#extensionStartup';
        iframe = window.document.createElement('iframe');
        iframe.setAttribute('src', extensionStartupPhishingPageUrl.href);
        iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');

        // Create "deferred Promise" to allow passing resolve/reject to event handlers
        let deferredResolve;
        let deferredReject;
        const loadComplete = new Promise((resolve, reject) => {
          deferredResolve = resolve;
          deferredReject = reject;
        });

        // The load event is emitted once loading has completed, even if the loading failed.
        // If loading failed we can't do anything about it, so we don't need to check.
        iframe.addEventListener('load', deferredResolve);

        // This step initiates the page loading.
        window.document.body.appendChild(iframe);

        // This timeout ensures that this iframe gets cleaned up in a reasonable
        // timeframe, and ensures that the "initialization complete" message
        // doesn't get delayed too long.
        setTimeout(() => deferredReject(new PhishingWarningPageTimeoutError()), PHISHING_WARNING_PAGE_TIMEOUT);
        await loadComplete;

        // store a flag in sessions storage that we've already loaded the service worker
        // and don't need to try again
        if (currentPlatform === _app.PLATFORM_FIREFOX) {
          // Firefox does not yet support the storage.session API introduced in MV3
          // Tracked here: https://bugzilla.mozilla.org/show_bug.cgi?id=1687778
          console.error('Firefox does not support required MV3 APIs: Phishing warning page iframe and service worker will reload each page refresh');
        } else {
          _webextensionPolyfill.default.storage.session.set({
            [PHISHING_WARNING_SW_STORAGE_KEY]: true
          });
        }
      } catch (error) {
        if (error instanceof PhishingWarningPageTimeoutError) {
          console.warn('Phishing warning page timeout; page not guaranteed to work offline.');
        } else {
          console.error('Failed to initialize phishing warning page', error);
        }
      } finally {
        if (iframe) {
          iframe.remove();
        }
      }
    };

    // resetExtensionStreamAndListeners takes care to remove listeners from closed streams
    // it also creates new streams and attaches event listeners to them
    const resetExtensionStreamAndListeners = () => {
      extensionPort.onMessage.removeListener(messageListener);
      extensionPort.onDisconnect.removeListener(resetExtensionStreamAndListeners);

      // message below will try to activate service worker
      // in MV3 is likely that reason of stream closing is service worker going in-active
      _webextensionPolyfill.default.runtime.sendMessage({
        name: WORKER_KEEP_ALIVE_MESSAGE
      });
      extensionPort = _webextensionPolyfill.default.runtime.connect({
        name: windowType
      });
      connectionStream = new _extensionPortStream.default(extensionPort);
      extensionPort.onMessage.addListener(messageListener);
      extensionPort.onDisconnect.addListener(resetExtensionStreamAndListeners);
    };
    extensionPort.onMessage.addListener(messageListener);
    extensionPort.onDisconnect.addListener(resetExtensionStreamAndListeners);
  } else {
    initializeUiWithTab(activeTab);
  }
  function initializeUiWithTab(tab) {
    initializeUi(tab, connectionStream, (err, store) => {
      if (err) {
        // if there's an error, store will be = metamaskState
        displayCriticalError('troubleStarting', err, store);
        return;
      }
      isUIInitialised = true;
      const state = store.getState();
      const {
        metamask: {
          completedOnboarding
        } = {}
      } = state;
      if (!completedOnboarding && windowType !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        global.platform.openExtensionInBrowser();
      }
    });
  }

  // Function to update new backgroundConnection in the UI
  function updateUiStreams() {
    connectToAccountManager(connectionStream, (err, backgroundConnection) => {
      if (err) {
        displayCriticalError('troubleStarting', err);
        return;
      }
      (0, _ui.updateBackgroundConnection)(backgroundConnection);
    });
  }
}
async function queryCurrentActiveTab(windowType) {
  // At the time of writing we only have the `activeTab` permission which means
  // that this query will only succeed in the popup context (i.e. after a "browserAction")
  if (windowType !== _app.ENVIRONMENT_TYPE_POPUP) {
    return {};
  }
  const tabs = await _webextensionPolyfill.default.tabs.query({
    active: true,
    currentWindow: true
  }).catch(e => {
    (0, _browserRuntime.checkForLastErrorAndLog)() || _loglevel.default.error(e);
  });
  const [activeTab] = tabs;
  const {
    id,
    title,
    url
  } = activeTab;
  const {
    origin,
    protocol
  } = url ? new URL(url) : {};
  if (!origin || origin === 'null') {
    return {};
  }
  return {
    id,
    title,
    origin,
    protocol,
    url
  };
}
function initializeUi(activeTab, connectionStream, cb) {
  connectToAccountManager(connectionStream, (err, backgroundConnection) => {
    if (err) {
      cb(err, null);
      return;
    }
    (0, _ui.default)({
      activeTab,
      container,
      backgroundConnection
    }, cb);
  });
}
async function displayCriticalError(errorKey, err, metamaskState) {
  const html = await (0, _errorUtils.getErrorHtml)(errorKey, _uiUtils.SUPPORT_LINK, metamaskState);
  container.innerHTML = html;
  const button = document.getElementById('critical-error-button');
  button === null || button === void 0 ? void 0 : button.addEventListener('click', _ => {
    _webextensionPolyfill.default.runtime.reload();
  });
  _loglevel.default.error(err.stack);
  throw err;
}

/**
 * Establishes a connection to the background and a Web3 provider
 *
 * @param {PortDuplexStream} connectionStream - PortStream instance establishing a background connection
 * @param {Function} cb - Called when controller connection is established
 */
function connectToAccountManager(connectionStream, cb) {
  const mx = (0, _streamUtils.setupMultiplex)(connectionStream);
  const controllerConnectionStream = mx.createStream('controller');
  setupControllerConnection(controllerConnectionStream, cb);
  setupWeb3Connection(mx.createStream('provider'));
}

/**
 * Establishes a streamed connection to a Web3 provider
 *
 * @param {PortDuplexStream} connectionStream - PortStream instance establishing a background connection
 */
function setupWeb3Connection(connectionStream) {
  const providerStream = new _web3StreamProvider.default();
  providerStream.pipe(connectionStream).pipe(providerStream);
  connectionStream.on('error', console.error.bind(console));
  providerStream.on('error', console.error.bind(console));
  global.ethereumProvider = providerStream;
  global.ethQuery = new _ethQuery.default(providerStream);
  global.eth = new _ethjs.default(providerStream);
}

/**
 * Establishes a streamed connection to the background account manager
 *
 * @param {PortDuplexStream} controllerConnectionStream - PortStream instance establishing a background connection
 * @param {Function} cb - Called when the remote account manager connection is established
 */
function setupControllerConnection(controllerConnectionStream, cb) {
  const backgroundRPC = (0, _metaRPCClientFactory.default)(controllerConnectionStream);
  cb(null, backgroundRPC);
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\ui.js",}]],["F:\\metamask-extension\\app\\scripts\\ui.js"],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
