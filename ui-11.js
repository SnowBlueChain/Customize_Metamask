LavaPack.loadBundle([
["F:\\metamask-extension\\ui\\pages\\settings\\alerts-tab\\alerts-tab.js", {"../../../../shared/constants/alerts":"F:\\metamask-extension\\shared\\constants\\alerts.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/toggle-button":"F:\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../components/ui/tooltip":"F:\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Calerts-tab%5Calerts-tab.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _alerts = require("../../../../shared/constants/alerts");
var _tooltip = _interopRequireDefault(require("../../../components/ui/tooltip"));
var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));
var _actions = require("../../../store/actions");
var _metamask = require("../../../ducks/metamask/metamask");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _settingsSearch = require("../../../helpers/utils/settings-search");
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AlertSettingsEntry = ({
  alertId,
  description,
  title
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const settingsRefs = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    (0, _settingsSearch.handleSettingsRefs)(t, t('alerts'), settingsRefs);
  }, [settingsRefs, t]);
  const isEnabled = (0, _reactRedux.useSelector)(state => (0, _metamask.getAlertEnabledness)(state)[alertId]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    ref: settingsRefs,
    className: "alerts-tab__item"
  }, /*#__PURE__*/_react.default.createElement("span", null, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "alerts-tab__description-container"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: description,
    wrapperClassName: "alerts-tab__description"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Info,
    className: "alerts-tab__description__icon"
  })), /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
    offLabel: t('off'),
    onLabel: t('on'),
    onToggle: () => (0, _actions.setAlertEnabledness)(alertId, !isEnabled),
    value: isEnabled
  }))));
};
AlertSettingsEntry.propTypes = {
  alertId: _propTypes.default.string.isRequired,
  description: _propTypes.default.string.isRequired,
  title: _propTypes.default.string.isRequired
};
const AlertsTab = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const alertConfig = {
    [_alerts.AlertTypes.unconnectedAccount]: {
      title: t('alertSettingsUnconnectedAccount'),
      description: t('alertSettingsUnconnectedAccountDescription')
    },
    [_alerts.AlertTypes.web3ShimUsage]: {
      title: t('alertSettingsWeb3ShimUsage'),
      description: t('alertSettingsWeb3ShimUsageDescription')
    }
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "alerts-tab__body"
  }, Object.entries(alertConfig).map(([alertId, {
    title,
    description
  }], _) => /*#__PURE__*/_react.default.createElement(AlertSettingsEntry, {
    alertId: alertId,
    description: description,
    key: alertId,
    title: title
  })));
};
var _default = AlertsTab;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\alerts-tab\\alerts-tab.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\alerts-tab\\index.js", {"./alerts-tab":"F:\\metamask-extension\\ui\\pages\\settings\\alerts-tab\\alerts-tab.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Calerts-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _alertsTab.default;
  }
});
var _alertsTab = _interopRequireDefault(require("./alerts-tab"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\alerts-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\add-contact\\add-contact.component.js", {"../../../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../components/ui/identicon":"F:\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../../components/ui/page-container/page-container-footer":"F:\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","../../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../send/send-content/add-recipient/domain-input":"F:\\metamask-extension\\ui\\pages\\send\\send-content\\add-recipient\\domain-input.js","../../../send/send.constants":"F:\\metamask-extension\\ui\\pages\\send\\send.constants.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cadd-contact%5Cadd-contact.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));
var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));
var _routes = require("../../../../helpers/constants/routes");
var _util = require("../../../../helpers/utils/util");
var _domainInput = _interopRequireDefault(require("../../../send/send-content/add-recipient/domain-input"));
var _pageContainerFooter = _interopRequireDefault(require("../../../../components/ui/page-container/page-container-footer"));
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _send = require("../../../send/send.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class AddContact extends _react.PureComponent {
  constructor(props) {
    super(props);
    _defineProperty(this, "state", {
      newName: '',
      ethAddress: '',
      error: '',
      input: ''
    });
    _defineProperty(this, "validate", address => {
      const valid = !(0, _hexstringUtils.isBurnAddress)(address) && (0, _hexstringUtils.isValidHexAddress)(address, {
        mixedCaseUseChecksum: true
      });
      const validEnsAddress = (0, _util.isValidDomainName)(address);
      if (valid || validEnsAddress || address === '') {
        this.setState({
          error: '',
          ethAddress: address
        });
      } else {
        this.setState({
          error: _send.INVALID_RECIPIENT_ADDRESS_ERROR
        });
      }
    });
    _defineProperty(this, "onChange", input => {
      this.setState({
        input
      });
      this.dValidate(input);
    });
    this.dValidate = (0, _lodash.debounce)(this.validate, 500);
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.qrCodeData) {
      if (nextProps.qrCodeData.type === 'address') {
        const {
          domainResolution
        } = this.props;
        const scannedAddress = nextProps.qrCodeData.values.address.toLowerCase();
        const currentAddress = domainResolution || this.state.ethAddress;
        if (currentAddress.toLowerCase() !== scannedAddress) {
          this.setState({
            input: scannedAddress
          });
          this.validate(scannedAddress);
          // Clean up QR code data after handling
          this.props.qrCodeDetected(null);
        }
      }
    }
  }
  renderInput() {
    return /*#__PURE__*/_react.default.createElement(_domainInput.default, {
      scanQrCode: _ => {
        this.props.scanQrCode();
      },
      onChange: this.onChange,
      onPaste: text => {
        this.setState({
          input: text
        });
        this.validate(text);
      },
      onReset: () => {
        this.props.resetDomainResolution();
        this.setState({
          ethAddress: '',
          input: ''
        });
      },
      userInput: this.state.input
    });
  }
  render() {
    const {
      t
    } = this.context;
    const {
      history,
      addToAddressBook,
      domainError,
      domainResolution
    } = this.props;
    const errorToRender = domainError || this.state.error;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row address-book__add-contact"
    }, domainResolution && /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: domainResolution,
      diameter: 60
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__value"
    }, domainResolution)), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__add-contact__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group address-book__add-contact__content__username"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('userName')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "nickname",
      value: this.state.newName,
      onChange: e => this.setState({
        newName: e.target.value
      }),
      fullWidth: true,
      margin: "dense"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('ethereumPublicAddress')), this.renderInput(), errorToRender && /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__add-contact__error"
    }, t(errorToRender)))), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      cancelText: this.context.t('cancel'),
      disabled: Boolean(this.state.error || !this.state.ethAddress || !this.state.newName.trim()),
      onSubmit: async () => {
        await addToAddressBook(domainResolution || this.state.ethAddress, this.state.newName);
        history.push(_routes.CONTACT_LIST_ROUTE);
      },
      onCancel: () => {
        history.push(_routes.CONTACT_LIST_ROUTE);
      },
      submitText: this.context.t('save')
    }));
  }
}
exports.default = AddContact;
_defineProperty(AddContact, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(AddContact, "propTypes", {
  addToAddressBook: _propTypes.default.func,
  history: _propTypes.default.object,
  scanQrCode: _propTypes.default.func,
  qrCodeData: _propTypes.default.object /* eslint-disable-line react/no-unused-prop-types */,
  qrCodeDetected: _propTypes.default.func,
  domainResolution: _propTypes.default.string,
  domainError: _propTypes.default.string,
  resetDomainResolution: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\add-contact\\add-contact.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\add-contact\\add-contact.container.js", {"../../../../ducks/app/app":"F:\\metamask-extension\\ui\\ducks\\app\\app.ts","../../../../ducks/domains":"F:\\metamask-extension\\ui\\ducks\\domains.js","../../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./add-contact.component":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\add-contact\\add-contact.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cadd-contact%5Cadd-contact.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../../../store/actions");
var _app = require("../../../../ducks/app/app");
var _domains = require("../../../../ducks/domains");
var _addContact = _interopRequireDefault(require("./add-contact.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    qrCodeData: (0, _app.getQrCodeData)(state),
    domainError: (0, _domains.getDomainError)(state),
    domainResolution: (0, _domains.getDomainResolution)(state)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    addToAddressBook: (recipient, nickname) => dispatch((0, _actions.addToAddressBook)(recipient, nickname)),
    scanQrCode: () => dispatch((0, _actions.showQrScanner)()),
    qrCodeDetected: data => dispatch((0, _actions.qrCodeDetected)(data)),
    resetDomainResolution: () => dispatch((0, _domains.resetDomainResolution)())
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_addContact.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\add-contact\\add-contact.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\add-contact\\index.js", {"./add-contact.container":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\add-contact\\add-contact.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cadd-contact%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _addContact.default;
  }
});
var _addContact = _interopRequireDefault(require("./add-contact.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\add-contact\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\contact-list-tab.component.js", {"../../../components/app/contact-list":"F:\\metamask-extension\\ui\\components\\app\\contact-list\\index.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","./add-contact":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\add-contact\\index.js","./edit-contact":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\edit-contact\\index.js","./view-contact":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\view-contact\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Ccontact-list-tab.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _contactList = _interopRequireDefault(require("../../../components/app/contact-list"));
var _routes = require("../../../helpers/constants/routes");
var _settingsSearch = require("../../../helpers/utils/settings-search");
var _componentLibrary = require("../../../components/component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _editContact = _interopRequireDefault(require("./edit-contact"));
var _addContact = _interopRequireDefault(require("./add-contact"));
var _viewContact = _interopRequireDefault(require("./view-contact"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ContactListTab extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "settingsRefs", Array((0, _settingsSearch.getNumberOfSettingsInSection)(this.context.t, this.context.t('contacts'))).fill(undefined).map(() => {
      return /*#__PURE__*/_react.default.createRef();
    }));
  }
  componentDidUpdate() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('contacts'), this.settingsRefs);
  }
  componentDidMount() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('contacts'), this.settingsRefs);
  }
  renderAddresses() {
    const {
      addressBook,
      history,
      selectedAddress
    } = this.props;
    const contacts = addressBook.filter(({
      name
    }) => Boolean(name));
    const nonContacts = addressBook.filter(({
      name
    }) => !name);
    const {
      t
    } = this.context;
    if (addressBook.length) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_contactList.default, {
        searchForContacts: () => contacts,
        searchForRecents: () => nonContacts,
        selectRecipient: address => {
          history.push(`${_routes.CONTACT_VIEW_ROUTE}/${address}`);
        },
        selectedAddress: selectedAddress
      }));
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__container"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Book,
      color: _designSystem.IconColor.iconMuted,
      className: "address-book__icon",
      size: _componentLibrary.IconSize.Xl
    }), /*#__PURE__*/_react.default.createElement("h4", {
      className: "address-book__title"
    }, t('buildContactList')), /*#__PURE__*/_react.default.createElement("p", {
      className: "address-book__sub-title"
    }, t('addFriendsAndAddresses')), /*#__PURE__*/_react.default.createElement("button", {
      className: "address-book__link",
      onClick: () => {
        history.push(_routes.CONTACT_ADD_ROUTE);
      }
    }, "+ ", t('addContact'))));
  }
  renderAddButton() {
    const {
      history,
      viewingContact,
      editingContact
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
      className: (0, _classnames.default)('address-book-add-button__button', {
        'address-book-add-button__button--hidden': viewingContact || editingContact
      }),
      onClick: () => {
        history.push(_routes.CONTACT_ADD_ROUTE);
      },
      margin: 4,
      size: _designSystem.Size.LG
    }, this.context.t('addContact'));
  }
  renderContactContent() {
    const {
      viewingContact,
      editingContact,
      addingContact
    } = this.props;
    let ContactContentComponent = null;
    if (viewingContact) {
      ContactContentComponent = _viewContact.default;
    } else if (editingContact) {
      ContactContentComponent = _editContact.default;
    } else if (addingContact) {
      ContactContentComponent = _addContact.default;
    }
    return ContactContentComponent && /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book-contact-content"
    }, /*#__PURE__*/_react.default.createElement(ContactContentComponent, null));
  }
  renderAddressBookContent() {
    const {
      hideAddressBook
    } = this.props;
    if (!hideAddressBook) {
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this.settingsRefs[0],
        className: "address-book"
      }, this.renderAddresses());
    }
    return null;
  }
  render() {
    const {
      addingContact,
      addressBook,
      currentPath
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book-wrapper"
    }, this.renderAddressBookContent(), this.renderContactContent(), currentPath === _routes.CONTACT_LIST_ROUTE && !addingContact && addressBook.length > 0 ? this.renderAddButton() : null);
  }
}
exports.default = ContactListTab;
_defineProperty(ContactListTab, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(ContactListTab, "propTypes", {
  addressBook: _propTypes.default.array,
  history: _propTypes.default.object,
  selectedAddress: _propTypes.default.string,
  viewingContact: _propTypes.default.bool,
  editingContact: _propTypes.default.bool,
  addingContact: _propTypes.default.bool,
  hideAddressBook: _propTypes.default.bool,
  currentPath: _propTypes.default.string
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\contact-list-tab.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\contact-list-tab.container.js", {"../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","./contact-list-tab.component":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\contact-list-tab.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Ccontact-list-tab.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _contactListTab = _interopRequireDefault(require("./contact-list-tab.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    location
  } = ownProps;
  const {
    pathname
  } = location;
  const pathNameTail = pathname.match(/[^/]+$/u)[0];
  const pathNameTailIsAddress = pathNameTail.includes('0x');
  const viewingContact = Boolean(pathname.match(_routes.CONTACT_VIEW_ROUTE));
  const editingContact = Boolean(pathname.match(_routes.CONTACT_EDIT_ROUTE));
  const addingContact = Boolean(pathname.match(_routes.CONTACT_ADD_ROUTE));
  const hideAddressBook = viewingContact || editingContact || addingContact;
  return {
    viewingContact,
    editingContact,
    addingContact,
    addressBook: (0, _selectors.getAddressBook)(state),
    selectedAddress: pathNameTailIsAddress ? pathNameTail : '',
    hideAddressBook,
    currentPath: pathname
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(_contactListTab.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\contact-list-tab.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\edit-contact\\edit-contact.component.js", {"../../../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../components/ui/button/button.component":"F:\\metamask-extension\\ui\\components\\ui\\button\\button.component.js","../../../../components/ui/page-container/page-container-footer":"F:\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","../../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cedit-contact%5Cedit-contact.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _button = _interopRequireDefault(require("../../../../components/ui/button/button.component"));
var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));
var _pageContainerFooter = _interopRequireDefault(require("../../../../components/ui/page-container/page-container-footer"));
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _componentLibrary = require("../../../../components/component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class EditContact extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      newName: this.props.name,
      newAddress: this.props.address,
      newMemo: this.props.memo,
      error: ''
    });
  }
  render() {
    const {
      t
    } = this.context;
    const {
      address,
      addToAddressBook,
      chainId,
      history,
      listRoute,
      memo,
      name,
      removeFromAddressBook,
      viewRoute
    } = this.props;
    if (!address) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: listRoute
        }
      });
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row address-book__edit-contact"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Box, {
      className: "settings-page__header address-book__header--edit",
      paddingLeft: 6,
      paddingRight: 6
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Box, {
      display: _designSystem.Display.Flex,
      alignItems: _designSystem.AlignItems.center
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarAccount, {
      size: _componentLibrary.AvatarAccountSize.Lg,
      address: address
    }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      className: "address-book__header__name",
      variant: _designSystem.TextVariant.bodyLgMedium,
      marginInlineStart: 4
    }, name || address)), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "settings-page__address-book-button",
      onClick: async () => {
        await removeFromAddressBook(chainId, address);
        history.push(listRoute);
      }
    }, t('deleteContact'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__edit-contact__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('userName')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "nickname",
      placeholder: this.context.t('addAlias'),
      value: this.state.newName,
      onChange: e => this.setState({
        newName: e.target.value
      }),
      fullWidth: true,
      margin: "dense"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('ethereumPublicAddress')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "address",
      value: this.state.newAddress,
      error: this.state.error,
      onChange: e => this.setState({
        newAddress: e.target.value
      }),
      fullWidth: true,
      multiline: true,
      rows: 4,
      margin: "dense",
      classes: {
        inputMultiline: 'address-book__view-contact__address__text-area',
        inputRoot: 'address-book__view-contact__address'
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label--capitalized"
    }, t('memo')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "memo",
      placeholder: memo,
      value: this.state.newMemo,
      onChange: e => this.setState({
        newMemo: e.target.value
      }),
      fullWidth: true,
      margin: "dense",
      multiline: true,
      rows: 3,
      classes: {
        inputMultiline: 'address-book__view-contact__text-area',
        inputRoot: 'address-book__view-contact__text-area-wrapper'
      }
    }))), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      cancelText: this.context.t('cancel'),
      onSubmit: async () => {
        if (this.state.newAddress !== '' && this.state.newAddress !== address) {
          // if the user makes a valid change to the address field, remove the original address
          if (!(0, _hexstringUtils.isBurnAddress)(this.state.newAddress) && (0, _hexstringUtils.isValidHexAddress)(this.state.newAddress, {
            mixedCaseUseChecksum: true
          })) {
            await removeFromAddressBook(chainId, address);
            await addToAddressBook(this.state.newAddress, this.state.newName || name, this.state.newMemo || memo);
            history.push(listRoute);
          } else {
            this.setState({
              error: this.context.t('invalidAddress')
            });
          }
        } else {
          // update name
          await addToAddressBook(address, this.state.newName || name, this.state.newMemo || memo);
          history.push(listRoute);
        }
      },
      onCancel: () => {
        history.push(`${viewRoute}/${address}`);
      },
      submitText: this.context.t('save'),
      disabled: this.state.newName === name && this.state.newAddress === address && this.state.newMemo === memo || !this.state.newName.trim()
    }));
  }
}
exports.default = EditContact;
_defineProperty(EditContact, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(EditContact, "propTypes", {
  addToAddressBook: _propTypes.default.func,
  removeFromAddressBook: _propTypes.default.func,
  history: _propTypes.default.object,
  name: _propTypes.default.string,
  address: _propTypes.default.string,
  chainId: _propTypes.default.string,
  memo: _propTypes.default.string,
  viewRoute: _propTypes.default.string,
  listRoute: _propTypes.default.string
});
_defineProperty(EditContact, "defaultProps", {
  name: '',
  memo: ''
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\edit-contact\\edit-contact.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\edit-contact\\edit-contact.container.js", {"../../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./edit-contact.component":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\edit-contact\\edit-contact.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cedit-contact%5Cedit-contact.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _selectors = require("../../../../selectors");
var _metamask = require("../../../../ducks/metamask/metamask");
var _routes = require("../../../../helpers/constants/routes");
var _actions = require("../../../../store/actions");
var _editContact = _interopRequireDefault(require("./edit-contact.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    location
  } = ownProps;
  const {
    pathname
  } = location;
  const pathNameTail = pathname.match(/[^/]+$/u)[0];
  const pathNameTailIsAddress = pathNameTail.includes('0x');
  const address = pathNameTailIsAddress ? pathNameTail.toLowerCase() : ownProps.match.params.id;
  const contact = (0, _selectors.getAddressBookEntry)(state, address) || state.metamask.identities[address];
  const {
    memo,
    name
  } = contact || {};
  const {
    chainId
  } = (0, _metamask.getProviderConfig)(state);
  return {
    address: contact ? address : null,
    chainId,
    name,
    memo,
    viewRoute: _routes.CONTACT_VIEW_ROUTE,
    listRoute: _routes.CONTACT_LIST_ROUTE
  };
};
const mapDispatchToProps = dispatch => {
  return {
    addToAddressBook: (recipient, nickname, memo) => dispatch((0, _actions.addToAddressBook)(recipient, nickname, memo)),
    removeFromAddressBook: (chainId, addressToRemove) => dispatch((0, _actions.removeFromAddressBook)(chainId, addressToRemove))
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_editContact.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\edit-contact\\edit-contact.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\edit-contact\\index.js", {"./edit-contact.container":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\edit-contact\\edit-contact.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cedit-contact%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editContact.default;
  }
});
var _editContact = _interopRequireDefault(require("./edit-contact.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\edit-contact\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\index.js", {"./contact-list-tab.container":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\contact-list-tab.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _contactListTab.default;
  }
});
var _contactListTab = _interopRequireDefault(require("./contact-list-tab.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\view-contact\\index.js", {"./view-contact.container":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\view-contact\\view-contact.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cview-contact%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _viewContact.default;
  }
});
var _viewContact = _interopRequireDefault(require("./view-contact.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\view-contact\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\view-contact\\view-contact.component.js", {"../../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../components/ui/button/button.component":"F:\\metamask-extension\\ui\\components\\ui\\button\\button.component.js","../../../../components/ui/tooltip":"F:\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useCopyToClipboard":"F:\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cview-contact%5Cview-contact.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _button = _interopRequireDefault(require("../../../../components/ui/button/button.component"));
var _componentLibrary = require("../../../../components/component-library");
var _tooltip = _interopRequireDefault(require("../../../../components/ui/tooltip"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function quadSplit(address) {
  return `0x${address.slice(2).match(/.{1,4}/gu).join('')}`;
}
function ViewContact({
  history,
  name,
  address,
  checkSummedAddress,
  memo,
  editRoute,
  listRoute
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  if (!address) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: listRoute
      }
    });
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__content-row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__content-item"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Box, {
    className: "settings-page__header address-book__header",
    paddingLeft: 6
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarAccount, {
    size: _componentLibrary.AvatarAccountSize.Lg,
    address: address
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "address-book__header__name",
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginInlineStart: 4
  }, name || address)), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    onClick: () => {
      history.push(`${editRoute}/${address}`);
    }
  }, t('edit'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__label"
  }, t('ethereumPublicAddress')), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__value"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__static-address"
  }, quadSplit(checkSummedAddress)), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    ariaLabel: "copy",
    className: "address-book__view-contact__group__static-address--copy-icon",
    onClick: () => {
      handleCopy(checkSummedAddress);
    },
    iconName: copied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    size: _componentLibrary.ButtonIconSize.Lg,
    color: _designSystem.IconColor.primaryDefault
  })))), memo.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__label--capitalized"
  }, t('memo')), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__static-address"
  }, memo)) : null));
}
ViewContact.propTypes = {
  name: _propTypes.default.string,
  address: _propTypes.default.string,
  history: _propTypes.default.object,
  checkSummedAddress: _propTypes.default.string,
  memo: _propTypes.default.string,
  editRoute: _propTypes.default.string,
  listRoute: _propTypes.default.string.isRequired
};
var _default = /*#__PURE__*/_react.default.memo(ViewContact);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\view-contact\\view-contact.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\view-contact\\view-contact.container.js", {"../../../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","./view-contact.component":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\view-contact\\view-contact.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Ccontact-list-tab%5Cview-contact%5Cview-contact.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _selectors = require("../../../../selectors");
var _routes = require("../../../../helpers/constants/routes");
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _viewContact = _interopRequireDefault(require("./view-contact.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    location
  } = ownProps;
  const {
    pathname
  } = location;
  const pathNameTail = pathname.match(/[^/]+$/u)[0];
  const pathNameTailIsAddress = pathNameTail.includes('0x');
  const address = pathNameTailIsAddress ? pathNameTail.toLowerCase() : ownProps.match.params.id;
  const contact = (0, _selectors.getAddressBookEntry)(state, address) || state.metamask.identities[address];
  const {
    memo,
    name
  } = contact || {};
  return {
    name,
    address: contact ? address : null,
    checkSummedAddress: (0, _hexstringUtils.toChecksumHexAddress)(address),
    memo,
    editRoute: _routes.CONTACT_EDIT_ROUTE,
    listRoute: _routes.CONTACT_LIST_ROUTE
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(_viewContact.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\contact-list-tab\\view-contact\\view-contact.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\experimental-tab\\experimental-tab.component.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/toggle-button":"F:\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../components/ui/typography/typography":"F:\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cexperimental-tab%5Cexperimental-tab.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));
var _settingsSearch = require("../../../helpers/utils/settings-search");
var _metametrics = require("../../../../shared/constants/metametrics");
var _typography = _interopRequireDefault(require("../../../components/ui/typography/typography"));
var _componentLibrary = require("../../../components/component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ExperimentalTab extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "settingsRefs", Array((0, _settingsSearch.getNumberOfSettingsInSection)(this.context.t, this.context.t('experimental'))).fill(undefined).map(() => {
      return /*#__PURE__*/_react.default.createRef();
    }));
  }
  componentDidUpdate() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('experimental'), this.settingsRefs);
  }
  componentDidMount() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('experimental'), this.settingsRefs);
  }
  renderOpenSeaEnabledToggle() {
    const {
      t
    } = this.context;
    const {
      openSeaEnabled,
      setOpenSeaEnabled,
      useNftDetection,
      setUseNftDetection
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[0],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('enableOpenSeaAPI')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('enableOpenSeaAPIDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: openSeaEnabled,
      onToggle: value => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Settings,
          event: 'Enabled/Disable OpenSea',
          properties: {
            action: 'Enabled/Disable OpenSea',
            legacy_event: true
          }
        });
        // value is positive when being toggled off
        if (value && useNftDetection) {
          setUseNftDetection(false);
        }
        setOpenSeaEnabled(!value);
      },
      offLabel: t('off'),
      onLabel: t('on')
    })))), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[1],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('useNftDetection')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      color: _designSystem.TextColor.textAlternative
    }, t('useNftDetectionDescription')), /*#__PURE__*/_react.default.createElement("ul", {
      className: "settings-page__content-unordered-list"
    }, /*#__PURE__*/_react.default.createElement("li", null, t('useNftDetectionDescriptionLine2')), /*#__PURE__*/_react.default.createElement("li", null, t('useNftDetectionDescriptionLine3')), /*#__PURE__*/_react.default.createElement("li", null, t('useNftDetectionDescriptionLine4'))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      color: _designSystem.TextColor.textAlternative,
      paddingTop: 4
    }, t('useNftDetectionDescriptionLine5')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useNftDetection,
      onToggle: value => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Settings,
          event: 'NFT Detected',
          properties: {
            action: 'NFT Detected',
            legacy_event: true
          }
        });
        if (!value && !openSeaEnabled) {
          setOpenSeaEnabled(!value);
        }
        setUseNftDetection(!value);
      },
      offLabel: t('off'),
      onLabel: t('on')
    })))));
  }
  renderTransactionSecurityCheckToggle() {
    const {
      t
    } = this.context;
    const {
      transactionSecurityCheckEnabled,
      setTransactionSecurityCheckEnabled
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H4,
      color: _designSystem.TextColor.textAlternative,
      marginBottom: 2,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD
    }, t('privacy')), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[1],
      className: "settings-page__content-row settings-page__content-row-experimental"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('transactionSecurityCheck')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H6,
      color: _designSystem.TextColor.textAlternative
    }, t('transactionSecurityCheckDescription')), /*#__PURE__*/_react.default.createElement(_typography.default, {
      marginTop: 3,
      marginBottom: 1,
      variant: _designSystem.TypographyVariant.H6,
      color: _designSystem.TextColor.textAlternative
    }, t('selectProvider')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col settings-page__content-item-col-open-sea"
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H5,
      color: _designSystem.TextColor.textDefault,
      fontWeight: _designSystem.FONT_WEIGHT.MEDIUM,
      marginBottom: 0
    }, t('openSea')), /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: transactionSecurityCheckEnabled,
      onToggle: value => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Settings,
          event: 'Enabled/Disable TransactionSecurityCheck',
          properties: {
            action: 'Enabled/Disable TransactionSecurityCheck',
            legacy_event: true
          }
        });
        setTransactionSecurityCheckEnabled(!value);
      }
    })), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H6,
      color: _designSystem.TextColor.textAlternative,
      marginTop: 0
    }, t('thisServiceIsExperimental', [/*#__PURE__*/_react.default.createElement("a", {
      href: "http://opensea.io/securityproviderterms",
      key: "termsOfUse",
      rel: "noopener noreferrer",
      target: "_blank"
    }, t('termsOfUse'))])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H5,
      color: _designSystem.TextColor.textMuted,
      fontWeight: _designSystem.FONT_WEIGHT.MEDIUM,
      marginTop: 2
    }, t('moreComingSoon'))))));
  }
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, this.renderTransactionSecurityCheckToggle(), this.renderOpenSeaEnabledToggle());
  }
}
exports.default = ExperimentalTab;
_defineProperty(ExperimentalTab, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(ExperimentalTab, "propTypes", {
  useNftDetection: _propTypes.default.bool,
  setUseNftDetection: _propTypes.default.func,
  setOpenSeaEnabled: _propTypes.default.func,
  openSeaEnabled: _propTypes.default.bool,
  transactionSecurityCheckEnabled: _propTypes.default.bool,
  setTransactionSecurityCheckEnabled: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\experimental-tab\\experimental-tab.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\experimental-tab\\experimental-tab.container.js", {"../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./experimental-tab.component":"F:\\metamask-extension\\ui\\pages\\settings\\experimental-tab\\experimental-tab.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cexperimental-tab%5Cexperimental-tab.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _experimentalTab = _interopRequireDefault(require("./experimental-tab.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    useNftDetection: (0, _selectors.getUseNftDetection)(state),
    openSeaEnabled: (0, _selectors.getOpenSeaEnabled)(state),
    transactionSecurityCheckEnabled: (0, _selectors.getIsTransactionSecurityCheckEnabled)(state)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    setUseNftDetection: val => dispatch((0, _actions.setUseNftDetection)(val)),
    setOpenSeaEnabled: val => dispatch((0, _actions.setOpenSeaEnabled)(val)),
    setTransactionSecurityCheckEnabled: val => dispatch((0, _actions.setTransactionSecurityCheckEnabled)(val))
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_experimentalTab.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\experimental-tab\\experimental-tab.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\experimental-tab\\index.js", {"./experimental-tab.container":"F:\\metamask-extension\\ui\\pages\\settings\\experimental-tab\\experimental-tab.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cexperimental-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _experimentalTab.default;
  }
});
var _experimentalTab = _interopRequireDefault(require("./experimental-tab.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\experimental-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\index.js", {"./settings.container":"F:\\metamask-extension\\ui\\pages\\settings\\settings.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _settings.default;
  }
});
var _settings = _interopRequireDefault(require("./settings.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\info-tab\\index.js", {"./info-tab.component":"F:\\metamask-extension\\ui\\pages\\settings\\info-tab\\info-tab.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cinfo-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _infoTab.default;
  }
});
var _infoTab = _interopRequireDefault(require("./info-tab.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\info-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\info-tab\\info-tab.component.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/lib/ui-utils":"F:\\metamask-extension\\shared\\lib\\ui-utils.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../helpers/constants/common":"F:\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/utils/build-types":"F:\\metamask-extension\\ui\\helpers\\utils\\build-types.js","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cinfo-tab%5Cinfo-tab.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _componentLibrary = require("../../../components/component-library");
var _common = require("../../../helpers/constants/common");
var _buildTypes = require("../../../helpers/utils/build-types");
var _settingsSearch = require("../../../helpers/utils/settings-search");
var _metametrics = require("../../../../shared/constants/metametrics");
var _uiUtils = require("../../../../shared/lib/ui-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class InfoTab extends _react.PureComponent {
  constructor(...args) {
    var _global$platform;
    super(...args);
    _defineProperty(this, "state", {
      version: ((_global$platform = global.platform) === null || _global$platform === void 0 ? void 0 : _global$platform.getVersion()) ?? '<unknown>'
    });
    _defineProperty(this, "settingsRefs", Array((0, _settingsSearch.getNumberOfSettingsInSection)(this.context.t, this.context.t('about'))).fill(undefined).map(() => {
      return /*#__PURE__*/_react.default.createRef();
    }));
  }
  componentDidUpdate() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('about'), this.settingsRefs);
  }
  componentDidMount() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('about'), this.settingsRefs);
  }
  renderInfoLinks() {
    const {
      t
    } = this.context;
    let privacyUrl, siteUrl;

    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    privacyUrl = 'https://metamask.io/privacy.html';
    siteUrl = 'https://metamask.io/';
    ///: END:ONLY_INCLUDE_IN

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item settings-page__content-item--without-height"
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[1],
      className: "info-tab__link-header"
    }, t('links')), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[2],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: privacyUrl,
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('privacyMsg'))), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[3],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://metamask.io/terms.html",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('terms'))), (0, _buildTypes.isBeta)() ? /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[8],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://metamask.io/beta-terms.html",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('betaTerms'), /*#__PURE__*/_react.default.createElement(_componentLibrary.Tag, {
      label: t('new'),
      className: "info-tab__tag"
    }))) : null, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[4],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://metamask.io/attributions.html",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('attributions'))), /*#__PURE__*/_react.default.createElement("hr", {
      className: "info-tab__separator"
    }), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[5],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: _uiUtils.SUPPORT_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Settings,
          event: _metametrics.MetaMetricsEventName.SupportLinkClicked,
          properties: {
            url: _uiUtils.SUPPORT_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.MetaMetricsContextProp.PageTitle]
        });
      }
    }, t('supportCenter'))), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[6],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: siteUrl,
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('visitWebSite'))), /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[7],
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: _common.SUPPORT_REQUEST_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Settings,
          event: _metametrics.MetaMetricsEventName.SupportLinkClicked,
          properties: {
            url: _common.SUPPORT_REQUEST_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.MetaMetricsContextProp.PageTitle]
        });
      }
    }, t('contactUs'))));
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item settings-page__content-item--without-height"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[0],
      className: "info-tab__version-header"
    },
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    (0, _buildTypes.isBeta)() ? t('betaMetamaskVersion') : t('metamaskVersion')
    ///: END:ONLY_INCLUDE_IN
    ), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__version-number"
    }, this.state.version)), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__about"
    },
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    t('builtAroundTheWorld')
    ///: END:ONLY_INCLUDE_IN
    ))), this.renderInfoLinks()),
    /*#__PURE__*/
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    _react.default.createElement("div", {
      className: "info-tab__logo-wrapper"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "./images/logo/metamask-fox.svg",
      className: "info-tab__logo",
      alt: "MetaMask Logo"
    }))
    ///: END:ONLY_INCLUDE_IN
    );
  }
}
exports.default = InfoTab;
_defineProperty(InfoTab, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\info-tab\\info-tab.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\custom-content-search\\custom-content-search.js", {"../../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../components/ui/icon/search-icon":"F:\\metamask-extension\\ui\\components\\ui\\icon\\search-icon.js","../../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","@material-ui/core/InputAdornment":"F:\\metamask-extension\\node_modules\\@material-ui\\core\\InputAdornment\\index.js","fuse.js":"F:\\metamask-extension\\node_modules\\fuse.js\\dist\\fuse.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Ccustom-content-search%5Ccustom-content-search.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CustomContentSearch;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _fuse = _interopRequireDefault(require("fuse.js"));
var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));
var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));
var _i18n = require("../../../../contexts/i18n");
var _searchIcon = _interopRequireDefault(require("../../../../components/ui/icon/search-icon"));
var _componentLibrary = require("../../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CustomContentSearch({
  onSearch,
  error,
  networksList,
  searchQueryInput
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [searchIconColor, setSearchIconColor] = (0, _react.useState)('var(--color-icon-muted)');
  const networksListArray = Object.values(networksList);
  const networksSearchFuse = new _fuse.default(networksListArray, {
    shouldSort: true,
    threshold: 0.2,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 1,
    keys: ['label', 'labelKey']
  });
  const handleSearch = async searchQuery => {
    if (searchQuery === '') {
      setSearchIconColor('var(--color-icon-muted)');
    } else {
      setSearchIconColor('var(--color-icon-alternative)');
    }
    const fuseSearchResult = networksSearchFuse.search(searchQuery);
    const results = searchQuery ? [...fuseSearchResult] : networksListArray;
    await onSearch({
      searchQuery,
      results
    });
  };
  const renderStartAdornment = () => {
    return /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
      position: "start"
    }, /*#__PURE__*/_react.default.createElement(_searchIcon.default, {
      color: searchIconColor
    }));
  };
  const renderEndAdornment = () => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, searchQueryInput && /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
      className: "imageclosectn",
      position: "end",
      onClick: () => handleSearch('')
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Close,
      className: "networks-tab__imageclose"
    })));
  };
  return /*#__PURE__*/_react.default.createElement(_textField.default, {
    id: "search-networks",
    "data-testid": "search-networks",
    placeholder: t('customContentSearch'),
    type: "text",
    value: searchQueryInput,
    onChange: e => handleSearch(e.target.value),
    error: error,
    fullWidth: true,
    autoFocus: true,
    autoComplete: "off",
    classes: {
      inputRoot: 'networks-tab__networks-list__custom-search-network'
    },
    startAdornment: renderStartAdornment(),
    endAdornment: renderEndAdornment()
  });
}
CustomContentSearch.propTypes = {
  /**
   * The function searches the list of networks depending on
   * the entered parameter and returns the entire list of
   * networks when the user clicks on 'X' on the search tab
   */
  onSearch: _propTypes.default.func,
  /**
   * An error message is displayed when a user searches for a specific
   * network on the search tab and that network does not exist
   * in the networks list
   */
  error: _propTypes.default.string,
  /**
   * The list of networks available for search.
   */
  networksList: _propTypes.default.array,
  /**
   * Search for a specific network(s) by label or labelKey
   */
  searchQueryInput: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\custom-content-search\\custom-content-search.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\custom-content-search\\index.js", {"./custom-content-search":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\custom-content-search\\custom-content-search.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Ccustom-content-search%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _customContentSearch.default;
  }
});
var _customContentSearch = _interopRequireDefault(require("./custom-content-search"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\custom-content-search\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\index.js", {"./networks-tab":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksTab.default;
  }
});
var _networksTab = _interopRequireDefault(require("./networks-tab"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-form\\index.js", {"./networks-form":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-form\\networks-form.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-form%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksForm.default;
  }
});
var _networksForm = _interopRequireDefault(require("./networks-form"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-form\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-form\\networks-form.js", {"../../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../../../shared/lib/fetch-with-cache":"F:\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../../shared/modules/network.utils":"F:\\metamask-extension\\shared\\modules\\network.utils.ts","../../../../../shared/modules/rpc.utils":"F:\\metamask-extension\\shared\\modules\\rpc.utils.js","../../../../components/ui/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/form-field":"F:\\metamask-extension\\ui\\components\\ui\\form-field\\index.js","../../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/utils/i18n-helper":"F:\\metamask-extension\\ui\\helpers\\utils\\i18n-helper.tsx","../../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../hooks/usePrevious":"F:\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","loglevel":"F:\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","valid-url":"F:\\metamask-extension\\node_modules\\valid-url\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-form%5Cnetworks-form.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _validUrl = _interopRequireDefault(require("valid-url"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _network = require("../../../../../shared/modules/network.utils");
var _rpc = require("../../../../../shared/modules/rpc.utils");
var _actionableMessage = _interopRequireDefault(require("../../../../components/ui/actionable-message"));
var _button = _interopRequireDefault(require("../../../../components/ui/button"));
var _formField = _interopRequireDefault(require("../../../../components/ui/form-field"));
var _actions = require("../../../../store/actions");
var _fetchWithCache = _interopRequireDefault(require("../../../../../shared/lib/fetch-with-cache"));
var _usePrevious = require("../../../../hooks/usePrevious");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _network2 = require("../../../../../shared/constants/network");
var _conversion = require("../../../../../shared/modules/conversion.utils");
var _metametrics2 = require("../../../../contexts/metametrics");
var _i18nHelper = require("../../../../helpers/utils/i18n-helper");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Attempts to convert the given chainId to a decimal string, for display
 * purposes.
 *
 * Should be called with the props chainId whenever it is used to set the
 * component's state.
 *
 * @param {unknown} chainId - The chainId to convert.
 * @returns {string} The props chainId in decimal, or the original value if
 * it can't be converted.
 */
const getDisplayChainId = chainId => {
  if (!chainId || typeof chainId !== 'string' || !chainId.startsWith('0x')) {
    return chainId;
  }
  return parseInt(chainId, 16).toString(10);
};

/**
 * Prefixes a given id with '0x' if the prefix does not exist
 *
 * @param {string} chainId - The chainId to prefix
 * @returns {string} The chainId, prefixed with '0x'
 */
const prefixChainId = chainId => {
  let prefixedChainId = chainId;
  if (!chainId.startsWith('0x')) {
    prefixedChainId = `0x${parseInt(chainId, 10).toString(16)}`;
  }
  return prefixedChainId;
};
const isValidWhenAppended = url => {
  const appendedRpc = `http://${url}`;
  return _validUrl.default.isWebUri(appendedRpc) && !url.match(/^https?:\/\/$/u);
};
const NetworksForm = ({
  addNewNetwork,
  restrictHeight,
  isCurrentRpcTarget,
  networksToRender,
  selectedNetwork,
  cancelCallback,
  submitCallback
}) => {
  var _errors$networkName, _errors$rpcUrl, _warnings$chainId, _errors$chainId, _warnings$ticker, _errors$blockExplorer;
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    label,
    labelKey,
    viewOnly,
    rpcPrefs
  } = selectedNetwork;
  const selectedNetworkName = label || labelKey && t((0, _i18nHelper.getNetworkLabelKey)(labelKey));
  const [networkName, setNetworkName] = (0, _react.useState)(selectedNetworkName || '');
  const [rpcUrl, setRpcUrl] = (0, _react.useState)((selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.rpcUrl) || '');
  const [chainId, setChainId] = (0, _react.useState)((selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.chainId) || '');
  const [ticker, setTicker] = (0, _react.useState)((selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.ticker) || '');
  const [blockExplorerUrl, setBlockExplorerUrl] = (0, _react.useState)((selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.blockExplorerUrl) || '');
  const [errors, setErrors] = (0, _react.useState)({});
  const [warnings, setWarnings] = (0, _react.useState)({});
  const [isSubmitting, setIsSubmitting] = (0, _react.useState)(false);
  const chainIdMatchesFeaturedRPC = _network2.FEATURED_RPCS.some(featuredRpc => Number(featuredRpc.chainId) === Number(chainId));
  const [isEditing, setIsEditing] = (0, _react.useState)(Boolean(addNewNetwork));
  const [previousNetwork, setPreviousNetwork] = (0, _react.useState)(selectedNetwork);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const resetForm = (0, _react.useCallback)(() => {
    setNetworkName(selectedNetworkName || '');
    setRpcUrl(selectedNetwork.rpcUrl);
    setChainId(getDisplayChainId(selectedNetwork.chainId));
    setTicker(selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.ticker);
    setBlockExplorerUrl(selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.blockExplorerUrl);
    setErrors({});
    setWarnings({});
    setIsSubmitting(false);
    setIsEditing(false);
    setPreviousNetwork(selectedNetwork);
  }, [selectedNetwork, selectedNetworkName]);
  const stateIsUnchanged = () => {
    // These added conditions are in case the saved chainId is invalid, which
    // was possible in versions <8.1 of the extension.
    // Basically, we always want to be able to overwrite an invalid chain ID.
    const chainIdIsUnchanged = typeof selectedNetwork.chainId === 'string' && selectedNetwork.chainId.toLowerCase().startsWith('0x') && chainId === getDisplayChainId(selectedNetwork.chainId);
    return rpcUrl === selectedNetwork.rpcUrl && chainIdIsUnchanged && ticker === selectedNetwork.ticker && networkName === selectedNetworkName && blockExplorerUrl === selectedNetwork.blockExplorerUrl;
  };
  const prevAddNewNetwork = (0, _react.useRef)();
  const prevNetworkName = (0, _react.useRef)();
  const prevChainId = (0, _react.useRef)();
  const prevRpcUrl = (0, _react.useRef)();
  const prevTicker = (0, _react.useRef)();
  const prevBlockExplorerUrl = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    if (!prevAddNewNetwork.current && addNewNetwork) {
      setNetworkName('');
      setRpcUrl('');
      setChainId('');
      setTicker('');
      setBlockExplorerUrl('');
      setErrors({});
      setIsSubmitting(false);
    } else if ((prevNetworkName.current !== selectedNetworkName || prevRpcUrl.current !== selectedNetwork.rpcUrl || prevChainId.current !== selectedNetwork.chainId || prevTicker.current !== selectedNetwork.ticker || prevBlockExplorerUrl.current !== selectedNetwork.blockExplorerUrl) && (!isEditing || !(0, _lodash.isEqual)(selectedNetwork, previousNetwork))) {
      resetForm(selectedNetwork);
    }
  }, [selectedNetwork, selectedNetworkName, addNewNetwork, previousNetwork, resetForm, isEditing]);
  (0, _react.useEffect)(() => {
    return () => {
      setNetworkName('');
      setRpcUrl('');
      setChainId('');
      setTicker('');
      setBlockExplorerUrl('');
      setErrors({});
      dispatch((0, _actions.setSelectedNetworkConfigurationId)(''));
    };
  }, [setNetworkName, setRpcUrl, setChainId, setTicker, setBlockExplorerUrl, setErrors, dispatch]);
  const hasErrors = () => {
    return Object.keys(errors).some(key => {
      const error = errors[key];
      // Do not factor in duplicate chain id error for submission disabling
      if (key === 'chainId' && (error === null || error === void 0 ? void 0 : error.key) === 'chainIdExistsErrorMsg') {
        return false;
      }
      return (error === null || error === void 0 ? void 0 : error.key) && (error === null || error === void 0 ? void 0 : error.msg);
    });
  };
  const validateBlockExplorerURL = (0, _react.useCallback)(url => {
    if (!_validUrl.default.isWebUri(url) && url !== '') {
      let errorKey;
      let errorMessage;
      if (isValidWhenAppended(url)) {
        errorKey = 'urlErrorMsg';
        errorMessage = t('urlErrorMsg');
      } else {
        errorKey = 'invalidBlockExplorerURL';
        errorMessage = t('invalidBlockExplorerURL');
      }
      return {
        key: errorKey,
        msg: errorMessage
      };
    }
    return null;
  }, [t]);
  const validateChainId = (0, _react.useCallback)(async (chainArg = '') => {
    const formChainId = chainArg.trim();
    let errorKey = '';
    let errorMessage = '';
    let warningKey = '';
    let warningMessage = '';
    let radix = 10;
    let hexChainId = formChainId;
    if (!hexChainId.startsWith('0x')) {
      try {
        hexChainId = `0x${(0, _conversion.decimalToHex)(hexChainId)}`;
      } catch (err) {
        return {
          error: {
            key: 'invalidHexNumber',
            msg: t('invalidHexNumber')
          }
        };
      }
    }
    const [matchingChainId] = networksToRender.filter(e => e.chainId === hexChainId && e.rpcUrl !== rpcUrl);
    if (formChainId === '') {
      return null;
    } else if (matchingChainId) {
      warningKey = 'chainIdExistsErrorMsg';
      warningMessage = t('chainIdExistsErrorMsg', [matchingChainId.label ?? matchingChainId.labelKey]);
    } else if (formChainId.startsWith('0x')) {
      radix = 16;
      if (!/^0x[0-9a-f]+$/iu.test(formChainId)) {
        errorKey = 'invalidHexNumber';
        errorMessage = t('invalidHexNumber');
      } else if (!(0, _network.isPrefixedFormattedHexString)(formChainId)) {
        errorMessage = t('invalidHexNumberLeadingZeros');
      }
    } else if (!/^[0-9]+$/u.test(formChainId)) {
      errorKey = 'invalidNumber';
      errorMessage = t('invalidNumber');
    } else if (formChainId.startsWith('0')) {
      errorKey = 'invalidNumberLeadingZeros';
      errorMessage = t('invalidNumberLeadingZeros');
    } else if (!(0, _network.isSafeChainId)(parseInt(formChainId, radix))) {
      errorKey = 'invalidChainIdTooBig';
      errorMessage = t('invalidChainIdTooBig');
    }
    let endpointChainId;
    let providerError;
    try {
      endpointChainId = await (0, _rpc.jsonRpcRequest)(rpcUrl, 'eth_chainId');
    } catch (err) {
      _loglevel.default.warn('Failed to fetch the chainId from the endpoint.', err);
      providerError = err;
    }
    if (rpcUrl && formChainId) {
      if (providerError || typeof endpointChainId !== 'string') {
        errorKey = 'failedToFetchChainId';
        errorMessage = t('failedToFetchChainId');
      } else if (hexChainId !== endpointChainId) {
        // Here, we are in an error state. The endpoint should always return a
        // hexadecimal string. If the user entered a decimal string, we attempt
        // to convert the endpoint's return value to decimal before rendering it
        // in an error message in the form.
        if (!formChainId.startsWith('0x')) {
          try {
            endpointChainId = parseInt(endpointChainId, 16).toString(10);
          } catch (err) {
            _loglevel.default.warn('Failed to convert endpoint chain ID to decimal', endpointChainId);
          }
        }
        errorKey = 'endpointReturnedDifferentChainId';
        errorMessage = t('endpointReturnedDifferentChainId', [endpointChainId.length <= 12 ? endpointChainId : `${endpointChainId.slice(0, 9)}...`]);
      }
    }
    if (errorKey) {
      return {
        error: {
          key: errorKey,
          msg: errorMessage
        }
      };
    }
    if (warningKey) {
      return {
        warning: {
          key: warningKey,
          msg: warningMessage
        }
      };
    }
    return null;
  }, [rpcUrl, networksToRender, t]);

  /**
   * Validates the ticker symbol by checking it against the nativeCurrency.symbol return
   * value from chainid.network trusted chain data
   * Assumes that all strings are non-empty and correctly formatted.
   *
   * @param {string} formChainId - The Chain ID currently entered in the form.
   * @param {string} formTickerSymbol - The ticker/currency symbol currently entered in the form.
   */
  const validateTickerSymbol = (0, _react.useCallback)(async (formChainId, formTickerSymbol) => {
    let warningKey;
    let warningMessage;
    let safeChainsList;
    let providerError;
    if (!formChainId || !formTickerSymbol) {
      return null;
    }
    try {
      safeChainsList = (await (0, _fetchWithCache.default)('https://chainid.network/chains.json')) || [];
    } catch (err) {
      _loglevel.default.warn('Failed to fetch the chainList from chainid.network', err);
      providerError = err;
    }
    if (providerError) {
      warningKey = 'failedToFetchTickerSymbolData';
      warningMessage = t('failedToFetchTickerSymbolData');
    } else {
      var _safeChainsList;
      const matchedChain = (_safeChainsList = safeChainsList) === null || _safeChainsList === void 0 ? void 0 : _safeChainsList.find(chain => chain.chainId.toString() === formChainId);
      if (matchedChain === undefined) {
        warningKey = 'failedToFetchTickerSymbolData';
        warningMessage = t('failedToFetchTickerSymbolData');
      } else {
        var _matchedChain$nativeC;
        const returnedTickerSymbol = (_matchedChain$nativeC = matchedChain.nativeCurrency) === null || _matchedChain$nativeC === void 0 ? void 0 : _matchedChain$nativeC.symbol;
        if (returnedTickerSymbol !== formTickerSymbol) {
          warningKey = 'chainListReturnedDifferentTickerSymbol';
          warningMessage = t('chainListReturnedDifferentTickerSymbol', [formChainId, returnedTickerSymbol]);
        }
      }
    }
    if (warningKey) {
      return {
        key: warningKey,
        msg: warningMessage
      };
    }
    return null;
  }, [t]);
  const validateRPCUrl = (0, _react.useCallback)(url => {
    const isValidUrl = _validUrl.default.isWebUri(url);
    const [{
      rpcUrl: matchingRPCUrl = null,
      label: matchingRPCLabel,
      labelKey: matchingRPCLabelKey
    } = {}] = networksToRender.filter(e => e.rpcUrl === url);
    const {
      rpcUrl: selectedNetworkRpcUrl
    } = selectedNetwork;
    if (!isValidUrl && url !== '') {
      let errorKey;
      let errorMessage;
      if (isValidWhenAppended(url)) {
        errorKey = 'urlErrorMsg';
        errorMessage = t('urlErrorMsg');
      } else {
        errorKey = 'invalidRPC';
        errorMessage = t('invalidRPC');
      }
      return {
        key: errorKey,
        msg: errorMessage
      };
    } else if (matchingRPCUrl && matchingRPCUrl !== selectedNetworkRpcUrl) {
      return {
        key: 'urlExistsErrorMsg',
        msg: t('urlExistsErrorMsg', [matchingRPCLabel ?? matchingRPCLabelKey])
      };
    }
    return null;
  }, [selectedNetwork, networksToRender, t]);

  // validation effect
  const previousRpcUrl = (0, _usePrevious.usePrevious)(rpcUrl);
  const previousChainId = (0, _usePrevious.usePrevious)(chainId);
  const previousTicker = (0, _usePrevious.usePrevious)(ticker);
  const previousBlockExplorerUrl = (0, _usePrevious.usePrevious)(blockExplorerUrl);
  (0, _react.useEffect)(() => {
    if (viewOnly) {
      return;
    }
    if (previousRpcUrl === rpcUrl && previousChainId === chainId && previousTicker === ticker && previousBlockExplorerUrl === blockExplorerUrl) {
      return;
    }
    async function validate() {
      const {
        error: chainIdError,
        warning: chainIdWarning
      } = (await validateChainId(chainId)) || {};
      const tickerWarning = await validateTickerSymbol(chainId, ticker);
      const blockExplorerError = validateBlockExplorerURL(blockExplorerUrl);
      const rpcUrlError = validateRPCUrl(rpcUrl);
      setErrors({
        ...errors,
        blockExplorerUrl: blockExplorerError,
        rpcUrl: rpcUrlError,
        chainId: chainIdError
      });
      setWarnings({
        ...warnings,
        chainId: chainIdWarning,
        ticker: tickerWarning
      });
    }
    validate();
  }, [errors, warnings, rpcUrl, chainId, ticker, blockExplorerUrl, viewOnly, label, previousRpcUrl, previousChainId, previousTicker, previousBlockExplorerUrl, validateBlockExplorerURL, validateChainId, validateTickerSymbol, validateRPCUrl]);
  const onSubmit = async () => {
    setIsSubmitting(true);
    try {
      const formChainId = chainId.trim().toLowerCase();
      const prefixedChainId = prefixChainId(formChainId);
      let networkConfigurationId;
      // After this point, isSubmitting will be reset in componentDidUpdate
      if (selectedNetwork.rpcUrl && rpcUrl !== selectedNetwork.rpcUrl) {
        await dispatch((0, _actions.editAndSetNetworkConfiguration)({
          rpcUrl,
          ticker,
          networkConfigurationId: selectedNetwork.networkConfigurationId,
          chainId: prefixedChainId,
          nickname: networkName,
          rpcPrefs: {
            ...rpcPrefs,
            blockExplorerUrl: blockExplorerUrl || (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl)
          }
        }, {
          source: _metametrics.MetaMetricsNetworkEventSource.CustomNetworkForm
        }));
      } else {
        networkConfigurationId = await dispatch((0, _actions.upsertNetworkConfiguration)({
          rpcUrl,
          ticker,
          chainId: prefixedChainId,
          nickname: networkName,
          rpcPrefs: {
            ...rpcPrefs,
            blockExplorerUrl: blockExplorerUrl || (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl)
          }
        }, {
          setActive: true,
          source: _metametrics.MetaMetricsNetworkEventSource.CustomNetworkForm
        }));
      }
      if (addNewNetwork) {
        dispatch((0, _actions.setNewNetworkAdded)({
          nickname: networkName,
          networkConfigurationId
        }));
        trackEvent({
          event: _metametrics.MetaMetricsEventName.CustomNetworkAdded,
          category: _metametrics.MetaMetricsEventCategory.Network,
          properties: {
            block_explorer_url: blockExplorerUrl,
            chain_id: prefixedChainId,
            network_name: networkName,
            source_connection_method: _metametrics.MetaMetricsNetworkEventSource.CustomNetworkForm,
            token_symbol: ticker
          }
        });
        submitCallback === null || submitCallback === void 0 ? void 0 : submitCallback();
      }
    } catch (error) {
      setIsSubmitting(false);
      throw error;
    }
  };
  const onCancel = () => {
    if (addNewNetwork) {
      dispatch((0, _actions.setSelectedNetworkConfigurationId)(''));
      cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
    } else {
      resetForm();
    }
  };
  const onDelete = () => {
    dispatch((0, _actions.showModal)({
      name: 'CONFIRM_DELETE_NETWORK',
      target: selectedNetwork.networkConfigurationId,
      onConfirm: () => {
        resetForm();
        dispatch((0, _actions.setSelectedNetworkConfigurationId)(''));
      }
    }));
  };
  const deletable = !isCurrentRpcTarget && !viewOnly && !addNewNetwork;
  const stateUnchanged = stateIsUnchanged();
  const chainIdErrorOnFeaturedRpcDuringEdit = (selectedNetwork === null || selectedNetwork === void 0 ? void 0 : selectedNetwork.rpcUrl) && errors.chainId && chainIdMatchesFeaturedRPC;
  const isSubmitDisabled = hasErrors() || isSubmitting || stateUnchanged || chainIdErrorOnFeaturedRpcDuringEdit || !rpcUrl || !chainId || !ticker;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)({
      'networks-tab__network-form': !addNewNetwork,
      'networks-tab__add-network-form': addNewNetwork,
      'networks-tab__restrict-height': restrictHeight
    })
  }, addNewNetwork ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    type: "warning",
    message: t('onlyAddTrustedNetworks'),
    iconFillColor: "var(--color-warning-default)",
    useIcon: true,
    withRightButton: true,
    className: "networks-tab__add-network-form__alert"
  }) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)({
      'networks-tab__network-form-body': !addNewNetwork,
      'networks-tab__network-form-body__view-only': viewOnly,
      'networks-tab__add-network-form-body': addNewNetwork
    })
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    autoFocus: true,
    error: ((_errors$networkName = errors.networkName) === null || _errors$networkName === void 0 ? void 0 : _errors$networkName.msg) || '',
    onChange: value => {
      setIsEditing(true);
      setNetworkName(value);
    },
    titleText: t('networkName'),
    value: networkName,
    disabled: viewOnly
  }), /*#__PURE__*/_react.default.createElement(_formField.default, {
    error: ((_errors$rpcUrl = errors.rpcUrl) === null || _errors$rpcUrl === void 0 ? void 0 : _errors$rpcUrl.msg) || '',
    onChange: value => {
      setIsEditing(true);
      setRpcUrl(value);
    },
    titleText: t('rpcUrl'),
    value: rpcUrl !== null && rpcUrl !== void 0 && rpcUrl.includes(`/v3/${_network2.infuraProjectId}`) ? rpcUrl.replace(`/v3/${_network2.infuraProjectId}`, '') : rpcUrl,
    disabled: viewOnly
  }), /*#__PURE__*/_react.default.createElement(_formField.default, {
    warning: ((_warnings$chainId = warnings.chainId) === null || _warnings$chainId === void 0 ? void 0 : _warnings$chainId.msg) || '',
    error: ((_errors$chainId = errors.chainId) === null || _errors$chainId === void 0 ? void 0 : _errors$chainId.msg) || '',
    onChange: value => {
      setIsEditing(true);
      setChainId(value);
    },
    titleText: t('chainId'),
    value: chainId,
    disabled: viewOnly,
    tooltipText: viewOnly ? null : t('networkSettingsChainIdDescription')
  }), /*#__PURE__*/_react.default.createElement(_formField.default, {
    warning: ((_warnings$ticker = warnings.ticker) === null || _warnings$ticker === void 0 ? void 0 : _warnings$ticker.msg) || '',
    onChange: value => {
      setIsEditing(true);
      setTicker(value);
    },
    titleText: t('currencySymbol'),
    value: ticker,
    disabled: viewOnly
  }), /*#__PURE__*/_react.default.createElement(_formField.default, {
    error: ((_errors$blockExplorer = errors.blockExplorerUrl) === null || _errors$blockExplorer === void 0 ? void 0 : _errors$blockExplorer.msg) || '',
    onChange: value => {
      setIsEditing(true);
      setBlockExplorerUrl(value);
    },
    titleText: t('blockExplorerUrl'),
    titleUnit: t('optionalWithParanthesis'),
    value: blockExplorerUrl,
    disabled: viewOnly,
    autoFocus: window.location.hash.split('#')[2] === 'blockExplorerUrl'
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)({
      'networks-tab__network-form-footer': !addNewNetwork,
      'networks-tab__add-network-form-footer': addNewNetwork
    })
  }, !viewOnly && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, deletable && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "danger",
    onClick: onDelete
  }, t('delete')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    onClick: onCancel,
    disabled: stateUnchanged
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    disabled: isSubmitDisabled,
    onClick: onSubmit
  }, t('save')))));
};
NetworksForm.propTypes = {
  addNewNetwork: _propTypes.default.bool,
  isCurrentRpcTarget: _propTypes.default.bool,
  networksToRender: _propTypes.default.array.isRequired,
  selectedNetwork: _propTypes.default.object,
  cancelCallback: _propTypes.default.func,
  submitCallback: _propTypes.default.func,
  restrictHeight: _propTypes.default.bool
};
NetworksForm.defaultProps = {
  selectedNetwork: {}
};
var _default = NetworksForm;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-form\\networks-form.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list-item\\index.js", {"./networks-list-item":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list-item\\networks-list-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksListItem.default;
  }
});
var _networksListItem = _interopRequireDefault(require("./networks-list-item"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-list-item\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list-item\\networks-list-item.js", {"../../../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../components/ui/identicon":"F:\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../helpers/utils/i18n-helper":"F:\\metamask-extension\\ui\\helpers\\utils\\i18n-helper.tsx","../../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","../../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-list-item%5Cnetworks-list-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _network = require("../../../../../shared/constants/network");
var _routes = require("../../../../helpers/constants/routes");
var _actions = require("../../../../store/actions");
var _util = require("../../../../../app/scripts/lib/util");
var _app = require("../../../../../shared/constants/app");
var _metamask = require("../../../../ducks/metamask/metamask");
var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));
var _urlIcon = _interopRequireDefault(require("../../../../components/ui/url-icon"));
var _settingsSearch = require("../../../../helpers/utils/settings-search");
var _componentLibrary = require("../../../../components/component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
var _i18nHelper = require("../../../../helpers/utils/i18n-helper");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NetworksListItem = ({
  network,
  networkIsSelected,
  selectedNetworkConfigurationId,
  setSearchQuery,
  setSearchedNetworks
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const environmentType = (0, _util.getEnvironmentType)();
  const isFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  const providerConfig = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const {
    label,
    labelKey,
    networkConfigurationId,
    rpcUrl,
    providerType: currentProviderType
  } = network;
  const listItemNetworkIsSelected = selectedNetworkConfigurationId && selectedNetworkConfigurationId === networkConfigurationId;
  const listItemUrlIsProviderUrl = rpcUrl === providerConfig.rpcUrl;
  const listItemTypeIsProviderNonRpcType = providerConfig.type !== _network.NETWORK_TYPES.RPC && currentProviderType === providerConfig.type;
  const listItemNetworkIsCurrentProvider = !networkIsSelected && (listItemUrlIsProviderUrl || listItemTypeIsProviderNonRpcType);
  const displayNetworkListItemAsSelected = listItemNetworkIsSelected || listItemNetworkIsCurrentProvider;
  const isCurrentRpcTarget = listItemUrlIsProviderUrl || listItemTypeIsProviderNonRpcType;
  const settingsRefs = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    (0, _settingsSearch.handleSettingsRefs)(t, t('networks'), settingsRefs);
  }, [settingsRefs, t]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: settingsRefs,
    key: `settings-network-list-item:${networkConfigurationId}`,
    className: "networks-tab__networks-list-item",
    onClick: () => {
      setSearchQuery('');
      setSearchedNetworks([]);
      dispatch((0, _actions.setSelectedNetworkConfigurationId)(networkConfigurationId));
      if (!isFullScreen) {
        global.platform.openExtensionInBrowser(_routes.NETWORKS_ROUTE);
      }
    }
  }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Check,
    color: _designSystem.IconColor.successDefault
  }) : /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Check,
    color: _designSystem.IconColor.transparent
  }), network.chainId in _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP ? /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "networks-tab__content__custom-image",
    diameter: 24,
    image: _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[network.chainId],
    imageBorder: true
  }) : !network.isATestNetwork && /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    className: "networks-tab__content__icon-with-fallback",
    fallbackClassName: "networks-tab__content__icon-with-fallback",
    name: label || (0, _i18nHelper.getNetworkLabelKey)(labelKey)
  }), network.isATestNetwork && network.chainId !== _network.CHAIN_IDS.LINEA_GOERLI && /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    name: label || (0, _i18nHelper.getNetworkLabelKey)(labelKey),
    fallbackClassName: (0, _classnames.default)('networks-tab__content__icon-with-fallback', {
      [`networks-tab__content__icon-with-fallback--color-${labelKey}`]: true
    })
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('networks-tab__networks-list-name', {
      'networks-tab__networks-list-name--selected': displayNetworkListItemAsSelected,
      'networks-tab__networks-list-name--disabled': currentProviderType !== _network.NETWORK_TYPES.RPC && !displayNetworkListItemAsSelected
    })
  }, label || t((0, _i18nHelper.getNetworkLabelKey)(labelKey)), currentProviderType !== _network.NETWORK_TYPES.RPC && /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Lock,
    color: _designSystem.IconColor.iconMuted,
    size: _componentLibrary.IconSize.Inherit,
    marginInlineStart: 2
  })));
};
NetworksListItem.propTypes = {
  network: _propTypes.default.object.isRequired,
  networkIsSelected: _propTypes.default.bool,
  selectedNetworkConfigurationId: _propTypes.default.string,
  setSearchQuery: _propTypes.default.func,
  setSearchedNetworks: _propTypes.default.func
};
var _default = NetworksListItem;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-list-item\\networks-list-item.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list\\index.js", {"./networks-list":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list\\networks-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksList.default;
  }
});
var _networksList = _interopRequireDefault(require("./networks-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-list\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list\\networks-list.js", {"../../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","../custom-content-search":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\custom-content-search\\index.js","../networks-list-item":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list-item\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-list%5Cnetworks-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _customContentSearch = _interopRequireDefault(require("../custom-content-search"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _networksListItem = _interopRequireDefault(require("../networks-list-item"));
var _componentLibrary = require("../../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NetworksList = ({
  networkIsSelected,
  networksToRender,
  networkDefaultedToProvider,
  selectedNetworkConfigurationId
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [searchedNetworks, setSearchedNetworks] = (0, _react.useState)([]);
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const searchedNetworksToRender = searchedNetworks.length === 0 && searchQuery === '' ? networksToRender : searchedNetworks;
  const searchedNetworksToRenderThatAreNotTestNetworks = searchedNetworksToRender.filter(network => !network.isATestNetwork);
  const searchedNetworksToRenderThatAreTestNetworks = searchedNetworksToRender.filter(network => network.isATestNetwork);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('networks-tab__networks-list', {
      'networks-tab__networks-list--selection': networkIsSelected && !networkDefaultedToProvider
    })
  }, /*#__PURE__*/_react.default.createElement(_customContentSearch.default, {
    onSearch: ({
      searchQuery: newSearchQuery = '',
      results: newResults = []
    }) => {
      setSearchedNetworks(newResults);
      setSearchQuery(newSearchQuery);
    },
    error: searchedNetworksToRender.length === 0 ? t('settingsSearchMatchingNotFound') : null,
    networksList: networksToRender,
    searchQueryInput: searchQuery
  }), searchedNetworksToRenderThatAreNotTestNetworks.map((network, _) => /*#__PURE__*/_react.default.createElement(_networksListItem.default, {
    key: `settings-network-list:${network.rpcUrl}`,
    network: network,
    networkIsSelected: networkIsSelected,
    selectedNetworkConfigurationId: selectedNetworkConfigurationId,
    setSearchQuery: setSearchQuery,
    setSearchedNetworks: setSearchedNetworks
  })), searchQuery === '' && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginTop: 4,
    color: _designSystem.Color.textAlternative,
    className: "networks-tab__networks-list__label"
  }, t('testNetworks')), searchedNetworksToRenderThatAreTestNetworks.map((network, _) => /*#__PURE__*/_react.default.createElement(_networksListItem.default, {
    key: `settings-network-list:${network.rpcUrl}`,
    network: network,
    networkIsSelected: networkIsSelected,
    selectedNetworkConfigurationId: selectedNetworkConfigurationId,
    setSearchQuery: setSearchQuery,
    setSearchedNetworks: setSearchedNetworks
  })));
};
NetworksList.propTypes = {
  networkDefaultedToProvider: _propTypes.default.bool,
  networkIsSelected: _propTypes.default.bool,
  networksToRender: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  selectedNetworkConfigurationId: _propTypes.default.string
};
var _default = NetworksList;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-list\\networks-list.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-content\\index.js", {"./networks-tab-content":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-content\\networks-tab-content.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-tab-content%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksTabContent.default;
  }
});
var _networksTabContent = _interopRequireDefault(require("./networks-tab-content"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-tab-content\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-content\\networks-tab-content.js", {"../../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../networks-form":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-form\\index.js","../networks-list":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-list\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-tab-content%5Cnetworks-tab-content.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _networksForm = _interopRequireDefault(require("../networks-form"));
var _networksList = _interopRequireDefault(require("../networks-list"));
var _metamask = require("../../../../ducks/metamask/metamask");
var _routes = require("../../../../helpers/constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const NetworksTabContent = ({
  networkDefaultedToProvider,
  networkIsSelected,
  networksToRender,
  selectedNetwork,
  shouldRenderNetworkForm
}) => {
  const providerConfig = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const history = (0, _reactRouterDom.useHistory)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_networksList.default, {
    networkDefaultedToProvider: networkDefaultedToProvider,
    networkIsSelected: networkIsSelected,
    networksToRender: networksToRender,
    selectedNetworkConfigurationId: selectedNetwork.networkConfigurationId
  }), shouldRenderNetworkForm ? /*#__PURE__*/_react.default.createElement(_networksForm.default, {
    isCurrentRpcTarget: providerConfig.rpcUrl === selectedNetwork.rpcUrl,
    networksToRender: networksToRender,
    selectedNetwork: selectedNetwork,
    submitCallback: () => history.push(_routes.DEFAULT_ROUTE),
    cancelCallback: () => history.push(_routes.NETWORKS_ROUTE)
  }) : null);
};
NetworksTabContent.propTypes = {
  networkDefaultedToProvider: _propTypes.default.bool,
  networkIsSelected: _propTypes.default.bool,
  networksToRender: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  selectedNetwork: _propTypes.default.object,
  shouldRenderNetworkForm: _propTypes.default.bool.isRequired
};
var _default = NetworksTabContent;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-tab-content\\networks-tab-content.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-subheader\\index.js", {"./networks-tab-subheader":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-subheader\\networks-tab-subheader.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-tab-subheader%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksTabSubheader.default;
  }
});
var _networksTabSubheader = _interopRequireDefault(require("./networks-tab-subheader"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-tab-subheader\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-subheader\\networks-tab-subheader.js", {"../../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-tab-subheader%5Cnetworks-tab-subheader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _routes = require("../../../../helpers/constants/routes");
var _button = _interopRequireDefault(require("../../../../components/ui/button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const NetworksFormSubheader = ({
  addNewNetwork
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  return addNewNetwork ? /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__subheader"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "networks-tab__sub-header-text"
  }, t('networks')), /*#__PURE__*/_react.default.createElement("span", {
    className: "networks-tab__sub-header-text"
  }, '  >  '), /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__sub-header-text"
  }, t('addANetwork')), /*#__PURE__*/_react.default.createElement("span", null, '  >  '), /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__subheader--break"
  }, t('addANetworkManually'))) : /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__sub-header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "settings-page__sub-header-text"
  }, t('networks')), /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__add-network-header-button-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: event => {
      event.preventDefault();
      history.push(_routes.ADD_POPULAR_CUSTOM_NETWORK);
    }
  }, t('addANetwork'))));
};
NetworksFormSubheader.propTypes = {
  addNewNetwork: _propTypes.default.bool.isRequired
};
var _default = NetworksFormSubheader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-tab-subheader\\networks-tab-subheader.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab.constants.js", {"../../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-tab.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultNetworksData = void 0;
var _network = require("../../../../shared/constants/network");
const defaultNetworksData = [{
  labelKey: _network.NETWORK_TYPES.MAINNET,
  iconColor: '#29B6AF',
  providerType: _network.NETWORK_TYPES.MAINNET,
  rpcUrl: (0, _network.getRpcUrl)({
    network: _network.NETWORK_TYPES.MAINNET,
    excludeProjectId: true
  }),
  chainId: _network.CHAIN_IDS.MAINNET,
  ticker: _network.CURRENCY_SYMBOLS.ETH,
  blockExplorerUrl: 'https://etherscan.io'
}, {
  labelKey: _network.NETWORK_TYPES.GOERLI,
  iconColor: '#3099f2',
  providerType: _network.NETWORK_TYPES.GOERLI,
  rpcUrl: (0, _network.getRpcUrl)({
    network: _network.NETWORK_TYPES.GOERLI,
    excludeProjectId: true
  }),
  chainId: _network.CHAIN_IDS.GOERLI,
  ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.GOERLI],
  blockExplorerUrl: 'https://goerli.etherscan.io'
}, {
  labelKey: _network.NETWORK_TYPES.SEPOLIA,
  iconColor: '#CFB5F0',
  providerType: _network.NETWORK_TYPES.SEPOLIA,
  rpcUrl: (0, _network.getRpcUrl)({
    network: _network.NETWORK_TYPES.SEPOLIA,
    excludeProjectId: true
  }),
  chainId: _network.CHAIN_IDS.SEPOLIA,
  ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.SEPOLIA],
  blockExplorerUrl: 'https://sepolia.etherscan.io'
}, {
  labelKey: _network.NETWORK_TYPES.LINEA_GOERLI,
  iconColor: '#61dfff',
  providerType: _network.NETWORK_TYPES.LINEA_GOERLI,
  rpcUrl: (0, _network.getRpcUrl)({
    network: _network.NETWORK_TYPES.LINEA_GOERLI,
    excludeProjectId: true
  }),
  chainId: _network.CHAIN_IDS.LINEA_GOERLI,
  ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.LINEA_GOERLI],
  blockExplorerUrl: 'https://goerli.lineascan.build'
}, {
  labelKey: _network.NETWORK_TYPES.LINEA_MAINNET,
  iconColor: '#121212',
  providerType: _network.NETWORK_TYPES.LINEA_MAINNET,
  rpcUrl: (0, _network.getRpcUrl)({
    network: _network.NETWORK_TYPES.LINEA_MAINNET,
    excludeProjectId: true
  }),
  chainId: _network.CHAIN_IDS.LINEA_MAINNET,
  ticker: _network.CURRENCY_SYMBOLS.ETH,
  blockExplorerUrl: 'https://lineascan.build'
}];
exports.defaultNetworksData = defaultNetworksData;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-tab.constants.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab.js", {"../../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"F:\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./networks-form":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-form\\index.js","./networks-tab-content":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-content\\index.js","./networks-tab-subheader":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab-subheader\\index.js","./networks-tab.constants":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\networks-tab.constants.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Cnetworks-tab%5Cnetworks-tab.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _network = require("../../../../shared/constants/network");
var _networksTab = require("./networks-tab.constants");
var _networksTabContent = _interopRequireDefault(require("./networks-tab-content"));
var _networksForm = _interopRequireDefault(require("./networks-form"));
var _networksTabSubheader = _interopRequireDefault(require("./networks-tab-subheader"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const defaultNetworks = _networksTab.defaultNetworksData.map(network => ({
  ...network,
  viewOnly: true,
  isATestNetwork: _network.TEST_CHAINS.includes(network.chainId)
}));
const NetworksTab = ({
  addNewNetwork
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    pathname
  } = (0, _reactRouterDom.useLocation)();
  const history = (0, _reactRouterDom.useHistory)();
  const environmentType = (0, _util.getEnvironmentType)();
  const isFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  const shouldRenderNetworkForm = isFullScreen || Boolean(pathname.match(_routes.NETWORKS_FORM_ROUTE)) || window.location.hash.split('#')[2] === 'blockExplorerUrl';
  const networkConfigurations = (0, _reactRedux.useSelector)(_selectors.getNetworkConfigurations);
  const providerConfig = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const networksTabSelectedNetworkConfigurationId = (0, _reactRedux.useSelector)(_selectors.getNetworksTabSelectedNetworkConfigurationId);
  const isLineaMainnetReleased = (0, _reactRedux.useSelector)(_metamask.isLineaMainnetNetworkReleased);
  const networkConfigurationsList = Object.entries(networkConfigurations).map(([networkConfigurationId, networkConfiguration]) => {
    var _networkConfiguration;
    return {
      label: networkConfiguration.nickname,
      iconColor: 'var(--color-icon-alternative)',
      providerType: _network.NETWORK_TYPES.RPC,
      rpcUrl: networkConfiguration.rpcUrl,
      chainId: networkConfiguration.chainId,
      ticker: networkConfiguration.ticker,
      blockExplorerUrl: ((_networkConfiguration = networkConfiguration.rpcPrefs) === null || _networkConfiguration === void 0 ? void 0 : _networkConfiguration.blockExplorerUrl) || '',
      isATestNetwork: _network.TEST_CHAINS.includes(networkConfiguration.chainId),
      networkConfigurationId
    };
  });
  let networksToRender = [...defaultNetworks, ...networkConfigurationsList];
  if (!isLineaMainnetReleased) {
    networksToRender = networksToRender.filter(network => network.chainId !== _network.BUILT_IN_NETWORKS[_network.NETWORK_TYPES.LINEA_MAINNET].chainId);
  }
  let selectedNetwork = networksToRender.find(network => network.networkConfigurationId === networksTabSelectedNetworkConfigurationId) || {};
  const networkIsSelected = Boolean(selectedNetwork.rpcUrl);
  let networkDefaultedToProvider = false;
  if (!networkIsSelected) {
    selectedNetwork = networksToRender.find(network => {
      return network.rpcUrl === providerConfig.rpcUrl || network.providerType !== _network.NETWORK_TYPES.RPC && network.providerType === providerConfig.type;
    }) || {};
    networkDefaultedToProvider = true;
  }
  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _actions.setSelectedNetworkConfigurationId)(''));
    };
  }, [dispatch]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__body"
  }, isFullScreen ? /*#__PURE__*/_react.default.createElement(_networksTabSubheader.default, {
    addNewNetwork: addNewNetwork
  }) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('networks-tab__content', {
      'networks-tab__content--with-networks-list-popup-footer': !isFullScreen && !shouldRenderNetworkForm
    })
  }, addNewNetwork ? /*#__PURE__*/_react.default.createElement(_networksForm.default, {
    networksToRender: networksToRender,
    addNewNetwork: addNewNetwork,
    submitCallback: () => history.push(_routes.DEFAULT_ROUTE),
    cancelCallback: () => history.push(_routes.NETWORKS_ROUTE)
  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_networksTabContent.default, {
    networkDefaultedToProvider: networkDefaultedToProvider,
    networkIsSelected: networkIsSelected,
    networksToRender: networksToRender,
    providerUrl: providerConfig.rpcUrl,
    selectedNetwork: selectedNetwork,
    shouldRenderNetworkForm: shouldRenderNetworkForm
  }), !isFullScreen && !shouldRenderNetworkForm ? /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__networks-list-popup-footer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: () => {
      isFullScreen ? history.push(_routes.ADD_POPULAR_CUSTOM_NETWORK) : global.platform.openExtensionInBrowser(_routes.ADD_POPULAR_CUSTOM_NETWORK);
    }
  }, t('addNetwork'))) : null)));
};
NetworksTab.propTypes = {
  addNewNetwork: _propTypes.default.bool
};
var _default = NetworksTab;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\networks-tab\\networks-tab.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\security-tab\\index.js", {"./security-tab.container":"F:\\metamask-extension\\ui\\pages\\settings\\security-tab\\security-tab.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csecurity-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _securityTab.default;
  }
});
var _securityTab = _interopRequireDefault(require("./security-tab.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\security-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\security-tab\\security-tab.component.js", {"../../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/lib/ui-utils":"F:\\metamask-extension\\shared\\lib\\ui-utils.js","../../../components/app/srp-quiz-modal/SRPQuiz":"F:\\metamask-extension\\ui\\components\\app\\srp-quiz-modal\\SRPQuiz\\index.ts","../../../components/component-library/button":"F:\\metamask-extension\\ui\\components\\component-library\\button\\index.js","../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../components/ui/toggle-button":"F:\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csecurity-tab%5Csecurity-tab.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lodash = require("lodash");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _metametrics = require("../../../../shared/constants/metametrics");
var _uiUtils = require("../../../../shared/lib/ui-utils");
var _SRPQuiz = _interopRequireDefault(require("../../../components/app/srp-quiz-modal/SRPQuiz"));
var _button = require("../../../components/component-library/button");
var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));
var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));
var _routes = require("../../../helpers/constants/routes");
var _settingsSearch = require("../../../helpers/utils/settings-search");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SecurityTab extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      ipfsGateway: this.props.ipfsGateway,
      ipfsGatewayError: '',
      srpQuizModalVisible: false
    });
    _defineProperty(this, "settingsRefCounter", 0);
    _defineProperty(this, "settingsRefs", Array((0, _settingsSearch.getNumberOfSettingsInSection)(this.context.t, this.context.t('securityAndPrivacy'))).fill(undefined).map(() => {
      return /*#__PURE__*/_react.default.createRef();
    }));
    _defineProperty(this, "hideSrpQuizModal", () => this.setState({
      srpQuizModalVisible: false
    }));
  }
  componentDidUpdate() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('securityAndPrivacy'), this.settingsRefs);
  }
  componentDidMount() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('securityAndPrivacy'), this.settingsRefs);
  }
  toggleSetting(value, eventName, eventAction, toggleMethod) {
    this.context.trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Settings,
      event: eventName,
      properties: {
        action: eventAction,
        legacy_event: true
      }
    });
    toggleMethod(!value);
  }
  // renderSeedWords() {
  //   const { t } = this.context;

  //   return (
  //     <>
  //       <div
  //         ref={this.settingsRefs[0]}
  //         className="settings-page__security-tab-sub-header"
  //       >
  //         {t('secretRecoveryPhrase')}
  //       </div>
  //       <div className="settings-page__content-padded">
  //         <Button
  //           data-testid="reveal-seed-words"
  //           type="danger"
  //           size={BUTTON_SIZES.LG}
  //           onClick={(event) => {
  //             event.preventDefault();
  //             this.context.trackEvent({
  //               category: MetaMetricsEventCategory.Settings,
  //               event: MetaMetricsEventName.KeyExportSelected,
  //               properties: {
  //                 key_type: MetaMetricsEventKeyType.Srp,
  //                 location: 'Settings',
  //               },
  //             });
  //             this.context.trackEvent({
  //               category: MetaMetricsEventCategory.Settings,
  //               event: MetaMetricsEventName.SrpRevealClicked,
  //               properties: {
  //                 key_type: MetaMetricsEventKeyType.Srp,
  //                 location: 'Settings',
  //               },
  //             });
  //             this.setState({ srpQuizModalVisible: true });
  //           }}
  //         >
  //           {t('revealSeedWords')}
  //         </Button>
  //         {this.state.srpQuizModalVisible && (
  //           <SRPQuiz
  //             isOpen={this.state.srpQuizModalVisible}
  //             onClose={this.hideSrpQuizModal}
  //           />
  //         )}
  //       </div>
  //     </>
  //   );
  // }
  renderIncomingTransactionsOptIn() {
    const {
      t
    } = this.context;
    const {
      showIncomingTransactions,
      setShowIncomingTransactionsFeatureFlag
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[1],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('showIncomingTransactions')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('showIncomingTransactionsDescription', [
    /*#__PURE__*/
    // TODO: Update to use real link
    _react.default.createElement("a", {
      href: _uiUtils.ETHERSCAN_PRIVACY_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "etherscan-privacy-link"
    }, t('etherscan')),
    /*#__PURE__*/
    // TODO: Update to use real link
    _react.default.createElement("a", {
      href: _uiUtils.CONSENSYS_PRIVACY_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "ic-consensys-privacy-link"
    }, t('privacyMsg'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col",
      "data-testid": "showIncomingTransactions"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: showIncomingTransactions,
      onToggle: value => setShowIncomingTransactionsFeatureFlag(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  renderPhishingDetectionToggle() {
    const {
      t
    } = this.context;
    const {
      usePhishDetect,
      setUsePhishDetect
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[2],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('usePhishingDetection')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('usePhishingDetectionDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col",
      "data-testid": "usePhishingDetection"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: usePhishDetect,
      onToggle: value => setUsePhishDetect(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  renderMetaMetricsOptIn() {
    const {
      t
    } = this.context;
    const {
      participateInMetaMetrics,
      setParticipateInMetaMetrics
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[3],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('participateInMetaMetrics')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('participateInMetaMetricsDescription')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col",
      "data-testid": "participateInMetaMetrics"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: participateInMetaMetrics,
      onToggle: value => setParticipateInMetaMetrics(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  renderChooseYourNetworkButton() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[4],
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-choose-your-network"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('chooseYourNetwork')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('chooseYourNetworkDescription', [
    /*#__PURE__*/
    // TODO: Update to use real link
    _react.default.createElement("a", {
      href: _uiUtils.CONSENSYS_PRIVACY_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "cyn-consensys-privacy-link"
    }, t('privacyMsg'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_button.Button, {
      type: "secondary",
      className: "settings-page__button",
      onClick: () => {
        (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? global.platform.openExtensionInBrowser(_routes.ADD_POPULAR_CUSTOM_NETWORK) : this.props.history.push(_routes.ADD_POPULAR_CUSTOM_NETWORK);
      }
    }, t('addCustomNetwork')))));
  }
  renderIpfsGatewayControl() {
    const {
      t
    } = this.context;
    const {
      ipfsGatewayError
    } = this.state;
    const handleIpfsGatewaySave = gateway => {
      const url = new URL((0, _util.addUrlProtocolPrefix)(gateway));
      const {
        host
      } = url;
      this.props.setIpfsGateway(host);
    };
    const handleIpfsGatewayChange = url => {
      this.setState(() => {
        let ipfsError = '';
        try {
          const urlObj = new URL((0, _util.addUrlProtocolPrefix)(url));
          if (!urlObj.host) {
            throw new Error();
          }

          // don't allow the use of this gateway
          if (urlObj.host === 'gateway.ipfs.io') {
            throw new Error('Forbidden gateway');
          }
        } catch (error) {
          ipfsError = error.message === 'Forbidden gateway' ? t('forbiddenIpfsGateway') : t('invalidIpfsGateway');
        }
        handleIpfsGatewaySave(url);
        return {
          ipfsGateway: url,
          ipfsGatewayError: ipfsError
        };
      });
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[5],
      className: "settings-page__content-row",
      "data-testid": "setting-ipfs-gateway"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('addCustomIPFSGateway')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('addCustomIPFSGatewayDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      value: this.state.ipfsGateway,
      onChange: e => handleIpfsGatewayChange(e.target.value),
      error: ipfsGatewayError,
      fullWidth: true,
      margin: "dense"
    }))));
  }
  renderAutoDetectTokensToggle() {
    const {
      t
    } = this.context;
    const {
      useTokenDetection,
      setUseTokenDetection
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[6],
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-gas-fee-estimation"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('autoDetectTokens')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('autoDetectTokensDescription', [
    /*#__PURE__*/
    // TODO: Update to use real link
    _react.default.createElement("a", {
      href: _uiUtils.AUTO_DETECT_TOKEN_LEARN_MORE_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "cyn-consensys-privacy-link"
    }, (0, _lodash.startCase)(t('learnMore')))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col",
      "data-testid": "autoDetectTokens"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useTokenDetection,
      onToggle: value => {
        this.toggleSetting(value, _metametrics.MetaMetricsEventName.KeyAutoDetectTokens, _metametrics.MetaMetricsEventName.KeyAutoDetectTokens, setUseTokenDetection);
      },
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  renderBatchAccountBalanceRequestsToggle() {
    const {
      t
    } = this.context;
    const {
      useMultiAccountBalanceChecker,
      setUseMultiAccountBalanceChecker
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[7],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('useMultiAccountBalanceChecker')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('useMultiAccountBalanceCheckerDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col",
      "data-testid": "useMultiAccountBalanceChecker"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useMultiAccountBalanceChecker,
      onToggle: value => {
        this.toggleSetting(value, _metametrics.MetaMetricsEventName.KeyBatchAccountBalanceRequests, _metametrics.MetaMetricsEventName.KeyBatchAccountBalanceRequests, setUseMultiAccountBalanceChecker);
      },
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  renderCurrencyRateCheckToggle() {
    const {
      t
    } = this.context;
    const {
      useCurrencyRateCheck,
      setUseCurrencyRateCheck
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[8],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('currencyRateCheckToggle')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('currencyRateCheckToggleDescription', [/*#__PURE__*/_react.default.createElement("a", {
      key: "coingecko_link",
      href: _uiUtils.COINGECKO_LINK,
      rel: "noreferrer",
      target: "_blank"
    }, t('coingecko')), /*#__PURE__*/_react.default.createElement("a", {
      key: "cryptocompare_link",
      href: _uiUtils.CRYPTOCOMPARE_LINK,
      rel: "noreferrer",
      target: "_blank"
    }, t('cryptoCompare')), /*#__PURE__*/_react.default.createElement("a", {
      key: "privacy_policy_link",
      href: _uiUtils.PRIVACY_POLICY_LINK,
      rel: "noreferrer",
      target: "_blank"
    }, t('privacyMsg'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col",
      "data-testid": "currencyRateCheckToggle"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useCurrencyRateCheck,
      onToggle: value => setUseCurrencyRateCheck(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  render() {
    const {
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, warning && /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__error"
    }, warning), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header__bold"
    }, this.context.t('security')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header__bold"
    }, this.context.t('privacy')), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header"
    }, "Alerts")), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-padded"
    }, this.renderPhishingDetectionToggle()), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header"
    }, this.context.t('transactions')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-padded"
    }, this.renderCurrencyRateCheckToggle(), this.renderIncomingTransactionsOptIn()), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header"
    }, this.context.t('networkProvider')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-padded"
    }, this.renderChooseYourNetworkButton(), this.renderIpfsGatewayControl()), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header"
    }, this.context.t('tokenAutoDetection')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-padded"
    }, this.renderAutoDetectTokensToggle(), this.renderBatchAccountBalanceRequestsToggle()), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__security-tab-sub-header"
    }, this.context.t('metrics')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-padded"
    }, this.renderMetaMetricsOptIn()));
  }
}
exports.default = SecurityTab;
_defineProperty(SecurityTab, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(SecurityTab, "propTypes", {
  warning: _propTypes.default.string,
  history: _propTypes.default.object,
  participateInMetaMetrics: _propTypes.default.bool.isRequired,
  setParticipateInMetaMetrics: _propTypes.default.func.isRequired,
  showIncomingTransactions: _propTypes.default.bool.isRequired,
  setShowIncomingTransactionsFeatureFlag: _propTypes.default.func.isRequired,
  setUsePhishDetect: _propTypes.default.func.isRequired,
  usePhishDetect: _propTypes.default.bool.isRequired,
  useTokenDetection: _propTypes.default.bool.isRequired,
  setUseTokenDetection: _propTypes.default.func.isRequired,
  setIpfsGateway: _propTypes.default.func.isRequired,
  ipfsGateway: _propTypes.default.string.isRequired,
  useMultiAccountBalanceChecker: _propTypes.default.bool.isRequired,
  setUseMultiAccountBalanceChecker: _propTypes.default.func.isRequired,
  useCurrencyRateCheck: _propTypes.default.bool.isRequired,
  setUseCurrencyRateCheck: _propTypes.default.func.isRequired
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\security-tab\\security-tab.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\security-tab\\security-tab.container.js", {"../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./security-tab.component":"F:\\metamask-extension\\ui\\pages\\settings\\security-tab\\security-tab.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csecurity-tab%5Csecurity-tab.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _redux = require("redux");
var _actions = require("../../../store/actions");
var _securityTab = _interopRequireDefault(require("./security-tab.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    appState: {
      warning
    },
    metamask
  } = state;
  const {
    featureFlags: {
      showIncomingTransactions
    } = {},
    participateInMetaMetrics,
    usePhishDetect,
    useTokenDetection,
    ipfsGateway,
    useMultiAccountBalanceChecker,
    useCurrencyRateCheck
  } = metamask;
  return {
    warning,
    showIncomingTransactions,
    participateInMetaMetrics,
    usePhishDetect,
    useTokenDetection,
    ipfsGateway,
    useMultiAccountBalanceChecker,
    useCurrencyRateCheck
  };
};
const mapDispatchToProps = dispatch => {
  return {
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val)),
    setShowIncomingTransactionsFeatureFlag: shouldShow => dispatch((0, _actions.setFeatureFlag)('showIncomingTransactions', shouldShow)),
    setUsePhishDetect: val => dispatch((0, _actions.setUsePhishDetect)(val)),
    setUseCurrencyRateCheck: val => dispatch((0, _actions.setUseCurrencyRateCheck)(val)),
    setUseTokenDetection: value => {
      return dispatch((0, _actions.setUseTokenDetection)(value));
    },
    setIpfsGateway: value => {
      return dispatch((0, _actions.setIpfsGateway)(value));
    },
    setUseMultiAccountBalanceChecker: value => {
      return dispatch((0, _actions.setUseMultiAccountBalanceChecker)(value));
    }
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_securityTab.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\security-tab\\security-tab.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-search-list\\index.js", {"./settings-search-list":"F:\\metamask-extension\\ui\\pages\\settings\\settings-search-list\\settings-search-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-search-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _settingsSearchList = _interopRequireDefault(require("./settings-search-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _settingsSearchList.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-search-list\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-search-list\\settings-search-list.js", {"../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-search-list%5Csettings-search-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SettingsSearchList;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settingsSearch = require("../../../helpers/utils/settings-search");
var _i18n = require("../../../contexts/i18n");
var _componentLibrary = require("../../../components/component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SettingsSearchList({
  results,
  onClickSetting
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  (0, _react.useEffect)(_settingsSearch.highlightSearchedText, [results]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__header__search__list"
  }, results.slice(0, 5).map(result => {
    const {
      icon,
      iconName,
      tabMessage,
      sectionMessage,
      route
    } = result;
    return Boolean(icon || tabMessage || sectionMessage) && /*#__PURE__*/_react.default.createElement("div", {
      key: `settings_${route}`
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__header__search__list__item",
      onClick: () => onClickSetting(result)
    }, iconName ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: iconName
    }) : /*#__PURE__*/_react.default.createElement("i", {
      className: (0, _classnames.default)('settings-page__header__search__list__item__icon', icon)
    }), /*#__PURE__*/_react.default.createElement("span", {
      id: `menu-tab_${route}`,
      className: (0, _classnames.default)('settings-page__header__search__list__item__tab', {
        'settings-page__header__search__list__item__tab-multiple-lines': tabMessage(t) === t('securityAndPrivacy')
      })
    }, tabMessage(t)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.ArrowRight,
      size: _designSystem.Size.SM,
      className: "settings-page__header__search__list__item__caret"
    }), /*#__PURE__*/_react.default.createElement("span", {
      id: `menu-section_${route}`,
      className: (0, _classnames.default)('settings-page__header__search__list__item__section', {
        'settings-page__header__search__list__item__section-multiple-lines': tabMessage(t) === t('securityAndPrivacy') || tabMessage(t) === t('alerts')
      })
    }, sectionMessage(t))));
  }), results.length === 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__header__search__list__item",
    style: {
      cursor: 'auto',
      display: 'flex'
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "settings-page__header__search__list__item__no-matching"
  }, t('settingsSearchMatchingNotFound'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__header__search__list__item",
    style: {
      cursor: 'auto',
      display: 'flex'
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "settings-page__header__search__list__item__request"
  }, t('missingSetting')), /*#__PURE__*/_react.default.createElement("a", {
    href: "https://community.metamask.io/c/feature-requests-ideas/13",
    target: "_blank",
    rel: "noopener noreferrer",
    key: "need-help-link",
    className: "settings-page__header__search__list__item__link"
  }, t('missingSettingRequest'))));
}
SettingsSearchList.propTypes = {
  results: _propTypes.default.array,
  onClickSetting: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-search-list\\settings-search-list.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-search\\index.js", {"./settings-search":"F:\\metamask-extension\\ui\\pages\\settings\\settings-search\\settings-search.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-search%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _settingsSearch = _interopRequireDefault(require("./settings-search"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _settingsSearch.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-search\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-search\\settings-search.js", {"../../../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/icon/search-icon":"F:\\metamask-extension\\ui\\components\\ui\\icon\\search-icon.js","../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","@material-ui/core/InputAdornment":"F:\\metamask-extension\\node_modules\\@material-ui\\core\\InputAdornment\\index.js","fuse.js":"F:\\metamask-extension\\node_modules\\fuse.js\\dist\\fuse.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-search%5Csettings-search.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SettingsSearch;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _fuse = _interopRequireDefault(require("fuse.js"));
var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));
var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));
var _i18n = require("../../../contexts/i18n");
var _searchIcon = _interopRequireDefault(require("../../../components/ui/icon/search-icon"));
var _stringUtils = require("../../../../shared/modules/string-utils");
var _componentLibrary = require("../../../components/component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SettingsSearch({
  onSearch,
  error,
  settingsRoutesList
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const [searchIconColor, setSearchIconColor] = (0, _react.useState)('var(--color-icon-muted)');
  const settingsRoutesListArray = Object.values(settingsRoutesList);
  const settingsSearchFuse = new _fuse.default(settingsRoutesListArray, {
    shouldSort: true,
    threshold: 0.3,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 1,
    keys: ['tabMessage', 'sectionMessage', 'descriptionMessage'],
    getFn: (routeObject, path) => routeObject[path](t)
  });
  const handleSearch = _searchQuery => {
    const sanitizedSearchQuery = _searchQuery.replace(/[^A-Za-z0-9\s&_]/gu, '').trimStart();
    setSearchQuery(sanitizedSearchQuery);
    if (sanitizedSearchQuery === '') {
      setSearchIconColor('var(--color-icon-muted)');
    } else {
      setSearchIconColor('var(--color-icon-default)');
    }
    const fuseSearchResult = settingsSearchFuse.search(sanitizedSearchQuery);
    const addressSearchResult = settingsRoutesListArray.filter(routes => {
      return routes.tabMessage && sanitizedSearchQuery && (0, _stringUtils.isEqualCaseInsensitive)(routes.tab, sanitizedSearchQuery);
    });
    const results = [...addressSearchResult, ...fuseSearchResult];
    onSearch({
      searchQuery: sanitizedSearchQuery,
      results
    });
  };
  const renderStartAdornment = () => {
    return /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
      position: "start",
      style: {
        marginRight: '12px'
      }
    }, /*#__PURE__*/_react.default.createElement(_searchIcon.default, {
      color: searchIconColor
    }));
  };
  const renderEndAdornment = () => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, searchQuery && /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
      className: "imageclosectn",
      position: "end",
      onClick: () => handleSearch(''),
      style: {
        cursor: 'pointer'
      }
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Close,
      color: _designSystem.IconColor.iconDefault
    })));
  };
  return /*#__PURE__*/_react.default.createElement(_textField.default, {
    id: "search-settings",
    placeholder: t('search'),
    type: "text",
    value: searchQuery,
    onChange: e => handleSearch(e.target.value),
    error: error,
    fullWidth: true,
    autoFocus: true,
    autoComplete: "off",
    startAdornment: renderStartAdornment(),
    endAdornment: renderEndAdornment()
  });
}
SettingsSearch.propTypes = {
  onSearch: _propTypes.default.func,
  error: _propTypes.default.string,
  settingsRoutesList: _propTypes.default.array
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-search\\settings-search.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-tab\\index.js", {"./settings-tab.container":"F:\\metamask-extension\\ui\\pages\\settings\\settings-tab\\settings-tab.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _settingsTab.default;
  }
});
var _settingsTab = _interopRequireDefault(require("./settings-tab.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-tab\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-tab\\settings-tab.component.js", {"../../../../app/_locales/index.json":"F:\\metamask-extension\\app\\_locales\\index.json","../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/preferences":"F:\\metamask-extension\\shared\\constants\\preferences.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/dropdown":"F:\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","../../../components/ui/identicon/blockieIdenticon":"F:\\metamask-extension\\ui\\components\\ui\\identicon\\blockieIdenticon\\index.js","../../../components/ui/jazzicon":"F:\\metamask-extension\\ui\\components\\ui\\jazzicon\\index.js","../../../components/ui/toggle-button":"F:\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../helpers/constants/available-conversions.json":"F:\\metamask-extension\\ui\\helpers\\constants\\available-conversions.json","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-tab%5Csettings-tab.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _availableConversions = _interopRequireDefault(require("../../../helpers/constants/available-conversions.json"));
var _designSystem = require("../../../helpers/constants/design-system");
var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));
var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));
var _index = _interopRequireDefault(require("../../../../app/_locales/index.json"));
var _jazzicon = _interopRequireDefault(require("../../../components/ui/jazzicon"));
var _blockieIdenticon = _interopRequireDefault(require("../../../components/ui/identicon/blockieIdenticon"));
var _metametrics = require("../../../../shared/constants/metametrics");
var _settingsSearch = require("../../../helpers/utils/settings-search");
var _preferences = require("../../../../shared/constants/preferences");
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const sortedCurrencies = _availableConversions.default.sort((a, b) => {
  return a.name.toLocaleLowerCase().localeCompare(b.name.toLocaleLowerCase());
});
const currencyOptions = sortedCurrencies.map(({
  code,
  name
}) => {
  return {
    name: `${code.toUpperCase()} - ${name}`,
    value: code
  };
});
const localeOptions = _index.default.map(locale => {
  return {
    name: `${locale.name}`,
    value: locale.code
  };
});
class SettingsTab extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "settingsRefs", Array((0, _settingsSearch.getNumberOfSettingsInSection)(this.context.t, this.context.t('general'))).fill(undefined).map(() => {
      return /*#__PURE__*/_react.default.createRef();
    }));
  }
  componentDidUpdate() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('general'), this.settingsRefs);
  }
  componentDidMount() {
    const {
      t
    } = this.context;
    (0, _settingsSearch.handleSettingsRefs)(t, t('general'), this.settingsRefs);
  }
  renderCurrentConversion() {
    const {
      t
    } = this.context;
    const {
      currentCurrency,
      setCurrentCurrency,
      lastFetchedConversionDate
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[0],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('currencyConversion')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-description"
    }, lastFetchedConversionDate ? t('updatedWithDate', [new Date(lastFetchedConversionDate * 1000).toString()]) : t('noConversionDateAvailable'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      "data-testid": "currency-select",
      id: "select-currency",
      options: currencyOptions,
      selectedOption: currentCurrency,
      onChange: newCurrency => setCurrentCurrency(newCurrency)
    }))));
  }
  renderCurrentLocale() {
    const {
      t
    } = this.context;
    const {
      updateCurrentLocale,
      currentLocale
    } = this.props;
    const currentLocaleMeta = _index.default.find(locale => locale.code === currentLocale);
    const currentLocaleName = currentLocaleMeta ? currentLocaleMeta.name : '';
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[2],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-label"
    }, t('currentLanguage')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-description"
    }, currentLocaleName)), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      "data-testid": "locale-select",
      id: "select-locale",
      options: localeOptions,
      selectedOption: currentLocale,
      onChange: async newLocale => updateCurrentLocale(newLocale)
    }))));
  }
  renderHideZeroBalanceTokensOptIn() {
    const {
      t
    } = this.context;
    const {
      hideZeroBalanceTokens,
      setHideZeroBalanceTokens
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[5],
      "data-testid": "hide-zero-balance-tokens",
      className: "settings-page__content-row",
      id: "toggle-zero-balance"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('hideZeroBalanceTokens'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: hideZeroBalanceTokens,
      onToggle: value => setHideZeroBalanceTokens(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }
  renderBlockieOptIn() {
    const {
      t
    } = this.context;
    const {
      useBlockie,
      setUseBlockie,
      selectedAddress,
      tokenList
    } = this.props;
    const getIconStyles = () => ({
      display: 'block',
      borderRadius: '16px',
      width: '32px',
      height: '32px'
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[4],
      className: "settings-page__content-row",
      id: "blockie-optin"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd,
      as: "h5",
      color: _designSystem.TextColor.textDefault
    }, t('accountIdenticon')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-item__description"
    }, t('jazzAndBlockies')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item__identicon"
    }, /*#__PURE__*/_react.default.createElement("button", {
      "data-testid": "jazz_icon",
      onClick: () => setUseBlockie(false),
      className: "settings-page__content-item__identicon__item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('settings-page__content-item__identicon__item__icon', {
        'settings-page__content-item__identicon__item__icon--active': !useBlockie
      })
    }, /*#__PURE__*/_react.default.createElement(_jazzicon.default, {
      id: "jazzicon",
      address: selectedAddress,
      diameter: 32,
      tokenList: tokenList,
      style: getIconStyles()
    })), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      color: _designSystem.TextColor.textDefault,
      variant: _designSystem.TextVariant.bodySm,
      as: "h6",
      marginTop: 0,
      marginRight: 12,
      marginBottom: 0,
      marginLeft: 3
    }, t('jazzicons'))), /*#__PURE__*/_react.default.createElement("button", {
      "data-testid": "blockie_icon",
      onClick: () => setUseBlockie(true),
      className: "settings-page__content-item__identicon__item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('settings-page__content-item__identicon__item__icon', {
        'settings-page__content-item__identicon__item__icon--active': useBlockie
      })
    }, /*#__PURE__*/_react.default.createElement(_blockieIdenticon.default, {
      id: "blockies",
      address: selectedAddress,
      diameter: 32,
      borderRadius: "50%"
    })), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      color: _designSystem.TextColor.textDefault,
      variant: _designSystem.TextVariant.bodySm,
      as: "h6",
      marginTop: 3,
      marginRight: 0,
      marginBottom: 3,
      marginLeft: 3
    }, t('blockies'))))));
  }
  renderUsePrimaryCurrencyOptions() {
    const {
      t
    } = this.context;
    const {
      nativeCurrency,
      setUseNativeCurrencyAsPrimaryCurrencyPreference,
      useNativeCurrencyAsPrimaryCurrency
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[1],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('primaryCurrencySetting')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('primaryCurrencySettingDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__radio-buttons"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__radio-button"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      "data-testid": "toggle-native-currency",
      id: "native-primary-currency",
      onChange: () => setUseNativeCurrencyAsPrimaryCurrencyPreference(true),
      checked: Boolean(useNativeCurrencyAsPrimaryCurrency)
    }), /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "native-primary-currency",
      className: "settings-tab__radio-label"
    }, nativeCurrency)), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__radio-button"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      "data-testid": "toggle-fiat-currency",
      id: "fiat-primary-currency",
      onChange: () => setUseNativeCurrencyAsPrimaryCurrencyPreference(false),
      checked: !useNativeCurrencyAsPrimaryCurrency
    }), /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "fiat-primary-currency",
      className: "settings-tab__radio-label"
    }, t('fiat')))))));
  }
  renderTheme() {
    const {
      t
    } = this.context;
    const {
      theme,
      setTheme
    } = this.props;
    const themesOptions = [{
      name: t('lightTheme'),
      value: _preferences.ThemeType.light
    }, {
      name: t('darkTheme'),
      value: _preferences.ThemeType.dark
    }, {
      name: t('osTheme'),
      value: _preferences.ThemeType.os
    }];
    const onChange = newTheme => {
      this.context.trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Settings,
        event: 'Theme Changed',
        properties: {
          theme_selected: newTheme
        }
      });
      setTheme(newTheme);
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.settingsRefs[3],
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, this.context.t('theme')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, this.context.t('themeDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      id: "select-theme",
      options: themesOptions,
      selectedOption: theme,
      onChange: onChange
    }))));
  }
  render() {
    const {
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, warning ? /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__error"
    }, warning) : null, this.renderCurrentConversion(), this.renderUsePrimaryCurrencyOptions(), this.renderCurrentLocale(), this.renderTheme(), this.renderBlockieOptIn(), this.renderHideZeroBalanceTokensOptIn());
  }
}
exports.default = SettingsTab;
_defineProperty(SettingsTab, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(SettingsTab, "propTypes", {
  setUseBlockie: _propTypes.default.func,
  setCurrentCurrency: _propTypes.default.func,
  warning: _propTypes.default.string,
  updateCurrentLocale: _propTypes.default.func,
  currentLocale: _propTypes.default.string,
  useBlockie: _propTypes.default.bool,
  currentCurrency: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool,
  setUseNativeCurrencyAsPrimaryCurrencyPreference: _propTypes.default.func,
  hideZeroBalanceTokens: _propTypes.default.bool,
  setHideZeroBalanceTokens: _propTypes.default.func,
  lastFetchedConversionDate: _propTypes.default.number,
  selectedAddress: _propTypes.default.string,
  tokenList: _propTypes.default.object,
  theme: _propTypes.default.string,
  setTheme: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-tab\\settings-tab.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings-tab\\settings-tab.container.js", {"../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./settings-tab.component":"F:\\metamask-extension\\ui\\pages\\settings\\settings-tab\\settings-tab.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings-tab%5Csettings-tab.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _settingsTab = _interopRequireDefault(require("./settings-tab.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    appState: {
      warning
    },
    metamask
  } = state;
  const {
    currentCurrency,
    nativeCurrency,
    useBlockie,
    currentLocale,
    selectedAddress
  } = metamask;
  const {
    useNativeCurrencyAsPrimaryCurrency,
    hideZeroBalanceTokens
  } = (0, _selectors.getPreferences)(state);
  const {
    lastFetchedConversionDate
  } = ownProps;
  const tokenList = (0, _selectors.getTokenList)(state);
  return {
    warning,
    currentLocale,
    currentCurrency,
    nativeCurrency,
    useBlockie,
    useNativeCurrencyAsPrimaryCurrency,
    hideZeroBalanceTokens,
    lastFetchedConversionDate,
    selectedAddress,
    tokenList,
    theme: (0, _selectors.getTheme)(state)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    setCurrentCurrency: currency => dispatch((0, _actions.setCurrentCurrency)(currency)),
    setUseBlockie: value => dispatch((0, _actions.setUseBlockie)(value)),
    updateCurrentLocale: key => dispatch((0, _actions.updateCurrentLocale)(key)),
    setUseNativeCurrencyAsPrimaryCurrencyPreference: value => {
      return dispatch((0, _actions.setUseNativeCurrencyAsPrimaryCurrencyPreference)(value));
    },
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val)),
    setHideZeroBalanceTokens: value => dispatch((0, _actions.setHideZeroBalanceTokens)(value)),
    setTheme: val => dispatch((0, _actions.setTheme)(val))
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_settingsTab.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings-tab\\settings-tab.container.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings.component.js", {"../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../components/app/add-network/add-network":"F:\\metamask-extension\\ui\\components\\app\\add-network\\add-network.js","../../components/app/tab-bar":"F:\\metamask-extension\\ui\\components\\app\\tab-bar\\index.js","../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/metafox-logo":"F:\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../helpers/utils/settings-search":"F:\\metamask-extension\\ui\\helpers\\utils\\settings-search.js","./advanced-tab":"F:\\metamask-extension\\ui\\pages\\settings\\advanced-tab\\index.js","./alerts-tab":"F:\\metamask-extension\\ui\\pages\\settings\\alerts-tab\\index.js","./contact-list-tab":"F:\\metamask-extension\\ui\\pages\\settings\\contact-list-tab\\index.js","./experimental-tab":"F:\\metamask-extension\\ui\\pages\\settings\\experimental-tab\\index.js","./info-tab":"F:\\metamask-extension\\ui\\pages\\settings\\info-tab\\index.js","./networks-tab":"F:\\metamask-extension\\ui\\pages\\settings\\networks-tab\\index.js","./security-tab":"F:\\metamask-extension\\ui\\pages\\settings\\security-tab\\index.js","./settings-search":"F:\\metamask-extension\\ui\\pages\\settings\\settings-search\\index.js","./settings-search-list":"F:\\metamask-extension\\ui\\pages\\settings\\settings-search-list\\index.js","./settings-tab":"F:\\metamask-extension\\ui\\pages\\settings\\settings-tab\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _classnames = _interopRequireDefault(require("classnames"));
var _tabBar = _interopRequireDefault(require("../../components/app/tab-bar"));
var _routes = require("../../helpers/constants/routes");
var _settingsSearch = require("../../helpers/utils/settings-search");
var _addNetwork = _interopRequireDefault(require("../../components/app/add-network/add-network"));
var _componentLibrary = require("../../components/component-library");
var _designSystem = require("../../helpers/constants/design-system");
var _metafoxLogo = _interopRequireDefault(require("../../components/ui/metafox-logo"));
var _util = require("../../../app/scripts/lib/util");
var _app = require("../../../shared/constants/app");
var _settingsTab = _interopRequireDefault(require("./settings-tab"));
var _alertsTab = _interopRequireDefault(require("./alerts-tab"));
var _networksTab = _interopRequireDefault(require("./networks-tab"));
var _advancedTab = _interopRequireDefault(require("./advanced-tab"));
var _infoTab = _interopRequireDefault(require("./info-tab"));
var _securityTab = _interopRequireDefault(require("./security-tab"));
var _contactListTab = _interopRequireDefault(require("./contact-list-tab"));
var _experimentalTab = _interopRequireDefault(require("./experimental-tab"));
var _settingsSearch2 = _interopRequireDefault(require("./settings-search"));
var _settingsSearchList = _interopRequireDefault(require("./settings-search-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SettingsPage extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isSearchList: false,
      lastFetchedConversionDate: null,
      searchResults: [],
      searchText: ''
    });
  }
  componentDidMount() {
    this.handleConversionDate();
  }
  componentDidUpdate() {
    this.handleConversionDate();
  }
  handleConversionDate() {
    const {
      conversionDate
    } = this.props;
    if (conversionDate !== null) {
      this.setState({
        lastFetchedConversionDate: conversionDate
      });
    }
  }
  handleClickSetting(setting) {
    const {
      history
    } = this.props;
    history.push(setting.route);
    this.setState({
      isSearchList: '',
      searchResults: ''
    });
  }
  render() {
    const {
      history,
      backRoute,
      currentPath,
      mostRecentOverviewPage,
      addNewNetwork,
      isSnapViewPage
    } = this.props;
    const {
      searchResults,
      isSearchList,
      searchText
    } = this.state;
    const {
      t
    } = this.context;
    const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('main-container settings-page', {
        'settings-page--selected': currentPath !== _routes.SETTINGS_ROUTE
      })
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Box, {
      className: "settings-page__header",
      padding: 4,
      paddingBottom: [2, 4]
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__header__title-container"
    }, isPopup && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, currentPath === _routes.SETTINGS_ROUTE ? /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, {
      className: "settings-page__header__title-container__metamask-logo",
      unsetIconHeight: true,
      onClick: async () => history.push(_routes.DEFAULT_ROUTE),
      display: [_designSystem.Display.Flex, _designSystem.Display.None]
    }) : /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      ariaLabel: t('back'),
      iconName: _componentLibrary.IconName.ArrowLeft,
      className: "settings-page__header__title-container__back-button",
      color: _designSystem.Color.iconDefault,
      onClick: () => history.push(backRoute),
      display: [_designSystem.Display.Flex, _designSystem.Display.None],
      size: _componentLibrary.ButtonIconSize.Sm
    })), this.renderTitle(), /*#__PURE__*/_react.default.createElement(_componentLibrary.Box, {
      className: "settings-page__header__title-container__search",
      display: [_designSystem.Display.BLOCK]
    }, /*#__PURE__*/_react.default.createElement(_settingsSearch2.default, {
      onSearch: ({
        searchQuery = '',
        results = []
      }) => {
        this.setState({
          isSearchList: searchQuery !== '',
          searchResults: results,
          searchText: searchQuery
        });
      },
      settingsRoutesList: (0, _settingsSearch.getSettingsRoutes)()
    }), isSearchList && searchText.length >= 3 && /*#__PURE__*/_react.default.createElement(_settingsSearchList.default, {
      results: searchResults,
      onClickSetting: setting => this.handleClickSetting(setting)
    })), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      className: "settings-page__header__title-container__close-button",
      iconName: _componentLibrary.IconName.Close,
      ariaLabel: t('close'),
      onClick: () => {
        if (addNewNetwork) {
          history.push(_routes.NETWORKS_ROUTE);
        } else {
          history.push(mostRecentOverviewPage);
        }
      },
      size: _componentLibrary.ButtonIconSize.Sm,
      marginLeft: "auto"
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content__tabs"
    }, this.renderTabs()), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content__modules"
    }, isSnapViewPage ? null : this.renderSubHeader(), this.renderContent())));
  }
  renderTitle() {
    const {
      t
    } = this.context;
    const {
      isPopup,
      pathnameI18nKey,
      addressName,
      isSnapViewPage
    } = this.props;
    let titleText;
    if (isSnapViewPage) {
      titleText = t('snaps');
    } else if (isPopup && addressName) {
      titleText = t('details');
    } else if (pathnameI18nKey && isPopup) {
      titleText = t(pathnameI18nKey);
    } else {
      titleText = t('settings');
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__header__title-container__title"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.headingMd
    }, titleText));
  }
  renderSubHeader() {
    const {
      t
    } = this.context;
    const {
      currentPath,
      isPopup,
      isAddressEntryPage,
      pathnameI18nKey,
      addressName,
      initialBreadCrumbRoute,
      breadCrumbTextKey,
      history,
      initialBreadCrumbKey
    } = this.props;
    let subheaderText;
    if (isPopup && isAddressEntryPage) {
      subheaderText = t('settings');
    } else if (isAddressEntryPage) {
      subheaderText = t('contacts');
    } else if (initialBreadCrumbKey) {
      subheaderText = t(initialBreadCrumbKey);
    } else {
      subheaderText = t(pathnameI18nKey || 'general');
    }
    return !currentPath.startsWith(_routes.NETWORKS_ROUTE) && /*#__PURE__*/_react.default.createElement(_componentLibrary.Box, {
      className: "settings-page__subheader",
      padding: 4,
      paddingLeft: 6,
      paddingRight: 6,
      display: _designSystem.Display.Flex,
      flexDirection: _designSystem.FlexDirection.Row,
      alignItems: _designSystem.AlignItems.center
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      className: (0, _classnames.default)({
        'settings-page__subheader--link': initialBreadCrumbRoute
      }),
      variant: _designSystem.TextVariant.headingSm,
      onClick: () => initialBreadCrumbRoute && history.push(initialBreadCrumbRoute)
    }, subheaderText), breadCrumbTextKey && /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__subheader--break"
    }, /*#__PURE__*/_react.default.createElement("span", null, ' > '), t(breadCrumbTextKey)), isAddressEntryPage && /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__subheader--break"
    }, /*#__PURE__*/_react.default.createElement("span", null, ' > '), addressName));
  }
  renderTabs() {
    const {
      history,
      currentPath
    } = this.props;
    const {
      t
    } = this.context;
    const tabs = [{
      content: t('general'),
      icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Setting
      }),
      key: _routes.GENERAL_ROUTE
    }, {
      content: t('advanced'),
      icon: /*#__PURE__*/_react.default.createElement("i", {
        className: "fas fa-sliders-h"
      }),
      key: _routes.ADVANCED_ROUTE
    }, {
      content: t('contacts'),
      icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Book
      }),
      key: _routes.CONTACT_LIST_ROUTE
    }, {
      content: t('securityAndPrivacy'),
      icon: /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-lock"
      }),
      key: _routes.SECURITY_ROUTE
    }, {
      content: t('alerts'),
      icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Notification
      }),
      key: _routes.ALERTS_ROUTE
    }, {
      content: t('networks'),
      icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Plug
      }),
      key: _routes.NETWORKS_ROUTE
    }, {
      content: t('experimental'),
      icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Flask
      }),
      key: _routes.EXPERIMENTAL_ROUTE
    }, {
      content: t('about'),
      icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Info
      }),
      key: _routes.ABOUT_US_ROUTE
    }];
    return /*#__PURE__*/_react.default.createElement(_tabBar.default, {
      tabs: tabs,
      isActive: key => {
        if (key === _routes.GENERAL_ROUTE && currentPath === _routes.SETTINGS_ROUTE) {
          return true;
        }
        if (key === _routes.CONTACT_LIST_ROUTE && currentPath.includes(_routes.CONTACT_LIST_ROUTE)) {
          return true;
        }
        return (0, _reactRouterDom.matchPath)(currentPath, {
          exact: true,
          path: key
        });
      },
      onSelect: key => history.push(key)
    });
  }
  renderContent() {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.GENERAL_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_settingsTab.default, _extends({}, routeProps, {
        lastFetchedConversionDate: this.state.lastFetchedConversionDate
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.ABOUT_US_ROUTE,
      component: _infoTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.ADVANCED_ROUTE,
      component: _advancedTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.ALERTS_ROUTE,
      component: _alertsTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.ADD_NETWORK_ROUTE,
      render: () => /*#__PURE__*/_react.default.createElement(_networksTab.default, {
        addNewNetwork: true
      })
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.NETWORKS_ROUTE,
      render: () => /*#__PURE__*/_react.default.createElement(_networksTab.default, {
        addNewNetwork: false
      })
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.ADD_POPULAR_CUSTOM_NETWORK,
      render: () => /*#__PURE__*/_react.default.createElement(_addNetwork.default, null)
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.SECURITY_ROUTE,
      component: _securityTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.EXPERIMENTAL_ROUTE,
      component: _experimentalTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.CONTACT_LIST_ROUTE,
      component: _contactListTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.CONTACT_ADD_ROUTE,
      component: _contactListTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONTACT_EDIT_ROUTE}/:id`,
      component: _contactListTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONTACT_VIEW_ROUTE}/:id`,
      component: _contactListTab.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      render: routeProps => /*#__PURE__*/_react.default.createElement(_settingsTab.default, _extends({}, routeProps, {
        lastFetchedConversionDate: this.state.lastFetchedConversionDate
      }))
    }));
  }
}
_defineProperty(SettingsPage, "propTypes", {
  addNewNetwork: _propTypes.default.bool,
  addressName: _propTypes.default.string,
  backRoute: _propTypes.default.string,
  breadCrumbTextKey: _propTypes.default.string,
  conversionDate: _propTypes.default.number,
  currentPath: _propTypes.default.string,
  history: _propTypes.default.object,
  initialBreadCrumbKey: _propTypes.default.string,
  initialBreadCrumbRoute: _propTypes.default.string,
  isAddressEntryPage: _propTypes.default.bool,
  isPopup: _propTypes.default.bool,
  isSnapViewPage: _propTypes.default.bool,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  pathnameI18nKey: _propTypes.default.string
});
_defineProperty(SettingsPage, "contextTypes", {
  t: _propTypes.default.func
});
var _default = SettingsPage;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings.component.js",}],
["F:\\metamask-extension\\ui\\pages\\settings\\settings.container.js", {"../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../shared/constants/app":"F:\\metamask-extension\\shared\\constants\\app.ts","../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../ducks/history/history":"F:\\metamask-extension\\ui\\ducks\\history\\history.js","../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","./settings.component":"F:\\metamask-extension\\ui\\pages\\settings\\settings.component.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"F:\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Csettings%5Csettings.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _selectors = require("../../selectors");
var _app = require("../../../shared/constants/app");
var _util = require("../../../app/scripts/lib/util");
var _history = require("../../ducks/history/history");
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
var _routes = require("../../helpers/constants/routes");
var _settings = _interopRequireDefault(require("./settings.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ROUTES_TO_I18N_KEYS = {
  [_routes.ABOUT_US_ROUTE]: 'about',
  [_routes.ADD_NETWORK_ROUTE]: 'networks',
  [_routes.ADD_POPULAR_CUSTOM_NETWORK]: 'addNetwork',
  [_routes.ADVANCED_ROUTE]: 'advanced',
  [_routes.ALERTS_ROUTE]: 'alerts',
  [_routes.CONTACT_ADD_ROUTE]: 'newContact',
  [_routes.CONTACT_EDIT_ROUTE]: 'editContact',
  [_routes.CONTACT_LIST_ROUTE]: 'contacts',
  [_routes.CONTACT_VIEW_ROUTE]: 'viewContact',
  [_routes.EXPERIMENTAL_ROUTE]: 'experimental',
  [_routes.GENERAL_ROUTE]: 'general',
  [_routes.NETWORKS_FORM_ROUTE]: 'networks',
  [_routes.NETWORKS_ROUTE]: 'networks',
  [_routes.SECURITY_ROUTE]: 'securityAndPrivacy',
  [_routes.SNAPS_LIST_ROUTE]: 'snaps',
  [_routes.SNAPS_VIEW_ROUTE]: 'snaps'
};
const mapStateToProps = (state, ownProps) => {
  const {
    location
  } = ownProps;
  const {
    pathname
  } = location;
  const {
    metamask: {
      conversionDate
    }
  } = state;
  const pathNameTail = pathname.match(/[^/]+$/u)[0];
  const isAddressEntryPage = pathNameTail.includes('0x');
  const isSnapViewPage = Boolean(pathname.match(_routes.SNAPS_VIEW_ROUTE));
  const isAddContactPage = Boolean(pathname.match(_routes.CONTACT_ADD_ROUTE));
  const isEditContactPage = Boolean(pathname.match(_routes.CONTACT_EDIT_ROUTE));
  const isNetworksFormPage = Boolean(pathname.match(_routes.NETWORKS_FORM_ROUTE)) || Boolean(pathname.match(_routes.ADD_NETWORK_ROUTE));
  const addNewNetwork = Boolean(pathname.match(_routes.ADD_NETWORK_ROUTE));
  const isAddPopularCustomNetwork = Boolean(pathname.match(_routes.ADD_POPULAR_CUSTOM_NETWORK));
  const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;
  const pathnameI18nKey = ROUTES_TO_I18N_KEYS[pathname];
  let backRoute = _routes.SETTINGS_ROUTE;
  if (isEditContactPage) {
    backRoute = `${_routes.CONTACT_VIEW_ROUTE}/${pathNameTail}`;
  } else if (isAddressEntryPage || isAddContactPage) {
    backRoute = _routes.CONTACT_LIST_ROUTE;
  } else if (isNetworksFormPage) {
    backRoute = _routes.NETWORKS_ROUTE;
  } else if (isSnapViewPage) {
    backRoute = _routes.SNAPS_LIST_ROUTE;
  } else if (isAddPopularCustomNetwork) {
    backRoute = _routes.NETWORKS_ROUTE;
  }
  let initialBreadCrumbRoute;
  let initialBreadCrumbKey;
  const addressName = (0, _selectors.getAddressBookEntryOrAccountName)(state, !(0, _hexstringUtils.isBurnAddress)(pathNameTail) && (0, _hexstringUtils.isValidHexAddress)(pathNameTail, {
    mixedCaseUseChecksum: true
  }) ? pathNameTail : '');
  return {
    addNewNetwork,
    addressName,
    backRoute,
    conversionDate,
    currentPath: pathname,
    initialBreadCrumbKey,
    initialBreadCrumbRoute,
    isAddressEntryPage,
    isPopup,
    isSnapViewPage,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    pathnameI18nKey
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(_settings.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\settings\\settings.container.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-signatures\\awaiting-signatures.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/pulse-loader":"F:\\metamask-extension\\ui\\components\\ui\\pulse-loader\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors/selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","./swap-step-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-signatures\\swap-step-icon.js","lodash/isEqual":"F:\\metamask-extension\\node_modules\\lodash\\isEqual.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-signatures%5Cawaiting-signatures.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AwaitingSignatures;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _i18n = require("../../../contexts/i18n");
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors/selectors");
var _routes = require("../../../helpers/constants/routes");
var _pulseLoader = _interopRequireDefault(require("../../../components/ui/pulse-loader"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _componentLibrary = require("../../../components/component-library");
var _swapStepIcon = _interopRequireDefault(require("./swap-step-icon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function AwaitingSignatures() {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _isEqual.default);
  const {
    destinationTokenInfo,
    sourceTokenInfo
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const approveTxParams = (0, _reactRedux.useSelector)(_swaps.getApproveTxParams, _reactRedux.shallowEqual);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const needsTwoConfirmations = Boolean(approveTxParams);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  (0, _react.useEffect)(() => {
    trackEvent({
      event: 'Awaiting Signature(s) on a HW wallet',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        needs_two_confirmations: needsTwoConfirmations,
        token_from: sourceTokenInfo === null || sourceTokenInfo === void 0 ? void 0 : sourceTokenInfo.symbol,
        token_from_amount: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value,
        token_to: destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.symbol,
        request_type: fetchParams !== null && fetchParams !== void 0 && fetchParams.balanceError ? 'Quote' : 'Order',
        slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
        custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) === 2,
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const headerText = needsTwoConfirmations ? t('swapTwoTransactions') : t('swapConfirmWithHwWallet');
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "awaiting-signatures"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 8,
    paddingRight: 8,
    height: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JustifyContent.center,
    display: _designSystem.DISPLAY.FLEX,
    className: "awaiting-signatures__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_pulseLoader.default, null)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.headingMd,
    as: "h3"
  }, headerText), needsTwoConfirmations && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMdBold,
    marginTop: 2
  }, t('swapToConfirmWithHwWallet')), /*#__PURE__*/_react.default.createElement("ul", {
    className: "awaiting-signatures__steps"
  }, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_swapStepIcon.default, {
    stepNumber: 1
  }), t('swapAllowSwappingOf', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span",
    variant: _designSystem.TextVariant.bodyMdBold,
    key: "allowToken"
  }, destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.symbol)])), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_swapStepIcon.default, {
    stepNumber: 2
  }), t('swapFromTo', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span",
    variant: _designSystem.TextVariant.bodyMdBold,
    key: "tokenFrom"
  }, sourceTokenInfo === null || sourceTokenInfo === void 0 ? void 0 : sourceTokenInfo.symbol), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span",
    variation: _designSystem.TextVariant.bodyMdBold,
    key: "tokenTo"
  }, destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.symbol)]))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd
  }, t('swapGasFeesSplit')))), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: async () => {
      await dispatch((0, _swaps.prepareToLeaveSwaps)());
      // Go to the default route and then to the build quote route in order to clean up
      // the `inputValue` local state in `pages/swaps/index.js`
      history.push(_routes.DEFAULT_ROUTE);
      history.push(_routes.BUILD_QUOTE_ROUTE);
    },
    submitText: t('cancel'),
    hideCancel: true
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-signatures\\awaiting-signatures.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-signatures\\index.js", {"./awaiting-signatures":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-signatures\\awaiting-signatures.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-signatures%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _awaitingSignatures.default;
  }
});
var _awaitingSignatures = _interopRequireDefault(require("./awaiting-signatures"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-signatures\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-signatures\\swap-step-icon.js", {"prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-signatures%5Cswap-step-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapStepIcon;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function SwapStepIcon({
  stepNumber = 1
}) {
  switch (stepNumber) {
    case 1:
      return /*#__PURE__*/_react.default.createElement("svg", {
        width: "14",
        height: "14",
        viewBox: "0 0 14 14",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/_react.default.createElement("circle", {
        cx: "7",
        cy: "7",
        r: "6.25",
        stroke: "var(--color-primary-default)",
        strokeWidth: "1.5"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M6.50983 5.192H5.27783L6.14183 4H7.71783V9.68H6.50983V5.192Z",
        fill: "var(--color-primary-default)"
      }));
    case 2:
      return /*#__PURE__*/_react.default.createElement("svg", {
        width: "14",
        height: "14",
        viewBox: "0 0 14 14",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/_react.default.createElement("circle", {
        cx: "7",
        cy: "7",
        r: "6.25",
        stroke: "var(--color-primary-default)",
        strokeWidth: "1.5"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M8.92 9.776H5V9.368C5 9.048 5.056 8.77067 5.168 8.536C5.28 8.296 5.42133 8.08533 5.592 7.904C5.768 7.71733 5.96267 7.54933 6.176 7.4C6.39467 7.25067 6.608 7.10133 6.816 6.952C6.928 6.872 7.03467 6.78933 7.136 6.704C7.24267 6.61867 7.33333 6.53067 7.408 6.44C7.488 6.34933 7.552 6.256 7.6 6.16C7.648 6.064 7.672 5.96533 7.672 5.864C7.672 5.67733 7.616 5.52 7.504 5.392C7.39733 5.25867 7.22933 5.192 7 5.192C6.88267 5.192 6.776 5.21333 6.68 5.256C6.584 5.29333 6.50133 5.344 6.432 5.408C6.368 5.472 6.31733 5.54667 6.28 5.632C6.248 5.71733 6.232 5.808 6.232 5.904H5.024C5.024 5.62667 5.07467 5.37067 5.176 5.136C5.27733 4.90133 5.41867 4.70133 5.6 4.536C5.78133 4.36533 5.99467 4.23467 6.24 4.144C6.48533 4.048 6.752 4 7.04 4C7.28 4 7.50933 4.03733 7.728 4.112C7.952 4.18667 8.14933 4.29867 8.32 4.448C8.49067 4.59733 8.62667 4.784 8.728 5.008C8.82933 5.22667 8.88 5.48267 8.88 5.776C8.88 6.032 8.85067 6.25867 8.792 6.456C8.73333 6.648 8.65067 6.824 8.544 6.984C8.44267 7.13867 8.32 7.28 8.176 7.408C8.032 7.536 7.87733 7.66133 7.712 7.784C7.64267 7.832 7.55733 7.888 7.456 7.952C7.36 8.016 7.26133 8.08267 7.16 8.152C7.064 8.22133 6.97333 8.29333 6.888 8.368C6.80267 8.44267 6.74133 8.51467 6.704 8.584H8.92V9.776Z",
        fill: "var(--color-primary-default)"
      }));
    default:
      return undefined;
    // Don't return any SVG if a step number is not supported.
  }
}

SwapStepIcon.propTypes = {
  stepNumber: _propTypes.default.number
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-signatures\\swap-step-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\awaiting-swap.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/lib/ui-utils":"F:\\metamask-extension\\shared\\lib\\ui-utils.js","../../../../shared/modules/swaps.utils":"F:\\metamask-extension\\shared\\modules\\swaps.utils.js","../../../components/ui/mascot":"F:\\metamask-extension\\ui\\components\\ui\\mascot\\index.js","../../../components/ui/pulse-loader":"F:\\metamask-extension\\ui\\components\\ui\\pulse-loader\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../create-new-swap":"F:\\metamask-extension\\ui\\pages\\swaps\\create-new-swap\\index.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","../view-on-block-explorer":"F:\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\index.js","./quotes-timeout-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\quotes-timeout-icon.js","./swap-failure-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\swap-failure-icon.js","./swap-success-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\swap-success-icon.js","@metamask/etherscan-link":"F:\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","events":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","lodash/isEqual":"F:\\metamask-extension\\node_modules\\lodash\\isEqual.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-swap%5Cawaiting-swap.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AwaitingSwap;
var _events = _interopRequireDefault(require("events"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _etherscanLink = require("@metamask/etherscan-link");
var _i18n = require("../../../contexts/i18n");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _selectors = require("../../../selectors");
var _swaps = require("../../../ducks/swaps/swaps");
var _mascot = _interopRequireDefault(require("../../../components/ui/mascot"));
var _swaps2 = require("../../../../shared/constants/swaps");
var _swaps3 = require("../../../../shared/modules/swaps.utils");
var _pulseLoader = _interopRequireDefault(require("../../../components/ui/pulse-loader"));
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _swaps4 = require("../swaps.util");
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _createNewSwap = _interopRequireDefault(require("../create-new-swap"));
var _viewOnBlockExplorer = _interopRequireDefault(require("../view-on-block-explorer"));
var _uiUtils = require("../../../../shared/lib/ui-utils");
var _swapFailureIcon = _interopRequireDefault(require("./swap-failure-icon"));
var _swapSuccessIcon = _interopRequireDefault(require("./swap-success-icon"));
var _quotesTimeoutIcon = _interopRequireDefault(require("./quotes-timeout-icon"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AwaitingSwap({
  swapComplete,
  errorKey,
  txHash,
  tokensReceived,
  submittingSwap,
  txId
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const animationEventEmitter = (0, _react.useRef)(new _events.default());
  const {
    swapMetaData
  } = (0, _reactRedux.useSelector)(state => (0, _selectors.getFullTxData)(state, txId)) || {};
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _isEqual.default);
  const fromTokenInputValue = (0, _reactRedux.useSelector)(_swaps.getFromTokenInputValue);
  const maxSlippage = (0, _reactRedux.useSelector)(_swaps.getMaxSlippage);
  const usedQuote = (0, _reactRedux.useSelector)(_swaps.getUsedQuote, _isEqual.default);
  const approveTxParams = (0, _reactRedux.useSelector)(_swaps.getApproveTxParams, _reactRedux.shallowEqual);
  const swapsGasPrice = (0, _reactRedux.useSelector)(_swaps.getUsedSwapsGasPrice);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const usdConversionRate = (0, _reactRedux.useSelector)(_selectors.getUSDConversionRate);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider, _reactRedux.shallowEqual);
  const [trackedQuotesExpiredEvent, setTrackedQuotesExpiredEvent] = (0, _react.useState)(false);
  let feeinUnformattedFiat;
  if (usedQuote && swapsGasPrice) {
    var _usedQuote$trade;
    const renderableNetworkFees = (0, _swaps4.getRenderableNetworkFeesForQuote)({
      tradeGas: usedQuote.gasEstimateWithRefund || usedQuote.averageGas,
      approveGas: (approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.gas) || '0x0',
      gasPrice: swapsGasPrice,
      currentCurrency,
      conversionRate: usdConversionRate,
      tradeValue: usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$trade = usedQuote.trade) === null || _usedQuote$trade === void 0 ? void 0 : _usedQuote$trade.value,
      sourceSymbol: swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_from,
      sourceAmount: usedQuote.sourceAmount,
      chainId
    });
    feeinUnformattedFiat = renderableNetworkFees.rawNetworkFees;
  }
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const sensitiveProperties = {
    token_from: swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_from,
    token_from_amount: swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_from_amount,
    token_to: swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_to,
    request_type: fetchParams !== null && fetchParams !== void 0 && fetchParams.balanceError ? 'Quote' : 'Order',
    slippage: swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.slippage,
    custom_slippage: (swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.slippage) === 2,
    gas_fees: feeinUnformattedFiat,
    is_hardware_wallet: hardwareWalletUsed,
    hardware_wallet_type: hardwareWalletType,
    stx_enabled: smartTransactionsEnabled,
    current_stx_enabled: currentSmartTransactionsEnabled,
    stx_user_opt_in: smartTransactionsOptInStatus
  };
  const baseNetworkUrl = rpcPrefs.blockExplorerUrl ?? _swaps2.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null;
  const blockExplorerUrl = (0, _etherscanLink.getBlockExplorerLink)({
    hash: txHash,
    chainId
  }, {
    blockExplorerUrl: baseNetworkUrl
  });
  let headerText;
  let statusImage;
  let descriptionText;
  let submitText;
  let content;
  if (errorKey === _swaps2.OFFLINE_FOR_MAINTENANCE) {
    headerText = t('offlineForMaintenance');
    descriptionText = t('metamaskSwapsOfflineDescription');
    submitText = t('close');
    statusImage = /*#__PURE__*/_react.default.createElement(_swapFailureIcon.default, null);
  } else if (errorKey === _swaps2.SWAP_FAILED_ERROR) {
    headerText = t('swapFailedErrorTitle');
    descriptionText = t('swapFailedErrorDescriptionWithSupportLink', [/*#__PURE__*/_react.default.createElement("a", {
      className: "awaiting-swap__support-link",
      key: "awaiting-swap-support-link",
      href: _uiUtils.SUPPORT_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      onClick: () => {
        trackEvent({
          category: _metametrics2.MetaMetricsEventCategory.Swaps,
          event: _metametrics2.MetaMetricsEventName.SupportLinkClicked,
          properties: {
            url: _uiUtils.SUPPORT_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics2.MetaMetricsContextProp.PageTitle]
        });
      }
    }, new URL(_uiUtils.SUPPORT_LINK).hostname)]);
    submitText = t('tryAgain');
    statusImage = /*#__PURE__*/_react.default.createElement(_swapFailureIcon.default, null);
    content = blockExplorerUrl && /*#__PURE__*/_react.default.createElement(_viewOnBlockExplorer.default, {
      blockExplorerUrl: blockExplorerUrl,
      sensitiveTrackingProperties: sensitiveProperties
    });
  } else if (errorKey === _swaps2.QUOTES_EXPIRED_ERROR) {
    headerText = t('swapQuotesExpiredErrorTitle');
    descriptionText = t('swapQuotesExpiredErrorDescription');
    submitText = t('tryAgain');
    statusImage = /*#__PURE__*/_react.default.createElement(_quotesTimeoutIcon.default, null);
    if (!trackedQuotesExpiredEvent) {
      setTrackedQuotesExpiredEvent(true);
      trackEvent({
        event: 'Quotes Timed Out',
        category: _metametrics2.MetaMetricsEventCategory.Swaps,
        sensitiveProperties
      });
    }
  } else if (errorKey === _swaps2.ERROR_FETCHING_QUOTES) {
    headerText = t('swapFetchingQuotesErrorTitle');
    descriptionText = t('swapFetchingQuotesErrorDescription');
    submitText = t('back');
    statusImage = /*#__PURE__*/_react.default.createElement(_swapFailureIcon.default, null);
  } else if (errorKey === _swaps2.QUOTES_NOT_AVAILABLE_ERROR) {
    headerText = t('swapQuotesNotAvailableErrorTitle');
    descriptionText = t('swapQuotesNotAvailableErrorDescription');
    submitText = t('tryAgain');
    statusImage = /*#__PURE__*/_react.default.createElement(_swapFailureIcon.default, null);
  } else if (errorKey === _swaps2.CONTRACT_DATA_DISABLED_ERROR) {
    headerText = t('swapContractDataDisabledErrorTitle');
    descriptionText = t('swapContractDataDisabledErrorDescription');
    submitText = t('tryAgain');
    statusImage = /*#__PURE__*/_react.default.createElement(_swapFailureIcon.default, null);
  } else if (!errorKey && !swapComplete) {
    headerText = t('swapProcessing');
    statusImage = /*#__PURE__*/_react.default.createElement(_pulseLoader.default, null);
    submitText = t('swapsViewInActivity');
    descriptionText = t('swapOnceTransactionHasProcess', [/*#__PURE__*/_react.default.createElement("span", {
      key: "swapOnceTransactionHasProcess-1",
      className: "awaiting-swap__amount-and-symbol",
      "data-testid": "awaiting-swap-amount-and-symbol"
    }, swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_to)]);
    content = blockExplorerUrl && /*#__PURE__*/_react.default.createElement(_viewOnBlockExplorer.default, {
      blockExplorerUrl: blockExplorerUrl,
      sensitiveTrackingProperties: sensitiveProperties
    });
  } else if (!errorKey && swapComplete) {
    headerText = t('swapTransactionComplete');
    statusImage = /*#__PURE__*/_react.default.createElement(_swapSuccessIcon.default, null);
    submitText = t('close');
    descriptionText = t('swapTokenAvailable', [/*#__PURE__*/_react.default.createElement("span", {
      key: "swapTokenAvailable-2",
      className: "awaiting-swap__amount-and-symbol"
    }, `${tokensReceived || ''} ${swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_to}`)]);
    content = blockExplorerUrl && /*#__PURE__*/_react.default.createElement(_viewOnBlockExplorer.default, {
      blockExplorerUrl: blockExplorerUrl,
      sensitiveTrackingProperties: sensitiveProperties
    });
  }
  (0, _react.useEffect)(() => {
    if (errorKey) {
      // If there was an error, stop polling for quotes.
      dispatch((0, _actions.stopPollingForQuotes)());
    }
  }, [dispatch, errorKey]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "awaiting-swap"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "awaiting-swap__content"
  }, !(swapComplete || errorKey) && /*#__PURE__*/_react.default.createElement(_mascot.default, {
    animationEventEmitter: animationEventEmitter.current,
    width: "90",
    height: "90"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "awaiting-swap__status-image"
  }, statusImage), /*#__PURE__*/_react.default.createElement("div", {
    className: "awaiting-swap__header",
    "data-testid": "awaiting-swap-header"
  }, headerText), /*#__PURE__*/_react.default.createElement("div", {
    className: "awaiting-swap__main-description",
    "data-testid": "awaiting-swap-main-description"
  }, descriptionText), content), !errorKey && swapComplete ? /*#__PURE__*/_react.default.createElement(_createNewSwap.default, {
    sensitiveTrackingProperties: sensitiveProperties
  }) : null, /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: async () => {
      /* istanbul ignore next */
      if (errorKey === _swaps2.OFFLINE_FOR_MAINTENANCE) {
        await dispatch((0, _swaps.prepareToLeaveSwaps)());
        history.push(_routes.DEFAULT_ROUTE);
      } else if (errorKey === _swaps2.QUOTES_EXPIRED_ERROR) {
        dispatch((0, _swaps.prepareForRetryGetQuotes)());
        await dispatch((0, _swaps.fetchQuotesAndSetQuoteState)(history, fromTokenInputValue, maxSlippage, trackEvent));
      } else if (errorKey) {
        await dispatch((0, _swaps.navigateBackToBuildQuote)(history));
      } else if ((0, _swaps3.isSwapsDefaultTokenSymbol)(swapMetaData === null || swapMetaData === void 0 ? void 0 : swapMetaData.token_to, chainId) || swapComplete) {
        history.push(_routes.DEFAULT_ROUTE);
      } else {
        await dispatch((0, _actions.setDefaultHomeActiveTabName)('activity'));
        history.push(_routes.DEFAULT_ROUTE);
      }
    },
    onCancel: async () => await dispatch((0, _swaps.navigateBackToBuildQuote)(history)),
    submitText: submitText,
    disabled: submittingSwap,
    hideCancel: errorKey !== _swaps2.QUOTES_EXPIRED_ERROR
  }));
}
AwaitingSwap.propTypes = {
  swapComplete: _propTypes.default.bool,
  txHash: _propTypes.default.string,
  tokensReceived: _propTypes.default.string,
  errorKey: _propTypes.default.oneOf([_swaps2.QUOTES_EXPIRED_ERROR, _swaps2.SWAP_FAILED_ERROR, _swaps2.ERROR_FETCHING_QUOTES, _swaps2.QUOTES_NOT_AVAILABLE_ERROR, _swaps2.OFFLINE_FOR_MAINTENANCE, _swaps2.CONTRACT_DATA_DISABLED_ERROR]),
  submittingSwap: _propTypes.default.bool,
  txId: _propTypes.default.number
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-swap\\awaiting-swap.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\index.js", {"./awaiting-swap":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\awaiting-swap.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-swap%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _awaitingSwap.default;
  }
});
var _awaitingSwap = _interopRequireDefault(require("./awaiting-swap"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-swap\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\quotes-timeout-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-swap%5Cquotes-timeout-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QuotesTimeoutIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function QuotesTimeoutIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "44",
    height: "44",
    viewBox: "0 0 44 44",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M22 0C9.96768 0 0.178406 9.78928 0.178406 21.8216C0.178406 33.8539 9.96768 43.6432 22 43.6432C34.0323 43.6432 43.8216 33.8539 43.8216 21.8216C43.8216 9.78929 34.0323 0 22 0ZM22 3.27324C32.2633 3.27324 40.5484 11.5583 40.5484 21.8216C40.5484 32.0849 32.2633 40.3699 22 40.3699C11.7367 40.3699 3.45164 32.0849 3.45164 21.8216C3.45164 11.5583 11.7367 3.27324 22 3.27324ZM22 6.00094C21.0961 6.00094 20.3634 6.73371 20.3634 7.63756V21.8216C20.3634 22.4269 20.6932 22.9534 21.1817 23.2366L32.5187 29.783C33.3014 30.235 34.3001 29.9692 34.752 29.1864C35.2039 28.4036 34.938 27.405 34.1553 26.953L23.6366 20.8839V7.63756C23.6366 6.73371 22.9039 6.00094 22 6.00094Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-swap\\quotes-timeout-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\swap-failure-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-swap%5Cswap-failure-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapFailureIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function SwapFailureIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "45",
    height: "39",
    viewBox: "0 0 45 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M22.203 0.424438L0.285706 38.2816H44.1203L22.203 0.424438ZM22.203 8.39436L37.2064 34.2966H7.19961L22.203 8.39436ZM20.2105 16.3643V24.3342H24.1955V16.3643H20.2105ZM20.2105 28.3192V32.3041H24.1955V28.3192",
    fill: "var(--color-error-default)"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-swap\\swap-failure-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\swap-success-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cawaiting-swap%5Cswap-success-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapSuccessIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function SwapSuccessIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "38",
    height: "38",
    viewBox: "0 0 38 38",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.1429 19C34.1429 23.0161 32.5474 26.8678 29.7076 29.7076C26.8678 32.5474 23.0161 34.1428 19 34.1428C14.9839 34.1428 11.1322 32.5474 8.29238 29.7076C5.45254 26.8678 3.85714 23.0161 3.85714 19C3.85714 14.9838 5.45254 11.1322 8.29238 8.29237C11.1322 5.45253 14.9839 3.85713 19 3.85713C20.4386 3.85713 21.8393 4.06534 23.1643 4.44391L26.1361 1.47213C23.9404 0.563554 21.5364 0.0714111 19 0.0714111C16.5143 0.0714111 14.0529 0.561013 11.7563 1.51226C9.45983 2.46351 7.37316 3.85778 5.61548 5.61546C2.06568 9.16526 0.0714264 13.9798 0.0714264 19C0.0714264 24.0201 2.06568 28.8347 5.61548 32.3845C7.37316 34.1422 9.45983 35.5364 11.7563 36.4877C14.0529 37.4389 16.5143 37.9286 19 37.9286C24.0202 37.9286 28.8347 35.9343 32.3845 32.3845C35.9343 28.8347 37.9286 24.0201 37.9286 19H34.1429ZM11.2582 15.3657L8.58928 18.0536L17.1071 26.5714L36.0357 7.64284L33.3668 4.95498L17.1071 21.2146L11.2582 15.3657Z",
    fill: "var(--color-success-default)"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\awaiting-swap\\swap-success-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\build-quote\\build-quote.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/lib/swaps-utils":"F:\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../../shared/lib/token-util.ts":"F:\\metamask-extension\\shared\\lib\\token-util.ts","../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../../../shared/modules/swaps.utils":"F:\\metamask-extension\\shared\\modules\\swaps.utils.js","../../../components/ui/actionable-message/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useEqualityCheck":"F:\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../hooks/useEthFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js","../../../hooks/usePrevious":"F:\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../hooks/useTokenFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../hooks/useTokenTracker":"F:\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../hooks/useTokensToSearch":"F:\\metamask-extension\\ui\\hooks\\useTokensToSearch.js","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../dropdown-input-pair":"F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-input-pair\\index.js","../dropdown-search-list":"F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-search-list\\index.js","../prepare-swap-page/smart-transactions-popover":"F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\smart-transactions-popover.js","../slippage-buttons":"F:\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\index.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","@metamask/etherscan-link":"F:\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cbuild-quote%5Cbuild-quote.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BuildQuote;
var _react = _interopRequireWildcard(require("react"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _reactRouterDom = require("react-router-dom");
var _etherscanLink = require("@metamask/etherscan-link");
var _metametrics = require("../../../contexts/metametrics");
var _useTokensToSearch = require("../../../hooks/useTokensToSearch");
var _useEqualityCheck = require("../../../hooks/useEqualityCheck");
var _i18n = require("../../../contexts/i18n");
var _dropdownInputPair = _interopRequireDefault(require("../dropdown-input-pair"));
var _dropdownSearchList = _interopRequireDefault(require("../dropdown-search-list"));
var _slippageButtons = _interopRequireDefault(require("../slippage-buttons"));
var _metamask = require("../../../ducks/metamask/metamask");
var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));
var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));
var _routes = require("../../../helpers/constants/routes");
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors");
var _util = require("../../../helpers/utils/util");
var _usePrevious = require("../../../hooks/usePrevious");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");
var _useEthFiatAmount = require("../../../hooks/useEthFiatAmount");
var _swaps2 = require("../../../../shared/modules/swaps.utils");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _swaps3 = require("../../../../shared/constants/swaps");
var _actions = require("../../../store/actions");
var _swaps4 = require("../swaps.util");
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _stringUtils = require("../../../../shared/modules/string-utils");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _tokenUtil = require("../../../../shared/lib/token-util.ts");
var _swapsUtils = require("../../../../shared/lib/swaps-utils");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _smartTransactionsPopover = _interopRequireDefault(require("../prepare-swap-page/smart-transactions-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const fuseSearchKeys = [{
  name: 'name',
  weight: 0.499
}, {
  name: 'symbol',
  weight: 0.499
}, {
  name: 'address',
  weight: 0.002
}];
const MAX_ALLOWED_SLIPPAGE = 15;
let timeoutIdForQuotesPrefetching;
function BuildQuote({
  ethBalance,
  selectedAccountAddress,
  shuffledTokensList
}) {
  var _SWAPS_CHAINID_DEFAUL;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [fetchedTokenExchangeRate, setFetchedTokenExchangeRate] = (0, _react.useState)(undefined);
  const [verificationClicked, setVerificationClicked] = (0, _react.useState)(false);
  const isFeatureFlagLoaded = (0, _reactRedux.useSelector)(_swaps.getIsFeatureFlagLoaded);
  const balanceError = (0, _reactRedux.useSelector)(_swaps.getBalanceError);
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const {
    sourceTokenInfo = {},
    destinationTokenInfo = {}
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const topAssets = (0, _reactRedux.useSelector)(_swaps.getTopAssets, _lodash.isEqual);
  const fromToken = (0, _reactRedux.useSelector)(_swaps.getFromToken, _lodash.isEqual);
  const fromTokenInputValue = (0, _reactRedux.useSelector)(_swaps.getFromTokenInputValue);
  const fromTokenError = (0, _reactRedux.useSelector)(_swaps.getFromTokenError);
  const maxSlippage = (0, _reactRedux.useSelector)(_swaps.getMaxSlippage);
  const toToken = (0, _reactRedux.useSelector)(_swaps.getToToken, _lodash.isEqual) || destinationTokenInfo;
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _lodash.isEqual);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider, _reactRedux.shallowEqual);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList, _lodash.isEqual);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  const areQuotesPresent = Object.keys(quotes).length > 0;
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const smartTransactionFees = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionFees);
  const smartTransactionsOptInPopoverDisplayed = smartTransactionsOptInStatus !== undefined;
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const showSmartTransactionsOptInPopover = smartTransactionsEnabled && !smartTransactionsOptInPopoverDisplayed;
  const onCloseSmartTransactionsOptInPopover = e => {
    e === null || e === void 0 ? void 0 : e.preventDefault();
    (0, _actions.setSmartTransactionsOptInStatus)(false, smartTransactionsOptInStatus);
  };
  const onEnableSmartTransactionsClick = () => (0, _actions.setSmartTransactionsOptInStatus)(true, smartTransactionsOptInStatus);
  const fetchParamsFromToken = (0, _swaps2.isSwapsDefaultTokenSymbol)(sourceTokenInfo === null || sourceTokenInfo === void 0 ? void 0 : sourceTokenInfo.symbol, chainId) ? defaultSwapsToken : sourceTokenInfo;
  const {
    loading,
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(tokens);

  // If the fromToken was set in a call to `onFromSelect` (see below), and that from token has a balance
  // but is not in tokensWithBalances or tokens, then we want to add it to the usersTokens array so that
  // the balance of the token can appear in the from token selection dropdown
  const fromTokenArray = !(0, _swaps2.isSwapsDefaultTokenSymbol)(fromToken === null || fromToken === void 0 ? void 0 : fromToken.symbol, chainId) && fromToken !== null && fromToken !== void 0 && fromToken.balance ? [fromToken] : [];
  const usersTokens = (0, _lodash.uniqBy)([...tokensWithBalances, ...tokens, ...fromTokenArray], 'address');
  const memoizedUsersTokens = (0, _useEqualityCheck.useEqualityCheck)(usersTokens);
  const selectedFromToken = (0, _useTokensToSearch.getRenderableTokenData)(fromToken || fetchParamsFromToken, tokenConversionRates, conversionRate, currentCurrency, chainId, tokenList);
  const tokensToSearchSwapFrom = (0, _useTokensToSearch.useTokensToSearch)({
    usersTokens: memoizedUsersTokens,
    topTokens: topAssets,
    shuffledTokensList,
    tokenBucketPriority: _swaps3.TokenBucketPriority.owned
  });
  const tokensToSearchSwapTo = (0, _useTokensToSearch.useTokensToSearch)({
    usersTokens: memoizedUsersTokens,
    topTokens: topAssets,
    shuffledTokensList,
    tokenBucketPriority: _swaps3.TokenBucketPriority.top
  });
  const selectedToToken = tokensToSearchSwapFrom.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, toToken === null || toToken === void 0 ? void 0 : toToken.address)) || toToken;
  const toTokenIsNotDefault = (selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address) && !(0, _swaps2.isSwapsDefaultTokenAddress)(selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address, chainId);
  const occurrences = Number((selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.occurances) || (selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.occurrences) || 0);
  const {
    address: fromTokenAddress,
    symbol: fromTokenSymbol,
    string: fromTokenString,
    decimals: fromTokenDecimals,
    balance: rawFromTokenBalance
  } = selectedFromToken || {};
  const {
    address: toTokenAddress
  } = selectedToToken || {};
  const fromTokenBalance = rawFromTokenBalance && (0, _transactionsControllerUtils.calcTokenAmount)(rawFromTokenBalance, fromTokenDecimals).toString(10);
  const prevFromTokenBalance = (0, _usePrevious.usePrevious)(fromTokenBalance);
  const swapFromTokenFiatValue = (0, _useTokenFiatAmount.useTokenFiatAmount)(fromTokenAddress, fromTokenInputValue || 0, fromTokenSymbol, {
    showFiat: useCurrencyRateCheck
  }, true);
  const swapFromEthFiatValue = (0, _useEthFiatAmount.useEthFiatAmount)(fromTokenInputValue || 0, {
    showFiat: useCurrencyRateCheck
  }, true);
  const swapFromFiatValue = (0, _swaps2.isSwapsDefaultTokenSymbol)(fromTokenSymbol, chainId) ? swapFromEthFiatValue : swapFromTokenFiatValue;
  const onInputChange = (0, _react.useCallback)((newInputValue, balance) => {
    dispatch((0, _swaps.setFromTokenInputValue)(newInputValue));
    const newBalanceError = new _bignumber.default(newInputValue || 0).gt(balance || 0);
    // "setBalanceError" is just a warning, a user can still click on the "Review swap" button.
    if (balanceError !== newBalanceError) {
      dispatch((0, _swaps.setBalanceError)(newBalanceError));
    }
    dispatch((0, _swaps.setFromTokenError)(fromToken && (0, _swaps4.countDecimals)(newInputValue) > fromToken.decimals ? 'tooManyDecimals' : null));
  }, [dispatch, fromToken, balanceError]);
  const onFromSelect = token => {
    if (token !== null && token !== void 0 && token.address && !swapFromFiatValue && fetchedTokenExchangeRate !== null) {
      (0, _swaps4.fetchTokenPrice)(token.address).then(rate => {
        if (rate !== null && rate !== undefined) {
          setFetchedTokenExchangeRate(rate);
        }
      });
    } else {
      setFetchedTokenExchangeRate(null);
    }
    if (token !== null && token !== void 0 && token.address && !memoizedUsersTokens.find(usersToken => (0, _stringUtils.isEqualCaseInsensitive)(usersToken.address, token.address))) {
      (0, _tokenUtil.fetchTokenBalance)(token.address, selectedAccountAddress, global.ethereumProvider).then(fetchedBalance => {
        if (fetchedBalance !== null && fetchedBalance !== void 0 && fetchedBalance.balance) {
          const balanceAsDecString = fetchedBalance.balance.toString(10);
          const userTokenBalance = (0, _transactionsControllerUtils.calcTokenAmount)(balanceAsDecString, token.decimals);
          dispatch((0, _swaps.setSwapsFromToken)({
            ...token,
            string: userTokenBalance.toString(10),
            balance: balanceAsDecString
          }));
        }
      });
    }
    dispatch((0, _swaps.setSwapsFromToken)(token));
    onInputChange(token !== null && token !== void 0 && token.address ? fromTokenInputValue : '', token.string, token.decimals);
  };
  const blockExplorerTokenLink = (0, _etherscanLink.getTokenTrackerLink)(selectedToToken.address, chainId, null,
  // no networkId
  null,
  // no holderAddress
  {
    blockExplorerUrl: _swaps3.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null
  });
  const blockExplorerLabel = rpcPrefs.blockExplorerUrl ? (0, _util.getURLHostName)(blockExplorerTokenLink) : t('etherscan');
  const onToSelect = (0, _react.useCallback)(token => {
    dispatch((0, _swaps.setSwapToToken)(token));
    setVerificationClicked(false);
  }, [dispatch]);
  const hideDropdownItemIf = (0, _react.useCallback)(item => (0, _stringUtils.isEqualCaseInsensitive)(item.address, fromTokenAddress), [fromTokenAddress]);
  const tokensWithBalancesFromToken = tokensWithBalances.find(token => (0, _stringUtils.isEqualCaseInsensitive)(token.address, fromToken === null || fromToken === void 0 ? void 0 : fromToken.address));
  const previousTokensWithBalancesFromToken = (0, _usePrevious.usePrevious)(tokensWithBalancesFromToken);
  (0, _react.useEffect)(() => {
    const notDefault = !(0, _swaps2.isSwapsDefaultTokenAddress)(tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.address, chainId);
    const addressesAreTheSame = (0, _stringUtils.isEqualCaseInsensitive)(tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.address, previousTokensWithBalancesFromToken === null || previousTokensWithBalancesFromToken === void 0 ? void 0 : previousTokensWithBalancesFromToken.address);
    const balanceHasChanged = (tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.balance) !== (previousTokensWithBalancesFromToken === null || previousTokensWithBalancesFromToken === void 0 ? void 0 : previousTokensWithBalancesFromToken.balance);
    if (notDefault && addressesAreTheSame && balanceHasChanged) {
      dispatch((0, _swaps.setSwapsFromToken)({
        ...fromToken,
        balance: tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.balance,
        string: tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.string
      }));
    }
  }, [dispatch, tokensWithBalancesFromToken, previousTokensWithBalancesFromToken, fromToken, chainId]);

  // If the eth balance changes while on build quote, we update the selected from token
  (0, _react.useEffect)(() => {
    if ((0, _swaps2.isSwapsDefaultTokenAddress)(fromToken === null || fromToken === void 0 ? void 0 : fromToken.address, chainId) && (fromToken === null || fromToken === void 0 ? void 0 : fromToken.balance) !== (0, _conversion.hexToDecimal)(ethBalance)) {
      dispatch((0, _swaps.setSwapsFromToken)({
        ...fromToken,
        balance: (0, _conversion.hexToDecimal)(ethBalance),
        string: (0, _conversion.getValueFromWeiHex)({
          value: ethBalance,
          numberOfDecimals: 4,
          toDenomination: 'ETH'
        })
      }));
    }
  }, [dispatch, fromToken, ethBalance, chainId]);
  (0, _react.useEffect)(() => {
    if (prevFromTokenBalance !== fromTokenBalance) {
      onInputChange(fromTokenInputValue, fromTokenBalance);
    }
  }, [onInputChange, prevFromTokenBalance, fromTokenInputValue, fromTokenBalance]);
  const trackBuildQuotePageLoadedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'Build Quote Page Loaded',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus
      }
    });
  }, [trackEvent, hardwareWalletUsed, hardwareWalletType, smartTransactionsEnabled, currentSmartTransactionsEnabled, smartTransactionsOptInStatus]);
  (0, _react.useEffect)(() => {
    dispatch((0, _actions.resetSwapsPostFetchState)());
    dispatch((0, _swaps.setReviewSwapClickedTimestamp)());
    trackBuildQuotePageLoadedEvent();
  }, [dispatch, trackBuildQuotePageLoadedEvent]);
  (0, _react.useEffect)(() => {
    if (smartTransactionsEnabled && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
      // We want to clear STX fees, because we only want to use fresh ones on the View Quote page.
      (0, _actions.clearSmartTransactionFees)();
    }
  }, [smartTransactionsEnabled, smartTransactionFees]);
  const BlockExplorerLink = () => {
    return /*#__PURE__*/_react.default.createElement("a", {
      className: "build-quote__token-etherscan-link build-quote__underline",
      key: "build-quote-etherscan-link",
      onClick: () => {
        /* istanbul ignore next */
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.ExternalLinkClicked,
          category: _metametrics2.MetaMetricsEventCategory.Swaps,
          properties: {
            link_type: _metametrics2.MetaMetricsEventLinkType.TokenTracker,
            location: 'Swaps Confirmation',
            url_domain: (0, _util.getURLHostName)(blockExplorerTokenLink)
          }
        });
        global.platform.openTab({
          url: blockExplorerTokenLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer"
    }, blockExplorerLabel);
  };
  let tokenVerificationDescription = '';
  if (blockExplorerTokenLink) {
    if (occurrences === 1) {
      tokenVerificationDescription = t('verifyThisTokenOn', [/*#__PURE__*/_react.default.createElement(BlockExplorerLink, {
        key: "block-explorer-link"
      })]);
    } else if (occurrences === 0) {
      tokenVerificationDescription = t('verifyThisUnconfirmedTokenOn', [/*#__PURE__*/_react.default.createElement(BlockExplorerLink, {
        key: "block-explorer-link"
      })]);
    }
  }
  const swapYourTokenBalance = t('swapYourTokenBalance', [fromTokenString || '0', fromTokenSymbol || ((_SWAPS_CHAINID_DEFAUL = _swaps3.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _SWAPS_CHAINID_DEFAUL === void 0 ? void 0 : _SWAPS_CHAINID_DEFAUL.symbol) || '']);
  const isDirectWrappingEnabled = (0, _swapsUtils.shouldEnableDirectWrapping)(chainId, fromTokenAddress, selectedToToken.address);
  const isReviewSwapButtonDisabled = fromTokenError || !isFeatureFlagLoaded || !Number(fromTokenInputValue) || !(selectedToToken !== null && selectedToToken !== void 0 && selectedToToken.address) || !fromTokenAddress || Number(maxSlippage) < 0 || Number(maxSlippage) > MAX_ALLOWED_SLIPPAGE || toTokenIsNotDefault && occurrences < 2 && !verificationClicked;

  // It's triggered every time there is a change in form values (token from, token to, amount and slippage).
  (0, _react.useEffect)(() => {
    dispatch((0, _actions.clearSwapsQuotes)());
    dispatch((0, _actions.stopPollingForQuotes)());
    const prefetchQuotesWithoutRedirecting = async () => {
      const pageRedirectionDisabled = true;
      await dispatch((0, _swaps.fetchQuotesAndSetQuoteState)(history, fromTokenInputValue, maxSlippage, trackEvent, pageRedirectionDisabled));
    };
    // Delay fetching quotes until a user is done typing an input value. If they type a new char in less than a second,
    // we will cancel previous setTimeout call and start running a new one.
    timeoutIdForQuotesPrefetching = setTimeout(() => {
      timeoutIdForQuotesPrefetching = null;
      if (!isReviewSwapButtonDisabled) {
        // Only do quotes prefetching if the Review swap button is enabled.
        prefetchQuotesWithoutRedirecting();
      }
    }, 1000);
    return () => clearTimeout(timeoutIdForQuotesPrefetching);
  }, [dispatch, history, maxSlippage, trackEvent, isReviewSwapButtonDisabled, fromTokenInputValue, fromTokenAddress, toTokenAddress, smartTransactionsOptInStatus]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__content"
  }, showSmartTransactionsOptInPopover && /*#__PURE__*/_react.default.createElement(_smartTransactionsPopover.default, {
    onEnableSmartTransactionsClick: onEnableSmartTransactionsClick,
    onCloseSmartTransactionsOptInPopover: onCloseSmartTransactionsOptInPopover
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__dropdown-input-pair-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__input-label"
  }, t('swapSwapFrom')), !(0, _swaps2.isSwapsDefaultTokenSymbol)(fromTokenSymbol, chainId) && /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__max-button",
    "data-testid": "build-quote__max-button",
    onClick: () => onInputChange(fromTokenBalance || '0', fromTokenBalance)
  }, t('max'))), /*#__PURE__*/_react.default.createElement(_dropdownInputPair.default, {
    onSelect: onFromSelect,
    itemsToSearch: tokensToSearchSwapFrom,
    onInputChange: value => {
      /* istanbul ignore next */
      onInputChange(value, fromTokenBalance);
    },
    inputValue: fromTokenInputValue,
    leftValue: fromTokenInputValue && swapFromFiatValue,
    selectedItem: selectedFromToken,
    maxListItems: 30,
    loading: loading && (!(tokensToSearchSwapFrom !== null && tokensToSearchSwapFrom !== void 0 && tokensToSearchSwapFrom.length) || !topAssets || !Object.keys(topAssets).length),
    selectPlaceHolderText: t('swapSelect'),
    hideItemIf: item => (0, _stringUtils.isEqualCaseInsensitive)(item.address, selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address),
    listContainerClassName: "build-quote__open-dropdown",
    autoFocus: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('build-quote__balance-message', {
      'build-quote__balance-message--error': balanceError || fromTokenError
    })
  }, !fromTokenError && !balanceError && fromTokenSymbol && swapYourTokenBalance, !fromTokenError && balanceError && fromTokenSymbol && /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quite__insufficient-funds"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quite__insufficient-funds-first"
  }, t('swapsNotEnoughForTx', [fromTokenSymbol])), /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quite__insufficient-funds-second"
  }, swapYourTokenBalance)), fromTokenError && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__form-error"
  }, t('swapTooManyDecimalsError', [fromTokenSymbol, fromTokenDecimals])), /*#__PURE__*/_react.default.createElement("div", null, swapYourTokenBalance))), /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__swap-arrows-row"
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "build-quote__swap-arrows",
    "data-testid": "build-quote__swap-arrows",
    onClick: () => {
      onToSelect(selectedFromToken);
      onFromSelect(selectedToToken);
    }
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-arrow-up",
    title: t('swapSwapSwitch')
  }), /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-arrow-down",
    title: t('swapSwapSwitch')
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__dropdown-swap-to-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__input-label"
  }, t('swapSwapTo'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-input-pair dropdown-input-pair__to"
  }, /*#__PURE__*/_react.default.createElement(_dropdownSearchList.default, {
    startingItem: selectedToToken,
    itemsToSearch: tokensToSearchSwapTo,
    fuseSearchKeys: fuseSearchKeys,
    selectPlaceHolderText: t('swapSelectAToken'),
    maxListItems: 30,
    onSelect: onToSelect,
    loading: loading && (!(tokensToSearchSwapTo !== null && tokensToSearchSwapTo !== void 0 && tokensToSearchSwapTo.length) || !topAssets || !Object.keys(topAssets).length),
    externallySelectedItem: selectedToToken,
    hideItemIf: hideDropdownItemIf,
    listContainerClassName: "build-quote__open-to-dropdown",
    hideRightLabels: true,
    defaultToAll: true,
    shouldSearchForImports: true
  })), toTokenIsNotDefault && (occurrences < 2 ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    type: occurrences === 1 ? 'warning' : 'danger',
    message: /*#__PURE__*/_react.default.createElement("div", {
      className: "build-quote__token-verification-warning-message"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "build-quote__bold"
    }, occurrences === 1 ? t('swapTokenVerificationOnlyOneSource') : t('swapTokenVerificationAddedManually')), /*#__PURE__*/_react.default.createElement("div", null, tokenVerificationDescription)),
    primaryAction: /* istanbul ignore next */
    verificationClicked ? null : {
      label: t('continue'),
      onClick: () => setVerificationClicked(true)
    },
    withRightButton: true,
    infoTooltipText: blockExplorerTokenLink && t('swapVerifyTokenExplanation', [blockExplorerLabel])
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__token-message"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "build-quote__bold",
    key: "token-verification-bold-text"
  }, t('swapTokenVerificationSources', [occurrences])), blockExplorerTokenLink && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('swapTokenVerificationMessage', [/*#__PURE__*/_react.default.createElement("a", {
    className: "build-quote__token-etherscan-link",
    key: "build-quote-etherscan-link",
    onClick: () => {
      /* istanbul ignore next */
      trackEvent({
        event: 'Clicked Block Explorer Link',
        category: _metametrics2.MetaMetricsEventCategory.Swaps,
        properties: {
          link_type: 'Token Tracker',
          action: 'Swaps Confirmation',
          block_explorer_domain: (0, _util.getURLHostName)(blockExplorerTokenLink)
        }
      });
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    },
    target: "_blank",
    rel: "noopener noreferrer"
  }, blockExplorerLabel)]), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapVerifyTokenExplanation', [blockExplorerLabel]),
    containerClassName: "build-quote__token-tooltip-container",
    key: "token-verification-info-tooltip"
  })))), (smartTransactionsEnabled || !smartTransactionsEnabled && !isDirectWrappingEnabled) && /*#__PURE__*/_react.default.createElement("div", {
    className: "build-quote__slippage-buttons-container"
  }, /*#__PURE__*/_react.default.createElement(_slippageButtons.default, {
    onSelect: newSlippage => {
      dispatch((0, _swaps.setMaxSlippage)(newSlippage));
    },
    maxAllowedSlippage: MAX_ALLOWED_SLIPPAGE,
    currentSlippage: maxSlippage,
    smartTransactionsEnabled: smartTransactionsEnabled,
    smartTransactionsOptInStatus: smartTransactionsOptInStatus,
    setSmartTransactionsOptInStatus: _actions.setSmartTransactionsOptInStatus,
    currentSmartTransactionsError: currentSmartTransactionsError,
    isDirectWrappingEnabled: isDirectWrappingEnabled
  }))), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: /* istanbul ignore next */
    async () => {
      // We need this to know how long it took to go from clicking on the Review swap button to rendered View Quote page.
      dispatch((0, _swaps.setReviewSwapClickedTimestamp)(Date.now()));
      // In case that quotes prefetching is waiting to be executed, but hasn't started yet,
      // we want to cancel it and fetch quotes from here.
      if (timeoutIdForQuotesPrefetching) {
        clearTimeout(timeoutIdForQuotesPrefetching);
        dispatch((0, _swaps.fetchQuotesAndSetQuoteState)(history, fromTokenInputValue, maxSlippage, trackEvent));
      } else if (areQuotesPresent) {
        // If there are prefetched quotes already, go directly to the View Quote page.
        history.push(_routes.VIEW_QUOTE_ROUTE);
      } else {
        // If the "Review swap" button was clicked while quotes are being fetched, go to the Loading Quotes page.
        await dispatch((0, _actions.setBackgroundSwapRouteState)('loading'));
        history.push(_routes.LOADING_QUOTES_ROUTE);
      }
    },
    submitText: t('swapReviewSwap'),
    disabled: isReviewSwapButtonDisabled,
    hideCancel: true,
    showTermsOfService: true
  }));
}
BuildQuote.propTypes = {
  ethBalance: _propTypes.default.string,
  selectedAccountAddress: _propTypes.default.string,
  shuffledTokensList: _propTypes.default.array
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\build-quote\\build-quote.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\build-quote\\index.js", {"./build-quote":"F:\\metamask-extension\\ui\\pages\\swaps\\build-quote\\build-quote.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cbuild-quote%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _buildQuote.default;
  }
});
var _buildQuote = _interopRequireDefault(require("./build-quote"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\build-quote\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\countdown-timer\\countdown-timer.js", {"../../../../shared/constants/time":"F:\\metamask-extension\\shared\\constants\\time.ts","../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","luxon":"F:\\metamask-extension\\node_modules\\luxon\\build\\cjs-browser\\luxon.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Ccountdown-timer%5Ccountdown-timer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CountdownTimer;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _luxon = require("luxon");
var _i18n = require("../../../contexts/i18n");
var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));
var _swaps = require("../../../ducks/swaps/swaps");
var _time = require("../../../../shared/constants/time");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Return the mm:ss start time of the countdown timer.
// If time has elapsed between `timeStarted` the time current time,
// then that elapsed time will be subtracted from the timer before
// rendering
function getNewTimer(currentTime, timeStarted, timeBaseStart) {
  const timeAlreadyElapsed = currentTime - timeStarted;
  return timeBaseStart - timeAlreadyElapsed;
}
function decreaseTimerByOne(timer) {
  return Math.max(timer - _time.SECOND, 0);
}
function timeBelowWarningTime(timer, warningTime) {
  const [warningTimeMinutes, warningTimeSeconds] = warningTime.split(':');
  return timer <= (Number(warningTimeMinutes) * 60 + Number(warningTimeSeconds)) * _time.SECOND;
}
function CountdownTimer({
  timeStarted,
  timeOnly,
  timerBase,
  warningTime,
  labelKey,
  infoTooltipLabelKey
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const intervalRef = (0, _react.useRef)();
  const initialTimeStartedRef = (0, _react.useRef)();
  const swapsQuoteRefreshTime = (0, _reactRedux.useSelector)(_swaps.getSwapsQuoteRefreshTime);
  const swapsQuotePrefetchingRefreshTime = (0, _reactRedux.useSelector)(_swaps.getSwapsQuotePrefetchingRefreshTime);
  const refreshTime = initialTimeStartedRef.current ? swapsQuoteRefreshTime : swapsQuotePrefetchingRefreshTime;
  const timerStart = Number(timerBase) || refreshTime;
  const [currentTime, setCurrentTime] = (0, _react.useState)(() => Date.now());
  const [timer, setTimer] = (0, _react.useState)(() => getNewTimer(currentTime, timeStarted, timerStart));
  (0, _react.useEffect)(() => {
    if (intervalRef.current === undefined) {
      intervalRef.current = setInterval(() => {
        setTimer(decreaseTimerByOne);
      }, _time.SECOND);
    }
    return function cleanup() {
      clearInterval(intervalRef.current);
    };
  }, []);

  // Reset the timer that timer has hit '0:00' and the timeStarted prop has changed
  (0, _react.useEffect)(() => {
    if (!initialTimeStartedRef.current) {
      initialTimeStartedRef.current = timeStarted || Date.now();
    }
    if (timer === 0 && timeStarted !== initialTimeStartedRef.current) {
      initialTimeStartedRef.current = timeStarted;
      const newCurrentTime = Date.now();
      setCurrentTime(newCurrentTime);
      setTimer(getNewTimer(newCurrentTime, timeStarted, timerStart));
      clearInterval(intervalRef.current);
      intervalRef.current = setInterval(() => {
        setTimer(decreaseTimerByOne);
      }, _time.SECOND);
    }
  }, [timeStarted, timer, timerStart]);
  const formattedTimer = _luxon.Duration.fromMillis(timer).toFormat('m:ss');
  let time;
  if (timeOnly) {
    time = /*#__PURE__*/_react.default.createElement("div", {
      className: "countdown-timer__time"
    }, formattedTimer);
  } else if (labelKey) {
    time = t(labelKey, [/*#__PURE__*/_react.default.createElement("div", {
      key: "countdown-time-1",
      className: "countdown-timer__time"
    }, formattedTimer)]);
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "countdown-timer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "countdown-timer__timer-container",
    className: (0, _classnames.default)('countdown-timer__timer-container', {
      'countdown-timer__timer-container--warning': warningTime && timeBelowWarningTime(timer, warningTime)
    })
  }, time), !timeOnly && infoTooltipLabelKey ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t(infoTooltipLabelKey)
  }) : null);
}
CountdownTimer.propTypes = {
  /**
   * Unix timestamp that indicates the time at which this timer has started
   * running.
   */
  timeStarted: _propTypes.default.number,
  /**
   * Boolean indicating whether to display only the time (`true`) or to also
   * display a label (`false`), given by the `labelKey` parameter.
   */
  timeOnly: _propTypes.default.bool,
  /**
   * The duration of this timer in milliseconds.
   */
  timerBase: _propTypes.default.number,
  /**
   * The time at which this timer should turn red, indicating it has almost run
   * out of time. Given in the format `mm:ss`.
   */
  warningTime: _propTypes.default.string,
  /**
   * The key of the label to display next to the timer, defined in
   * `app/_locales/`.
   */
  labelKey: _propTypes.default.string,
  /**
   * The key of the label to display in the tooltip when hovering over the info
   * icon, defined in `app/_locales/`.
   */
  infoTooltipLabelKey: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\countdown-timer\\countdown-timer.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\countdown-timer\\index.js", {"./countdown-timer":"F:\\metamask-extension\\ui\\pages\\swaps\\countdown-timer\\countdown-timer.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Ccountdown-timer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _countdownTimer.default;
  }
});
var _countdownTimer = _interopRequireDefault(require("./countdown-timer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\countdown-timer\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\create-new-swap\\create-new-swap.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","lodash/isEqual":"F:\\metamask-extension\\node_modules\\lodash\\isEqual.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Ccreate-new-swap%5Ccreate-new-swap.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreateNewSwap;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _i18n = require("../../../contexts/i18n");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _swaps = require("../../../ducks/swaps/swaps");
var _routes = require("../../../helpers/constants/routes");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CreateNewSwap({
  sensitiveTrackingProperties
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _isEqual.default);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 3,
    className: "create-new-swap"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: async () => {
      trackEvent({
        event: 'Make Another Swap',
        category: _metametrics2.MetaMetricsEventCategory.Swaps,
        sensitiveProperties: sensitiveTrackingProperties
      });
      history.push(_routes.DEFAULT_ROUTE); // It cleans up Swaps state.
      await dispatch((0, _swaps.navigateBackToBuildQuote)(history));
      dispatch((0, _swaps.setSwapsFromToken)(defaultSwapsToken));
    }
  }, t('makeAnotherSwap')));
}
CreateNewSwap.propTypes = {
  sensitiveTrackingProperties: _propTypes.default.object.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\create-new-swap\\create-new-swap.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\create-new-swap\\index.js", {"./create-new-swap":"F:\\metamask-extension\\ui\\pages\\swaps\\create-new-swap\\create-new-swap.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Ccreate-new-swap%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createNewSwap.default;
  }
});
var _createNewSwap = _interopRequireDefault(require("./create-new-swap"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\create-new-swap\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-input-pair\\dropdown-input-pair.js", {"../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../dropdown-search-list":"F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-search-list\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cdropdown-input-pair%5Cdropdown-input-pair.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropdownInputPair;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _dropdownSearchList = _interopRequireDefault(require("../dropdown-search-list"));
var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const characterWidthMap = {
  1: 5.86,
  2: 10.05,
  3: 10.45,
  4: 11.1,
  5: 10,
  6: 10.06,
  7: 9.17,
  8: 10.28,
  9: 10.06,
  0: 11.22,
  '.': 4.55
};
const getInputWidth = value => {
  const valueString = String(value);
  const charArray = valueString.split('');
  return charArray.reduce((inputWidth, _char) => inputWidth + characterWidthMap[_char], 12);
};
function DropdownInputPair({
  itemsToSearch = [],
  onInputChange,
  inputValue = '',
  onSelect,
  leftValue,
  selectedItem,
  SearchListPlaceholder,
  maxListItems,
  selectPlaceHolderText,
  loading,
  hideItemIf,
  listContainerClassName,
  autoFocus
}) {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const open = () => setIsOpen(true);
  const close = () => setIsOpen(false);
  const inputRef = (0, _react.useRef)();
  const onTextFieldChange = event => {
    event.stopPropagation();
    // Automatically prefix value with 0. if user begins typing .
    const valueToUse = event.target.value === '.' ? '0.' : event.target.value;

    // Regex that validates strings with only numbers, 'x.', '.x', and 'x.x'
    const regexp = /^(\.\d+|\d+(\.\d+)?|\d+\.)$/u;
    // If the value is either empty or contains only numbers and '.' and only has one '.', update input to match
    if (valueToUse === '' || regexp.test(valueToUse)) {
      onInputChange(valueToUse);
    } else {
      // otherwise, use the previously set inputValue (effectively denying the user from inputting the last char)
      // or an empty string if we do not yet have an inputValue
      onInputChange(inputValue || '');
    }
  };
  const [applyTwoLineStyle, setApplyTwoLineStyle] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    var _inputRef$current, _inputRef$current$get;
    setApplyTwoLineStyle(((inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : (_inputRef$current$get = _inputRef$current.getBoundingClientRect()) === null || _inputRef$current$get === void 0 ? void 0 : _inputRef$current$get.width) || 0) + getInputWidth(inputValue || '') > 137);
  }, [inputValue, inputRef]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-input-pair"
  }, /*#__PURE__*/_react.default.createElement(_dropdownSearchList.default, {
    itemsToSearch: itemsToSearch,
    SearchListPlaceholder: SearchListPlaceholder,
    fuseSearchKeys: [{
      name: 'name',
      weight: 0.499
    }, {
      name: 'symbol',
      weight: 0.499
    }, {
      name: 'address',
      weight: 0.002
    }],
    maxListItems: maxListItems,
    onOpen: open,
    onClose: close,
    onSelect: onSelect,
    className: isOpen ? 'dropdown-input-pair__list--full-width' : '',
    externallySelectedItem: selectedItem,
    selectPlaceHolderText: selectPlaceHolderText,
    selectorClosedClassName: "dropdown-input-pair__selector--closed",
    listContainerClassName: listContainerClassName,
    loading: loading,
    hideItemIf: hideItemIf,
    defaultToAll: true
  }), !isOpen && /*#__PURE__*/_react.default.createElement(_textField.default, {
    className: (0, _classnames.default)('dropdown-input-pair__input', {
      'dropdown-input-pair__two-line-input': applyTwoLineStyle
    }),
    type: "text",
    placeholder: "0",
    onChange: onTextFieldChange,
    fullWidth: true,
    margin: "dense",
    value: inputValue,
    autoFocus: autoFocus
  }), !isOpen && leftValue && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-input-pair__left-value', {
      'dropdown-input-pair__left-value--two-lines': applyTwoLineStyle
    }),
    ref: inputRef
  }, "\u2248 ", leftValue));
}
DropdownInputPair.propTypes = {
  /**
   * Give items data for the component
   */
  itemsToSearch: _propTypes.default.array,
  /**
   * Handler for input change
   */
  onInputChange: _propTypes.default.func,
  /**
   * Show input value content
   */
  inputValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  /**
   * Handler for onSelect
   */
  onSelect: _propTypes.default.func,
  /**
   * Set value to left
   */
  leftValue: _propTypes.default.string,
  /**
   * Show selected item
   */
  selectedItem: _propTypes.default.object,
  /**
   * Doesn't look like this is used
   */
  SearchListPlaceholder: _propTypes.default.func,
  /**
   * Define maximum item per list
   */
  maxListItems: _propTypes.default.number,
  /**
   * Show select placeholder text
   */
  selectPlaceHolderText: _propTypes.default.string,
  /**
   * Check if the component is loading
   */
  loading: _propTypes.default.bool,
  /**
   * Handler for hide item
   */
  hideItemIf: _propTypes.default.func,
  /**
   * Add custom CSS class for list container
   */
  listContainerClassName: _propTypes.default.string,
  /**
   * Check if the component is auto focus
   */
  autoFocus: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\dropdown-input-pair\\dropdown-input-pair.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-input-pair\\index.js", {"./dropdown-input-pair":"F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-input-pair\\dropdown-input-pair.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cdropdown-input-pair%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _dropdownInputPair.default;
  }
});
var _dropdownInputPair = _interopRequireDefault(require("./dropdown-input-pair"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\dropdown-input-pair\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-search-list\\dropdown-search-list.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/actionable-message/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/pulse-loader":"F:\\metamask-extension\\ui\\components\\ui\\pulse-loader\\index.js","../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors/selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","../import-token":"F:\\metamask-extension\\ui\\pages\\swaps\\import-token\\index.js","../searchable-item-list":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cdropdown-search-list%5Cdropdown-search-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropdownSearchList;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _i18n = require("../../../contexts/i18n");
var _searchableItemList = _interopRequireDefault(require("../searchable-item-list"));
var _pulseLoader = _interopRequireDefault(require("../../../components/ui/pulse-loader"));
var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));
var _componentLibrary = require("../../../components/component-library");
var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));
var _importToken = _interopRequireDefault(require("../import-token"));
var _selectors = require("../../../selectors/selectors");
var _swaps = require("../../../../shared/constants/swaps");
var _util = require("../../../helpers/utils/util");
var _swaps2 = require("../../../ducks/swaps/swaps");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function DropdownSearchList({
  searchListClassName,
  itemsToSearch,
  selectPlaceHolderText,
  fuseSearchKeys,
  defaultToAll,
  maxListItems,
  onSelect,
  startingItem,
  onOpen,
  onClose,
  className = '',
  externallySelectedItem,
  selectorClosedClassName,
  loading,
  hideRightLabels,
  hideItemIf,
  listContainerClassName,
  shouldSearchForImports
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const [isImportTokenModalOpen, setIsImportTokenModalOpen] = (0, _react.useState)(false);
  const [selectedItem, setSelectedItem] = (0, _react.useState)(startingItem);
  const [tokenForImport, setTokenForImport] = (0, _react.useState)(null);
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps2.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps2.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps2.getCurrentSmartTransactionsEnabled);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const close = (0, _react.useCallback)(() => {
    setIsOpen(false);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  }, [onClose]);
  const onClickItem = (0, _react.useCallback)(item => {
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(item);
    setSelectedItem(item);
    close();
  }, [onSelect, close]);
  const onOpenImportTokenModalClick = item => {
    setTokenForImport(item);
    setIsImportTokenModalOpen(true);
  };

  /* istanbul ignore next */
  const onImportTokenClick = () => {
    trackEvent({
      event: 'Token Imported',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        symbol: tokenForImport === null || tokenForImport === void 0 ? void 0 : tokenForImport.symbol,
        address: tokenForImport === null || tokenForImport === void 0 ? void 0 : tokenForImport.address,
        chain_id: chainId,
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus
      }
    });
    // Only when a user confirms import of a token, we add it and show it in a dropdown.
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(tokenForImport);
    setSelectedItem(tokenForImport);
    setTokenForImport(null);
    close();
  };
  const onImportTokenCloseClick = () => {
    setIsImportTokenModalOpen(false);
    close();
  };
  const onClickSelector = (0, _react.useCallback)(() => {
    if (!isOpen) {
      setIsOpen(true);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  }, [isOpen, onOpen]);
  const prevExternallySelectedItemRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    prevExternallySelectedItemRef.current = externallySelectedItem;
  });
  const prevExternallySelectedItem = prevExternallySelectedItemRef.current;
  (0, _react.useEffect)(() => {
    if (externallySelectedItem && !(0, _lodash.isEqual)(externallySelectedItem, selectedItem)) {
      setSelectedItem(externallySelectedItem);
    } else if (prevExternallySelectedItem && !externallySelectedItem) {
      setSelectedItem(null);
    }
  }, [externallySelectedItem, selectedItem, prevExternallySelectedItem]);
  const onKeyUp = e => {
    if (e.key === 'Escape') {
      close();
    } else if (e.key === 'Enter') {
      onClickSelector(e);
    }
  };
  const blockExplorerLink = rpcPrefs.blockExplorerUrl ?? _swaps.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null;
  const blockExplorerHostName = (0, _util.getURLHostName)(blockExplorerLink);
  const importTokenProps = {
    onImportTokenCloseClick,
    onImportTokenClick,
    setIsImportTokenModalOpen,
    tokenForImport
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-search-list', className),
    "data-testid": "dropdown-search-list",
    onClick: onClickSelector,
    onKeyUp: onKeyUp,
    tabIndex: "0"
  }, tokenForImport && isImportTokenModalOpen && /*#__PURE__*/_react.default.createElement(_importToken.default, importTokenProps), !isOpen && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-search-list__selector-closed-container', selectorClosedClassName)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__selector-closed"
  }, (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.iconUrl) && /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: selectedItem.iconUrl,
    className: "dropdown-search-list__selector-closed-icon",
    name: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.symbol
  }), !(selectedItem !== null && selectedItem !== void 0 && selectedItem.iconUrl) && /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__default-dropdown-icon"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__labels"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__item-labels"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('dropdown-search-list__closed-primary-label', {
      'dropdown-search-list__select-default': !(selectedItem !== null && selectedItem !== void 0 && selectedItem.symbol)
    })
  }, (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.symbol) || selectPlaceHolderText)))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowDown,
    size: _componentLibrary.IconSize.Xs,
    marginRight: 3
  })), isOpen && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_searchableItemList.default, {
    itemsToSearch: loading ? [] : itemsToSearch,
    Placeholder: () => /* istanbul ignore next */
    loading ? /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-search-list__loading-item"
    }, /*#__PURE__*/_react.default.createElement(_pulseLoader.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-search-list__loading-item-text-container"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "dropdown-search-list__loading-item-text"
    }, t('swapFetchingTokens')))) : /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-search-list__placeholder"
    }, t('swapBuildQuotePlaceHolderText', [searchQuery]), blockExplorerLink && /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: "0",
      className: "searchable-item-list__item searchable-item-list__item--add-token",
      key: "searchable-item-list-item-last"
    }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('addTokenByContractAddress', [/*#__PURE__*/_react.default.createElement("a", {
        key: "dropdown-search-list__etherscan-link",
        onClick: () => {
          trackEvent({
            event: 'Clicked Block Explorer Link',
            category: _metametrics2.MetaMetricsEventCategory.Swaps,
            properties: {
              link_type: 'Token Tracker',
              action: 'Verify Contract Address',
              block_explorer_domain: blockExplorerHostName
            }
          });
          global.platform.openTab({
            url: blockExplorerLink
          });
        },
        target: "_blank",
        rel: "noopener noreferrer"
      }, blockExplorerHostName)])
    }))),
    searchPlaceholderText: t('swapSearchNameOrAddress'),
    fuseSearchKeys: fuseSearchKeys,
    defaultToAll: defaultToAll,
    onClickItem: onClickItem,
    onOpenImportTokenModalClick: onOpenImportTokenModalClick,
    maxListItems: maxListItems,
    className: (0, _classnames.default)('dropdown-search-list__token-container', searchListClassName, {
      'dropdown-search-list--open': isOpen
    }),
    hideRightLabels: hideRightLabels,
    hideItemIf: hideItemIf,
    listContainerClassName: listContainerClassName,
    shouldSearchForImports: shouldSearchForImports,
    searchQuery: searchQuery,
    setSearchQuery: setSearchQuery
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__close-area",
    "data-testid": "dropdown-search-list__close-area",
    onClick: event => {
      event.stopPropagation();
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  })));
}
DropdownSearchList.propTypes = {
  itemsToSearch: _propTypes.default.array,
  onSelect: _propTypes.default.func,
  searchListClassName: _propTypes.default.string,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    weight: _propTypes.default.number
  })),
  defaultToAll: _propTypes.default.bool,
  maxListItems: _propTypes.default.number,
  startingItem: _propTypes.default.object,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  className: _propTypes.default.string,
  externallySelectedItem: _propTypes.default.object,
  loading: _propTypes.default.bool,
  selectPlaceHolderText: _propTypes.default.string,
  selectorClosedClassName: _propTypes.default.string,
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string,
  shouldSearchForImports: _propTypes.default.bool
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\dropdown-search-list\\dropdown-search-list.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-search-list\\index.js", {"./dropdown-search-list":"F:\\metamask-extension\\ui\\pages\\swaps\\dropdown-search-list\\dropdown-search-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cdropdown-search-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _dropdownSearchList.default;
  }
});
var _dropdownSearchList = _interopRequireDefault(require("./dropdown-search-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\dropdown-search-list\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\exchange-rate-display.js", {"../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cexchange-rate-display%5Cexchange-rate-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ExchangeRateDisplay;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _classnames = _interopRequireDefault(require("classnames"));
var _swaps = require("../swaps.util");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _i18n = require("../../../contexts/i18n");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ExchangeRateDisplay({
  primaryTokenValue,
  primaryTokenDecimals = 18,
  primaryTokenSymbol,
  secondaryTokenValue,
  secondaryTokenDecimals = 18,
  secondaryTokenSymbol,
  boldSymbols = true,
  showIconForSwappingTokens = true,
  className,
  onQuotesClick
}) {
  const [showPrimaryToSecondary, setShowPrimaryToSecondary] = (0, _react.useState)(true);
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const primaryTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(primaryTokenValue, primaryTokenDecimals);
  const secondaryTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(secondaryTokenValue, secondaryTokenDecimals);
  const conversionRateFromPrimaryToSecondary = new _bignumber.default(secondaryTokenAmount).div(primaryTokenAmount).round(9).toString(10);
  const conversionRateFromSecondaryToPrimary = new _bignumber.default(primaryTokenAmount).div(secondaryTokenAmount).round(9).toString(10);
  const baseSymbol = showPrimaryToSecondary ? primaryTokenSymbol : secondaryTokenSymbol;
  const ratiodSymbol = showPrimaryToSecondary ? secondaryTokenSymbol : primaryTokenSymbol;
  const rate = showPrimaryToSecondary ? conversionRateFromPrimaryToSecondary : conversionRateFromSecondaryToPrimary;
  let rateToDisplay;
  let comparisonSymbol = '=';
  if (new _bignumber.default(rate, 10).lt('0.00000001', 10)) {
    rateToDisplay = '0.000000001';
    comparisonSymbol = '<';
  } else if (new _bignumber.default(rate, 10).lt('0.000001', 10)) {
    rateToDisplay = rate;
  } else {
    rateToDisplay = (0, _swaps.formatSwapsValueForDisplay)(rate);
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('exchange-rate-display', className)
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    onClick: onQuotesClick,
    color: _designSystem.TextColor.primaryDefault,
    className: "exchange-rate-display__quote-rate",
    "data-testid": "exchange-rate-display-quote-rate"
  }, /*#__PURE__*/_react.default.createElement("span", null, "1"), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)({
      'exchange-rate-display__bold': boldSymbols
    }),
    "data-testid": "exchange-rate-display-base-symbol"
  }, baseSymbol), /*#__PURE__*/_react.default.createElement("span", null, comparisonSymbol), /*#__PURE__*/_react.default.createElement("span", null, rateToDisplay), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)({
      'exchange-rate-display__bold': boldSymbols
    })
  }, ratiodSymbol)), showIconForSwappingTokens && /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.SwapHorizontal,
    onClick: () => {
      setShowPrimaryToSecondary(!showPrimaryToSecondary);
    },
    color: _designSystem.IconColor.iconAlternative,
    style: {
      cursor: 'pointer'
    },
    title: t('switch'),
    "data-testid": "exchange-rate-display-switch"
  }));
}
ExchangeRateDisplay.propTypes = {
  primaryTokenValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_bignumber.default)]).isRequired,
  primaryTokenDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  primaryTokenSymbol: _propTypes.default.string.isRequired,
  secondaryTokenValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_bignumber.default)]).isRequired,
  secondaryTokenDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  secondaryTokenSymbol: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  boldSymbols: _propTypes.default.bool,
  showIconForSwappingTokens: _propTypes.default.bool,
  onQuotesClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\exchange-rate-display\\exchange-rate-display.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\index.js", {"./exchange-rate-display":"F:\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\exchange-rate-display.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cexchange-rate-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _exchangeRateDisplay.default;
  }
});
var _exchangeRateDisplay = _interopRequireDefault(require("./exchange-rate-display"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\exchange-rate-display\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\fee-card\\fee-card.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../components/app/transaction-detail-item/transaction-detail-item.component":"F:\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../../../components/app/transaction-detail/transaction-detail.component":"F:\\metamask-extension\\ui\\components\\app\\transaction-detail\\transaction-detail.component.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cfee-card%5Cfee-card.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FeeCard;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));
var _network = require("../../../../shared/constants/network");
var _transactionDetail = _interopRequireDefault(require("../../../components/app/transaction-detail/transaction-detail.component"));
var _transactionDetailItem = _interopRequireDefault(require("../../../components/app/transaction-detail-item/transaction-detail-item.component"));
var _designSystem = require("../../../helpers/constants/design-system");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _selectors = require("../../../selectors");
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const GAS_FEES_LEARN_MORE_URL = 'https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172';
function FeeCard({
  primaryFee,
  secondaryFee,
  hideTokenApprovalRow,
  tokenApprovalSourceTokenSymbol,
  onTokenApprovalClick,
  metaMaskFee,
  numberOfQuotes,
  onQuotesClick,
  chainId
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);

  /* istanbul ignore next */
  const getTranslatedNetworkName = () => {
    switch (chainId) {
      case _network.CHAIN_IDS.MAINNET:
        return t('networkNameEthereum');
      case _network.CHAIN_IDS.BSC:
        return t('networkNameBSC');
      case _network.CHAIN_IDS.POLYGON:
        return t('networkNamePolygon');
      case _network.CHAIN_IDS.LOCALHOST:
        return t('networkNameTestnet');
      case _network.CHAIN_IDS.GOERLI:
        return t('networkNameGoerli');
      case _network.CHAIN_IDS.AVALANCHE:
        return t('networkNameAvalanche');
      case _network.CHAIN_IDS.OPTIMISM:
        return t('networkNameOptimism');
      case _network.CHAIN_IDS.ARBITRUM:
        return t('networkNameArbitrum');
      default:
        throw new Error('This network is not supported for token swaps');
    }
  };
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const tokenApprovalTextComponent = /*#__PURE__*/_react.default.createElement("span", {
    key: "fee-card-approve-symbol",
    className: "fee-card__bold"
  }, t('enableToken', [tokenApprovalSourceTokenSymbol]));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__main"
  }, /*#__PURE__*/_react.default.createElement(_transactionDetail.default, {
    disableEditGasFeeButton: true,
    rows: [/*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
      key: "fee-card-gas-item",
      detailTitle: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('transactionDetailGasHeading'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
        position: "top",
        contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
          className: "fee-card__info-tooltip-paragraph"
        }, t('swapGasFeesSummary', [getTranslatedNetworkName()])), /*#__PURE__*/_react.default.createElement("p", {
          className: "fee-card__info-tooltip-paragraph"
        }, t('swapGasFeesDetails')), /*#__PURE__*/_react.default.createElement("p", {
          className: "fee-card__info-tooltip-paragraph"
        }, /*#__PURE__*/_react.default.createElement("a", {
          className: "fee-card__link",
          onClick: () => {
            /* istanbul ignore next */
            trackEvent({
              event: 'Clicked "Gas Fees: Learn More" Link',
              category: _metametrics2.MetaMetricsEventCategory.Swaps
            });
            global.platform.openTab({
              url: GAS_FEES_LEARN_MORE_URL
            });
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, t('swapGasFeesLearnMore')))),
        containerClassName: "fee-card__info-tooltip-content-container",
        wrapperClassName: "fee-card__row-label fee-card__info-tooltip-container"
      })),
      detailText: primaryFee.fee,
      detailTotal: useCurrencyRateCheck && secondaryFee.fee,
      subText: ((secondaryFee === null || secondaryFee === void 0 ? void 0 : secondaryFee.maxFee) !== undefined || (primaryFee === null || primaryFee === void 0 ? void 0 : primaryFee.maxFee) !== undefined) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        as: "span",
        fontWeight: _designSystem.FontWeight.Bold,
        color: _designSystem.TextColor.textAlternative,
        variant: _designSystem.TextVariant.bodySm
      }, t('maxFee')), useCurrencyRateCheck ? `: ${secondaryFee.maxFee}` : `: ${primaryFee.maxFee}`)
    })]
  }), !hideTokenApprovalRow && /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-label"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header-text"
  }, t('swapEnableTokenForSwapping', [tokenApprovalTextComponent]), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapEnableDescription', [tokenApprovalSourceTokenSymbol]),
    containerClassName: "fee-card__info-tooltip-container"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__link",
    onClick: () => onTokenApprovalClick()
  }, t('swapEditLimit'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-label"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header-text"
  }, numberOfQuotes > 1 && /*#__PURE__*/_react.default.createElement("span", {
    onClick: onQuotesClick,
    className: "fee-card__quote-link-text"
  }, t('swapNQuotesWithDot', [numberOfQuotes])), t('swapIncludesMMFee', [metaMaskFee]), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapMetaMaskFeeDescription', [metaMaskFee]),
    wrapperClassName: "fee-card__info-tooltip-container"
  }))))));
}
FeeCard.propTypes = {
  primaryFee: _propTypes.default.shape({
    fee: _propTypes.default.string.isRequired,
    maxFee: _propTypes.default.string.isRequired
  }).isRequired,
  secondaryFee: _propTypes.default.shape({
    fee: _propTypes.default.string.isRequired,
    maxFee: _propTypes.default.string.isRequired
  }),
  hideTokenApprovalRow: _propTypes.default.bool.isRequired,
  tokenApprovalSourceTokenSymbol: _propTypes.default.string,
  onTokenApprovalClick: _propTypes.default.func,
  metaMaskFee: _propTypes.default.string.isRequired,
  onQuotesClick: _propTypes.default.func.isRequired,
  numberOfQuotes: _propTypes.default.number.isRequired,
  chainId: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\fee-card\\fee-card.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\fee-card\\index.js", {"./fee-card":"F:\\metamask-extension\\ui\\pages\\swaps\\fee-card\\fee-card.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cfee-card%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _feeCard.default;
  }
});
var _feeCard = _interopRequireDefault(require("./fee-card"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\fee-card\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\import-token\\import-token.js", {"../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/actionable-message/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/popover":"F:\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cimport-token%5Cimport-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImportToken;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));
var _popover = _interopRequireDefault(require("../../../components/ui/popover"));
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _componentLibrary = require("../../../components/component-library");
var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ImportToken({
  onImportTokenCloseClick,
  onImportTokenClick,
  setIsImportTokenModalOpen,
  tokenForImport
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const ImportTokenModalFooter = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "page-container__footer-button",
    onClick: onImportTokenCloseClick
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "page-container__footer-button",
    onClick: onImportTokenClick,
    "data-testid": "page-container__import-button"
  }, t('import')));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t('importTokenQuestion'),
    onClose: () => setIsImportTokenModalOpen(false),
    footer: ImportTokenModalFooter
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingRight: 6,
    paddingBottom: 4,
    paddingLeft: 4,
    alignItems: _designSystem.AlignItems.center,
    display: _designSystem.DISPLAY.FLEX,
    className: "import-token"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    type: "danger",
    message: t('importTokenWarning')
  }), /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: tokenForImport.iconUrl,
    className: "import-token__token-icon",
    fallbackClassName: "import-token__token-icon",
    name: tokenForImport.symbol
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    marginTop: 2,
    marginBottom: 3
  }, tokenForImport.name || ''), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('contract'), ":"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    className: "import-token__contract-address",
    as: "h6",
    marginBottom: 6
  }, tokenForImport.address || '')));
}
ImportToken.propTypes = {
  onImportTokenCloseClick: _propTypes.default.func,
  onImportTokenClick: _propTypes.default.func,
  setIsImportTokenModalOpen: _propTypes.default.func,
  tokenForImport: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\import-token\\import-token.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\import-token\\index.js", {"./import-token":"F:\\metamask-extension\\ui\\pages\\swaps\\import-token\\import-token.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cimport-token%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _importToken.default;
  }
});
var _importToken = _interopRequireDefault(require("./import-token"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\import-token\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\index.js", {"../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../shared/constants/transaction":"F:\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../helpers/higher-order-components/feature-toggled-route":"F:\\metamask-extension\\ui\\helpers\\higher-order-components\\feature-toggled-route.js","../../hooks/useGasFeeEstimates":"F:\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../selectors/selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","./awaiting-signatures":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-signatures\\index.js","./awaiting-swap":"F:\\metamask-extension\\ui\\pages\\swaps\\awaiting-swap\\index.js","./build-quote":"F:\\metamask-extension\\ui\\pages\\swaps\\build-quote\\index.js","./loading-swaps-quotes":"F:\\metamask-extension\\ui\\pages\\swaps\\loading-swaps-quotes\\index.js","./notification-page/notification-page":"F:\\metamask-extension\\ui\\pages\\swaps\\notification-page\\notification-page.js","./prepare-swap-page/prepare-swap-page":"F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\prepare-swap-page.js","./smart-transaction-status":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\index.js","./swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","./view-quote":"F:\\metamask-extension\\ui\\pages\\swaps\\view-quote\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Swap;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _lodash = require("lodash");
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../contexts/i18n");
var _selectors = require("../../selectors/selectors");
var _swaps = require("../../ducks/swaps/swaps");
var _selectors2 = require("../../selectors");
var _routes = require("../../helpers/constants/routes");
var _swaps2 = require("../../../shared/constants/swaps");
var _actions = require("../../store/actions");
var _useGasFeeEstimates = require("../../hooks/useGasFeeEstimates");
var _featureToggledRoute = _interopRequireDefault(require("../../helpers/higher-order-components/feature-toggled-route"));
var _metametrics = require("../../../shared/constants/metametrics");
var _transaction = require("../../../shared/constants/transaction");
var _metametrics2 = require("../../contexts/metametrics");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _componentLibrary = require("../../components/component-library");
var _box = _interopRequireDefault(require("../../components/ui/box"));
var _designSystem = require("../../helpers/constants/design-system");
var _swaps3 = require("./swaps.util");
var _awaitingSignatures = _interopRequireDefault(require("./awaiting-signatures"));
var _smartTransactionStatus = _interopRequireDefault(require("./smart-transaction-status"));
var _awaitingSwap = _interopRequireDefault(require("./awaiting-swap"));
var _loadingSwapsQuotes = _interopRequireDefault(require("./loading-swaps-quotes"));
var _buildQuote = _interopRequireDefault(require("./build-quote"));
var _prepareSwapPage = _interopRequireDefault(require("./prepare-swap-page/prepare-swap-page"));
var _notificationPage = _interopRequireDefault(require("./notification-page/notification-page"));
var _viewQuote = _interopRequireDefault(require("./view-quote"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Swap() {
  var _approveTxData$txRece, _tradeTxData$txReceip, _fetchParams$destinat3, _fetchParams$sourceTo3;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const {
    pathname
  } = (0, _reactRouterDom.useLocation)();
  const isAwaitingSwapRoute = pathname === _routes.AWAITING_SWAP_ROUTE;
  const isAwaitingSignaturesRoute = pathname === _routes.AWAITING_SIGNATURES_ROUTE;
  const isSwapsErrorRoute = pathname === _routes.SWAPS_ERROR_ROUTE;
  const isLoadingQuotesRoute = pathname === _routes.LOADING_QUOTES_ROUTE;
  const isSmartTransactionStatusRoute = pathname === _routes.SMART_TRANSACTION_STATUS_ROUTE;
  const isViewQuoteRoute = pathname === _routes.VIEW_QUOTE_ROUTE;
  const isPrepareSwapRoute = pathname === _routes.PREPARE_SWAP_ROUTE;
  const [currentStxErrorTracked, setCurrentStxErrorTracked] = (0, _react.useState)(false);
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const {
    destinationTokenInfo = {}
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const routeState = (0, _reactRedux.useSelector)(_swaps.getBackgroundSwapRouteState);
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  const txList = (0, _reactRedux.useSelector)(_selectors2.currentNetworkTxListSelector, _reactRedux.shallowEqual);
  const tradeTxId = (0, _reactRedux.useSelector)(_swaps.getTradeTxId);
  const approveTxId = (0, _reactRedux.useSelector)(_swaps.getApproveTxId);
  const aggregatorMetadata = (0, _reactRedux.useSelector)(_swaps.getAggregatorMetadata, _reactRedux.shallowEqual);
  const fetchingQuotes = (0, _reactRedux.useSelector)(_swaps.getFetchingQuotes);
  let swapsErrorKey = (0, _reactRedux.useSelector)(_swaps.getSwapsErrorKey);
  const swapsEnabled = (0, _reactRedux.useSelector)(_swaps.getSwapsFeatureIsLive);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors2.checkNetworkAndAccountSupports1559);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList, _lodash.isEqual);
  const shuffledTokensList = (0, _lodash.shuffle)(Object.values(tokenList));
  const reviewSwapClickedTimestamp = (0, _reactRedux.useSelector)(_swaps.getReviewSwapClickedTimestamp);
  const pendingSmartTransactions = (0, _reactRedux.useSelector)(_swaps.getPendingSmartTransactions);
  const reviewSwapClicked = Boolean(reviewSwapClickedTimestamp);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const swapRedesignEnabled = (0, _reactRedux.useSelector)(_swaps.getSwapRedesignEnabled);
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  (0, _react.useEffect)(() => {
    const leaveSwaps = async () => {
      await dispatch((0, _swaps.prepareToLeaveSwaps)());
      // We need to wait until "prepareToLeaveSwaps" is done, because otherwise
      // a user would be redirected from DEFAULT_ROUTE back to Swaps.
      history.push(_routes.DEFAULT_ROUTE);
    };
    if (!isSwapsChain) {
      leaveSwaps();
    }
  }, [isSwapsChain, dispatch, history]);

  // This will pre-load gas fees before going to the View Quote page.
  (0, _useGasFeeEstimates.useGasFeeEstimates)();
  const {
    balance: ethBalance,
    address: selectedAccountAddress
  } = selectedAccount;
  const approveTxData = approveTxId && txList.find(({
    id
  }) => approveTxId === id);
  const tradeTxData = tradeTxId && txList.find(({
    id
  }) => tradeTxId === id);
  const tokensReceived = (tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.txReceipt) && (0, _transactionsControllerUtils.getSwapsTokensReceivedFromTxMeta)(destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.symbol, tradeTxData, destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.address, selectedAccountAddress, destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.decimals, approveTxData, chainId);
  const tradeConfirmed = (tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.status) === _transaction.TransactionStatus.confirmed;
  const approveError = (approveTxData === null || approveTxData === void 0 ? void 0 : approveTxData.status) === _transaction.TransactionStatus.failed || (approveTxData === null || approveTxData === void 0 ? void 0 : (_approveTxData$txRece = approveTxData.txReceipt) === null || _approveTxData$txRece === void 0 ? void 0 : _approveTxData$txRece.status) === '0x0';
  const tradeError = (tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.status) === _transaction.TransactionStatus.failed || (tradeTxData === null || tradeTxData === void 0 ? void 0 : (_tradeTxData$txReceip = tradeTxData.txReceipt) === null || _tradeTxData$txReceip === void 0 ? void 0 : _tradeTxData$txReceip.status) === '0x0';
  const conversionError = approveError || tradeError;
  if (conversionError && swapsErrorKey !== _swaps2.CONTRACT_DATA_DISABLED_ERROR) {
    swapsErrorKey = _swaps2.SWAP_FAILED_ERROR;
  }

  // eslint-disable-next-line
  (0, _react.useEffect)(() => {
    if (!isSwapsChain) {
      return undefined;
    }
    (0, _swaps3.fetchTokens)(chainId).then(tokens => {
      dispatch((0, _actions.setSwapsTokens)(tokens));
    }).catch(error => console.error(error));
    (0, _swaps3.fetchTopAssets)(chainId).then(topAssets => {
      dispatch((0, _swaps.setTopAssets)(topAssets));
    });
    (0, _swaps3.fetchAggregatorMetadata)(chainId).then(newAggregatorMetadata => {
      dispatch((0, _swaps.setAggregatorMetadata)(newAggregatorMetadata));
    });
    if (!networkAndAccountSupports1559) {
      dispatch((0, _swaps.fetchAndSetSwapsGasPriceInfo)(chainId));
    }
    return () => {
      dispatch((0, _swaps.prepareToLeaveSwaps)());
    };
  }, [dispatch, chainId, networkAndAccountSupports1559, isSwapsChain]);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const trackExitedSwapsEvent = () => {
    var _fetchParams$sourceTo, _fetchParams$destinat;
    trackEvent({
      event: 'Exited Swaps',
      category: _metametrics.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        token_from: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$sourceTo = fetchParams.sourceTokenInfo) === null || _fetchParams$sourceTo === void 0 ? void 0 : _fetchParams$sourceTo.symbol,
        token_from_amount: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value,
        request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
        token_to: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$destinat = fetchParams.destinationTokenInfo) === null || _fetchParams$destinat === void 0 ? void 0 : _fetchParams$destinat.symbol,
        slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
        custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
        current_screen: pathname.match(/\/swaps\/(.+)/u)[1],
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus
      }
    });
  };
  const exitEventRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    exitEventRef.current = () => {
      trackExitedSwapsEvent();
    };
  });
  (0, _react.useEffect)(() => {
    const fetchSwapsLivenessAndFeatureFlagsWrapper = async () => {
      await dispatch((0, _swaps.fetchSwapsLivenessAndFeatureFlags)());
    };
    fetchSwapsLivenessAndFeatureFlagsWrapper();
    return () => {
      exitEventRef.current();
    };
  }, [dispatch]);
  (0, _react.useEffect)(() => {
    // If there is a swapsErrorKey and reviewSwapClicked is false, there was an error in silent quotes prefetching
    // and we don't want to show the error page in that case, because another API call for quotes can be successful.
    if (swapsErrorKey && !isSwapsErrorRoute && reviewSwapClicked) {
      history.push(_routes.SWAPS_ERROR_ROUTE);
    }
  }, [history, swapsErrorKey, isSwapsErrorRoute, reviewSwapClicked]);
  const beforeUnloadEventAddedRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    const fn = () => {
      if (isLoadingQuotesRoute) {
        dispatch((0, _swaps.prepareToLeaveSwaps)());
      }
      return null;
    };
    if (isLoadingQuotesRoute && !beforeUnloadEventAddedRef.current) {
      beforeUnloadEventAddedRef.current = true;
      window.addEventListener('beforeunload', fn);
    }
    return () => window.removeEventListener('beforeunload', fn);
  }, [dispatch, isLoadingQuotesRoute]);
  const trackErrorStxEvent = (0, _react.useCallback)(() => {
    var _fetchParams$sourceTo2, _fetchParams$destinat2;
    trackEvent({
      event: 'Error Smart Transactions',
      category: _metametrics.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        token_from: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$sourceTo2 = fetchParams.sourceTokenInfo) === null || _fetchParams$sourceTo2 === void 0 ? void 0 : _fetchParams$sourceTo2.symbol,
        token_from_amount: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value,
        request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
        token_to: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$destinat2 = fetchParams.destinationTokenInfo) === null || _fetchParams$destinat2 === void 0 ? void 0 : _fetchParams$destinat2.symbol,
        slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
        custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
        current_screen: pathname.match(/\/swaps\/(.+)/u)[1],
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus,
        stx_error: currentSmartTransactionsError
      }
    });
  }, [currentSmartTransactionsError, currentSmartTransactionsEnabled, trackEvent, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError, fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$destinat3 = fetchParams.destinationTokenInfo) === null || _fetchParams$destinat3 === void 0 ? void 0 : _fetchParams$destinat3.symbol, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage, fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$sourceTo3 = fetchParams.sourceTokenInfo) === null || _fetchParams$sourceTo3 === void 0 ? void 0 : _fetchParams$sourceTo3.symbol, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value, hardwareWalletType, hardwareWalletUsed, pathname, smartTransactionsEnabled, smartTransactionsOptInStatus]);
  (0, _react.useEffect)(() => {
    if (currentSmartTransactionsError && !currentStxErrorTracked) {
      setCurrentStxErrorTracked(true);
      trackErrorStxEvent();
    }
  }, [currentSmartTransactionsError, trackErrorStxEvent, currentStxErrorTracked]);
  if (!isSwapsChain) {
    // A user is being redirected outside of Swaps via the async "leaveSwaps" function above. In the meantime
    // we have to prevent the code below this condition, which wouldn't work on an unsupported chain.
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
  }
  const redirectToDefaultRoute = async () => {
    dispatch((0, _swaps.clearSwapsState)());
    await dispatch((0, _actions.resetBackgroundSwapsState)());
    history.push(_routes.DEFAULT_ROUTE);
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__header"
  }, !swapRedesignEnabled && /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__header-edit",
    onClick: async () => {
      await dispatch((0, _swaps.navigateBackToBuildQuote)(history));
    }
  }, isViewQuoteRoute && t('edit')), swapRedesignEnabled && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    marginLeft: 4,
    width: _designSystem.FRACTIONS.ONE_TWELFTH,
    tabIndex: "0",
    onKeyUp: e => {
      if (e.key === 'Enter') {
        redirectToDefaultRoute();
      }
    }
  }, !isAwaitingSwapRoute && !isAwaitingSignaturesRoute && !isSmartTransactionStatusRoute && /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Arrow2Left,
    size: _componentLibrary.IconSize.Lg,
    color: _designSystem.IconColor.iconAlternative,
    onClick: redirectToDefaultRoute,
    style: {
      cursor: 'pointer'
    },
    title: t('cancel')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__title"
  }, t('swap')), !swapRedesignEnabled && /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__header-cancel",
    onClick: async () => {
      dispatch((0, _swaps.clearSwapsState)());
      await dispatch((0, _actions.resetBackgroundSwapsState)());
      history.push(_routes.DEFAULT_ROUTE);
    }
  }, !isAwaitingSwapRoute && !isAwaitingSignaturesRoute && !isSmartTransactionStatusRoute && t('cancel')), swapRedesignEnabled && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    marginRight: 4,
    width: _designSystem.FRACTIONS.ONE_TWELFTH,
    tabIndex: "0",
    onKeyUp: e => {
      if (e.key === 'Enter') {
        dispatch((0, _swaps.setTransactionSettingsOpened)(true));
      }
    }
  }, isPrepareSwapRoute && /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Setting,
    size: _componentLibrary.IconSize.Lg,
    color: _designSystem.IconColor.iconAlternative,
    onClick: () => {
      dispatch((0, _swaps.setTransactionSettingsOpened)(true));
    },
    style: {
      cursor: 'pointer'
    },
    title: t('transactionSettings')
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('swaps__content', {
      'swaps__content--redesign-enabled': swapRedesignEnabled
    })
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.BUILD_QUOTE_ROUTE,
    exact: true,
    render: () => {
      if (swapRedesignEnabled) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.PREPARE_SWAP_ROUTE
          }
        });
      }
      if (tradeTxData && !conversionError) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.AWAITING_SWAP_ROUTE
          }
        });
      } else if (tradeTxData && routeState) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.SWAPS_ERROR_ROUTE
          }
        });
      } else if (routeState === 'loading' && aggregatorMetadata) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.LOADING_QUOTES_ROUTE
          }
        });
      }
      return /*#__PURE__*/_react.default.createElement(_buildQuote.default, {
        ethBalance: ethBalance,
        selectedAccountAddress: selectedAccountAddress,
        shuffledTokensList: shuffledTokensList
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.PREPARE_SWAP_ROUTE,
    exact: true,
    render: () => {
      if (!swapRedesignEnabled) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.BUILD_QUOTE_ROUTE
          }
        });
      }
      return /*#__PURE__*/_react.default.createElement(_prepareSwapPage.default, {
        ethBalance: ethBalance,
        selectedAccountAddress: selectedAccountAddress,
        shuffledTokensList: shuffledTokensList
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.VIEW_QUOTE_ROUTE,
    exact: true,
    render: () => {
      if (pendingSmartTransactions.length > 0 && routeState === 'smartTransactionStatus') {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.SMART_TRANSACTION_STATUS_ROUTE
          }
        });
      }
      if (swapRedesignEnabled) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.PREPARE_SWAP_ROUTE
          }
        });
      }
      if (Object.values(quotes).length) {
        return /*#__PURE__*/_react.default.createElement(_viewQuote.default, {
          numberOfQuotes: Object.values(quotes).length
        });
      } else if (fetchParams) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.SWAPS_ERROR_ROUTE
          }
        });
      }
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SWAPS_ERROR_ROUTE,
    exact: true,
    render: () => {
      if (swapsErrorKey) {
        return /*#__PURE__*/_react.default.createElement(_awaitingSwap.default, {
          swapComplete: false,
          errorKey: swapsErrorKey,
          txHash: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.hash,
          txId: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.id,
          submittedTime: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.submittedTime
        });
      }
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SWAPS_NOTIFICATION_ROUTE,
    exact: true,
    render: () => {
      if (!swapsErrorKey) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.PREPARE_SWAP_ROUTE
          }
        });
      }
      return /*#__PURE__*/_react.default.createElement(_notificationPage.default, {
        notificationKey: swapsErrorKey
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.LOADING_QUOTES_ROUTE,
    exact: true,
    render: () => {
      return aggregatorMetadata ? /*#__PURE__*/_react.default.createElement(_loadingSwapsQuotes.default, {
        loadingComplete: !fetchingQuotes && Boolean(Object.values(quotes).length),
        onDone: async () => {
          await dispatch((0, _actions.setBackgroundSwapRouteState)(''));
          if (swapsErrorKey === _swaps2.ERROR_FETCHING_QUOTES || swapsErrorKey === _swaps2.QUOTES_NOT_AVAILABLE_ERROR) {
            dispatch((0, _actions.setSwapsErrorKey)(_swaps2.QUOTES_NOT_AVAILABLE_ERROR));
            history.push(_routes.SWAPS_ERROR_ROUTE);
          } else {
            history.push(_routes.VIEW_QUOTE_ROUTE);
          }
        },
        aggregatorMetadata: aggregatorMetadata
      }) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SWAPS_MAINTENANCE_ROUTE,
    exact: true,
    render: () => {
      return swapsEnabled === false ? /*#__PURE__*/_react.default.createElement(_awaitingSwap.default, {
        errorKey: _swaps2.OFFLINE_FOR_MAINTENANCE
      }) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.AWAITING_SIGNATURES_ROUTE,
    exact: true,
    render: () => {
      return /*#__PURE__*/_react.default.createElement(_awaitingSignatures.default, null);
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SMART_TRANSACTION_STATUS_ROUTE,
    exact: true,
    render: () => {
      return /*#__PURE__*/_react.default.createElement(_smartTransactionStatus.default, {
        txId: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.id
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.AWAITING_SWAP_ROUTE,
    exact: true,
    render: () => {
      return routeState === 'awaiting' || tradeTxData ? /*#__PURE__*/_react.default.createElement(_awaitingSwap.default, {
        swapComplete: tradeConfirmed,
        txHash: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.hash,
        tokensReceived: tokensReceived,
        txId: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.id,
        submittingSwap: routeState === 'awaiting' && !(approveTxId || tradeTxId)
      }) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.DEFAULT_ROUTE
        }
      });
    }
  })))));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\list-with-search\\list-with-search.js", {"../../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../selectors/selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","../searchable-item-list/item-list":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","loglevel":"F:\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Clist-with-search%5Clist-with-search.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListWithSearch;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _itemList = _interopRequireDefault(require("../searchable-item-list/item-list"));
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _i18n = require("../../../contexts/i18n");
var _swaps = require("../swaps.util");
var _selectors = require("../../../selectors/selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
let timeoutIdForSearch;
function ListWithSearch({
  itemsToSearch = [],
  listTitle,
  maxListItems,
  onClickItem,
  onOpenImportTokenModalClick,
  shouldSearchForImports,
  Placeholder,
  hideRightLabels,
  hideItemIf,
  listContainerClassName,
  searchQuery,
  setSearchQuery
}) {
  const itemListRef = (0, _react.useRef)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [items, setItems] = (0, _react.useState)(itemsToSearch);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);

  /**
   * Search a custom token for import based on a contract address.
   *
   * @param {string} contractAddress
   */
  const handleSearchTokenForImport = async contractAddress => {
    try {
      const token = await (0, _swaps.fetchToken)(contractAddress, chainId);
      if (token) {
        token.primaryLabel = token.symbol;
        token.secondaryLabel = token.name;
        token.notImported = true;
        setItems([token]);
        return;
      }
    } catch (e) {
      _loglevel.default.error('Token not found, show 0 results.', e);
    }
    setItems([]); // No token for import found.
  };

  const handleSearch = async newSearchQuery => {
    setSearchQuery(newSearchQuery);
    if (timeoutIdForSearch) {
      clearTimeout(timeoutIdForSearch);
    }
    timeoutIdForSearch = setTimeout(async () => {
      timeoutIdForSearch = null;
      const trimmedNewSearchQuery = newSearchQuery.trim();
      const trimmedNewSearchQueryUpperCase = trimmedNewSearchQuery.toUpperCase();
      const trimmedNewSearchQueryLowerCase = trimmedNewSearchQuery.toLowerCase();
      if (!trimmedNewSearchQuery) {
        setItems(itemsToSearch);
        return;
      }
      const validHexAddress = (0, _hexstringUtils.isValidHexAddress)(trimmedNewSearchQuery);
      let filteredItems = [];
      if (validHexAddress) {
        // E.g. DAI token: 0x6b175474e89094c44da98b954eedeac495271D0f
        const foundItem = itemsToSearch.find(item => {
          return item.address === trimmedNewSearchQueryLowerCase;
        });
        if (foundItem) {
          filteredItems.push(foundItem);
        }
      } else {
        filteredItems = (0, _lodash.filter)(itemsToSearch, function (item) {
          return item.symbol.includes(trimmedNewSearchQueryUpperCase);
        });
      }
      const results = newSearchQuery === '' ? itemsToSearch : filteredItems;
      if (shouldSearchForImports && results.length === 0 && validHexAddress) {
        await handleSearchTokenForImport(trimmedNewSearchQuery);
        return;
      }
      setItems(results);
    }, 350);
  };
  (0, _react.useEffect)(() => {
    handleSearch(searchQuery);
  }, [searchQuery]);
  const handleOnClear = () => {
    setSearchQuery('');
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "list-with-search",
    width: _designSystem.BlockSize.Full,
    tabIndex: "0"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    style: {
      gridColumnStart: 1,
      gridColumnEnd: 3
    },
    display: _designSystem.Display.Flex,
    flexDirection: _designSystem.FlexDirection.Column
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.TextFieldSearch, {
    id: "list-with-search__text-search",
    marginBottom: 4,
    onChange: e => handleSearch(e.target.value),
    clearButtonOnClick: handleOnClear,
    value: searchQuery,
    placeholder: t('enterTokenNameOrAddress'),
    inputProps: {
      marginRight: 0
    },
    className: "list-with-search__text-search",
    autoFocus: true,
    tabIndex: "0"
  })), (items === null || items === void 0 ? void 0 : items.length) > 0 && /*#__PURE__*/_react.default.createElement(_itemList.default, {
    searchQuery: searchQuery,
    results: items,
    onClickItem: onClickItem,
    onOpenImportTokenModalClick: onOpenImportTokenModalClick,
    Placeholder: Placeholder,
    listTitle: listTitle,
    maxListItems: maxListItems,
    containerRef: itemListRef,
    hideRightLabels: hideRightLabels,
    hideItemIf: hideItemIf,
    listContainerClassName: listContainerClassName
  }), (items === null || items === void 0 ? void 0 : items.length) === 0 && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1,
    marginBottom: 5,
    display: _designSystem.Display.Flex,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6"
  }, t('swapNoTokensAvailable', [searchQuery]))));
}
ListWithSearch.propTypes = {
  itemsToSearch: _propTypes.default.array,
  onClickItem: _propTypes.default.func,
  onOpenImportTokenModalClick: _propTypes.default.func,
  Placeholder: _propTypes.default.func,
  listTitle: _propTypes.default.string,
  maxListItems: _propTypes.default.number,
  hideRightLabels: _propTypes.default.bool,
  shouldSearchForImports: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string,
  searchQuery: _propTypes.default.string,
  setSearchQuery: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\list-with-search\\list-with-search.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\loading-swaps-quotes\\background-animation.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cloading-swaps-quotes%5Cbackground-animation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BackgroundAnimation;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function BackgroundAnimation() {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__background-1",
    "data-testid": "loading-swaps-quotes-background-1"
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "193",
    height: "190",
    viewBox: "0 0 193 190",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M153.753 53.876C153.595 53.9493 153.419 54.0161 153.25 54.0651C151.081 54.7451 148.777 53.538 148.086 51.3768C147.763 50.3298 147.851 49.2109 148.361 48.2363C148.87 47.2618 149.732 46.5374 150.78 46.2144C151.828 45.8913 152.948 45.9781 153.923 46.4865C154.898 46.9949 155.622 47.8557 155.944 48.9027C156.567 50.918 155.592 53.0243 153.753 53.876ZM150.817 47.5708C150.245 47.8359 149.782 48.2721 149.495 48.8334C149.144 49.5127 149.073 50.2843 149.303 51.0047C149.774 52.4998 151.375 53.3384 152.877 52.8787C154.374 52.4069 155.215 50.8063 154.756 49.3056C154.526 48.5852 154.027 47.9888 153.36 47.6334C152.68 47.2836 151.908 47.213 151.187 47.4437C151.049 47.4636 150.927 47.52 150.817 47.5708Z",
    fill: "#86E29B"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M18.3624 73.9241C18.3015 73.9523 18.2407 73.9805 18.1798 74.0087C17.0495 74.4733 15.8073 74.4728 14.6751 74.0078C12.3517 73.0461 11.2387 70.3567 12.2031 68.0341C13.1676 65.7115 15.8598 64.5971 18.1833 65.5589C19.3155 66.0239 20.1951 66.9013 20.6591 68.0304C21.123 69.1595 21.1215 70.4008 20.6552 71.5326C20.2207 72.6053 19.4093 73.4391 18.3624 73.9241ZM15.0433 66.7921C14.3129 67.1305 13.713 67.7186 13.3766 68.5243C12.6776 70.207 13.4834 72.1377 15.1666 72.8348C15.9849 73.1647 16.8786 73.1789 17.6933 72.831C18.5136 72.4952 19.1388 71.8659 19.4818 71.0424C19.8126 70.2245 19.8276 69.3313 19.4801 68.5175C19.1448 67.6981 18.5155 67.0739 17.6917 66.7319C16.8144 66.3703 15.8589 66.4142 15.0433 66.7921Z",
    fill: "#FFB0EB"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M116.617 37.3839C117.397 37.0226 117.736 36.0982 117.375 35.3192C117.015 34.5402 116.09 34.2016 115.31 34.5629C114.53 34.9243 114.19 35.8487 114.551 36.6277C114.912 37.4067 115.837 37.7453 116.617 37.3839Z",
    fill: "url(#paint0_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M55.1317 91.7213C55.9116 91.36 56.2512 90.4356 55.8903 89.6566C55.5294 88.8776 54.6046 88.539 53.8247 88.9003C53.0448 89.2617 52.7052 90.1861 53.0661 90.9651C53.427 91.7441 54.3518 92.0827 55.1317 91.7213Z",
    fill: "url(#paint1_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M31.9932 126.235C32.7731 125.874 33.1127 124.95 32.7518 124.171C32.3909 123.392 31.4661 123.053 30.6863 123.414C29.9064 123.776 29.5667 124.7 29.9277 125.479C30.2886 126.258 31.2134 126.597 31.9932 126.235Z",
    fill: "url(#paint2_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M119.43 132.589C120.21 132.228 120.55 131.304 120.189 130.525C119.828 129.746 118.903 129.407 118.123 129.768C117.344 130.13 117.004 131.054 117.365 131.833C117.726 132.612 118.651 132.951 119.43 132.589Z",
    fill: "url(#paint3_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M44.7469 47.3835C46.0108 46.7979 46.5612 45.2997 45.9763 44.0372C45.3914 42.7747 43.8926 42.2259 42.6286 42.8115C41.3647 43.3971 40.8143 44.8953 41.3992 46.1578C41.9841 47.4203 43.4829 47.9691 44.7469 47.3835Z",
    fill: "url(#paint4_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M105.107 90.7857C106.371 90.2001 106.922 88.702 106.337 87.4394C105.752 86.1769 104.253 85.6282 102.989 86.2137C101.725 86.7993 101.175 88.2975 101.76 89.56C102.344 90.8226 103.843 91.3713 105.107 90.7857Z",
    fill: "url(#paint5_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M95.5179 172.376C96.7818 171.791 97.3322 170.293 96.7473 169.03C96.1624 167.767 94.6636 167.219 93.3996 167.804C92.1357 168.39 91.5853 169.888 92.1702 171.151C92.7551 172.413 94.2539 172.962 95.5179 172.376Z",
    fill: "url(#paint6_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M165.098 102.367C166.362 101.781 166.912 100.283 166.327 99.0205C165.742 97.758 164.244 97.2092 162.98 97.7948C161.716 98.3804 161.165 99.8786 161.75 101.141C162.335 102.404 163.834 102.952 165.098 102.367Z",
    fill: "url(#paint7_linear)"
  }), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint0_linear",
    x1: "114.554",
    y1: "36.6326",
    x2: "117.379",
    y2: "35.3237",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint1_linear",
    x1: "53.0688",
    y1: "90.97",
    x2: "55.8937",
    y2: "89.6611",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint2_linear",
    x1: "29.9283",
    y1: "125.483",
    x2: "32.7532",
    y2: "124.174",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint3_linear",
    x1: "117.365",
    y1: "131.837",
    x2: "120.19",
    y2: "130.528",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint4_linear",
    x1: "41.4394",
    y1: "46.2402",
    x2: "45.947",
    y2: "43.9537",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint5_linear",
    x1: "101.8",
    y1: "89.6425",
    x2: "106.307",
    y2: "87.356",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint6_linear",
    x1: "92.2104",
    y1: "171.233",
    x2: "96.718",
    y2: "168.947",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint7_linear",
    x1: "161.79",
    y1: "101.224",
    x2: "166.298",
    y2: "98.937",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__background-2",
    "data-testid": "loading-swaps-quotes-background-2"
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "195",
    height: "205",
    viewBox: "0 0 195 205",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M29.84 121.982C30.0408 121.969 30.245 122.01 30.4258 122.106L46.4233 130.275C46.8125 130.478 47.0536 130.893 47.0402 131.324C47.0143 131.768 46.7423 132.148 46.3356 132.308L24.5484 140.937C24.1417 141.097 23.6789 141.005 23.3642 140.702C23.0495 140.4 22.9398 139.937 23.0753 139.525L28.8651 122.727C28.9671 122.426 29.2065 122.169 29.5086 122.056C29.614 122.023 29.7194 121.989 29.84 121.982ZM43.1981 131.148L30.5607 124.689L25.9884 137.96L43.1981 131.148Z",
    fill: "#75C4FD"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M168.214 54.3381C168.442 54.3238 168.674 54.3764 168.869 54.485C169.217 54.6781 169.44 55.0266 169.465 55.4145L170.59 68.4358C170.631 68.8763 170.416 69.3061 170.041 69.5444C169.666 69.7827 169.182 69.7862 168.805 69.5681L156.14 62.2246C155.763 62.0065 155.535 61.5911 155.548 61.1472C155.56 60.7033 155.818 60.3112 156.209 60.1122L167.75 54.4343C167.908 54.3841 168.067 54.3473 168.214 54.3381ZM168.027 66.3674L167.248 57.3661L159.267 61.2902L168.027 66.3674Z",
    fill: "#FFB0EB"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M88.6283 16.6885C88.8694 16.6734 89.1154 16.7385 89.3255 16.873L100.21 24.1133C100.561 24.3464 100.762 24.7635 100.708 25.1832C100.653 25.6028 100.381 25.969 99.9864 26.1146L86.3391 31.4276C85.9449 31.5731 85.5106 31.5064 85.1842 31.2314C84.8712 30.9556 84.7239 30.5352 84.8192 30.1264L87.5815 17.5731C87.666 17.2053 87.9162 16.9076 88.2702 16.7646C88.3882 16.7169 88.5078 16.696 88.6283 16.6885ZM97.1342 24.7894L89.4471 19.6718L87.5021 28.5349L97.1342 24.7894Z",
    fill: "url(#paint0_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M117.145 183.156C116.944 183.289 116.698 183.356 116.449 183.344L103.402 182.517C102.982 182.49 102.6 182.229 102.437 181.839C102.274 181.448 102.327 180.995 102.596 180.671L111.758 169.247C112.027 168.923 112.436 168.764 112.856 168.839C113.265 168.921 113.603 169.212 113.725 169.614L117.609 181.866C117.72 182.227 117.652 182.61 117.417 182.911C117.339 183.011 117.246 183.089 117.145 183.156ZM105.728 180.393L114.944 180.981L112.197 172.333L105.728 180.393Z",
    fill: "url(#paint1_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M38.0816 74.0208C38.1217 74.0183 38.1485 74.0166 38.1887 74.0141C42.3831 73.805 45.9744 77.0577 46.1831 81.2474C46.3919 85.4371 43.1484 89.0241 38.9407 89.234C34.7463 89.4431 31.1549 86.1904 30.9462 82.0007C30.7391 77.8377 33.9307 74.2809 38.0816 74.0208ZM38.9104 87.2486C41.9767 87.0565 44.3523 84.4236 44.1997 81.3448C44.0455 78.2393 41.3949 75.8407 38.2859 75.9952C35.1761 76.1364 32.7753 78.7977 32.9296 81.9033C33.0838 85.0088 35.7344 87.4073 38.8434 87.2528C38.8568 87.252 38.8836 87.2503 38.9104 87.2486Z",
    fill: "#86E29B"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M162.178 97.8401C162.218 97.8376 162.245 97.8359 162.285 97.8334C166.48 97.6243 170.071 100.877 170.28 105.067C170.489 109.256 167.245 112.843 163.037 113.053C158.843 113.262 155.252 110.01 155.043 105.82C154.836 101.657 158.027 98.1002 162.178 97.8401ZM163.007 111.068C166.073 110.876 168.449 108.243 168.296 105.164C168.142 102.059 165.492 99.6601 162.383 99.8146C159.273 99.9557 156.872 102.617 157.026 105.723C157.181 108.828 159.831 111.227 162.94 111.072C162.953 111.071 162.98 111.07 163.007 111.068Z",
    fill: "#86E29B"
  }), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint0_linear",
    x1: "100.609",
    y1: "23.2611",
    x2: "84.4152",
    y2: "24.2757",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#FFE466"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#FFAFEA"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint1_linear",
    x1: "103.812",
    y1: "183.939",
    x2: "116.959",
    y2: "174.66",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.0928503",
    stopColor: "#81C2F6"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#F0B8BD"
  }))))));
}


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\loading-swaps-quotes\\background-animation.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\loading-swaps-quotes\\index.js", {"./loading-swaps-quotes":"F:\\metamask-extension\\ui\\pages\\swaps\\loading-swaps-quotes\\loading-swaps-quotes.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cloading-swaps-quotes%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingSwapsQuotes.default;
  }
});
var _loadingSwapsQuotes = _interopRequireDefault(require("./loading-swaps-quotes"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\loading-swaps-quotes\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\loading-swaps-quotes\\loading-swaps-quotes.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/ui/mascot":"F:\\metamask-extension\\ui\\components\\ui\\mascot\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../selectors/selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","./background-animation":"F:\\metamask-extension\\ui\\pages\\swaps\\loading-swaps-quotes\\background-animation.js","events":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","lodash/isEqual":"F:\\metamask-extension\\node_modules\\lodash\\isEqual.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cloading-swaps-quotes%5Cloading-swaps-quotes.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoadingSwapsQuotes;
var _events = _interopRequireDefault(require("events"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _reactRouterDom = require("react-router-dom");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors/selectors");
var _i18n = require("../../../contexts/i18n");
var _metametrics = require("../../../contexts/metametrics");
var _mascot = _interopRequireDefault(require("../../../components/ui/mascot"));
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _backgroundAnimation = _interopRequireDefault(require("./background-animation"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function LoadingSwapsQuotes({
  aggregatorMetadata,
  loadingComplete,
  onDone
}) {
  var _fetchParams$sourceTo, _fetchParams$destinat;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const animationEventEmitter = (0, _react.useRef)(new _events.default());
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _isEqual.default);
  const quotesFetchStartTime = (0, _reactRedux.useSelector)(_swaps.getQuotesFetchStartTime);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const quotesRequestCancelledEventConfig = {
    event: 'Quotes Request Cancelled',
    category: _metametrics2.MetaMetricsEventCategory.Swaps,
    sensitiveProperties: {
      token_from: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$sourceTo = fetchParams.sourceTokenInfo) === null || _fetchParams$sourceTo === void 0 ? void 0 : _fetchParams$sourceTo.symbol,
      token_from_amount: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value,
      request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
      token_to: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$destinat = fetchParams.destinationTokenInfo) === null || _fetchParams$destinat === void 0 ? void 0 : _fetchParams$destinat.symbol,
      slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
      custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
      response_time: Date.now() - quotesFetchStartTime,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    }
  };
  const [aggregatorNames] = (0, _react.useState)(() => (0, _lodash.shuffle)(Object.keys(aggregatorMetadata)));
  const numberOfQuotes = aggregatorNames.length;
  const mascotContainer = (0, _react.useRef)();
  const currentMascotContainer = mascotContainer.current;
  const [quoteCount, updateQuoteCount] = (0, _react.useState)(0);
  const [midPointTarget, setMidpointTarget] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    let timeoutLength;

    // The below logic simulates a sequential loading of the aggregator quotes, even though we are fetching them all with a single call.
    // This is to give the user a sense of progress. The callback passed to `setTimeout` updates the quoteCount and therefore causes
    // a new logo to be shown, the fox to look at that logo, the logo bar and aggregator name to update.

    if (loadingComplete) {
      // If loading is complete, but the quoteCount is not, we quickly display the remaining logos/names/fox looks. 0.2s each
      timeoutLength = 20;
    } else {
      // If loading is not complete, we display remaining logos/names/fox looks at random intervals between 0.5s and 2s, to simulate the
      // sort of loading a user would experience in most async scenarios
      timeoutLength = 500 + Math.floor(Math.random() * 1500);
    }
    const quoteCountTimeout = setTimeout(() => {
      if (quoteCount < numberOfQuotes) {
        updateQuoteCount(quoteCount + 1);
      } else if (quoteCount === numberOfQuotes && loadingComplete) {
        onDone();
      }
    }, timeoutLength);
    return function cleanup() {
      clearTimeout(quoteCountTimeout);
    };
  }, [quoteCount, loadingComplete, onDone, numberOfQuotes]);
  (0, _react.useEffect)(() => {
    if (currentMascotContainer) {
      const {
        top,
        left,
        width,
        height
      } = currentMascotContainer.getBoundingClientRect();
      const center = {
        x: left + width / 2,
        y: top + height / 2
      };
      setMidpointTarget(center);
    }
  }, [currentMascotContainer]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__content"
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__quote-counter"
  }, /*#__PURE__*/_react.default.createElement("span", null, t('swapFetchingQuoteNofN', [Math.min(quoteCount + 1, numberOfQuotes), numberOfQuotes]))), /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__quote-name-check"
  }, /*#__PURE__*/_react.default.createElement("span", null, t('swapFetchingQuotes'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__loading-bar-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__loading-bar",
    style: {
      width: `${100 / numberOfQuotes * quoteCount}%`
    }
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__animation"
  }, /*#__PURE__*/_react.default.createElement(_backgroundAnimation.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "loading-swaps-quotes__mascot-container",
    ref: mascotContainer
  }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
    animationEventEmitter: animationEventEmitter.current,
    width: "90",
    height: "90",
    lookAtTarget: midPointTarget
  })))), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    submitText: t('back'),
    onSubmit: async () => {
      trackEvent(quotesRequestCancelledEventConfig);
      await dispatch((0, _swaps.navigateBackToBuildQuote)(history));
    },
    hideCancel: true
  }));
}
LoadingSwapsQuotes.propTypes = {
  loadingComplete: _propTypes.default.bool.isRequired,
  onDone: _propTypes.default.func.isRequired,
  aggregatorMetadata: _propTypes.default.objectOf(_propTypes.default.shape({
    title: _propTypes.default.string,
    color: _propTypes.default.string,
    icon: _propTypes.default.string
  }))
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\loading-swaps-quotes\\loading-swaps-quotes.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\main-quote-summary\\index.js", {"./main-quote-summary":"F:\\metamask-extension\\ui\\pages\\swaps\\main-quote-summary\\main-quote-summary.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cmain-quote-summary%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _mainQuoteSummary.default;
  }
});
var _mainQuoteSummary = _interopRequireDefault(require("./main-quote-summary"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\main-quote-summary\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\main-quote-summary\\main-quote-summary.js", {"../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../components/ui/tooltip":"F:\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../exchange-rate-display":"F:\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cmain-quote-summary%5Cmain-quote-summary.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MainQuoteSummary;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _tooltip = _interopRequireDefault(require("../../../components/ui/tooltip"));
var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));
var _exchangeRateDisplay = _interopRequireDefault(require("../exchange-rate-display"));
var _swaps = require("../swaps.util");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function getFontSizesAndLineHeights(fontSizeScore) {
  if (fontSizeScore <= 9) {
    return [50, 48];
  }
  if (fontSizeScore <= 13) {
    return [40, 32];
  }
  return [26, 15];
}
function MainQuoteSummary({
  sourceValue,
  sourceSymbol,
  sourceDecimals,
  sourceIconUrl,
  destinationValue,
  destinationSymbol,
  destinationDecimals,
  destinationIconUrl
}) {
  const sourceAmount = (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)((0, _transactionsControllerUtils.calcTokenAmount)(sourceValue, sourceDecimals).toString(10), 12);
  const destinationAmount = (0, _transactionsControllerUtils.calcTokenAmount)(destinationValue, destinationDecimals);
  const amountToDisplay = (0, _swaps.formatSwapsValueForDisplay)(destinationAmount);
  const amountDigitLength = amountToDisplay.match(/\d+/gu).join('').length;
  const [numberFontSize, lineHeight] = getFontSizesAndLineHeights(amountDigitLength);
  let ellipsedAmountToDisplay = amountToDisplay;
  if (amountDigitLength > 20) {
    ellipsedAmountToDisplay = `${amountToDisplay.slice(0, 20)}...`;
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__details"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__quote-details-top"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__source-row",
    "data-testid": "main-quote-summary__source-row"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__source-row-value",
    title: (0, _swaps.formatSwapsValueForDisplay)(sourceAmount)
  }, (0, _swaps.formatSwapsValueForDisplay)(sourceAmount)), /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: sourceIconUrl,
    className: "main-quote-summary__icon",
    name: sourceSymbol,
    fallbackClassName: "main-quote-summary__icon-fallback"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__source-row-symbol",
    title: sourceSymbol
  }, sourceSymbol)), /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-arrow-down main-quote-summary__down-arrow"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__destination-row"
  }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: destinationIconUrl,
    className: "main-quote-summary__icon",
    name: destinationSymbol,
    fallbackClassName: "main-quote-summary__icon-fallback"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__destination-row-symbol"
  }, destinationSymbol)), /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__quote-large"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    interactive: true,
    position: "bottom",
    html: amountToDisplay,
    disabled: ellipsedAmountToDisplay === amountToDisplay
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__quote-large-number",
    style: {
      fontSize: numberFontSize,
      lineHeight: `${lineHeight}px`
    }
  }, `${ellipsedAmountToDisplay}`)))), /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__exchange-rate-container",
    "data-testid": "main-quote-summary__exchange-rate-container"
  }, /*#__PURE__*/_react.default.createElement(_exchangeRateDisplay.default, {
    primaryTokenValue: sourceValue,
    primaryTokenDecimals: sourceDecimals,
    primaryTokenSymbol: sourceSymbol,
    secondaryTokenValue: destinationValue,
    secondaryTokenDecimals: destinationDecimals,
    secondaryTokenSymbol: destinationSymbol,
    arrowColor: "var(--color-primary-default)",
    boldSymbols: false,
    className: "main-quote-summary__exchange-rate-display"
  }))));
}
MainQuoteSummary.propTypes = {
  /**
   * The amount that will be sent in the smallest denomination.
   * For example, wei is the smallest denomination for ether.
   */
  sourceValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_bignumber.default)]).isRequired,
  /**
   * Maximum number of decimal places for the source token.
   */
  sourceDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * The ticker symbol for the source token.
   */
  sourceSymbol: _propTypes.default.string.isRequired,
  /**
   * The amount that will be received in the smallest denomination.
   * For example, wei is the smallest denomination for ether.
   */
  destinationValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_bignumber.default)]).isRequired,
  /**
   * Maximum number of decimal places for the destination token.
   */
  destinationDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * The ticker symbol for the destination token.
   */
  destinationSymbol: _propTypes.default.string.isRequired,
  /**
   * The location of the source token icon file.
   */
  sourceIconUrl: _propTypes.default.string,
  /**
   * The location of the destination token icon file.
   */
  destinationIconUrl: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\main-quote-summary\\main-quote-summary.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\mascot-background-animation\\mascot-background-animation.js", {"../../../components/ui/mascot":"F:\\metamask-extension\\ui\\components\\ui\\mascot\\index.js","events":"F:\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cmascot-background-animation%5Cmascot-background-animation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MascotBackgroundAnimation;
var _events = _interopRequireDefault(require("events"));
var _react = _interopRequireWildcard(require("react"));
var _mascot = _interopRequireDefault(require("../../../components/ui/mascot"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function MascotBackgroundAnimation() {
  const animationEventEmitter = (0, _react.useRef)(new _events.default());
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mascot-background-animation__animation"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mascot-background-animation__background-1",
    "data-testid": "mascot-background-animation-background-1"
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "193",
    height: "190",
    viewBox: "0 0 193 190",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M153.753 53.876C153.595 53.9493 153.419 54.0161 153.25 54.0651C151.081 54.7451 148.777 53.538 148.086 51.3768C147.763 50.3298 147.851 49.2109 148.361 48.2363C148.87 47.2618 149.732 46.5374 150.78 46.2144C151.828 45.8913 152.948 45.9781 153.923 46.4865C154.898 46.9949 155.622 47.8557 155.944 48.9027C156.567 50.918 155.592 53.0243 153.753 53.876ZM150.817 47.5708C150.245 47.8359 149.782 48.2721 149.495 48.8334C149.144 49.5127 149.073 50.2843 149.303 51.0047C149.774 52.4998 151.375 53.3384 152.877 52.8787C154.374 52.4069 155.215 50.8063 154.756 49.3056C154.526 48.5852 154.027 47.9888 153.36 47.6334C152.68 47.2836 151.908 47.213 151.187 47.4437C151.049 47.4636 150.927 47.52 150.817 47.5708Z",
    fill: "#86E29B"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M18.3624 73.9241C18.3015 73.9523 18.2407 73.9805 18.1798 74.0087C17.0495 74.4733 15.8073 74.4728 14.6751 74.0078C12.3517 73.0461 11.2387 70.3567 12.2031 68.0341C13.1676 65.7115 15.8598 64.5971 18.1833 65.5589C19.3155 66.0239 20.1951 66.9013 20.6591 68.0304C21.123 69.1595 21.1215 70.4008 20.6552 71.5326C20.2207 72.6053 19.4093 73.4391 18.3624 73.9241ZM15.0433 66.7921C14.3129 67.1305 13.713 67.7186 13.3766 68.5243C12.6776 70.207 13.4834 72.1377 15.1666 72.8348C15.9849 73.1647 16.8786 73.1789 17.6933 72.831C18.5136 72.4952 19.1388 71.8659 19.4818 71.0424C19.8126 70.2245 19.8276 69.3313 19.4801 68.5175C19.1448 67.6981 18.5155 67.0739 17.6917 66.7319C16.8144 66.3703 15.8589 66.4142 15.0433 66.7921Z",
    fill: "#FFB0EB"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M116.617 37.3839C117.397 37.0226 117.736 36.0982 117.375 35.3192C117.015 34.5402 116.09 34.2016 115.31 34.5629C114.53 34.9243 114.19 35.8487 114.551 36.6277C114.912 37.4067 115.837 37.7453 116.617 37.3839Z",
    fill: "url(#paint0_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M55.1317 91.7213C55.9116 91.36 56.2512 90.4356 55.8903 89.6566C55.5294 88.8776 54.6046 88.539 53.8247 88.9003C53.0448 89.2617 52.7052 90.1861 53.0661 90.9651C53.427 91.7441 54.3518 92.0827 55.1317 91.7213Z",
    fill: "url(#paint1_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M31.9932 126.235C32.7731 125.874 33.1127 124.95 32.7518 124.171C32.3909 123.392 31.4661 123.053 30.6863 123.414C29.9064 123.776 29.5667 124.7 29.9277 125.479C30.2886 126.258 31.2134 126.597 31.9932 126.235Z",
    fill: "url(#paint2_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M119.43 132.589C120.21 132.228 120.55 131.304 120.189 130.525C119.828 129.746 118.903 129.407 118.123 129.768C117.344 130.13 117.004 131.054 117.365 131.833C117.726 132.612 118.651 132.951 119.43 132.589Z",
    fill: "url(#paint3_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M44.7469 47.3835C46.0108 46.7979 46.5612 45.2997 45.9763 44.0372C45.3914 42.7747 43.8926 42.2259 42.6286 42.8115C41.3647 43.3971 40.8143 44.8953 41.3992 46.1578C41.9841 47.4203 43.4829 47.9691 44.7469 47.3835Z",
    fill: "url(#paint4_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M105.107 90.7857C106.371 90.2001 106.922 88.702 106.337 87.4394C105.752 86.1769 104.253 85.6282 102.989 86.2137C101.725 86.7993 101.175 88.2975 101.76 89.56C102.344 90.8226 103.843 91.3713 105.107 90.7857Z",
    fill: "url(#paint5_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M95.5179 172.376C96.7818 171.791 97.3322 170.293 96.7473 169.03C96.1624 167.767 94.6636 167.219 93.3996 167.804C92.1357 168.39 91.5853 169.888 92.1702 171.151C92.7551 172.413 94.2539 172.962 95.5179 172.376Z",
    fill: "url(#paint6_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M165.098 102.367C166.362 101.781 166.912 100.283 166.327 99.0205C165.742 97.758 164.244 97.2092 162.98 97.7948C161.716 98.3804 161.165 99.8786 161.75 101.141C162.335 102.404 163.834 102.952 165.098 102.367Z",
    fill: "url(#paint7_linear)"
  }), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint0_linear",
    x1: "114.554",
    y1: "36.6326",
    x2: "117.379",
    y2: "35.3237",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint1_linear",
    x1: "53.0688",
    y1: "90.97",
    x2: "55.8937",
    y2: "89.6611",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint2_linear",
    x1: "29.9283",
    y1: "125.483",
    x2: "32.7532",
    y2: "124.174",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint3_linear",
    x1: "117.365",
    y1: "131.837",
    x2: "120.19",
    y2: "130.528",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint4_linear",
    x1: "41.4394",
    y1: "46.2402",
    x2: "45.947",
    y2: "43.9537",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint5_linear",
    x1: "101.8",
    y1: "89.6425",
    x2: "106.307",
    y2: "87.356",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint6_linear",
    x1: "92.2104",
    y1: "171.233",
    x2: "96.718",
    y2: "168.947",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint7_linear",
    x1: "161.79",
    y1: "101.224",
    x2: "166.298",
    y2: "98.937",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#75C3FC"
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: "mascot-background-animation__background-2",
    "data-testid": "mascot-background-animation-background-2"
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "195",
    height: "205",
    viewBox: "0 0 195 205",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M29.84 121.982C30.0408 121.969 30.245 122.01 30.4258 122.106L46.4233 130.275C46.8125 130.478 47.0536 130.893 47.0402 131.324C47.0143 131.768 46.7423 132.148 46.3356 132.308L24.5484 140.937C24.1417 141.097 23.6789 141.005 23.3642 140.702C23.0495 140.4 22.9398 139.937 23.0753 139.525L28.8651 122.727C28.9671 122.426 29.2065 122.169 29.5086 122.056C29.614 122.023 29.7194 121.989 29.84 121.982ZM43.1981 131.148L30.5607 124.689L25.9884 137.96L43.1981 131.148Z",
    fill: "#75C4FD"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M168.214 54.3381C168.442 54.3238 168.674 54.3764 168.869 54.485C169.217 54.6781 169.44 55.0266 169.465 55.4145L170.59 68.4358C170.631 68.8763 170.416 69.3061 170.041 69.5444C169.666 69.7827 169.182 69.7862 168.805 69.5681L156.14 62.2246C155.763 62.0065 155.535 61.5911 155.548 61.1472C155.56 60.7033 155.818 60.3112 156.209 60.1122L167.75 54.4343C167.908 54.3841 168.067 54.3473 168.214 54.3381ZM168.027 66.3674L167.248 57.3661L159.267 61.2902L168.027 66.3674Z",
    fill: "#FFB0EB"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M88.6283 16.6885C88.8694 16.6734 89.1154 16.7385 89.3255 16.873L100.21 24.1133C100.561 24.3464 100.762 24.7635 100.708 25.1832C100.653 25.6028 100.381 25.969 99.9864 26.1146L86.3391 31.4276C85.9449 31.5731 85.5106 31.5064 85.1842 31.2314C84.8712 30.9556 84.7239 30.5352 84.8192 30.1264L87.5815 17.5731C87.666 17.2053 87.9162 16.9076 88.2702 16.7646C88.3882 16.7169 88.5078 16.696 88.6283 16.6885ZM97.1342 24.7894L89.4471 19.6718L87.5021 28.5349L97.1342 24.7894Z",
    fill: "url(#paint0_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M117.145 183.156C116.944 183.289 116.698 183.356 116.449 183.344L103.402 182.517C102.982 182.49 102.6 182.229 102.437 181.839C102.274 181.448 102.327 180.995 102.596 180.671L111.758 169.247C112.027 168.923 112.436 168.764 112.856 168.839C113.265 168.921 113.603 169.212 113.725 169.614L117.609 181.866C117.72 182.227 117.652 182.61 117.417 182.911C117.339 183.011 117.246 183.089 117.145 183.156ZM105.728 180.393L114.944 180.981L112.197 172.333L105.728 180.393Z",
    fill: "url(#paint1_linear)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M38.0816 74.0208C38.1217 74.0183 38.1485 74.0166 38.1887 74.0141C42.3831 73.805 45.9744 77.0577 46.1831 81.2474C46.3919 85.4371 43.1484 89.0241 38.9407 89.234C34.7463 89.4431 31.1549 86.1904 30.9462 82.0007C30.7391 77.8377 33.9307 74.2809 38.0816 74.0208ZM38.9104 87.2486C41.9767 87.0565 44.3523 84.4236 44.1997 81.3448C44.0455 78.2393 41.3949 75.8407 38.2859 75.9952C35.1761 76.1364 32.7753 78.7977 32.9296 81.9033C33.0838 85.0088 35.7344 87.4073 38.8434 87.2528C38.8568 87.252 38.8836 87.2503 38.9104 87.2486Z",
    fill: "#86E29B"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M162.178 97.8401C162.218 97.8376 162.245 97.8359 162.285 97.8334C166.48 97.6243 170.071 100.877 170.28 105.067C170.489 109.256 167.245 112.843 163.037 113.053C158.843 113.262 155.252 110.01 155.043 105.82C154.836 101.657 158.027 98.1002 162.178 97.8401ZM163.007 111.068C166.073 110.876 168.449 108.243 168.296 105.164C168.142 102.059 165.492 99.6601 162.383 99.8146C159.273 99.9557 156.872 102.617 157.026 105.723C157.181 108.828 159.831 111.227 162.94 111.072C162.953 111.071 162.98 111.07 163.007 111.068Z",
    fill: "#86E29B"
  }), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint0_linear",
    x1: "100.609",
    y1: "23.2611",
    x2: "84.4152",
    y2: "24.2757",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#FFE466"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#FFAFEA"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint1_linear",
    x1: "103.812",
    y1: "183.939",
    x2: "116.959",
    y2: "174.66",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#75C3FC"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.0928503",
    stopColor: "#81C2F6"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#F0B8BD"
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: "mascot-background-animation__mascot-container",
    "data-testid": "mascot-background-animation-mascot-container"
  }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
    animationEventEmitter: animationEventEmitter.current,
    width: "42",
    height: "42",
    followMouse: false
  })));
}


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\mascot-background-animation\\mascot-background-animation.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\notification-page\\notification-page.js", {"../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cnotification-page%5Cnotification-page.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NotificationPage;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _actions = require("../../../store/actions");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _routes = require("../../../helpers/constants/routes");
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _swaps = require("../../../../shared/constants/swaps");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function NotificationPage({
  notificationKey
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();

  // TODO: Either add default values or redirect a user out if a notificationKey value is not supported.
  let title = '';
  let description = '';
  let buttonText = '';
  if (notificationKey === _swaps.QUOTES_EXPIRED_ERROR) {
    title = t('swapAreYouStillThere');
    description = t('swapAreYouStillThereDescription');
    buttonText = t('swapShowLatestQuotes');
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "notification-page"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    marginTop: 10,
    marginLeft: 4,
    marginRight: 4,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    className: "notification-page__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 8,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Warning,
    color: _designSystem.IconColor.iconMuted,
    className: "notification-page__warning-icon"
  })), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    as: "h2"
  }, title), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6"
  }, description)), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: async () => {
      await dispatch((0, _actions.setSwapsErrorKey)(''));
      history.push(_routes.PREPARE_SWAP_ROUTE);
    },
    submitText: buttonText,
    hideCancel: true,
    showTermsOfService: true
  }));
}
NotificationPage.propTypes = {
  notificationKey: _propTypes.default.oneOf([_swaps.QUOTES_EXPIRED_ERROR])
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\notification-page\\notification-page.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\popover-custom-background\\popover-custom-background.js", {"../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cpopover-custom-background%5Cpopover-custom-background.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PopoverCustomBackground = ({
  onClose
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "popover-custom-background",
    onClick: onClose
  });
};
var _default = PopoverCustomBackground;
exports.default = _default;
PopoverCustomBackground.propTypes = {
  onClose: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\popover-custom-background\\popover-custom-background.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\prepare-swap-page.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/lib/swaps-utils":"F:\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../../shared/lib/token-util.ts":"F:\\metamask-extension\\shared\\lib\\token-util.ts","../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../../../shared/modules/swaps.utils":"F:\\metamask-extension\\shared\\modules\\swaps.utils.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/component-library/banner-alert":"F:\\metamask-extension\\ui\\components\\component-library\\banner-alert\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useEqualityCheck":"F:\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../hooks/useEthFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js","../../../hooks/usePrevious":"F:\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../hooks/useTokenFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../hooks/useTokenTracker":"F:\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../hooks/useTokensToSearch":"F:\\metamask-extension\\ui\\hooks\\useTokensToSearch.js","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../import-token":"F:\\metamask-extension\\ui\\pages\\swaps\\import-token\\index.js","../list-with-search/list-with-search":"F:\\metamask-extension\\ui\\pages\\swaps\\list-with-search\\list-with-search.js","../selected-token/selected-token":"F:\\metamask-extension\\ui\\pages\\swaps\\selected-token\\selected-token.js","../swaps-banner-alert/swaps-banner-alert":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-banner-alert\\swaps-banner-alert.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","../transaction-settings/transaction-settings":"F:\\metamask-extension\\ui\\pages\\swaps\\transaction-settings\\transaction-settings.js","./quotes-loading-animation":"F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\quotes-loading-animation.js","./review-quote":"F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\review-quote.js","./smart-transactions-popover":"F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\smart-transactions-popover.js","@metamask/etherscan-link":"F:\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cprepare-swap-page%5Cprepare-swap-page.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PrepareSwapPage;
var _react = _interopRequireWildcard(require("react"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _reactRouterDom = require("react-router-dom");
var _etherscanLink = require("@metamask/etherscan-link");
var _classnames = _interopRequireDefault(require("classnames"));
var _metametrics = require("../../../contexts/metametrics");
var _useTokensToSearch = require("../../../hooks/useTokensToSearch");
var _useEqualityCheck = require("../../../hooks/useEqualityCheck");
var _i18n = require("../../../contexts/i18n");
var _metamask = require("../../../ducks/metamask/metamask");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _util = require("../../../helpers/utils/util");
var _usePrevious = require("../../../hooks/usePrevious");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");
var _useEthFiatAmount = require("../../../hooks/useEthFiatAmount");
var _swaps2 = require("../../../../shared/modules/swaps.utils");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _swaps3 = require("../../../../shared/constants/swaps");
var _actions = require("../../../store/actions");
var _swaps4 = require("../swaps.util");
var _tokenUtil = require("../../../../shared/lib/token-util.ts");
var _stringUtils = require("../../../../shared/modules/string-utils");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _swapsUtils = require("../../../../shared/lib/swaps-utils");
var _componentLibrary = require("../../../components/component-library");
var _bannerAlert = require("../../../components/component-library/banner-alert");
var _routes = require("../../../helpers/constants/routes");
var _importToken = _interopRequireDefault(require("../import-token"));
var _transactionSettings = _interopRequireDefault(require("../transaction-settings/transaction-settings"));
var _swapsBannerAlert = _interopRequireDefault(require("../swaps-banner-alert/swaps-banner-alert"));
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _selectedToken = _interopRequireDefault(require("../selected-token/selected-token"));
var _listWithSearch = _interopRequireDefault(require("../list-with-search/list-with-search"));
var _smartTransactionsPopover = _interopRequireDefault(require("./smart-transactions-popover"));
var _quotesLoadingAnimation = _interopRequireDefault(require("./quotes-loading-animation"));
var _reviewQuote = _interopRequireDefault(require("./review-quote"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const MAX_ALLOWED_SLIPPAGE = 15;
let timeoutIdForQuotesPrefetching;
function PrepareSwapPage({
  ethBalance,
  selectedAccountAddress,
  shuffledTokensList
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [fetchedTokenExchangeRate, setFetchedTokenExchangeRate] = (0, _react.useState)(undefined);
  const [verificationClicked, setVerificationClicked] = (0, _react.useState)(false);
  const [receiveToAmount, setReceiveToAmount] = (0, _react.useState)();
  const [isSwapToOpen, setIsSwapToOpen] = (0, _react.useState)(false);
  const onSwapToOpen = () => setIsSwapToOpen(true);
  const onSwapToClose = () => setIsSwapToOpen(false);
  const [isSwapFromOpen, setIsSwapFromOpen] = (0, _react.useState)(false);
  const onSwapFromOpen = () => setIsSwapFromOpen(true);
  const onSwapFromClose = () => setIsSwapFromOpen(false);
  const [isImportTokenModalOpen, setIsImportTokenModalOpen] = (0, _react.useState)(false);
  const [tokenForImport, setTokenForImport] = (0, _react.useState)(null);
  const [swapFromSearchQuery, setSwapFromSearchQuery] = (0, _react.useState)('');
  const [swapToSearchQuery, setSwapToSearchQuery] = (0, _react.useState)('');
  const [quoteCount, updateQuoteCount] = (0, _react.useState)(0);
  const [prefetchingQuotes, setPrefetchingQuotes] = (0, _react.useState)(false);
  const [rotateSwitchTokens, setRotateSwitchTokens] = (0, _react.useState)(false);
  const isFeatureFlagLoaded = (0, _reactRedux.useSelector)(_swaps.getIsFeatureFlagLoaded);
  const balanceError = (0, _reactRedux.useSelector)(_swaps.getBalanceError);
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const {
    sourceTokenInfo = {},
    destinationTokenInfo = {}
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const topAssets = (0, _reactRedux.useSelector)(_swaps.getTopAssets, _lodash.isEqual);
  const fromToken = (0, _reactRedux.useSelector)(_swaps.getFromToken, _lodash.isEqual);
  const fromTokenInputValue = (0, _reactRedux.useSelector)(_swaps.getFromTokenInputValue);
  const fromTokenError = (0, _reactRedux.useSelector)(_swaps.getFromTokenError);
  const maxSlippage = (0, _reactRedux.useSelector)(_swaps.getMaxSlippage);
  const toToken = (0, _reactRedux.useSelector)(_swaps.getToToken, _lodash.isEqual) || destinationTokenInfo;
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _lodash.isEqual);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider, _reactRedux.shallowEqual);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList, _lodash.isEqual);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  const numberOfQuotes = Object.keys(quotes).length;
  const areQuotesPresent = numberOfQuotes > 0;
  const swapsErrorKey = (0, _reactRedux.useSelector)(_swaps.getSwapsErrorKey);
  const aggregatorMetadata = (0, _reactRedux.useSelector)(_swaps.getAggregatorMetadata, _reactRedux.shallowEqual);
  const transactionSettingsOpened = (0, _reactRedux.useSelector)(_swaps.getTransactionSettingsOpened, _reactRedux.shallowEqual);
  const numberOfAggregators = aggregatorMetadata ? Object.keys(aggregatorMetadata).length : 0;
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const isSmartTransaction = currentSmartTransactionsEnabled && smartTransactionsOptInStatus;
  const smartTransactionsOptInPopoverDisplayed = smartTransactionsOptInStatus !== undefined;
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const fetchingQuotes = (0, _reactRedux.useSelector)(_swaps.getFetchingQuotes);
  const loadingComplete = !fetchingQuotes && areQuotesPresent;
  const showSmartTransactionsOptInPopover = smartTransactionsEnabled && !smartTransactionsOptInPopoverDisplayed;
  const onCloseSmartTransactionsOptInPopover = e => {
    e === null || e === void 0 ? void 0 : e.preventDefault();
    (0, _actions.setSmartTransactionsOptInStatus)(false, smartTransactionsOptInStatus);
  };
  const onEnableSmartTransactionsClick = () => (0, _actions.setSmartTransactionsOptInStatus)(true, smartTransactionsOptInStatus);
  const fetchParamsFromToken = (0, _swaps2.isSwapsDefaultTokenSymbol)(sourceTokenInfo === null || sourceTokenInfo === void 0 ? void 0 : sourceTokenInfo.symbol, chainId) ? defaultSwapsToken : sourceTokenInfo;
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(tokens);

  // If the fromToken was set in a call to `onFromSelect` (see below), and that from token has a balance
  // but is not in tokensWithBalances or tokens, then we want to add it to the usersTokens array so that
  // the balance of the token can appear in the from token selection dropdown
  const fromTokenArray = !(0, _swaps2.isSwapsDefaultTokenSymbol)(fromToken === null || fromToken === void 0 ? void 0 : fromToken.symbol, chainId) && fromToken !== null && fromToken !== void 0 && fromToken.balance ? [fromToken] : [];
  const usersTokens = (0, _lodash.uniqBy)([...tokensWithBalances, ...tokens, ...fromTokenArray], 'address');
  const memoizedUsersTokens = (0, _useEqualityCheck.useEqualityCheck)(usersTokens);
  const selectedFromToken = (0, _useTokensToSearch.getRenderableTokenData)(fromToken || fetchParamsFromToken, tokenConversionRates, conversionRate, currentCurrency, chainId, tokenList);
  const tokensToSearchSwapFrom = (0, _useTokensToSearch.useTokensToSearch)({
    usersTokens: memoizedUsersTokens,
    topTokens: topAssets,
    shuffledTokensList,
    tokenBucketPriority: _swaps3.TokenBucketPriority.owned
  });
  const tokensToSearchSwapTo = (0, _useTokensToSearch.useTokensToSearch)({
    usersTokens: memoizedUsersTokens,
    topTokens: topAssets,
    shuffledTokensList,
    tokenBucketPriority: _swaps3.TokenBucketPriority.top
  });
  const selectedToToken = tokensToSearchSwapFrom.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, toToken === null || toToken === void 0 ? void 0 : toToken.address)) || toToken;
  const toTokenIsNotDefault = (selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address) && !(0, _swaps2.isSwapsDefaultTokenAddress)(selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address, chainId);
  const occurrences = Number((selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.occurances) || (selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.occurrences) || 0);
  const {
    address: fromTokenAddress,
    symbol: fromTokenSymbol,
    string: fromTokenString,
    decimals: fromTokenDecimals,
    balance: rawFromTokenBalance
  } = selectedFromToken || {};
  const {
    address: toTokenAddress
  } = selectedToToken || {};
  const fromTokenBalance = rawFromTokenBalance && (0, _transactionsControllerUtils.calcTokenAmount)(rawFromTokenBalance, fromTokenDecimals).toString(10);
  const prevFromTokenBalance = (0, _usePrevious.usePrevious)(fromTokenBalance);
  const swapFromTokenFiatValue = (0, _useTokenFiatAmount.useTokenFiatAmount)(fromTokenAddress, fromTokenInputValue || 0, fromTokenSymbol, {
    showFiat: true
  }, true);
  const swapFromEthFiatValue = (0, _useEthFiatAmount.useEthFiatAmount)(fromTokenInputValue || 0, {
    showFiat: true
  }, true);
  const swapFromFiatValue = (0, _swaps2.isSwapsDefaultTokenSymbol)(fromTokenSymbol, chainId) ? swapFromEthFiatValue : swapFromTokenFiatValue;
  const onInputChange = (0, _react.useCallback)((newInputValue, balance) => {
    dispatch((0, _swaps.setFromTokenInputValue)(newInputValue));
    const newBalanceError = new _bignumber.default(newInputValue || 0).gt(balance || 0);
    // "setBalanceError" is just a warning, a user can still click on the "Review swap" button.
    if (balanceError !== newBalanceError) {
      dispatch((0, _swaps.setBalanceError)(newBalanceError));
    }
    dispatch((0, _swaps.setFromTokenError)(fromToken && (0, _swaps4.countDecimals)(newInputValue) > fromToken.decimals ? 'tooManyDecimals' : null));
  }, [dispatch, fromToken, balanceError]);
  (0, _react.useEffect)(() => {
    let timeoutLength;
    if (!prefetchingQuotes) {
      updateQuoteCount(0);
      return;
    }
    const onQuotesLoadingDone = async () => {
      await dispatch((0, _actions.setBackgroundSwapRouteState)(''));
      setPrefetchingQuotes(false);
      if (swapsErrorKey === _swaps3.ERROR_FETCHING_QUOTES || swapsErrorKey === _swaps3.QUOTES_NOT_AVAILABLE_ERROR) {
        dispatch((0, _actions.setSwapsErrorKey)(_swaps3.QUOTES_NOT_AVAILABLE_ERROR));
      }
    };

    // The below logic simulates a sequential loading of the aggregator quotes, even though we are fetching them all with a single call.
    // This is to give the user a sense of progress. The callback passed to `setTimeout` updates the quoteCount and therefore causes
    // a new logo to be shown, the fox to look at that logo, the logo bar and aggregator name to update.

    if (loadingComplete) {
      // If loading is complete, but the quoteCount is not, we quickly display the remaining logos/names/fox looks. 0.2s each
      timeoutLength = 20;
    } else {
      // If loading is not complete, we display remaining logos/names/fox looks at random intervals between 0.5s and 2s, to simulate the
      // sort of loading a user would experience in most async scenarios
      timeoutLength = 500 + Math.floor(Math.random() * 1500);
    }
    const quoteCountTimeout = setTimeout(() => {
      if (quoteCount < numberOfAggregators) {
        updateQuoteCount(quoteCount + 1);
      } else if (quoteCount === numberOfAggregators && loadingComplete) {
        onQuotesLoadingDone();
      }
    }, timeoutLength);

    // eslint-disable-next-line consistent-return
    return function cleanup() {
      clearTimeout(quoteCountTimeout);
    };
  }, [fetchingQuotes, quoteCount, loadingComplete, numberOfQuotes, dispatch, history, swapsErrorKey, numberOfAggregators, prefetchingQuotes]);
  const onFromSelect = token => {
    if (token !== null && token !== void 0 && token.address && !swapFromFiatValue && fetchedTokenExchangeRate !== null) {
      (0, _swaps4.fetchTokenPrice)(token.address).then(rate => {
        if (rate !== null && rate !== undefined) {
          setFetchedTokenExchangeRate(rate);
        }
      });
    } else {
      setFetchedTokenExchangeRate(null);
    }
    if (token !== null && token !== void 0 && token.address && !memoizedUsersTokens.find(usersToken => (0, _stringUtils.isEqualCaseInsensitive)(usersToken.address, token.address))) {
      (0, _tokenUtil.fetchTokenBalance)(token.address, selectedAccountAddress, global.ethereumProvider).then(fetchedBalance => {
        if (fetchedBalance !== null && fetchedBalance !== void 0 && fetchedBalance.balance) {
          const balanceAsDecString = fetchedBalance.balance.toString(10);
          const userTokenBalance = (0, _transactionsControllerUtils.calcTokenAmount)(balanceAsDecString, token.decimals);
          dispatch((0, _swaps.setSwapsFromToken)({
            ...token,
            string: userTokenBalance.toString(10),
            balance: balanceAsDecString
          }));
        }
      });
    }
    dispatch((0, _swaps.setSwapsFromToken)(token));
    onInputChange(fromTokenInputValue, token.string, token.decimals);
  };
  const blockExplorerTokenLink = (0, _etherscanLink.getTokenTrackerLink)(selectedToToken.address, chainId, null,
  // no networkId
  null,
  // no holderAddress
  {
    blockExplorerUrl: _swaps3.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null
  });
  const blockExplorerLabel = rpcPrefs.blockExplorerUrl ? (0, _util.getURLHostName)(blockExplorerTokenLink) : t('etherscan');
  const onToSelect = (0, _react.useCallback)(token => {
    dispatch((0, _swaps.setSwapToToken)(token));
    setVerificationClicked(false);
  }, [dispatch]);
  const tokensWithBalancesFromToken = tokensWithBalances.find(token => (0, _stringUtils.isEqualCaseInsensitive)(token.address, fromToken === null || fromToken === void 0 ? void 0 : fromToken.address));
  const previousTokensWithBalancesFromToken = (0, _usePrevious.usePrevious)(tokensWithBalancesFromToken);
  (0, _react.useEffect)(() => {
    const notDefault = !(0, _swaps2.isSwapsDefaultTokenAddress)(tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.address, chainId);
    const addressesAreTheSame = (0, _stringUtils.isEqualCaseInsensitive)(tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.address, previousTokensWithBalancesFromToken === null || previousTokensWithBalancesFromToken === void 0 ? void 0 : previousTokensWithBalancesFromToken.address);
    const balanceHasChanged = (tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.balance) !== (previousTokensWithBalancesFromToken === null || previousTokensWithBalancesFromToken === void 0 ? void 0 : previousTokensWithBalancesFromToken.balance);
    if (notDefault && addressesAreTheSame && balanceHasChanged) {
      dispatch((0, _swaps.setSwapsFromToken)({
        ...fromToken,
        balance: tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.balance,
        string: tokensWithBalancesFromToken === null || tokensWithBalancesFromToken === void 0 ? void 0 : tokensWithBalancesFromToken.string
      }));
    }
  }, [dispatch, tokensWithBalancesFromToken, previousTokensWithBalancesFromToken, fromToken, chainId]);

  // If the eth balance changes while on build quote, we update the selected from token
  (0, _react.useEffect)(() => {
    if ((0, _swaps2.isSwapsDefaultTokenAddress)(fromToken === null || fromToken === void 0 ? void 0 : fromToken.address, chainId) && (fromToken === null || fromToken === void 0 ? void 0 : fromToken.balance) !== (0, _conversion.hexToDecimal)(ethBalance)) {
      dispatch((0, _swaps.setSwapsFromToken)({
        ...fromToken,
        balance: (0, _conversion.hexToDecimal)(ethBalance),
        string: (0, _conversion.getValueFromWeiHex)({
          value: ethBalance,
          numberOfDecimals: 4,
          toDenomination: 'ETH'
        })
      }));
    }
  }, [dispatch, fromToken, ethBalance, chainId]);
  (0, _react.useEffect)(() => {
    if (!(fromToken !== null && fromToken !== void 0 && fromToken.symbol) && !(fetchParamsFromToken !== null && fetchParamsFromToken !== void 0 && fetchParamsFromToken.symbol)) {
      dispatch((0, _swaps.setSwapsFromToken)(defaultSwapsToken));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _react.useEffect)(() => {
    if (prevFromTokenBalance !== fromTokenBalance) {
      onInputChange(fromTokenInputValue, fromTokenBalance);
    }
  }, [onInputChange, prevFromTokenBalance, fromTokenInputValue, fromTokenBalance]);
  const trackPrepareSwapPageLoadedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'Prepare Swap Page Loaded',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus
      }
    });
  }, [trackEvent, hardwareWalletUsed, hardwareWalletType, smartTransactionsEnabled, currentSmartTransactionsEnabled, smartTransactionsOptInStatus]);
  (0, _react.useEffect)(() => {
    dispatch((0, _actions.resetSwapsPostFetchState)());
    dispatch((0, _swaps.setReviewSwapClickedTimestamp)());
    trackPrepareSwapPageLoadedEvent();
  }, [dispatch, trackPrepareSwapPageLoadedEvent]);
  const BlockExplorerLink = () => {
    return /*#__PURE__*/_react.default.createElement("a", {
      className: "prepare-swap-page__token-etherscan-link",
      key: "prepare-swap-page-etherscan-link",
      onClick: () => {
        /* istanbul ignore next */
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.ExternalLinkClicked,
          category: _metametrics2.MetaMetricsEventCategory.Swaps,
          properties: {
            link_type: _metametrics2.MetaMetricsEventLinkType.TokenTracker,
            location: 'Swaps Confirmation',
            url_domain: (0, _util.getURLHostName)(blockExplorerTokenLink)
          }
        });
        global.platform.openTab({
          url: blockExplorerTokenLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer"
    }, blockExplorerLabel);
  };
  const swapYourTokenBalance = `${t('balance')}: ${fromTokenString || '0'}`;
  const isDirectWrappingEnabled = (0, _swapsUtils.shouldEnableDirectWrapping)(chainId, fromTokenAddress, selectedToToken.address);
  const isReviewSwapButtonDisabled = fromTokenError || !isFeatureFlagLoaded || !Number(fromTokenInputValue) || !(selectedToToken !== null && selectedToToken !== void 0 && selectedToToken.address) || !fromTokenAddress || Number(maxSlippage) < 0 || Number(maxSlippage) > MAX_ALLOWED_SLIPPAGE || toTokenIsNotDefault && occurrences < 2 && !verificationClicked;

  // It's triggered every time there is a change in form values (token from, token to, amount and slippage).
  (0, _react.useEffect)(() => {
    dispatch((0, _actions.clearSwapsQuotes)());
    dispatch((0, _actions.stopPollingForQuotes)());
    const prefetchQuotesWithoutRedirecting = async () => {
      setPrefetchingQuotes(true);
      const pageRedirectionDisabled = true;
      await dispatch((0, _swaps.fetchQuotesAndSetQuoteState)(history, fromTokenInputValue, maxSlippage, trackEvent, pageRedirectionDisabled));
    };
    // Delay fetching quotes until a user is done typing an input value. If they type a new char in less than a second,
    // we will cancel previous setTimeout call and start running a new one.
    timeoutIdForQuotesPrefetching = setTimeout(() => {
      timeoutIdForQuotesPrefetching = null;
      if (!isReviewSwapButtonDisabled) {
        if (isSmartTransaction) {
          (0, _actions.clearSmartTransactionFees)(); // Clean up STX fees eery time there is a form change.
        }
        // Only do quotes prefetching if the Review swap button is enabled.
        prefetchQuotesWithoutRedirecting();
      }
    }, 1000);
    return () => clearTimeout(timeoutIdForQuotesPrefetching);
  }, [dispatch, history, maxSlippage, trackEvent, isReviewSwapButtonDisabled, fromTokenInputValue, fromTokenAddress, toTokenAddress, smartTransactionsOptInStatus, isSmartTransaction]);

  // Set text for the main button based on different conditions.
  let mainButtonText;
  if (swapsErrorKey && swapsErrorKey === _swaps3.QUOTES_NOT_AVAILABLE_ERROR) {
    mainButtonText = t('swapQuotesNotAvailableErrorTitle');
  } else if (!isReviewSwapButtonDisabled) {
    mainButtonText = t('swapFetchingQuotes');
  } else if (!(selectedToToken !== null && selectedToToken !== void 0 && selectedToToken.address) || !fromTokenAddress) {
    mainButtonText = t('swapSelectToken');
  } else {
    mainButtonText = t('swapEnterAmount');
  }
  const onTextFieldChange = event => {
    event.stopPropagation();
    // Automatically prefix value with 0. if user begins typing .
    const valueToUse = event.target.value === '.' ? '0.' : event.target.value;

    // Regex that validates strings with only numbers, 'x.', '.x', and 'x.x'
    const regexp = /^(\.\d+|\d+(\.\d+)?|\d+\.)$/u;
    // If the value is either empty or contains only numbers and '.' and only has one '.', update input to match
    if (valueToUse === '' || regexp.test(valueToUse)) {
      onInputChange(valueToUse, fromTokenBalance);
    } else {
      // otherwise, use the previously set inputValue (effectively denying the user from inputting the last char)
      // or an empty string if we do not yet have an inputValue
      onInputChange(fromTokenInputValue || '', fromTokenBalance);
    }
  };
  const hideSwapToTokenIf = (0, _react.useCallback)(item => (0, _stringUtils.isEqualCaseInsensitive)(item.address, fromTokenAddress), [fromTokenAddress]);
  const hideSwapFromTokenIf = (0, _react.useCallback)(item => (0, _stringUtils.isEqualCaseInsensitive)(item.address, selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address), [selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.address]);
  const showReviewQuote = !swapsErrorKey && !isReviewSwapButtonDisabled && areQuotesPresent;
  const showQuotesLoadingAnimation = !swapsErrorKey && !isReviewSwapButtonDisabled && !areQuotesPresent;
  const showNotEnoughTokenMessage = !fromTokenError && balanceError && fromTokenSymbol;
  const tokenVerifiedOn1Source = occurrences === 1;
  (0, _react.useEffect)(() => {
    if (swapsErrorKey === _swaps3.QUOTES_EXPIRED_ERROR) {
      history.push(_routes.SWAPS_NOTIFICATION_ROUTE);
    }
  }, [swapsErrorKey, history]);
  (0, _react.useEffect)(() => {
    if (showQuotesLoadingAnimation) {
      setReceiveToAmount('');
    }
  }, [showQuotesLoadingAnimation]);
  const onOpenImportTokenModalClick = item => {
    setTokenForImport(item);
    setIsImportTokenModalOpen(true);
    onSwapToClose();
    setSwapToSearchQuery('');
  };

  /* istanbul ignore next */
  const onImportTokenClick = () => {
    trackEvent({
      event: 'Token Imported',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        symbol: tokenForImport === null || tokenForImport === void 0 ? void 0 : tokenForImport.symbol,
        address: tokenForImport === null || tokenForImport === void 0 ? void 0 : tokenForImport.address,
        chain_id: chainId,
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus
      }
    });
    // Only when a user confirms import of a token, we add it and show it in a dropdown.
    onToSelect === null || onToSelect === void 0 ? void 0 : onToSelect(tokenForImport);
    setTokenForImport(null);
  };
  const onImportTokenCloseClick = () => {
    setIsImportTokenModalOpen(false);
  };
  const importTokenProps = {
    onImportTokenCloseClick,
    onImportTokenClick,
    setIsImportTokenModalOpen,
    tokenForImport
  };
  let receiveToAmountFormatted;
  let receiveToAmountClassName;
  let fromTokenAmountClassName;

  // TODO: Do this only when these variables change, not on every re-render.
  if (receiveToAmount && !isReviewSwapButtonDisabled) {
    receiveToAmountFormatted = (0, _swaps4.formatSwapsValueForDisplay)(receiveToAmount);
    receiveToAmountClassName = (0, _swaps4.getClassNameForCharLength)(receiveToAmountFormatted, 'prepare-swap-page__receive-amount');
  }
  if (fromTokenInputValue) {
    fromTokenAmountClassName = (0, _swaps4.getClassNameForCharLength)(fromTokenInputValue, 'prepare-swap-page__from-token-amount');
  }
  const showMaxBalanceLink = fromTokenSymbol && !(0, _swaps2.isSwapsDefaultTokenSymbol)(fromTokenSymbol, chainId) && rawFromTokenBalance > 0;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "prepare-swap-page"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "prepare-swap-page__content"
  }, tokenForImport && isImportTokenModalOpen && /*#__PURE__*/_react.default.createElement(_importToken.default, importTokenProps), /*#__PURE__*/_react.default.createElement(_componentLibrary.Modal, {
    onClose: onSwapToClose,
    isOpen: isSwapToOpen,
    isClosedOnOutsideClick: true,
    isClosedOnEscapeKey: true,
    className: "mm-modal__custom-scrollbar"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalOverlay, null), /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalContent, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalHeader, {
    onClose: onSwapToClose
  }, t('swapSwapTo')), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 10,
    paddingRight: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_listWithSearch.default, {
    selectedItem: selectedToToken,
    itemsToSearch: tokensToSearchSwapTo,
    onClickItem: item => {
      onToSelect === null || onToSelect === void 0 ? void 0 : onToSelect(item);
      onSwapToClose();
    },
    maxListItems: 30,
    searchQuery: swapToSearchQuery,
    setSearchQuery: setSwapToSearchQuery,
    hideItemIf: hideSwapToTokenIf,
    shouldSearchForImports: true,
    onOpenImportTokenModalClick: onOpenImportTokenModalClick
  })))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Modal, {
    onClose: onSwapFromClose,
    isOpen: isSwapFromOpen,
    isClosedOnOutsideClick: true,
    isClosedOnEscapeKey: true,
    className: "mm-modal__custom-scrollbar"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalOverlay, null), /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalContent, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ModalHeader, {
    onClose: onSwapFromClose
  }, t('swapSwapFrom')), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 10,
    paddingRight: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_listWithSearch.default, {
    selectedItem: selectedFromToken,
    itemsToSearch: tokensToSearchSwapFrom,
    onClickItem: item => {
      onFromSelect === null || onFromSelect === void 0 ? void 0 : onFromSelect(item);
      onSwapFromClose();
    },
    maxListItems: 30,
    searchQuery: swapFromSearchQuery,
    setSearchQuery: setSwapFromSearchQuery,
    hideItemIf: hideSwapFromTokenIf
  })))), showSmartTransactionsOptInPopover && /*#__PURE__*/_react.default.createElement(_smartTransactionsPopover.default, {
    onEnableSmartTransactionsClick: onEnableSmartTransactionsClick,
    onCloseSmartTransactionsOptInPopover: onCloseSmartTransactionsOptInPopover
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "prepare-swap-page__swap-from-content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_selectedToken.default, {
    onClick: onSwapFromOpen,
    onClose: onSwapFromClose,
    selectedToken: selectedFromToken,
    testId: "prepare-swap-page-swap-from"
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.TextField, {
    className: (0, _classnames.default)('prepare-swap-page__from-token-amount', {
      [fromTokenAmountClassName]: fromTokenAmountClassName
    }),
    size: _designSystem.Size.SM,
    placeholder: "0",
    onChange: onTextFieldChange,
    value: fromTokenInputValue,
    truncate: false,
    testId: "prepare-swap-page-from-token-amount"
  }))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.stretch
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "prepare-swap-page__balance-message"
  }, fromTokenSymbol && swapYourTokenBalance, showMaxBalanceLink && /*#__PURE__*/_react.default.createElement("div", {
    className: "prepare-swap-page__max-balance",
    "data-testid": "prepare-swap-page-max-balance",
    onClick: () => onInputChange(fromTokenBalance || '0', fromTokenBalance)
  }, t('max'))), fromTokenInputValue && swapFromFiatValue && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.flexEnd,
    alignItems: _designSystem.AlignItems.flexEnd
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    color: _designSystem.TextColor.textAlternative
  }, swapFromFiatValue))), showNotEnoughTokenMessage && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.flexStart
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySmBold,
    color: _designSystem.TextColor.textAlternative,
    marginTop: 0
  }, t('swapsNotEnoughToken', [fromTokenSymbol]))), fromTokenError && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.flexStart
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySmBold,
    color: _designSystem.TextColor.textAlternative,
    marginTop: 0
  }, t('swapTooManyDecimalsError', [fromTokenSymbol, fromTokenDecimals]))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    height: 0
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('prepare-swap-page__switch-tokens', {
      'prepare-swap-page__switch-tokens--rotate': rotateSwitchTokens,
      'prepare-swap-page__switch-tokens--disabled': showQuotesLoadingAnimation
    }),
    "data-testid": "prepare-swap-page-switch-tokens",
    onClick: () => {
      // If quotes are being loaded, disable the switch button.
      if (!showQuotesLoadingAnimation) {
        onToSelect(selectedFromToken);
        onFromSelect(selectedToToken);
        setRotateSwitchTokens(!rotateSwitchTokens);
      }
    },
    title: t('swapSwapSwitch')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Arrow2Down,
    size: _componentLibrary.IconSize.Lg
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "prepare-swap-page__swap-to-content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_selectedToken.default, {
    onClick: onSwapToOpen,
    onClose: onSwapToClose,
    selectedToken: selectedToToken,
    testId: "prepare-swap-page-swap-to"
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    marginLeft: 2,
    className: "prepare-swap-page__receive-amount-container"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "h6",
    "data-testid": "prepare-swap-page-receive-amount",
    className: (0, _classnames.default)('prepare-swap-page__receive-amount', {
      [receiveToAmountClassName]: receiveToAmountClassName
    })
  }, receiveToAmountFormatted)))), !showReviewQuote && toTokenIsNotDefault && occurrences < 2 && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_bannerAlert.BannerAlert, {
    severity: tokenVerifiedOn1Source ? _designSystem.SEVERITIES.WARNING : _designSystem.SEVERITIES.DANGER,
    title: tokenVerifiedOn1Source ? t('swapTokenVerifiedOn1SourceTitle') : t('swapTokenAddedManuallyTitle'),
    width: _designSystem.BLOCK_SIZES.FULL
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    "data-testid": "mm-banner-alert-notification-text"
  }, tokenVerifiedOn1Source ? t('swapTokenVerifiedOn1SourceDescription', [selectedToToken === null || selectedToToken === void 0 ? void 0 : selectedToToken.symbol, /*#__PURE__*/_react.default.createElement(BlockExplorerLink, {
    key: "block-explorer-link"
  })]) : t('swapTokenAddedManuallyDescription', [/*#__PURE__*/_react.default.createElement(BlockExplorerLink, {
    key: "block-explorer-link"
  })])), !verificationClicked && /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.INHERIT,
    textProps: {
      variant: _designSystem.TextVariant.bodyMd,
      alignItems: _designSystem.AlignItems.flexStart
    },
    onClick: e => {
      e.preventDefault();
      setVerificationClicked(true);
    }
  }, t('swapContinueSwapping'))))), swapsErrorKey && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_swapsBannerAlert.default, {
    swapsErrorKey: swapsErrorKey
  })), transactionSettingsOpened && (smartTransactionsEnabled || !smartTransactionsEnabled && !isDirectWrappingEnabled) && /*#__PURE__*/_react.default.createElement(_transactionSettings.default, {
    onSelect: newSlippage => {
      dispatch((0, _swaps.setMaxSlippage)(newSlippage));
    },
    maxAllowedSlippage: MAX_ALLOWED_SLIPPAGE,
    currentSlippage: maxSlippage,
    smartTransactionsEnabled: smartTransactionsEnabled,
    smartTransactionsOptInStatus: smartTransactionsOptInStatus,
    setSmartTransactionsOptInStatus: _actions.setSmartTransactionsOptInStatus,
    currentSmartTransactionsError: currentSmartTransactionsError,
    isDirectWrappingEnabled: isDirectWrappingEnabled,
    onModalClose: () => {
      dispatch((0, _swaps.setTransactionSettingsOpened)(false));
    }
  }), showQuotesLoadingAnimation && /*#__PURE__*/_react.default.createElement(_quotesLoadingAnimation.default, {
    quoteCount: quoteCount,
    numberOfAggregators: numberOfAggregators
  }), showReviewQuote && /*#__PURE__*/_react.default.createElement(_reviewQuote.default, {
    setReceiveToAmount: setReceiveToAmount
  })), !areQuotesPresent && /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    submitText: mainButtonText,
    disabled: true,
    hideCancel: true,
    showTermsOfService: true
  }));
}
PrepareSwapPage.propTypes = {
  ethBalance: _propTypes.default.string,
  selectedAccountAddress: _propTypes.default.string,
  shuffledTokensList: _propTypes.default.array
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\prepare-swap-page\\prepare-swap-page.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\quotes-loading-animation.js", {"../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../mascot-background-animation/mascot-background-animation":"F:\\metamask-extension\\ui\\pages\\swaps\\mascot-background-animation\\mascot-background-animation.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cprepare-swap-page%5Cquotes-loading-animation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QuotesLoadingAnimation;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _mascotBackgroundAnimation = _interopRequireDefault(require("../mascot-background-animation/mascot-background-animation"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function QuotesLoadingAnimation(props) {
  const {
    quoteCount,
    numberOfAggregators
  } = props;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginLeft: 1,
    marginRight: 1
  }, t('swapFetchingQuote')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMdBold,
    as: "h6",
    color: _designSystem.TextColor.textAlternative
  }, t('swapQuoteNofM', [Math.min(quoteCount + 1, numberOfAggregators), numberOfAggregators]))), /*#__PURE__*/_react.default.createElement(_mascotBackgroundAnimation.default, null));
}
QuotesLoadingAnimation.propTypes = {
  quoteCount: _propTypes.default.number.isRequired,
  numberOfAggregators: _propTypes.default.number.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\prepare-swap-page\\quotes-loading-animation.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\review-quote.js", {"../../../../app/scripts/lib/util":"F:\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/gas":"F:\\metamask-extension\\shared\\constants\\gas.ts","../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"F:\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/lib/metamask-controller-utils":"F:\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../../shared/lib/swaps-utils":"F:\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/conversion.utils":"F:\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/string-utils":"F:\\metamask-extension\\shared\\modules\\string-utils.ts","../../../../shared/modules/transaction.utils":"F:\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"F:\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../../hooks/gasFeeInput/useGasFeeInputs":"F:\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","../../../hooks/useEqualityCheck":"F:\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../hooks/useEthFiatAmount":"F:\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js","../../../hooks/usePrevious":"F:\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../hooks/useTokenTracker":"F:\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actionConstants":"F:\\metamask-extension\\ui\\store\\actionConstants.ts","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../../confirm-approve/confirm-approve.util":"F:\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","../countdown-timer":"F:\\metamask-extension\\ui\\pages\\swaps\\countdown-timer\\index.js","../exchange-rate-display":"F:\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\index.js","../select-quote-popover":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\index.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","./view-quote-price-difference":"F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\view-quote-price-difference.js","@sentry/browser":"F:\\metamask-extension\\node_modules\\@sentry\\browser\\cjs\\index.js","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cprepare-swap-page%5Creview-quote.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReviewQuote;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _lodash = require("lodash");
var _classnames = _interopRequireDefault(require("classnames"));
var _browser = require("@sentry/browser");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _selectQuotePopover = _interopRequireDefault(require("../select-quote-popover"));
var _useEthFiatAmount = require("../../../hooks/useEthFiatAmount");
var _useEqualityCheck = require("../../../hooks/useEqualityCheck");
var _usePrevious = require("../../../hooks/usePrevious");
var _useGasFeeInputs = require("../../../hooks/gasFeeInput/useGasFeeInputs");
var _metametrics = require("../../../contexts/metametrics");
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _actions = require("../../../store/actions");
var _actionConstants = require("../../../store/actionConstants");
var _routes = require("../../../helpers/constants/routes");
var _network = require("../../../../shared/constants/network");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _confirmApprove = require("../../confirm-approve/confirm-approve.util");
var _swaps2 = require("../swaps.util");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _swaps3 = require("../../../../shared/constants/swaps");
var _gas = require("../../../../shared/constants/gas");
var _countdownTimer = _interopRequireDefault(require("../countdown-timer"));
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _stringUtils = require("../../../../shared/modules/string-utils");
var _transaction = require("../../../../shared/modules/transaction.utils");
var _metamaskControllerUtils = require("../../../../shared/lib/metamask-controller-utils");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _util = require("../../../../app/scripts/lib/util");
var _swapsUtils = require("../../../../shared/lib/swaps-utils");
var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));
var _exchangeRateDisplay = _interopRequireDefault(require("../exchange-rate-display"));
var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));
var _viewQuotePriceDifference = _interopRequireDefault(require("./view-quote-price-difference"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
let intervalId;
const GAS_FEES_LEARN_MORE_URL = 'https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172';
function ReviewQuote({
  setReceiveToAmount
}) {
  var _usedQuote$trade, _usedQuote$priceSlipp, _usedQuote$priceSlipp2, _usedQuote$priceSlipp3, _usedQuote$priceSlipp4, _usedQuote$priceSlipp5;
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [dispatchedSafeRefetch, setDispatchedSafeRefetch] = (0, _react.useState)(false);
  const [submitClicked, setSubmitClicked] = (0, _react.useState)(false);
  const [selectQuotePopoverShown, setSelectQuotePopoverShown] = (0, _react.useState)(false);
  const [warningHidden] = (0, _react.useState)(false); // TODO: Check when to use setWarningHidden
  const [originalApproveAmount, setOriginalApproveAmount] = (0, _react.useState)(null);
  const [multiLayerL1FeeTotal, setMultiLayerL1FeeTotal] = (0, _react.useState)(null);
  const [multiLayerL1ApprovalFeeTotal, setMultiLayerL1ApprovalFeeTotal] = (0, _react.useState)(null);
  // We need to have currentTimestamp in state, otherwise it would change with each rerender.
  const [currentTimestamp] = (0, _react.useState)(Date.now());
  const [acknowledgedPriceDifference, setAcknowledgedPriceDifference] = (0, _react.useState)(false);
  const priceDifferenceRiskyBuckets = [_gas.GasRecommendations.high, _gas.GasRecommendations.medium];
  const routeState = (0, _reactRedux.useSelector)(_swaps.getBackgroundSwapRouteState);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  (0, _react.useEffect)(() => {
    if (!Object.values(quotes).length) {
      history.push(_routes.PREPARE_SWAP_ROUTE);
    } else if (routeState === 'awaiting') {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }
  }, [history, quotes, routeState]);
  const quotesLastFetched = (0, _reactRedux.useSelector)(_swaps.getQuotesLastFetched);

  // Select necessary data
  const gasPrice = (0, _reactRedux.useSelector)(_swaps.getUsedSwapsGasPrice);
  const customMaxGas = (0, _reactRedux.useSelector)(_swaps.getCustomSwapsGas);
  const customMaxFeePerGas = (0, _reactRedux.useSelector)(_swaps.getCustomMaxFeePerGas);
  const customMaxPriorityFeePerGas = (0, _reactRedux.useSelector)(_swaps.getCustomMaxPriorityFeePerGas);
  const swapsUserFeeLevel = (0, _reactRedux.useSelector)(_swaps.getSwapsUserFeeLevel);
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const memoizedTokenConversionRates = (0, _useEqualityCheck.useEqualityCheck)(tokenConversionRates);
  const {
    balance: ethBalance
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_selectors.conversionRateSelector);
  const USDConversionRate = (0, _reactRedux.useSelector)(_selectors.getUSDConversionRate);
  const isMultiLayerFeeNetwork = (0, _reactRedux.useSelector)(_selectors.getIsMultiLayerFeeNetwork);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const swapsTokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559);
  const balanceError = (0, _reactRedux.useSelector)(_swaps.getBalanceError);
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const approveTxParams = (0, _reactRedux.useSelector)(_swaps.getApproveTxParams, _reactRedux.shallowEqual);
  const selectedQuote = (0, _reactRedux.useSelector)(_swaps.getSelectedQuote, _lodash.isEqual);
  const topQuote = (0, _reactRedux.useSelector)(_swaps.getTopQuote, _lodash.isEqual);
  const usedQuote = selectedQuote || topQuote;
  const tradeValue = (usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$trade = usedQuote.trade) === null || _usedQuote$trade === void 0 ? void 0 : _usedQuote$trade.value) ?? '0x0';
  const swapsQuoteRefreshTime = (0, _reactRedux.useSelector)(_swaps.getSwapsQuoteRefreshTime);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _lodash.isEqual);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const nativeCurrencySymbol = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const reviewSwapClickedTimestamp = (0, _reactRedux.useSelector)(_swaps.getReviewSwapClickedTimestamp);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const swapsSTXLoading = (0, _reactRedux.useSelector)(_swaps.getSwapsSTXLoading);
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  const smartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsError);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const smartTransactionFees = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionFees, _lodash.isEqual);
  const swapsNetworkConfig = (0, _reactRedux.useSelector)(_swaps.getSwapsNetworkConfig, _reactRedux.shallowEqual);
  const unsignedTransaction = usedQuote.trade;
  const isSmartTransaction = currentSmartTransactionsEnabled && smartTransactionsOptInStatus;

  /* istanbul ignore next */
  const getTranslatedNetworkName = () => {
    switch (chainId) {
      case _network.CHAIN_IDS.MAINNET:
        return t('networkNameEthereum');
      case _network.CHAIN_IDS.BSC:
        return t('networkNameBSC');
      case _network.CHAIN_IDS.POLYGON:
        return t('networkNamePolygon');
      case _network.CHAIN_IDS.LOCALHOST:
        return t('networkNameTestnet');
      case _network.CHAIN_IDS.GOERLI:
        return t('networkNameGoerli');
      case _network.CHAIN_IDS.AVALANCHE:
        return t('networkNameAvalanche');
      case _network.CHAIN_IDS.OPTIMISM:
        return t('networkNameOptimism');
      case _network.CHAIN_IDS.ARBITRUM:
        return t('networkNameArbitrum');
      default:
        throw new Error('This network is not supported for token swaps');
    }
  };
  let gasFeeInputs;
  if (networkAndAccountSupports1559) {
    // For Swaps we want to get 'high' estimations by default.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    gasFeeInputs = (0, _useGasFeeInputs.useGasFeeInputs)(_gas.GasRecommendations.high, {
      userFeeLevel: swapsUserFeeLevel || _gas.GasRecommendations.high
    });
  }
  const fetchParamsSourceToken = fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.sourceToken;
  const additionalTrackingParams = {
    reg_tx_fee_in_usd: undefined,
    reg_tx_fee_in_eth: undefined,
    reg_tx_max_fee_in_usd: undefined,
    reg_tx_max_fee_in_eth: undefined,
    stx_fee_in_usd: undefined,
    stx_fee_in_eth: undefined,
    stx_max_fee_in_usd: undefined,
    stx_max_fee_in_eth: undefined
  };
  const usedGasLimit = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimateWithRefund) || `0x${(0, _conversion.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.averageGas) || 0)}`;
  const gasLimitForMax = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimate) || `0x0`;
  const usedGasLimitWithMultiplier = new _bignumber.default(gasLimitForMax, 16).times((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasMultiplier) || _swaps.FALLBACK_GAS_MULTIPLIER, 10).round(0).toString(16);
  const nonCustomMaxGasLimit = usedQuote !== null && usedQuote !== void 0 && usedQuote.gasEstimate ? usedGasLimitWithMultiplier : `0x${(0, _conversion.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.maxGas) || 0)}`;
  const maxGasLimit = customMaxGas || nonCustomMaxGasLimit;
  let maxFeePerGas;
  let maxPriorityFeePerGas;
  let baseAndPriorityFeePerGas;

  // EIP-1559 gas fees.
  if (networkAndAccountSupports1559) {
    const {
      maxFeePerGas: suggestedMaxFeePerGas,
      maxPriorityFeePerGas: suggestedMaxPriorityFeePerGas,
      gasFeeEstimates: {
        estimatedBaseFee = '0'
      }
    } = gasFeeInputs;
    maxFeePerGas = customMaxFeePerGas || (0, _conversion.decGWEIToHexWEI)(suggestedMaxFeePerGas);
    maxPriorityFeePerGas = customMaxPriorityFeePerGas || (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
    baseAndPriorityFeePerGas = (0, _conversion.addHexes)((0, _conversion.decGWEIToHexWEI)(estimatedBaseFee), maxPriorityFeePerGas);
  }
  let gasTotalInWeiHex = (0, _transactionsControllerUtils.calcGasTotal)(maxGasLimit, maxFeePerGas || gasPrice);
  if (multiLayerL1FeeTotal !== null) {
    gasTotalInWeiHex = (0, _conversion.sumHexes)(gasTotalInWeiHex || '0x0', multiLayerL1FeeTotal || '0x0');
  }
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(swapsTokens, true);
  const balanceToken = fetchParamsSourceToken === defaultSwapsToken.address ? defaultSwapsToken : tokensWithBalances.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, fetchParamsSourceToken));
  const selectedFromToken = balanceToken || usedQuote.sourceTokenInfo;
  const tokenBalance = (tokensWithBalances === null || tokensWithBalances === void 0 ? void 0 : tokensWithBalances.length) && (0, _transactionsControllerUtils.calcTokenAmount)(selectedFromToken.balance || '0x0', selectedFromToken.decimals).toFixed(9);
  const tokenBalanceUnavailable = tokensWithBalances && balanceToken === undefined;
  const approveData = (0, _transaction.parseStandardTokenTransactionData)(approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.data);
  const approveValue = approveData && (0, _metamaskControllerUtils.getTokenValueParam)(approveData);
  const approveAmount = approveValue && (selectedFromToken === null || selectedFromToken === void 0 ? void 0 : selectedFromToken.decimals) !== undefined && (0, _transactionsControllerUtils.calcTokenAmount)(approveValue, selectedFromToken.decimals).toFixed(9);
  const approveGas = approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.gas;
  const renderablePopoverData = (0, _react.useMemo)(() => {
    return (0, _swaps2.quotesToRenderableData)({
      quotes,
      gasPrice: networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : gasPrice,
      conversionRate,
      currentCurrency,
      approveGas,
      tokenConversionRates: memoizedTokenConversionRates,
      chainId,
      smartTransactionEstimatedGas: smartTransactionsEnabled && smartTransactionsOptInStatus && (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees),
      nativeCurrencySymbol,
      multiLayerL1ApprovalFeeTotal
    });
  }, [quotes, gasPrice, baseAndPriorityFeePerGas, networkAndAccountSupports1559, conversionRate, currentCurrency, approveGas, memoizedTokenConversionRates, chainId, smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees, nativeCurrencySymbol, smartTransactionsEnabled, smartTransactionsOptInStatus, multiLayerL1ApprovalFeeTotal]);
  const renderableDataForUsedQuote = renderablePopoverData.find(renderablePopoverDatum => renderablePopoverDatum.aggId === usedQuote.aggregator);
  const {
    destinationTokenDecimals,
    destinationTokenSymbol,
    destinationTokenValue,
    sourceTokenDecimals,
    sourceTokenSymbol,
    sourceTokenValue
  } = renderableDataForUsedQuote;
  let {
    feeInFiat,
    feeInEth,
    rawEthFee,
    feeInUsd
  } = (0, _swaps2.getRenderableNetworkFeesForQuote)({
    tradeGas: usedGasLimit,
    approveGas,
    gasPrice: networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : gasPrice,
    currentCurrency,
    conversionRate,
    USDConversionRate,
    tradeValue,
    sourceSymbol: sourceTokenSymbol,
    sourceAmount: usedQuote.sourceAmount,
    chainId,
    nativeCurrencySymbol,
    multiLayerL1FeeTotal
  });
  additionalTrackingParams.reg_tx_fee_in_usd = Number(feeInUsd);
  additionalTrackingParams.reg_tx_fee_in_eth = Number(rawEthFee);
  const renderableMaxFees = (0, _swaps2.getRenderableNetworkFeesForQuote)({
    tradeGas: maxGasLimit,
    approveGas,
    gasPrice: maxFeePerGas || gasPrice,
    currentCurrency,
    conversionRate,
    USDConversionRate,
    tradeValue,
    sourceSymbol: sourceTokenSymbol,
    sourceAmount: usedQuote.sourceAmount,
    chainId,
    nativeCurrencySymbol,
    multiLayerL1FeeTotal
  });
  let {
    feeInFiat: maxFeeInFiat,
    feeInEth: maxFeeInEth,
    rawEthFee: maxRawEthFee,
    feeInUsd: maxFeeInUsd
  } = renderableMaxFees;
  additionalTrackingParams.reg_tx_max_fee_in_usd = Number(maxFeeInUsd);
  additionalTrackingParams.reg_tx_max_fee_in_eth = Number(maxRawEthFee);
  if (isSmartTransaction && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
    var _smartTransactionFees;
    const stxEstimatedFeeInWeiDec = (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees.feeEstimate) + ((smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : (_smartTransactionFees = smartTransactionFees.approvalTxFees) === null || _smartTransactionFees === void 0 ? void 0 : _smartTransactionFees.feeEstimate) || 0);
    const stxMaxFeeInWeiDec = stxEstimatedFeeInWeiDec * swapsNetworkConfig.stxMaxFeeMultiplier;
    ({
      feeInFiat,
      feeInEth,
      rawEthFee,
      feeInUsd
    } = (0, _swaps2.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: stxEstimatedFeeInWeiDec
    }));
    additionalTrackingParams.stx_fee_in_usd = Number(feeInUsd);
    additionalTrackingParams.stx_fee_in_eth = Number(rawEthFee);
    additionalTrackingParams.estimated_gas = smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees.gasLimit;
    ({
      feeInFiat: maxFeeInFiat,
      feeInEth: maxFeeInEth,
      rawEthFee: maxRawEthFee,
      feeInUsd: maxFeeInUsd
    } = (0, _swaps2.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: stxMaxFeeInWeiDec
    }));
    additionalTrackingParams.stx_max_fee_in_usd = Number(maxFeeInUsd);
    additionalTrackingParams.stx_max_fee_in_eth = Number(maxRawEthFee);
  }
  const tokenCost = new _bignumber.default(usedQuote.sourceAmount);
  const ethCost = new _bignumber.default(usedQuote.trade.value || 0, 10).plus(new _bignumber.default(gasTotalInWeiHex, 16));
  const insufficientTokens = ((tokensWithBalances === null || tokensWithBalances === void 0 ? void 0 : tokensWithBalances.length) || balanceError) && tokenCost.gt(new _bignumber.default(selectedFromToken.balance || '0x0'));
  const insufficientEth = ethCost.gt(new _bignumber.default(ethBalance || '0x0'));
  const tokenBalanceNeeded = insufficientTokens ? (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)((0, _transactionsControllerUtils.calcTokenAmount)(tokenCost, selectedFromToken.decimals).minus(tokenBalance).toString(10), 6) : null;
  const ethBalanceNeeded = insufficientEth ? (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(ethCost.minus(ethBalance, 16).div('1000000000000000000', 10).toString(10), 6) : null;
  let ethBalanceNeededStx;
  if (isSmartTransaction && smartTransactionsError !== null && smartTransactionsError !== void 0 && smartTransactionsError.balanceNeededWei) {
    ethBalanceNeededStx = (0, _conversion.decWEIToDecETH)(smartTransactionsError.balanceNeededWei - smartTransactionsError.currentBalanceWei);
  }
  const destinationToken = (0, _reactRedux.useSelector)(_swaps.getDestinationTokenInfo, _lodash.isEqual);
  (0, _react.useEffect)(() => {
    if (isSmartTransaction) {
      if (insufficientTokens) {
        dispatch((0, _swaps.setBalanceError)(true));
      } else if (balanceError && !insufficientTokens) {
        dispatch((0, _swaps.setBalanceError)(false));
      }
    } else if (insufficientTokens || insufficientEth) {
      dispatch((0, _swaps.setBalanceError)(true));
    } else if (balanceError && !insufficientTokens && !insufficientEth) {
      dispatch((0, _swaps.setBalanceError)(false));
    }
    // eslint-disable-next-line
  }, [insufficientTokens, insufficientEth, dispatch, isSmartTransaction]);
  (0, _react.useEffect)(() => {
    const currentTime = Date.now();
    const timeSinceLastFetched = currentTime - quotesLastFetched;
    if (timeSinceLastFetched > swapsQuoteRefreshTime && !dispatchedSafeRefetch) {
      setDispatchedSafeRefetch(true);
      dispatch((0, _actions.safeRefetchQuotes)());
    } else if (timeSinceLastFetched > swapsQuoteRefreshTime) {
      dispatch((0, _actions.setSwapsErrorKey)(_swaps3.QUOTES_EXPIRED_ERROR));
      history.push(_routes.SWAPS_NOTIFICATION_ROUTE);
    }
  }, [quotesLastFetched, dispatchedSafeRefetch, dispatch, history, swapsQuoteRefreshTime]);
  (0, _react.useEffect)(() => {
    if (!originalApproveAmount && approveAmount) {
      setOriginalApproveAmount(approveAmount);
    }
  }, [originalApproveAmount, approveAmount]);

  // If it's not a Smart Transaction and ETH balance is needed, we want to show a warning.
  const isNotStxAndEthBalanceIsNeeded = !isSmartTransaction && ethBalanceNeeded;

  // If it's a Smart Transaction and ETH balance is needed, we want to show a warning.
  const isStxAndEthBalanceIsNeeded = isSmartTransaction && ethBalanceNeededStx;

  // Indicates if we should show to a user a warning about insufficient funds for swapping.
  const showInsufficientWarning = (balanceError || tokenBalanceNeeded || isNotStxAndEthBalanceIsNeeded || isStxAndEthBalanceIsNeeded) && !warningHidden;
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const numberOfQuotes = Object.values(quotes).length;
  const bestQuoteReviewedEventSent = (0, _react.useRef)();
  const eventObjectBase = (0, _react.useMemo)(() => {
    return {
      token_from: sourceTokenSymbol,
      token_from_amount: sourceTokenValue,
      token_to: destinationTokenSymbol,
      token_to_amount: destinationTokenValue,
      request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
      slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
      custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
      response_time: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.responseTime,
      best_quote_source: topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator,
      available_quotes: numberOfQuotes,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    };
  }, [sourceTokenSymbol, sourceTokenValue, destinationTokenSymbol, destinationTokenValue, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.responseTime, topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator, numberOfQuotes, hardwareWalletUsed, hardwareWalletType, smartTransactionsEnabled, currentSmartTransactionsEnabled, smartTransactionsOptInStatus]);
  const trackAllAvailableQuotesOpened = () => {
    trackEvent({
      event: 'All Available Quotes Opened',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        other_quote_selected: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) !== (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator),
        other_quote_selected_source: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) === (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator) ? null : usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator
      }
    });
  };
  const trackQuoteDetailsOpened = () => {
    trackEvent({
      event: 'Quote Details Opened',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        other_quote_selected: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) !== (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator),
        other_quote_selected_source: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) === (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator) ? null : usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator
      }
    });
  };
  const trackEditSpendLimitOpened = () => {
    trackEvent({
      event: 'Edit Spend Limit Opened',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        custom_spend_limit_set: originalApproveAmount === approveAmount,
        custom_spend_limit_amount: originalApproveAmount === approveAmount ? null : approveAmount
      }
    });
  };
  const trackBestQuoteReviewedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'Best Quote Reviewed',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        network_fees: feeInFiat
      }
    });
  }, [trackEvent, eventObjectBase, feeInFiat]);
  const trackViewQuotePageLoadedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'Review Quote Component Loaded',
      category: _metametrics2.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        ...eventObjectBase,
        response_time: currentTimestamp - reviewSwapClickedTimestamp
      }
    });
  }, [trackEvent, eventObjectBase, currentTimestamp, reviewSwapClickedTimestamp]);
  (0, _react.useEffect)(() => {
    if (!bestQuoteReviewedEventSent.current && [sourceTokenSymbol, sourceTokenValue, destinationTokenSymbol, destinationTokenValue, fetchParams, topQuote, numberOfQuotes, feeInFiat].every(dep => dep !== null && dep !== undefined)) {
      bestQuoteReviewedEventSent.current = true;
      trackBestQuoteReviewedEvent();
    }
  }, [fetchParams, topQuote, numberOfQuotes, feeInFiat, destinationTokenSymbol, destinationTokenValue, sourceTokenSymbol, sourceTokenValue, trackBestQuoteReviewedEvent]);
  const metaMaskFee = usedQuote.fee;

  /* istanbul ignore next */
  const onFeeCardTokenApprovalClick = () => {
    trackEditSpendLimitOpened();
    dispatch((0, _actions.showModal)({
      name: 'EDIT_APPROVAL_PERMISSION',
      decimals: selectedFromToken.decimals,
      origin: 'MetaMask',
      setCustomAmount: newCustomPermissionAmount => {
        const customPermissionAmount = newCustomPermissionAmount === '' ? originalApproveAmount : newCustomPermissionAmount;
        const newData = (0, _confirmApprove.getCustomTxParamsData)(approveTxParams.data, {
          customPermissionAmount,
          decimals: selectedFromToken.decimals
        });
        if (customPermissionAmount !== null && customPermissionAmount !== void 0 && customPermissionAmount.length && approveTxParams.data !== newData) {
          dispatch((0, _actions.setCustomApproveTxData)(newData));
        }
      },
      tokenAmount: originalApproveAmount,
      customTokenAmount: originalApproveAmount === approveAmount ? null : approveAmount,
      tokenBalance,
      tokenSymbol: selectedFromToken.symbol,
      requiredMinimum: (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.sourceAmount, selectedFromToken.decimals)
    }));
  };
  const actionableBalanceErrorMessage = tokenBalanceUnavailable ? t('swapTokenBalanceUnavailable', [sourceTokenSymbol]) : t('swapApproveNeedMoreTokens', [/*#__PURE__*/_react.default.createElement("span", {
    key: "swapApproveNeedMoreTokens-1"
  }, tokenBalanceNeeded || ethBalanceNeededStx || ethBalanceNeeded), tokenBalanceNeeded && !(sourceTokenSymbol === defaultSwapsToken.symbol) ? sourceTokenSymbol : defaultSwapsToken.symbol]);

  // Price difference warning
  const priceSlippageBucket = usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp === void 0 ? void 0 : _usedQuote$priceSlipp.bucket;
  const lastPriceDifferenceBucket = (0, _usePrevious.usePrevious)(priceSlippageBucket);

  // If the user agreed to a different bucket of risk, make them agree again
  (0, _react.useEffect)(() => {
    if (acknowledgedPriceDifference && lastPriceDifferenceBucket === _gas.GasRecommendations.medium && priceSlippageBucket === _gas.GasRecommendations.high) {
      setAcknowledgedPriceDifference(false);
    }
  }, [priceSlippageBucket, acknowledgedPriceDifference, lastPriceDifferenceBucket]);
  let viewQuotePriceDifferenceWarning = null;
  const priceSlippageFromSource = (0, _useEthFiatAmount.useEthFiatAmount)((usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp2 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp2 === void 0 ? void 0 : _usedQuote$priceSlipp2.sourceAmountInETH) || 0, {
    showFiat: true
  });
  const priceSlippageFromDestination = (0, _useEthFiatAmount.useEthFiatAmount)((usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp3 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp3 === void 0 ? void 0 : _usedQuote$priceSlipp3.destinationAmountInETH) || 0, {
    showFiat: true
  });

  // We cannot present fiat value if there is a calculation error or no slippage
  // from source or destination
  const priceSlippageUnknownFiatValue = !priceSlippageFromSource || !priceSlippageFromDestination || Boolean(usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp4 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp4 === void 0 ? void 0 : _usedQuote$priceSlipp4.calculationError);
  let priceDifferencePercentage = 0;
  if (usedQuote !== null && usedQuote !== void 0 && (_usedQuote$priceSlipp5 = usedQuote.priceSlippage) !== null && _usedQuote$priceSlipp5 !== void 0 && _usedQuote$priceSlipp5.ratio) {
    priceDifferencePercentage = parseFloat(new _bignumber.default(usedQuote.priceSlippage.ratio, 10).minus(1, 10).times(100, 10).toFixed(2), 10);
  }
  const shouldShowPriceDifferenceWarning = !tokenBalanceUnavailable && !showInsufficientWarning && usedQuote && (priceDifferenceRiskyBuckets.includes(priceSlippageBucket) || priceSlippageUnknownFiatValue);
  if (shouldShowPriceDifferenceWarning) {
    viewQuotePriceDifferenceWarning = /*#__PURE__*/_react.default.createElement(_viewQuotePriceDifference.default, {
      usedQuote: usedQuote,
      sourceTokenValue: sourceTokenValue,
      destinationTokenValue: destinationTokenValue,
      priceSlippageFromSource: priceSlippageFromSource,
      priceSlippageFromDestination: priceSlippageFromDestination,
      priceDifferencePercentage: priceDifferencePercentage,
      priceSlippageUnknownFiatValue: priceSlippageUnknownFiatValue,
      onAcknowledgementClick: () => {
        setAcknowledgedPriceDifference(true);
      },
      acknowledged: acknowledgedPriceDifference
    });
  }
  const disableSubmissionDueToPriceWarning = shouldShowPriceDifferenceWarning && !acknowledgedPriceDifference;
  const isShowingWarning = showInsufficientWarning || shouldShowPriceDifferenceWarning;
  const isSwapButtonDisabled = Boolean(submitClicked || balanceError || tokenBalanceUnavailable || disableSubmissionDueToPriceWarning || networkAndAccountSupports1559 && baseAndPriorityFeePerGas === undefined || !networkAndAccountSupports1559 && (gasPrice === null || gasPrice === undefined) || currentSmartTransactionsEnabled && (currentSmartTransactionsError || smartTransactionsError) || currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !(smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees));
  (0, _react.useEffect)(() => {
    if (isSmartTransaction && !insufficientTokens) {
      const unsignedTx = {
        from: unsignedTransaction.from,
        to: unsignedTransaction.to,
        value: unsignedTransaction.value,
        data: unsignedTransaction.data,
        gas: unsignedTransaction.gas,
        chainId
      };
      intervalId = setInterval(() => {
        if (!swapsSTXLoading) {
          dispatch((0, _swaps.fetchSwapsSmartTransactionFees)({
            unsignedTransaction: unsignedTx,
            approveTxParams,
            fallbackOnNotEnoughFunds: false
          }));
        }
      }, swapsNetworkConfig.stxGetTransactionsRefreshTime);
      dispatch((0, _swaps.fetchSwapsSmartTransactionFees)({
        unsignedTransaction: unsignedTx,
        approveTxParams,
        fallbackOnNotEnoughFunds: false
      }));
    } else if (intervalId) {
      clearInterval(intervalId);
    }
    return () => clearInterval(intervalId);
    // eslint-disable-next-line
  }, [dispatch, isSmartTransaction, unsignedTransaction.data, unsignedTransaction.from, unsignedTransaction.value, unsignedTransaction.gas, unsignedTransaction.to, chainId, swapsNetworkConfig.stxGetTransactionsRefreshTime, insufficientTokens]);
  (0, _react.useEffect)(() => {
    // Thanks to the next line we will only do quotes polling 3 times before showing a Quote Timeout modal.
    dispatch((0, _actions.setSwapsQuotesPollingLimitEnabled)(true));
    if (reviewSwapClickedTimestamp) {
      trackViewQuotePageLoadedEvent();
    }
  }, [dispatch, trackViewQuotePageLoadedEvent, reviewSwapClickedTimestamp]);
  (0, _react.useEffect)(() => {
    // if smart transaction error is turned off, reset submit clicked boolean
    if (!currentSmartTransactionsEnabled && currentSmartTransactionsError && submitClicked) {
      setSubmitClicked(false);
    }
  }, [currentSmartTransactionsEnabled, currentSmartTransactionsError, submitClicked]);
  (0, _react.useEffect)(() => {
    if (!isMultiLayerFeeNetwork || !(usedQuote !== null && usedQuote !== void 0 && usedQuote.multiLayerL1TradeFeeTotal)) {
      return;
    }
    const getEstimatedL1Fees = async () => {
      try {
        let l1ApprovalFeeTotal = '0x0';
        if (approveTxParams) {
          l1ApprovalFeeTotal = await (0, _fetchEstimatedL1Fee.default)({
            txParams: {
              ...approveTxParams,
              gasPrice: (0, _util.addHexPrefix)(approveTxParams.gasPrice),
              value: '0x0' // For approval txs we need to use "0x0" here.
            },

            chainId
          });
          setMultiLayerL1ApprovalFeeTotal(l1ApprovalFeeTotal);
        }
        const l1FeeTotal = (0, _conversion.sumHexes)(usedQuote.multiLayerL1TradeFeeTotal, l1ApprovalFeeTotal);
        setMultiLayerL1FeeTotal(l1FeeTotal);
      } catch (e) {
        (0, _browser.captureException)(e);
        setMultiLayerL1FeeTotal(null);
        setMultiLayerL1ApprovalFeeTotal(null);
      }
    };
    getEstimatedL1Fees();
  }, [unsignedTransaction, approveTxParams, isMultiLayerFeeNetwork, chainId, usedQuote]);
  (0, _react.useEffect)(() => {
    if (isSmartTransaction) {
      // Removes a smart transactions error when the component loads.
      dispatch({
        type: _actionConstants.SET_SMART_TRANSACTIONS_ERROR,
        payload: null
      });
    }
  }, [isSmartTransaction, dispatch]);
  const destinationValue = (0, _swapsUtils.calcTokenValue)(destinationTokenValue, destinationTokenDecimals);
  const destinationAmount = (0, _transactionsControllerUtils.calcTokenAmount)(destinationValue, destinationTokenDecimals);
  const amountToDisplay = (0, _swaps2.formatSwapsValueForDisplay)(destinationAmount);
  const amountDigitLength = amountToDisplay.match(/\d+/gu).join('').length;
  let ellipsedAmountToDisplay = amountToDisplay;
  if (amountDigitLength > 20) {
    ellipsedAmountToDisplay = `${amountToDisplay.slice(0, 20)}...`;
  }
  (0, _react.useEffect)(() => {
    setReceiveToAmount(ellipsedAmountToDisplay);
  }, [ellipsedAmountToDisplay, setReceiveToAmount]);
  const hideTokenApprovalRow = !approveTxParams || balanceError && !warningHidden;

  // TODO: use the <Text> component for this.
  const tokenApprovalTextComponent = /*#__PURE__*/_react.default.createElement("span", {
    key: "fee-card-approve-symbol",
    className: "fee-card__bold"
  }, t('enableToken', [sourceTokenSymbol]));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "review-quote"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "review-quote__content"
  }, /* istanbul ignore next */
  selectQuotePopoverShown && /*#__PURE__*/_react.default.createElement(_selectQuotePopover.default, {
    quoteDataRows: renderablePopoverData,
    onClose: () => setSelectQuotePopoverShown(false),
    onSubmit: aggId => dispatch((0, _swaps.swapsQuoteSelected)(aggId)),
    swapToSymbol: destinationTokenSymbol,
    initialAggId: usedQuote.aggregator,
    onQuoteDetailsIsOpened: trackQuoteDetailsOpened,
    hideEstimatedGasFee: smartTransactionsEnabled && smartTransactionsOptInStatus
  }), isShowingWarning && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, viewQuotePriceDifferenceWarning, (showInsufficientWarning || tokenBalanceUnavailable) && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.INFO,
    title: t('notEnoughBalance')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    "data-testid": "mm-banner-alert-notification-text"
  }, actionableBalanceErrorMessage)))), /*#__PURE__*/_react.default.createElement("div", {
    className: "review-quote__countdown-timer-container"
  }, /*#__PURE__*/_react.default.createElement(_countdownTimer.default, {
    timeStarted: quotesLastFetched,
    warningTime: "0:10",
    labelKey: "swapNewQuoteIn"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1,
    marginBottom: 0,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    className: "review-quote__overview"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    marginRight: 1,
    color: _designSystem.TextColor.textAlternative
  }, t('quoteRate')), /*#__PURE__*/_react.default.createElement(_exchangeRateDisplay.default, {
    primaryTokenValue: (0, _swapsUtils.calcTokenValue)(sourceTokenValue, sourceTokenDecimals),
    primaryTokenDecimals: sourceTokenDecimals,
    primaryTokenSymbol: sourceTokenSymbol,
    secondaryTokenValue: destinationValue,
    secondaryTokenDecimals: destinationTokenDecimals,
    secondaryTokenSymbol: destinationTokenSymbol,
    arrowColor: "var(--color-primary-default)",
    boldSymbols: false,
    className: "main-quote-summary__exchange-rate-display",
    onQuotesClick: /* istanbul ignore next */
    () => {
      trackAllAvailableQuotesOpened();
      setSelectQuotePopoverShown(true);
    },
    showIconForSwappingTokens: false
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.stretch
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    color: _designSystem.TextColor.textAlternative
  }, t('swapMetaMaskFee')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    color: _designSystem.TextColor.textAlternative
  }, t('percentage', [metaMaskFee]))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    alignItems: _designSystem.AlignItems.stretch
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    width: _designSystem.FRACTIONS.SIX_TWELFTHS
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginRight: 1
  }, t('transactionDetailGasHeading')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "left",
    contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
      className: "fee-card__info-tooltip-paragraph"
    }, t('swapGasFeesSummary', [getTranslatedNetworkName()])), /*#__PURE__*/_react.default.createElement("p", {
      className: "fee-card__info-tooltip-paragraph"
    }, t('swapGasFeesDetails')), /*#__PURE__*/_react.default.createElement("p", {
      className: "fee-card__info-tooltip-paragraph"
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "fee-card__link",
      onClick: () => {
        /* istanbul ignore next */
        trackEvent({
          event: 'Clicked "Gas Fees: Learn More" Link',
          category: _metametrics2.MetaMetricsEventCategory.Swaps
        });
        global.platform.openTab({
          url: GAS_FEES_LEARN_MORE_URL
        });
      },
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('swapGasFeesLearnMore'))))
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexEnd,
    width: _designSystem.FRACTIONS.SIX_TWELFTHS
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    width: _designSystem.FRACTIONS.EIGHT_TWELFTHS,
    textAlign: _designSystem.TEXT_ALIGN.RIGHT,
    paddingRight: 1
  }, feeInEth), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMdBold,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    "data-testid": "review-quote-gas-fee-in-fiat",
    width: _designSystem.FRACTIONS.FOUR_TWELFTHS,
    textAlign: _designSystem.TEXT_ALIGN.RIGHT
  }, ` ${feeInFiat}`))), (maxFeeInFiat || maxFeeInEth) && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    width: _designSystem.FRACTIONS.SIX_TWELFTHS
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.flexEnd,
    width: _designSystem.FRACTIONS.SIX_TWELFTHS
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    color: _designSystem.TextColor.textAlternative,
    width: _designSystem.FRACTIONS.EIGHT_TWELFTHS,
    paddingRight: 1,
    textAlign: _designSystem.TEXT_ALIGN.RIGHT
  }, `${t('maxFee')}: `), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    color: _designSystem.TextColor.textAlternative,
    width: _designSystem.FRACTIONS.FOUR_TWELFTHS,
    textAlign: _designSystem.TEXT_ALIGN.RIGHT
  }, maxFeeInFiat || maxFeeInEth))), !hideTokenApprovalRow && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginRight: 1
  }, t('swapEnableTokenForSwapping', [tokenApprovalTextComponent])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    onClick: () => onFeeCardTokenApprovalClick(),
    size: _designSystem.Size.inherit,
    className: "review-quote__edit-limit"
  }, t('swapEditLimit')))))), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: /* istanbul ignore next */() => {
      setSubmitClicked(true);
      if (!balanceError) {
        if (isSmartTransaction && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
          dispatch((0, _swaps.signAndSendSwapsSmartTransaction)({
            unsignedTransaction,
            trackEvent,
            history,
            additionalTrackingParams
          }));
        } else {
          dispatch((0, _swaps.signAndSendTransactions)(history, trackEvent, additionalTrackingParams));
        }
      } else if (destinationToken.symbol === defaultSwapsToken.symbol) {
        history.push(_routes.DEFAULT_ROUTE);
      } else {
        history.push(`${_routes.ASSET_ROUTE}/${destinationToken.address}`);
      }
    },
    submitText: isSmartTransaction && swapsSTXLoading ? t('preparingSwap') : t('swap'),
    hideCancel: true,
    disabled: isSwapButtonDisabled,
    className: (0, _classnames.default)('review-quote__footer', {
      'review-quote__thin-swaps-footer': isShowingWarning
    }),
    showTopBorder: true,
    showTermsOfService: true
  }));
}
ReviewQuote.propTypes = {
  setReceiveToAmount: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\prepare-swap-page\\review-quote.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\smart-transactions-popover.js", {"../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/popover":"F:\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../components/ui/typography":"F:\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../popover-custom-background/popover-custom-background":"F:\\metamask-extension\\ui\\pages\\swaps\\popover-custom-background\\popover-custom-background.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cprepare-swap-page%5Csmart-transactions-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SmartTransactionsPopover;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _popover = _interopRequireDefault(require("../../../components/ui/popover"));
var _typography = _interopRequireDefault(require("../../../components/ui/typography"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _popoverCustomBackground = _interopRequireDefault(require("../popover-custom-background/popover-custom-background"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SmartTransactionsPopover({
  onEnableSmartTransactionsClick,
  onCloseSmartTransactionsOptInPopover
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t('smartSwapsAreHere'),
    footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onEnableSmartTransactionsClick
    }, t('enableSmartSwaps')), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginTop: 1
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: onCloseSmartTransactionsOptInPopover,
      className: "smart-transactions-popover__no-thanks-link"
    }, t('noThanksVariant2'))))),
    footerClassName: "smart-transactions-popover__footer",
    className: "smart-transactions-popover",
    CustomBackground: () => {
      return /*#__PURE__*/_react.default.createElement(_popoverCustomBackground.default, {
        onClose: onCloseSmartTransactionsOptInPopover
      });
    }
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingRight: 6,
    paddingLeft: 6,
    paddingTop: 0,
    paddingBottom: 0,
    display: _designSystem.DISPLAY.FLEX,
    className: "smart-transactions-popover__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 0,
    marginBottom: 4,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/logo/smart-transactions-header.png",
    alt: t('swapSwapSwitch')
  })), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    marginTop: 0
  }, t('smartSwapsDescription')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "ul",
    variant: _designSystem.TypographyVariant.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement("li", null, t('stxBenefit1')), /*#__PURE__*/_react.default.createElement("li", null, t('stxBenefit2')), /*#__PURE__*/_react.default.createElement("li", null, t('stxBenefit3')), /*#__PURE__*/_react.default.createElement("li", null, t('stxBenefit4'), /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TypographyVariant.H7
  }, ' *'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H8,
    color: _designSystem.TextColor.textAlternative,
    boxProps: {
      marginTop: 3
    }
  }, t('smartSwapsSubDescription'), "\xA0", /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TypographyVariant.H8,
    color: _designSystem.TextColor.textAlternative
  }, t('stxYouCanOptOut'), "\xA0"))));
}
SmartTransactionsPopover.propTypes = {
  onEnableSmartTransactionsClick: _propTypes.default.func.isRequired,
  onCloseSmartTransactionsOptInPopover: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\prepare-swap-page\\smart-transactions-popover.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\prepare-swap-page\\view-quote-price-difference.js", {"../../../../shared/constants/gas":"F:\\metamask-extension\\shared\\constants\\gas.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cprepare-swap-page%5Cview-quote-price-difference.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewQuotePriceDifference;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _gas = require("../../../../shared/constants/gas");
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ViewQuotePriceDifference(props) {
  const {
    usedQuote,
    sourceTokenValue,
    destinationTokenValue,
    onAcknowledgementClick,
    acknowledged,
    priceSlippageFromSource,
    priceSlippageFromDestination,
    priceDifferencePercentage,
    priceSlippageUnknownFiatValue
  } = props;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  let priceDifferenceTitle = t('swapPriceUnavailableTitle');
  let priceDifferenceMessage = t('swapPriceUnavailableDescription');
  let priceDifferenceClass = _gas.GasRecommendations.high;
  if (!priceSlippageUnknownFiatValue) {
    priceDifferenceTitle = t('swapPriceDifferenceTitle', [priceDifferencePercentage]);
    priceDifferenceMessage = t('swapPriceDifference', [sourceTokenValue,
    // Number of source token to swap
    usedQuote.sourceTokenInfo.symbol,
    // Source token symbol
    priceSlippageFromSource,
    // Source tokens total value
    destinationTokenValue,
    // Number of destination tokens in return
    usedQuote.destinationTokenInfo.symbol,
    // Destination token symbol,
    priceSlippageFromDestination // Destination tokens total value
    ]);

    priceDifferenceClass = usedQuote.priceSlippage.bucket;
  }
  const severity = priceDifferenceClass === _gas.GasRecommendations.high ? _designSystem.SEVERITIES.DANGER : _designSystem.SEVERITIES.WARNING;
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    title: priceDifferenceTitle,
    severity: severity,
    width: _designSystem.BLOCK_SIZES.FULL,
    "data-testid": "mm-banner-alert"
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h6",
    "data-testid": "mm-banner-alert-notification-text"
  }, priceDifferenceMessage), !acknowledged && /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.INHERIT,
    textProps: {
      variant: _designSystem.TextVariant.bodyMd,
      alignItems: _designSystem.AlignItems.flexStart
    },
    onClick: onAcknowledgementClick
  }, t('swapAnyway')))));
}
ViewQuotePriceDifference.propTypes = {
  usedQuote: _propTypes.default.object,
  sourceTokenValue: _propTypes.default.string,
  destinationTokenValue: _propTypes.default.string,
  onAcknowledgementClick: _propTypes.default.func,
  acknowledged: _propTypes.default.bool,
  priceSlippageFromSource: _propTypes.default.string,
  priceSlippageFromDestination: _propTypes.default.string,
  priceDifferencePercentage: _propTypes.default.number,
  priceSlippageUnknownFiatValue: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\prepare-swap-page\\view-quote-price-difference.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\index.js", {"./searchable-item-list":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\searchable-item-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csearchable-item-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _searchableItemList.default;
  }
});
var _searchableItemList = _interopRequireDefault(require("./searchable-item-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\searchable-item-list\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\index.js", {"./item-list.component":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\item-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csearchable-item-list%5Citem-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _itemList.default;
  }
});
var _itemList = _interopRequireDefault(require("./item-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\searchable-item-list\\item-list\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\item-list.component.js", {"../../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../components/ui/actionable-message/actionable-message":"F:\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/identicon":"F:\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/utils/util":"F:\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csearchable-item-list%5Citem-list%5Citem-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ItemList;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));
var _urlIcon = _interopRequireDefault(require("../../../../components/ui/url-icon"));
var _button = _interopRequireDefault(require("../../../../components/ui/button"));
var _actionableMessage = _interopRequireDefault(require("../../../../components/ui/actionable-message/actionable-message"));
var _i18n = require("../../../../contexts/i18n");
var _selectors = require("../../../../selectors");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _swaps = require("../../../../../shared/constants/swaps");
var _util = require("../../../../helpers/utils/util");
var _metametrics2 = require("../../../../contexts/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ItemList({
  results = [],
  onClickItem,
  onOpenImportTokenModalClick,
  Placeholder,
  listTitle,
  maxListItems = 6,
  searchQuery = '',
  containerRef,
  hideRightLabels,
  hideItemIf,
  listContainerClassName
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const blockExplorerLink = rpcPrefs.blockExplorerUrl ?? _swaps.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null;
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  const blockExplorerHostName = (0, _util.getURLHostName)(blockExplorerLink);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);

  // If there is a token for import based on a contract address, it's the only one in the list.
  const hasTokenForImport = results.length === 1 && results[0].notImported;
  const placeholder = Placeholder ? /*#__PURE__*/_react.default.createElement(Placeholder, {
    searchQuery: searchQuery
  }) : null;
  return results.length === 0 ? placeholder : /*#__PURE__*/_react.default.createElement("div", {
    className: "searchable-item-list"
  }, listTitle ? /*#__PURE__*/_react.default.createElement("div", {
    className: "searchable-item-list__title"
  }, listTitle) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('searchable-item-list__list-container', listContainerClassName),
    ref: containerRef,
    "data-testid": "searchable-item-list-list-container"
  }, results.slice(0, maxListItems).map((result, i) => {
    if (hideItemIf !== null && hideItemIf !== void 0 && hideItemIf(result)) {
      return null;
    }
    const onClick = () => {
      if (result.notImported) {
        onOpenImportTokenModalClick(result);
      } else {
        onClickItem === null || onClickItem === void 0 ? void 0 : onClickItem(result);
      }
    };
    const {
      iconUrl,
      identiconAddress,
      selected,
      disabled,
      primaryLabel,
      secondaryLabel,
      rightPrimaryLabel,
      rightSecondaryLabel,
      IconComponent
    } = result;
    return /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: "0",
      className: (0, _classnames.default)('searchable-item-list__item', {
        'searchable-item-list__item--selected': selected,
        'searchable-item-list__item--disabled': disabled
      }),
      "data-testid": "searchable-item-list__item",
      onClick: onClick,
      onKeyUp: e => e.key === 'Enter' && onClick(),
      key: `searchable-item-list-item-${i}`
    }, iconUrl || primaryLabel ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
      url: iconUrl,
      name: primaryLabel
    }) : null, !(iconUrl || primaryLabel) && identiconAddress ? /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identiconAddress,
      diameter: 24
    })) : null, IconComponent ? /*#__PURE__*/_react.default.createElement(IconComponent, null) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__labels"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__item-labels"
    }, primaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__primary-label",
      "data-testid": "searchable-item-list-primary-label"
    }, primaryLabel) : null, secondaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__secondary-label"
    }, secondaryLabel) : null), !hideRightLabels && (rightPrimaryLabel || rightSecondaryLabel) ? /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__right-labels"
    }, rightPrimaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__right-primary-label"
    }, rightPrimaryLabel) : null, rightSecondaryLabel && useCurrencyRateCheck ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__right-secondary-label"
    }, rightSecondaryLabel) : null) : null), result.notImported && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onClick,
      "data-testid": "searchable-item-list-import-button"
    }, t('import')));
  }), !hasTokenForImport && blockExplorerLink && /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: "0",
    className: "searchable-item-list__item searchable-item-list__item--add-token",
    key: "searchable-item-list-item-last"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: t('addTokenByContractAddress', [/*#__PURE__*/_react.default.createElement("a", {
      key: "searchable-item-list__etherscan-link",
      onClick: () => {
        /* istanbul ignore next */
        trackEvent({
          event: 'Clicked Block Explorer Link',
          category: _metametrics.MetaMetricsEventCategory.Swaps,
          properties: {
            link_type: 'Token Tracker',
            action: 'Verify Contract Address',
            block_explorer_domain: blockExplorerHostName
          }
        });
        global.platform.openTab({
          url: blockExplorerLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer"
    }, blockExplorerHostName)])
  }))));
}
ItemList.propTypes = {
  results: _propTypes.default.arrayOf(_propTypes.default.shape({
    iconUrl: _propTypes.default.string,
    selected: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    primaryLabel: _propTypes.default.string,
    secondaryLabel: _propTypes.default.string,
    rightPrimaryLabel: _propTypes.default.string,
    rightSecondaryLabel: _propTypes.default.string
  })),
  onClickItem: _propTypes.default.func,
  onOpenImportTokenModalClick: _propTypes.default.func,
  Placeholder: _propTypes.default.func,
  listTitle: _propTypes.default.string,
  maxListItems: _propTypes.default.number,
  searchQuery: _propTypes.default.string,
  containerRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(window.Element)
  }),
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\searchable-item-list\\item-list\\item-list.component.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\index.js", {"./list-item-search.component":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\list-item-search.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csearchable-item-list%5Clist-item-search%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _listItemSearch.default;
  }
});
var _listItemSearch = _interopRequireDefault(require("./list-item-search.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\searchable-item-list\\list-item-search\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\list-item-search.component.js", {"../../../../../shared/modules/hexstring-utils":"F:\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../components/ui/icon/search-icon":"F:\\metamask-extension\\ui\\components\\ui\\icon\\search-icon.js","../../../../components/ui/text-field":"F:\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../../hooks/usePrevious":"F:\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../../selectors/selectors":"F:\\metamask-extension\\ui\\selectors\\selectors.js","../../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","@material-ui/core/InputAdornment":"F:\\metamask-extension\\node_modules\\@material-ui\\core\\InputAdornment\\index.js","fuse.js":"F:\\metamask-extension\\node_modules\\fuse.js\\dist\\fuse.js","loglevel":"F:\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csearchable-item-list%5Clist-item-search%5Clist-item-search.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListItemSearch;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _fuse = _interopRequireDefault(require("fuse.js"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));
var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));
var _usePrevious = require("../../../../hooks/usePrevious");
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _swaps = require("../../swaps.util");
var _selectors = require("../../../../selectors/selectors");
var _searchIcon = _interopRequireDefault(require("../../../../components/ui/icon/search-icon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const renderAdornment = () => /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
  position: "start",
  style: {
    marginRight: '12px'
  }
}, /*#__PURE__*/_react.default.createElement(_searchIcon.default, {
  size: 20,
  color: "var(--color-icon-muted)"
}));
let timeoutIdForSearch;
function ListItemSearch({
  onSearch,
  error,
  listToSearch = [],
  fuseSearchKeys,
  searchPlaceholderText,
  defaultToAll,
  shouldSearchForImports,
  searchQuery,
  setSearchQuery
}) {
  const fuseRef = (0, _react.useRef)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);

  /**
   * Search a custom token for import based on a contract address.
   *
   * @param {string} contractAddress
   */
  const handleSearchTokenForImport = async contractAddress => {
    try {
      const token = await (0, _swaps.fetchToken)(contractAddress, chainId);
      if (token) {
        token.primaryLabel = token.symbol;
        token.secondaryLabel = token.name;
        token.notImported = true;
        onSearch({
          searchQuery: contractAddress,
          results: [token]
        });
        return;
      }
    } catch (e) {
      _loglevel.default.error('Token not found, show 0 results.', e);
    }
    onSearch({
      searchQuery: contractAddress,
      results: [] // No token for import found.
    });
  };

  const handleSearch = async newSearchQuery => {
    setSearchQuery(newSearchQuery);
    if (timeoutIdForSearch) {
      clearTimeout(timeoutIdForSearch);
    }
    timeoutIdForSearch = setTimeout(async () => {
      timeoutIdForSearch = null;
      const trimmedNewSearchQuery = newSearchQuery.trim();
      const validHexAddress = (0, _hexstringUtils.isValidHexAddress)(trimmedNewSearchQuery);
      const fuseSearchResult = fuseRef.current.search(newSearchQuery);
      const results = defaultToAll && newSearchQuery === '' ? listToSearch : fuseSearchResult;
      if (shouldSearchForImports && results.length === 0 && validHexAddress) {
        await handleSearchTokenForImport(trimmedNewSearchQuery);
        return;
      }
      onSearch({
        searchQuery: newSearchQuery,
        results
      });
    }, 350);
  };
  (0, _react.useEffect)(() => {
    return () => clearTimeout(timeoutIdForSearch);
  }, []);
  (0, _react.useEffect)(() => {
    if (!fuseRef.current) {
      fuseRef.current = new _fuse.default(listToSearch, {
        shouldSort: true,
        threshold: 0.45,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        minMatchCharLength: 1,
        keys: fuseSearchKeys
      });
    }
  }, [fuseSearchKeys, listToSearch]);
  const previousListToSearch = (0, _usePrevious.usePrevious)(listToSearch ?? []);
  (0, _react.useEffect)(() => {
    if (fuseRef.current && searchQuery && previousListToSearch !== listToSearch) {
      fuseRef.current.setCollection(listToSearch);
      const fuseSearchResult = fuseRef.current.search(searchQuery);
      onSearch({
        searchQuery,
        results: fuseSearchResult
      });
    }
  }, [listToSearch, searchQuery, onSearch, previousListToSearch]);
  return /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "search-list-items",
    className: "searchable-item-list__search",
    placeholder: searchPlaceholderText,
    type: "text",
    value: searchQuery,
    onChange: e => handleSearch(e.target.value),
    error: error,
    fullWidth: true,
    startAdornment: renderAdornment(),
    autoComplete: "off",
    autoFocus: true
  });
}
ListItemSearch.propTypes = {
  onSearch: _propTypes.default.func,
  error: _propTypes.default.string,
  listToSearch: _propTypes.default.array.isRequired,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  searchPlaceholderText: _propTypes.default.string,
  defaultToAll: _propTypes.default.bool,
  shouldSearchForImports: _propTypes.default.bool,
  searchQuery: _propTypes.default.string,
  setSearchQuery: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\searchable-item-list\\list-item-search\\list-item-search.component.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\searchable-item-list.js", {"./item-list":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\index.js","./list-item-search":"F:\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csearchable-item-list%5Csearchable-item-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SearchableItemList;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _itemList = _interopRequireDefault(require("./item-list"));
var _listItemSearch = _interopRequireDefault(require("./list-item-search"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SearchableItemList({
  className,
  defaultToAll,
  fuseSearchKeys,
  itemSelectorError,
  itemsToSearch = [],
  listTitle,
  maxListItems,
  onClickItem,
  onOpenImportTokenModalClick,
  Placeholder,
  searchPlaceholderText,
  hideRightLabels,
  hideItemIf,
  listContainerClassName,
  shouldSearchForImports,
  searchQuery,
  setSearchQuery
}) {
  const itemListRef = (0, _react.useRef)();
  const initialResultsState = (0, _react.useMemo)(() => {
    return defaultToAll ? itemsToSearch : [];
  }, [defaultToAll, itemsToSearch]);
  const [results, setResults] = (0, _react.useState)(initialResultsState);
  (0, _react.useEffect)(() => {
    if (!searchQuery) {
      // Only if there is no searchQuery we want to show all tokens.
      setResults(initialResultsState);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initialResultsState.length, searchQuery]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, /*#__PURE__*/_react.default.createElement(_listItemSearch.default, {
    listToSearch: itemsToSearch,
    fuseSearchKeys: fuseSearchKeys,
    onSearch: ({
      searchQuery: newSearchQuery = '',
      results: newResults = []
    }) => {
      setSearchQuery(newSearchQuery);
      setResults(newResults);
    },
    error: itemSelectorError,
    searchPlaceholderText: searchPlaceholderText,
    defaultToAll: defaultToAll,
    shouldSearchForImports: shouldSearchForImports,
    searchQuery: searchQuery,
    setSearchQuery: setSearchQuery
  }), /*#__PURE__*/_react.default.createElement(_itemList.default, {
    searchQuery: searchQuery,
    results: results,
    onClickItem: onClickItem,
    onOpenImportTokenModalClick: onOpenImportTokenModalClick,
    Placeholder: Placeholder,
    listTitle: listTitle,
    maxListItems: maxListItems,
    containerRef: itemListRef,
    hideRightLabels: hideRightLabels,
    hideItemIf: hideItemIf,
    listContainerClassName: listContainerClassName
  }));
}
SearchableItemList.propTypes = {
  itemSelectorError: _propTypes.default.string,
  itemsToSearch: _propTypes.default.array,
  onClickItem: _propTypes.default.func,
  onOpenImportTokenModalClick: _propTypes.default.func,
  Placeholder: _propTypes.default.func,
  className: _propTypes.default.string,
  searchPlaceholderText: _propTypes.default.string,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    weight: _propTypes.default.number
  })),
  listTitle: _propTypes.default.string,
  defaultToAll: _propTypes.default.bool,
  maxListItems: _propTypes.default.number,
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string,
  shouldSearchForImports: _propTypes.default.bool,
  searchQuery: _propTypes.default.string,
  setSearchQuery: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\searchable-item-list\\searchable-item-list.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\index.js", {"./select-quote-popover":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _selectQuotePopover.default;
  }
});
var _selectQuotePopover = _interopRequireDefault(require("./select-quote-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\index.js", {"./quote-details":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\quote-details.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Cquote-details%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _quoteDetails.default;
  }
});
var _quoteDetails = _interopRequireDefault(require("./quote-details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\quote-details\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\quote-details.js", {"../../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../exchange-rate-display":"F:\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Cquote-details%5Cquote-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../../contexts/i18n");
var _infoTooltip = _interopRequireDefault(require("../../../../components/ui/info-tooltip"));
var _exchangeRateDisplay = _interopRequireDefault(require("../../exchange-rate-display"));
var _selectors = require("../../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const QuoteDetails = ({
  slippage,
  sourceTokenValue,
  sourceTokenSymbol,
  destinationTokenValue,
  destinationTokenSymbol,
  liquiditySourceKey,
  minimumAmountReceived,
  feeInEth,
  networkFees,
  metaMaskFee,
  hideEstimatedGasFee
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapRate')), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, /*#__PURE__*/_react.default.createElement(_exchangeRateDisplay.default, {
    primaryTokenValue: sourceTokenValue,
    primaryTokenDecimals: 1,
    primaryTokenSymbol: sourceTokenSymbol,
    secondaryTokenValue: destinationTokenValue,
    secondaryTokenDecimals: 1,
    secondaryTokenSymbol: destinationTokenSymbol
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapMaxSlippage'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapSlippageTooltip')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, `${slippage}%`)), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapAmountReceived'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapAmountReceivedInfo')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, /*#__PURE__*/_react.default.createElement("span", null, minimumAmountReceived), /*#__PURE__*/_react.default.createElement("span", {
    className: "quote-details__bold"
  }, ` ${destinationTokenSymbol}`))), !hideEstimatedGasFee && /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapEstimatedNetworkFees'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapEstimatedNetworkFeesInfo')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, /*#__PURE__*/_react.default.createElement("span", null, feeInEth), /*#__PURE__*/_react.default.createElement("span", {
    className: "quote-details__light-grey"
  }, useCurrencyRateCheck && ` (${networkFees})`))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapSource'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapSourceInfo')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, t(liquiditySourceKey))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row quote-details__row--high"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/logo/metamask-fox.svg",
    className: "quote-details__metafox-logo",
    alt: ""
  }), t('swapMetaMaskFee')), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, t('swapMetaMaskFeeDescription', [metaMaskFee]))));
};
QuoteDetails.propTypes = {
  slippage: _propTypes.default.number.isRequired,
  sourceTokenValue: _propTypes.default.string.isRequired,
  sourceTokenSymbol: _propTypes.default.string.isRequired,
  destinationTokenValue: _propTypes.default.string.isRequired,
  destinationTokenSymbol: _propTypes.default.string.isRequired,
  liquiditySourceKey: _propTypes.default.string.isRequired,
  minimumAmountReceived: _propTypes.default.string.isRequired,
  feeInEth: _propTypes.default.string.isRequired,
  networkFees: _propTypes.default.string.isRequired,
  metaMaskFee: _propTypes.default.number.isRequired,
  hideEstimatedGasFee: _propTypes.default.bool
};
var _default = QuoteDetails;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\quote-details\\quote-details.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js", {"prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Cselect-quote-popover-constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QUOTE_DATA_ROWS_PROPTYPES_SHAPE = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const QUOTE_DATA_ROWS_PROPTYPES_SHAPE = _propTypes.default.shape({
  aggId: _propTypes.default.string.isRequired,
  amountReceiving: _propTypes.default.string.isRequired,
  destinationTokenDecimals: _propTypes.default.number.isRequired,
  destinationTokenSymbol: _propTypes.default.string.isRequired,
  destinationTokenValue: _propTypes.default.string.isRequired,
  isBestQuote: _propTypes.default.bool,
  networkFees: _propTypes.default.string.isRequired,
  quoteSource: _propTypes.default.string.isRequired,
  rawNetworkFees: _propTypes.default.string.isRequired,
  slippage: _propTypes.default.number.isRequired,
  sourceTokenDecimals: _propTypes.default.number.isRequired,
  sourceTokenSymbol: _propTypes.default.string.isRequired,
  sourceTokenValue: _propTypes.default.string.isRequired
});
exports.QUOTE_DATA_ROWS_PROPTYPES_SHAPE = QUOTE_DATA_ROWS_PROPTYPES_SHAPE;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover.js", {"../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/popover":"F:\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","./quote-details":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\index.js","./select-quote-popover-constants":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js","./sort-list":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Cselect-quote-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _popover = _interopRequireDefault(require("../../../components/ui/popover"));
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _quoteDetails = _interopRequireDefault(require("./quote-details"));
var _sortList = _interopRequireDefault(require("./sort-list"));
var _selectQuotePopoverConstants = require("./select-quote-popover-constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const SelectQuotePopover = ({
  quoteDataRows = [],
  onClose = null,
  onSubmit = null,
  swapToSymbol,
  initialAggId,
  onQuoteDetailsIsOpened,
  hideEstimatedGasFee
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [sortDirection, setSortDirection] = (0, _react.useState)(1);
  const [sortColumn, setSortColumn] = (0, _react.useState)(null);
  const [selectedAggId, setSelectedAggId] = (0, _react.useState)(initialAggId);
  const [contentView, setContentView] = (0, _react.useState)('sortList');
  const [viewingAgg, setViewingAgg] = (0, _react.useState)(null);
  const onSubmitClick = (0, _react.useCallback)(() => {
    onSubmit(selectedAggId);
    onClose();
  }, [selectedAggId, onClose, onSubmit]);
  const closeQuoteDetails = (0, _react.useCallback)(() => {
    setViewingAgg(null);
    setContentView('sortList');
  }, []);
  const onRowClick = (0, _react.useCallback)(aggId => setSelectedAggId(aggId), [setSelectedAggId]);
  const onCaretClick = (0, _react.useCallback)(aggId => {
    const agg = quoteDataRows.find(quote => quote.aggId === aggId);
    setContentView('quoteDetails');
    onQuoteDetailsIsOpened();
    setViewingAgg(agg);
  }, [quoteDataRows, onQuoteDetailsIsOpened]);
  const CustomBackground = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__popover-bg",
    onClick: onClose
  }), [onClose]);
  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "page-container__footer-button select-quote-popover__button",
    onClick: onClose
  }, t('close')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "page-container__footer-button select-quote-popover__button",
    onClick: onSubmitClick
  }, t('swapSelect')));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: contentView === 'quoteDetails' ? t('swapSelectAQuote') : t('swapQuoteDetails'),
    subtitle: contentView === 'sortList' ? t('swapSelectQuotePopoverDescription') : null,
    onClose: onClose,
    CustomBackground: CustomBackground,
    className: "select-quote-popover__popover-wrap",
    footerClassName: "swaps__footer",
    footer: contentView === 'quoteDetails' ? null : footer,
    onBack: contentView === 'quoteDetails' ? closeQuoteDetails : null
  }, contentView === 'sortList' && /*#__PURE__*/_react.default.createElement(_sortList.default, {
    quoteDataRows: quoteDataRows,
    selectedAggId: selectedAggId,
    onSelect: onRowClick,
    onCaretClick: onCaretClick,
    swapToSymbol: swapToSymbol,
    sortDirection: sortDirection,
    setSortDirection: setSortDirection,
    sortColumn: sortColumn,
    setSortColumn: setSortColumn,
    hideEstimatedGasFee: hideEstimatedGasFee
  }), contentView === 'quoteDetails' && viewingAgg && /*#__PURE__*/_react.default.createElement(_quoteDetails.default, _extends({}, viewingAgg, {
    hideEstimatedGasFee: hideEstimatedGasFee
  }))));
};
SelectQuotePopover.propTypes = {
  onClose: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  swapToSymbol: _propTypes.default.string,
  quoteDataRows: _propTypes.default.arrayOf(_selectQuotePopoverConstants.QUOTE_DATA_ROWS_PROPTYPES_SHAPE),
  initialAggId: _propTypes.default.string,
  onQuoteDetailsIsOpened: _propTypes.default.func,
  hideEstimatedGasFee: _propTypes.default.bool.isRequired
};
var _default = SelectQuotePopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\select-quote-popover.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\index.js", {"./sort-list":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\sort-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Csort-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _sortList.default;
  }
});
var _sortList = _interopRequireDefault(require("./sort-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\sort-list\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\sort-list.js", {"../../../../components/ui/icon/sun-check-icon.component":"F:\\metamask-extension\\ui\\components\\ui\\icon\\sun-check-icon.component.js","../../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../select-quote-popover-constants":"F:\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js","bignumber.js":"F:\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselect-quote-popover%5Csort-list%5Csort-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SortList;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _sunCheckIcon = _interopRequireDefault(require("../../../../components/ui/icon/sun-check-icon.component"));
var _i18n = require("../../../../contexts/i18n");
var _selectQuotePopoverConstants = require("../select-quote-popover-constants");
var _infoTooltip = _interopRequireDefault(require("../../../../components/ui/info-tooltip"));
var _selectors = require("../../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ToggleArrows = () => /*#__PURE__*/_react.default.createElement("svg", {
  width: "6",
  height: "9",
  viewBox: "0 0 6 9",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "M0.7948 4.96973C0.365112 4.96973 0.150269 5.47754 0.462769 5.77051L2.78699 8.09473C2.96277 8.29004 3.25574 8.29004 3.45105 8.09473L5.77527 5.77051C6.06824 5.47754 5.85339 4.96973 5.44324 4.96973H0.7948ZM5.77527 2.91895L3.45105 0.594727C3.25574 0.418945 2.96277 0.418945 2.78699 0.594727L0.462769 2.91895C0.150269 3.23145 0.365112 3.71973 0.7948 3.71973H5.44324C5.85339 3.71973 6.06824 3.23145 5.77527 2.91895Z",
  fill: "var(--color-primary-default)"
}));
function SortList({
  quoteDataRows,
  selectedAggId,
  onSelect,
  onCaretClick,
  swapToSymbol,
  sortDirection,
  setSortDirection,
  sortColumn = null,
  setSortColumn,
  hideEstimatedGasFee
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [noRowHover, setRowNowHover] = (0, _react.useState)(false);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  const onColumnHeaderClick = nextSortColumn => {
    if (nextSortColumn === sortColumn) {
      setSortDirection(sortDirection * -1);
    } else {
      setSortColumn(nextSortColumn);
    }
  };

  // This sort aims to do the following:
  // If there is no selected sort column, then the best quotes should be first in the list
  // If there is no selected sort column, then quotes that are not the best quotes should be in random order, after the first in the list
  // If the sort column is 'quoteSource', sort alphabetically by 'quoteSource'
  // Otherwise, sort in either ascending or descending numerical order on the selected column
  const sortedRows = (0, _react.useMemo)(() => {
    return [...quoteDataRows].sort((rowDataA, rowDataB) => {
      if (sortColumn === null && rowDataA.isBestQuote) {
        return -1;
      } else if (sortColumn === null && rowDataB.isBestQuote) {
        return 1;
      } else if (sortColumn === null) {
        // Here, the last character in the destinationTokenValue is used as a source of randomness for sorting
        const aHex = new _bignumber.default(rowDataA.destinationTokenValue).toString(16);
        const bHex = new _bignumber.default(rowDataB.destinationTokenValue).toString(16);
        return aHex[aHex.length - 1] < bHex[bHex.length - 1] ? -1 : 1;
      } else if (sortColumn === 'quoteSource') {
        return rowDataA[sortColumn] > rowDataB[sortColumn] ? sortDirection * -1 : sortDirection;
      }
      return new _bignumber.default(rowDataA[sortColumn]).gt(rowDataB[sortColumn]) ? sortDirection * -1 : sortDirection;
    });
  }, [quoteDataRows, sortColumn, sortDirection]);
  const selectedRow = sortedRows.findIndex(({
    aggId
  }) => selectedAggId === aggId);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__sort-list"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-headers"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-header select-quote-popover__receiving",
    "data-testid": "select-quote-popover__receiving",
    onClick: () => onColumnHeaderClick('destinationTokenValue')
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "select-quote-popover__receiving-symbol"
  }, swapToSymbol), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving-label"
  }, /*#__PURE__*/_react.default.createElement("span", null, t('swapReceiving')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapReceivingInfoTooltip')
  }), /*#__PURE__*/_react.default.createElement(ToggleArrows, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-header select-quote-popover__network-fees select-quote-popover__network-fees-header",
    "data-testid": "select-quote-popover__network-fees-header",
    onClick: () => onColumnHeaderClick('rawNetworkFees')
  }, !hideEstimatedGasFee && useCurrencyRateCheck && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, t('swapEstimatedNetworkFees')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapEstimatedNetworkFeesInfo')
  }), /*#__PURE__*/_react.default.createElement(ToggleArrows, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-header select-quote-popover__quote-source",
    "data-testid": "select-quote-popover__quote-source",
    onClick: () => onColumnHeaderClick('quoteSource')
  }, t('swapQuoteSource'), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__quote-source-toggle"
  }, /*#__PURE__*/_react.default.createElement(ToggleArrows, null)))), sortedRows.map(({
    destinationTokenValue,
    networkFees,
    isBestQuote,
    quoteSource,
    aggId
  }, i) => /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('select-quote-popover__row', {
      'select-quote-popover__row--selected': selectedRow === i,
      'select-quote-popover__row--no-hover': noRowHover
    }),
    onClick: () => onSelect(aggId),
    key: `select-quote-popover-row-${i}`,
    "data-testid": `select-quote-popover-row-${i}`
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving-value"
  }, isBestQuote && /*#__PURE__*/_react.default.createElement(_sunCheckIcon.default, {
    reverseColors: selectedRow !== i
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving-value-text",
    title: destinationTokenValue
  }, destinationTokenValue)), quoteSource === 'RFQ' && /*#__PURE__*/_react.default.createElement("span", {
    className: "select-quote-popover__zero-slippage"
  }, t('swapZeroSlippage'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__network-fees"
  }, !hideEstimatedGasFee && useCurrencyRateCheck && networkFees), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__quote-source"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('select-quote-popover__quote-source-label', {
      'select-quote-popover__quote-source-label--green': quoteSource === 'AGG',
      'select-quote-popover__quote-source-label--orange': quoteSource === 'RFQ',
      'select-quote-popover__quote-source-label--blue': quoteSource === 'DEX'
    })
  }, quoteSource)), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__caret-right",
    "data-testid": `select-quote-popover__caret-right-${i}`,
    onClick: event => {
      event.stopPropagation();
      onCaretClick(aggId);
    },
    onMouseEnter: () => setRowNowHover(true),
    onMouseLeave: () => setRowNowHover(false)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-up"
  })))));
}
SortList.propTypes = {
  selectedAggId: _propTypes.default.string.isRequired,
  onSelect: _propTypes.default.func.isRequired,
  onCaretClick: _propTypes.default.func.isRequired,
  swapToSymbol: _propTypes.default.string.isRequired,
  quoteDataRows: _propTypes.default.arrayOf(_selectQuotePopoverConstants.QUOTE_DATA_ROWS_PROPTYPES_SHAPE).isRequired,
  sortDirection: _propTypes.default.number.isRequired,
  setSortDirection: _propTypes.default.func.isRequired,
  sortColumn: _propTypes.default.string,
  setSortColumn: _propTypes.default.func.isRequired,
  hideEstimatedGasFee: _propTypes.default.bool.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\select-quote-popover\\sort-list\\sort-list.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\selected-token\\selected-token.js", {"../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cselected-token%5Cselected-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SelectedToken;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _componentLibrary = require("../../../components/component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));
var _i18n = require("../../../contexts/i18n");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SelectedToken({
  onClick,
  onClose,
  selectedToken,
  testId
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const hasIcon = (selectedToken === null || selectedToken === void 0 ? void 0 : selectedToken.iconUrl) && (selectedToken === null || selectedToken === void 0 ? void 0 : selectedToken.symbol);
  const onKeyUp = e => {
    if (e.key === 'Escape') {
      onClose();
    } else if (e.key === 'Enter') {
      onClick(e);
    }
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-search-list', 'dropdown-search-list__selector-closed-container', 'dropdown-input-pair__selector--closed'),
    "data-testid": "dropdown-search-list",
    tabIndex: "0",
    onClick: onClick,
    onKeyUp: onKeyUp
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__selector-closed"
  }, hasIcon && /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: selectedToken.iconUrl,
    className: "dropdown-search-list__selector-closed-icon",
    name: selectedToken === null || selectedToken === void 0 ? void 0 : selectedToken.symbol
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-search-list__labels', {
      'dropdown-search-list__labels--with-icon': hasIcon
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__item-labels"
  }, /*#__PURE__*/_react.default.createElement("span", {
    "data-testid": testId,
    className: (0, _classnames.default)('dropdown-search-list__closed-primary-label', {
      'dropdown-search-list__select-default': !(selectedToken !== null && selectedToken !== void 0 && selectedToken.symbol)
    })
  }, (selectedToken === null || selectedToken === void 0 ? void 0 : selectedToken.symbol) || t('swapSelectAToken'))))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowDown,
    size: _componentLibrary.IconSize.Xs,
    marginRight: 3,
    color: _designSystem.IconColor.iconAlternative
  }));
}
SelectedToken.propTypes = {
  onClick: _propTypes.default.func.isRequired,
  onClose: _propTypes.default.func.isRequired,
  selectedToken: _propTypes.default.object.isRequired,
  testId: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\selected-token\\selected-token.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\index.js", {"./slippage-buttons":"F:\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\slippage-buttons.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cslippage-buttons%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _slippageButtons.default;
  }
});
var _slippageButtons = _interopRequireDefault(require("./slippage-buttons"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\slippage-buttons\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\slippage-buttons.js", {"../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"F:\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/button-group":"F:\\metamask-extension\\ui\\components\\ui\\button-group\\index.js","../../../components/ui/info-tooltip":"F:\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../components/ui/toggle-button":"F:\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cslippage-buttons%5Cslippage-buttons.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SlippageButtons;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../../contexts/i18n");
var _buttonGroup = _interopRequireDefault(require("../../../components/ui/button-group"));
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));
var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _swaps = require("../swaps.util");
var _swaps2 = require("../../../../shared/constants/swaps");
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SlippageButtons({
  onSelect,
  maxAllowedSlippage,
  currentSlippage,
  smartTransactionsEnabled,
  smartTransactionsOptInStatus,
  setSmartTransactionsOptInStatus,
  currentSmartTransactionsError,
  isDirectWrappingEnabled
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [customValue, setCustomValue] = (0, _react.useState)(() => {
    if (typeof currentSlippage === 'number' && !Object.values(_swaps2.Slippage).includes(currentSlippage)) {
      return currentSlippage.toString();
    }
    return '';
  });
  const [enteringCustomValue, setEnteringCustomValue] = (0, _react.useState)(false);
  const [activeButtonIndex, setActiveButtonIndex] = (0, _react.useState)(() => {
    if (currentSlippage === _swaps2.Slippage.high) {
      return 1; // 3% slippage.
    } else if (currentSlippage === _swaps2.Slippage.default) {
      return 0; // 2% slippage.
    } else if (typeof currentSlippage === 'number') {
      return 2; // Custom slippage.
    }

    return 0;
  });
  const [open, setOpen] = (0, _react.useState)(() => {
    return currentSlippage !== _swaps2.Slippage.default; // Only open Advanced options by default if it's not default slippage.
  });

  const [inputRef, setInputRef] = (0, _react.useState)(null);
  let errorText = '';
  if (customValue) {
    // customValue is a string, e.g. '0'
    if (Number(customValue) < 0) {
      errorText = t('swapSlippageNegative');
    } else if (Number(customValue) > 0 && Number(customValue) <= 1) {
      // We will not show this warning for 0% slippage, because we will only
      // return non-slippage quotes from off-chain makers.
      errorText = t('swapLowSlippageError');
    } else if (Number(customValue) >= 5 && Number(customValue) <= maxAllowedSlippage) {
      errorText = t('swapHighSlippageWarning');
    } else if (Number(customValue) > maxAllowedSlippage) {
      errorText = t('swapsExcessiveSlippageWarning');
    }
  }
  const customValueText = customValue || t('swapCustom');
  (0, _react.useEffect)(() => {
    if (inputRef && enteringCustomValue && window.document.activeElement !== inputRef) {
      inputRef.focus();
    }
  }, [inputRef, enteringCustomValue]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => setOpen(!open),
    className: (0, _classnames.default)('slippage-buttons__header', {
      'slippage-buttons__header--open': open
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__header-text"
  }, t('swapsAdvancedOptions')), open ? /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-up"
  }) : /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-down"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__content"
  }, open && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !isDirectWrappingEnabled && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__dropdown-content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__buttons-prefix"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__prefix-text"
  }, t('swapsMaxSlippage')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapSlippageTooltip')
  })), /*#__PURE__*/_react.default.createElement(_buttonGroup.default, {
    defaultActiveButtonIndex: activeButtonIndex === 2 && !customValue ? 1 : activeButtonIndex,
    variant: "radiogroup",
    newActiveButtonIndex: activeButtonIndex,
    className: (0, _classnames.default)('button-group', 'slippage-buttons__button-group')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(0);
      onSelect(_swaps2.Slippage.default);
    }
  }, t('swapSlippagePercent', [_swaps2.Slippage.default])), /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(1);
      onSelect(_swaps2.Slippage.high);
    }
  }, t('swapSlippagePercent', [_swaps2.Slippage.high])), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: (0, _classnames.default)('slippage-buttons__button-group-custom-button', {
      'radio-button--danger': errorText
    }),
    onClick: () => {
      setActiveButtonIndex(2);
      setEnteringCustomValue(true);
    }
  }, enteringCustomValue ? /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('slippage-buttons__custom-input', {
      'slippage-buttons__custom-input--danger': errorText
    })
  }, /*#__PURE__*/_react.default.createElement("input", {
    "data-testid": "slippage-buttons__custom-slippage",
    onChange: event => {
      const {
        value
      } = event.target;
      const isValueNumeric = !isNaN(Number(value));
      if (isValueNumeric) {
        setCustomValue(value);
        onSelect(Number(value));
      }
    },
    type: "text",
    maxLength: "4",
    ref: setInputRef,
    onBlur: () => {
      setEnteringCustomValue(false);
    },
    value: customValue || ''
  })) : customValueText, (customValue || enteringCustomValue) && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__percentage-suffix"
  }, "%")))), smartTransactionsEnabled && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2,
    display: _designSystem.Display.Flex
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.Display.Flex,
    alignItems: _designSystem.AlignItems.center,
    paddingRight: 3
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    paddingRight: 2,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('smartSwap')), currentSmartTransactionsError ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: (0, _swaps.getTranslatedStxErrorMessage)(currentSmartTransactionsError, t)
  }) : /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('stxTooltip')
  })), /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
    value: smartTransactionsOptInStatus,
    onToggle: value => {
      setSmartTransactionsOptInStatus(!value, value);
    },
    offLabel: t('off'),
    onLabel: t('on'),
    disabled: Boolean(currentSmartTransactionsError)
  }))), errorText && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__error-text"
  }, errorText)));
}
SlippageButtons.propTypes = {
  onSelect: _propTypes.default.func.isRequired,
  maxAllowedSlippage: _propTypes.default.number.isRequired,
  currentSlippage: _propTypes.default.number,
  smartTransactionsEnabled: _propTypes.default.bool.isRequired,
  smartTransactionsOptInStatus: _propTypes.default.bool,
  setSmartTransactionsOptInStatus: _propTypes.default.func,
  currentSmartTransactionsError: _propTypes.default.string,
  isDirectWrappingEnabled: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\slippage-buttons\\slippage-buttons.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\arrow-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Carrow-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ArrowIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ArrowIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "15",
    height: "13",
    viewBox: "0 0 15 13",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M14.4946 6.14779C14.4863 5.93594 14.3991 5.69108 14.2539 5.53666L9.51334 0.49958C9.1921 0.21091 8.57613 0.0917437 8.21709 0.425509C7.86344 0.754237 7.87396 1.39178 8.22627 1.72181L11.5595 5.25889L1.1618 5.25889C0.670919 5.25889 0.272949 5.65687 0.272949 6.14779C0.272949 6.6387 0.670919 7.03668 1.1618 7.03668L11.5595 7.03668L8.22627 10.5738C7.92297 10.8776 7.86691 11.5376 8.21709 11.8701C8.56718 12.2025 9.20529 12.0963 9.51334 11.796L14.2539 6.75891C14.4161 6.58653 14.4952 6.38428 14.4946 6.14779Z",
    fill: "#D6D9DC"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\arrow-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\canceled-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Ccanceled-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CanceledIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function CanceledIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "41",
    height: "39",
    viewBox: "0 0 41 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.5805 6.55143C36.1394 8.11033 37.3994 9.91222 38.3237 11.8681C38.7066 12.6782 39.0318 13.5148 39.2968 14.3714L39.3242 14.4606C39.4816 14.9785 39.6171 15.5037 39.73 16.0347C40.6511 20.3654 40.0335 24.9029 37.9511 28.8509C35.6001 33.308 31.5749 36.6487 26.7609 38.138C24.3773 38.8754 21.8717 39.1361 19.3873 38.9052C16.9029 38.6743 14.4883 37.9563 12.2813 36.7922C10.2608 35.7264 8.52045 34.3588 7.08333 32.7636C5.61245 31.1448 4.43054 29.2824 3.59178 27.2574C3.32329 26.6092 2.89685 25.2767 2.89685 25.2767H6.89583C7.68667 27.4068 8.96033 29.362 10.6288 30.9609L10.6318 30.96C11.5096 31.8005 12.501 32.5516 13.595 33.1786C15.8742 34.483 18.4736 35.1864 21.1455 35.1864C25.1768 35.1864 29.0429 33.585 31.8935 30.7345C34.744 27.8839 36.3455 24.0177 36.3455 19.9865C36.3455 18.7267 36.1891 17.483 35.8871 16.2814C35.8206 16.017 35.7471 15.7546 35.6666 15.4945C34.4752 11.6432 31.8027 8.42306 28.237 6.54231C24.6713 4.66156 20.5045 4.27429 16.6533 5.46571C12.8837 6.63189 9.71868 9.21706 7.82253 12.6699L12.8961 15.307L3.28331 18.3447L0.245605 8.73191L4.45005 10.9171C6.81537 6.56278 10.7905 3.30177 15.5303 1.83546C17.3658 1.26761 19.2587 0.986653 21.1455 0.986694C26.1846 0.986694 31.0173 2.98824 34.5805 6.55143Z",
    fill: "var(--color-primary-default)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M18.1252 22.1036L14.7107 18.689L12.0926 21.3257L18.1252 27.3584L30.2322 15.2515L27.614 12.6148L18.1252 22.1036Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\canceled-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\index.js", {"./smart-transaction-status":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\smart-transaction-status.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _smartTransactionStatus.default;
  }
});
var _smartTransactionStatus = _interopRequireDefault(require("./smart-transaction-status"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\reverted-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Creverted-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RevertedIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function RevertedIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "41",
    height: "39",
    viewBox: "0 0 41 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.6806 6.55143C36.2395 8.11033 37.4995 9.91222 38.4238 11.8681C38.8067 12.6782 39.1319 13.5148 39.3969 14.3714L39.4243 14.4606C39.5817 14.9785 39.7172 15.5037 39.8301 16.0347C40.7512 20.3654 40.1336 24.9029 38.0512 28.8509C35.7002 33.308 31.675 36.6487 26.861 38.138C24.4773 38.8754 21.9718 39.1361 19.4874 38.9052C17.003 38.6743 14.5884 37.9563 12.3814 36.7922C10.3609 35.7264 8.62055 34.3588 7.18343 32.7636C5.71254 31.1448 4.53064 29.2824 3.69188 27.2574C3.42339 26.6092 2.99695 25.2767 2.99695 25.2767H6.99592C7.78677 27.4068 9.06042 29.362 10.7289 30.9609L10.7319 30.96C11.6097 31.8005 12.6011 32.5516 13.6951 33.1786C15.9743 34.483 18.5737 35.1864 21.2456 35.1864C25.2769 35.1864 29.143 33.585 31.9936 30.7345C34.8441 27.8839 36.4456 24.0177 36.4456 19.9865C36.4456 18.7267 36.2892 17.483 35.9872 16.2814C35.9207 16.017 35.8471 15.7546 35.7667 15.4945C34.5753 11.6432 31.9028 8.42306 28.3371 6.54231C24.7714 4.66156 20.6046 4.27429 16.7534 5.46571C12.9838 6.63189 9.81878 9.21706 7.92263 12.6699L12.9962 15.307L3.3834 18.3447L0.345703 8.73191L4.55015 10.9171C6.91547 6.56278 10.8906 3.30177 15.6304 1.83546C17.4659 1.26761 19.3588 0.986653 21.2456 0.986694C26.2847 0.986694 31.1174 2.98824 34.6806 6.55143Z",
    fill: "#D73A49"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M18.5849 19.9869L15.1454 23.4264L17.9845 26.2655L21.424 22.826L24.8635 26.2655L27.7026 23.4264L24.2631 19.9869L27.7026 16.5473L24.8635 13.7082L21.424 17.1478L17.9845 13.7082L15.1454 16.5473L18.5849 19.9869Z",
    fill: "#D73A49"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\reverted-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\smart-transaction-status.js", {"../../../../shared/constants/metametrics":"F:\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/constants/transaction":"F:\\metamask-extension\\shared\\constants\\transaction.ts","../../../../shared/lib/transactions-controller-utils":"F:\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/url-icon":"F:\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"F:\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"F:\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"F:\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors":"F:\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"F:\\metamask-extension\\ui\\store\\actions.ts","../create-new-swap":"F:\\metamask-extension\\ui\\pages\\swaps\\create-new-swap\\index.js","../swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","../view-on-block-explorer":"F:\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\index.js","./arrow-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\arrow-icon.js","./canceled-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\canceled-icon.js","./reverted-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\reverted-icon.js","./success-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\success-icon.js","./timer-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\timer-icon.js","./unknown-icon":"F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\unknown-icon.js","@metamask/etherscan-link":"F:\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","lodash":"F:\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"F:\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Csmart-transaction-status.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SmartTransactionStatusPage;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _etherscanLink = require("@metamask/etherscan-link");
var _lodash = require("lodash");
var _i18n = require("../../../contexts/i18n");
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors");
var _swaps2 = require("../../../../shared/constants/swaps");
var _metamask = require("../../../ducks/metamask/metamask");
var _routes = require("../../../helpers/constants/routes");
var _componentLibrary = require("../../../components/component-library");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));
var _designSystem = require("../../../helpers/constants/design-system");
var _actions = require("../../../store/actions");
var _metametrics = require("../../../../shared/constants/metametrics");
var _transaction = require("../../../../shared/constants/transaction");
var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));
var _swaps3 = require("../swaps.util");
var _metametrics2 = require("../../../contexts/metametrics");
var _createNewSwap = _interopRequireDefault(require("../create-new-swap"));
var _viewOnBlockExplorer = _interopRequireDefault(require("../view-on-block-explorer"));
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _successIcon = _interopRequireDefault(require("./success-icon"));
var _revertedIcon = _interopRequireDefault(require("./reverted-icon"));
var _canceledIcon = _interopRequireDefault(require("./canceled-icon"));
var _unknownIcon = _interopRequireDefault(require("./unknown-icon"));
var _arrowIcon = _interopRequireDefault(require("./arrow-icon"));
var _timerIcon = _interopRequireDefault(require("./timer-icon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SmartTransactionStatusPage() {
  var _latestSmartTransacti5, _latestSmartTransacti6, _latestSmartTransacti7, _latestSmartTransacti9, _latestSmartTransacti10, _latestSmartTransacti13, _latestSmartTransacti14, _latestSmartTransacti15, _latestSmartTransacti16, _latestSmartTransacti17, _latestSmartTransacti18;
  const [cancelSwapLinkClicked, setCancelSwapLinkClicked] = (0, _react.useState)(false);
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual) || {};
  const {
    destinationTokenInfo: fetchParamsDestinationTokenInfo = {},
    sourceTokenInfo: fetchParamsSourceTokenInfo = {}
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const needsTwoConfirmations = true;
  const selectedQuote = (0, _reactRedux.useSelector)(_swaps.getSelectedQuote, _lodash.isEqual);
  const topQuote = (0, _reactRedux.useSelector)(_swaps.getTopQuote, _lodash.isEqual);
  const usedQuote = selectedQuote || topQuote;
  const currentSmartTransactions = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactions, _lodash.isEqual);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider, _reactRedux.shallowEqual);
  const swapsNetworkConfig = (0, _reactRedux.useSelector)(_swaps.getSwapsNetworkConfig, _reactRedux.shallowEqual);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const baseNetworkUrl = rpcPrefs.blockExplorerUrl ?? _swaps2.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null;
  const nativeCurrencySymbol = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_selectors.conversionRateSelector);
  const USDConversionRate = (0, _reactRedux.useSelector)(_selectors.getUSDConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  let smartTransactionStatus = _transaction.SmartTransactionStatus.pending;
  let latestSmartTransaction = {};
  let latestSmartTransactionUuid;
  let cancellationFeeWei;
  if (currentSmartTransactions && currentSmartTransactions.length > 0) {
    var _latestSmartTransacti, _latestSmartTransacti2, _latestSmartTransacti3, _latestSmartTransacti4;
    latestSmartTransaction = currentSmartTransactions[currentSmartTransactions.length - 1];
    latestSmartTransactionUuid = (_latestSmartTransacti = latestSmartTransaction) === null || _latestSmartTransacti === void 0 ? void 0 : _latestSmartTransacti.uuid;
    smartTransactionStatus = ((_latestSmartTransacti2 = latestSmartTransaction) === null || _latestSmartTransacti2 === void 0 ? void 0 : _latestSmartTransacti2.status) || _transaction.SmartTransactionStatus.pending;
    cancellationFeeWei = (_latestSmartTransacti3 = latestSmartTransaction) === null || _latestSmartTransacti3 === void 0 ? void 0 : (_latestSmartTransacti4 = _latestSmartTransacti3.statusMetadata) === null || _latestSmartTransacti4 === void 0 ? void 0 : _latestSmartTransacti4.cancellationFeeWei;
  }
  const [timeLeftForPendingStxInSec, setTimeLeftForPendingStxInSec] = (0, _react.useState)(swapsNetworkConfig.stxStatusDeadline);
  const sensitiveProperties = {
    needs_two_confirmations: needsTwoConfirmations,
    token_from: fetchParamsSourceTokenInfo.symbol ?? ((_latestSmartTransacti5 = latestSmartTransaction) === null || _latestSmartTransacti5 === void 0 ? void 0 : _latestSmartTransacti5.sourceTokenSymbol),
    token_from_amount: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value) ?? ((_latestSmartTransacti6 = latestSmartTransaction) === null || _latestSmartTransacti6 === void 0 ? void 0 : _latestSmartTransacti6.swapTokenValue),
    token_to: fetchParamsDestinationTokenInfo.symbol ?? ((_latestSmartTransacti7 = latestSmartTransaction) === null || _latestSmartTransacti7 === void 0 ? void 0 : _latestSmartTransacti7.destinationTokenSymbol),
    request_type: fetchParams !== null && fetchParams !== void 0 && fetchParams.balanceError ? 'Quote' : 'Order',
    slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
    custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) === 2,
    is_hardware_wallet: hardwareWalletUsed,
    hardware_wallet_type: hardwareWalletType,
    stx_enabled: smartTransactionsEnabled,
    current_stx_enabled: currentSmartTransactionsEnabled,
    stx_user_opt_in: smartTransactionsOptInStatus
  };
  let destinationValue;
  if (usedQuote !== null && usedQuote !== void 0 && usedQuote.destinationAmount) {
    var _latestSmartTransacti8;
    destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.destinationAmount, fetchParamsDestinationTokenInfo.decimals ?? ((_latestSmartTransacti8 = latestSmartTransaction) === null || _latestSmartTransacti8 === void 0 ? void 0 : _latestSmartTransacti8.destinationTokenDecimals)).toPrecision(8);
  }
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const isSmartTransactionPending = smartTransactionStatus === _transaction.SmartTransactionStatus.pending;
  const showCloseButtonOnly = isSmartTransactionPending || smartTransactionStatus === _transaction.SmartTransactionStatus.success;
  const txHash = (_latestSmartTransacti9 = latestSmartTransaction) === null || _latestSmartTransacti9 === void 0 ? void 0 : (_latestSmartTransacti10 = _latestSmartTransacti9.statusMetadata) === null || _latestSmartTransacti10 === void 0 ? void 0 : _latestSmartTransacti10.minedHash;
  (0, _react.useEffect)(() => {
    trackEvent({
      event: 'STX Status Page Loaded',
      category: _metametrics.MetaMetricsEventCategory.Swaps,
      sensitiveProperties
    });
    // eslint-disable-next-line
  }, []);
  (0, _react.useEffect)(() => {
    let intervalId;
    if (isSmartTransactionPending && latestSmartTransactionUuid) {
      const calculateRemainingTime = () => {
        const secondsAfterStxSubmission = Math.round((Date.now() - latestSmartTransaction.time) / 1000);
        if (secondsAfterStxSubmission > swapsNetworkConfig.stxStatusDeadline) {
          setTimeLeftForPendingStxInSec(0);
          clearInterval(intervalId);
          return;
        }
        setTimeLeftForPendingStxInSec(swapsNetworkConfig.stxStatusDeadline - secondsAfterStxSubmission);
      };
      intervalId = setInterval(calculateRemainingTime, 1000);
      calculateRemainingTime();
    }
    return () => clearInterval(intervalId);
  }, [dispatch, isSmartTransactionPending, latestSmartTransactionUuid, latestSmartTransaction.time, swapsNetworkConfig.stxStatusDeadline]);
  (0, _react.useEffect)(() => {
    dispatch((0, _actions.setBackgroundSwapRouteState)('smartTransactionStatus'));
    setTimeout(() => {
      // We don't need to poll for quotes on the status page.
      dispatch((0, _actions.stopPollingForQuotes)());
    }, 1000); // Stop polling for quotes after 1s.
  }, [dispatch]);
  let headerText = t('stxPendingPrivatelySubmittingSwap');
  let description;
  let subDescription;
  let icon;
  let blockExplorerUrl;
  if (isSmartTransactionPending) {
    if (cancelSwapLinkClicked) {
      headerText = t('stxTryingToCancel');
    } else if (cancellationFeeWei > 0) {
      headerText = t('stxPendingPubliclySubmittingSwap');
    }
  }
  if (smartTransactionStatus === _transaction.SmartTransactionStatus.success) {
    var _latestSmartTransacti11;
    headerText = t('stxSuccess');
    if (fetchParamsDestinationTokenInfo.symbol || (_latestSmartTransacti11 = latestSmartTransaction) !== null && _latestSmartTransacti11 !== void 0 && _latestSmartTransacti11.destinationTokenSymbol) {
      var _latestSmartTransacti12;
      description = t('stxSuccessDescription', [fetchParamsDestinationTokenInfo.symbol ?? ((_latestSmartTransacti12 = latestSmartTransaction) === null || _latestSmartTransacti12 === void 0 ? void 0 : _latestSmartTransacti12.destinationTokenSymbol)]);
    }
    icon = /*#__PURE__*/_react.default.createElement(_successIcon.default, null);
  } else if (smartTransactionStatus === 'cancelled_user_cancelled' || ((_latestSmartTransacti13 = latestSmartTransaction) === null || _latestSmartTransacti13 === void 0 ? void 0 : (_latestSmartTransacti14 = _latestSmartTransacti13.statusMetadata) === null || _latestSmartTransacti14 === void 0 ? void 0 : _latestSmartTransacti14.minedTx) === _transaction.SmartTransactionStatus.cancelled) {
    headerText = t('stxUserCancelled');
    description = t('stxUserCancelledDescription');
    icon = /*#__PURE__*/_react.default.createElement(_canceledIcon.default, null);
  } else if (smartTransactionStatus.startsWith('cancelled') || smartTransactionStatus.includes('deadline_missed')) {
    headerText = t('stxCancelled');
    description = t('stxCancelledDescription');
    subDescription = t('stxCancelledSubDescription');
    icon = /*#__PURE__*/_react.default.createElement(_canceledIcon.default, null);
  } else if (smartTransactionStatus === 'unknown') {
    headerText = t('stxUnknown');
    description = t('stxUnknownDescription');
    icon = /*#__PURE__*/_react.default.createElement(_unknownIcon.default, null);
  } else if (smartTransactionStatus === 'reverted') {
    headerText = t('stxFailure');
    description = t('stxFailureDescription', [/*#__PURE__*/_react.default.createElement("a", {
      className: "smart-transaction-status__support-link",
      key: "smart-transaction-status-support-link",
      href: "https://support.metamask.io",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('customerSupport'))]);
    icon = /*#__PURE__*/_react.default.createElement(_revertedIcon.default, null);
  }
  if (txHash && latestSmartTransactionUuid) {
    blockExplorerUrl = (0, _etherscanLink.getBlockExplorerLink)({
      hash: txHash,
      chainId
    }, {
      blockExplorerUrl: baseNetworkUrl
    });
  }
  const showCancelSwapLink = latestSmartTransaction.cancellable && !cancelSwapLinkClicked;
  const CancelSwap = () => {
    const {
      feeInFiat
    } = (0, _swaps3.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: cancellationFeeWei || 0
    });
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      marginBottom: 0
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "smart-transaction-status__cancel-swap-link",
      href: "#",
      onClick: e => {
        e === null || e === void 0 ? void 0 : e.preventDefault();
        setCancelSwapLinkClicked(true); // We want to hide it after a user clicks on it.
        trackEvent({
          event: 'Cancel STX',
          category: _metametrics.MetaMetricsEventCategory.Swaps,
          sensitiveProperties
        });
        dispatch((0, _swaps.cancelSwapsSmartTransaction)(latestSmartTransactionUuid));
      }
    }, t('attemptToCancelSwap', [feeInFiat])));
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "smart-transaction-status"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 8,
    paddingRight: 8,
    height: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JustifyContent.flexStart,
    display: _designSystem.DISPLAY.FLEX,
    className: "smart-transaction-status__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 10,
    marginBottom: 0,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, `${(fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value) && Number(fetchParams.value).toFixed(5)} `), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginLeft: 1,
    marginRight: 2
  }, fetchParamsSourceTokenInfo.symbol ?? ((_latestSmartTransacti15 = latestSmartTransaction) === null || _latestSmartTransacti15 === void 0 ? void 0 : _latestSmartTransacti15.sourceTokenSymbol)), fetchParamsSourceTokenInfo.iconUrl ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: fetchParamsSourceTokenInfo.iconUrl,
    className: "main-quote-summary__icon",
    name: fetchParamsSourceTokenInfo.symbol ?? ((_latestSmartTransacti16 = latestSmartTransaction) === null || _latestSmartTransacti16 === void 0 ? void 0 : _latestSmartTransacti16.destinationTokenSymbol),
    fallbackClassName: "main-quote-summary__icon-fallback"
  }) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.BLOCK,
    marginLeft: 2,
    marginRight: 2
  }, /*#__PURE__*/_react.default.createElement(_arrowIcon.default, null)), fetchParamsDestinationTokenInfo.iconUrl ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: fetchParamsDestinationTokenInfo.iconUrl,
    className: "main-quote-summary__icon",
    name: fetchParamsDestinationTokenInfo.symbol ?? ((_latestSmartTransacti17 = latestSmartTransaction) === null || _latestSmartTransacti17 === void 0 ? void 0 : _latestSmartTransacti17.destinationTokenSymbol),
    fallbackClassName: "main-quote-summary__icon-fallback"
  }) : null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginLeft: 2
  }, `~${destinationValue && Number(destinationValue).toFixed(5)} `), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginLeft: 1
  }, fetchParamsDestinationTokenInfo.symbol ?? ((_latestSmartTransacti18 = latestSmartTransaction) === null || _latestSmartTransacti18 === void 0 ? void 0 : _latestSmartTransacti18.destinationTokenSymbol))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    className: "smart-transaction-status__background-animation smart-transaction-status__background-animation--top"
  }), icon && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    marginBottom: 2
  }, icon), isSmartTransactionPending && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 7,
    marginBottom: 1,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_timerIcon.default, null), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginLeft: 1
  }, `${t('stxSwapCompleteIn')} `), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginLeft: 1,
    className: "smart-transaction-status__remaining-time"
  }, (0, _swaps3.showRemainingTimeInMinAndSec)(timeLeftForPendingStxInSec))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FontWeight.Bold
  }, headerText), isSmartTransactionPending && /*#__PURE__*/_react.default.createElement("div", {
    className: "smart-transaction-status__loading-bar-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "smart-transaction-status__loading-bar",
    style: {
      width: `${100 / swapsNetworkConfig.stxStatusDeadline * (swapsNetworkConfig.stxStatusDeadline - timeLeftForPendingStxInSec)}%`
    }
  })), description && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginTop: blockExplorerUrl && 1,
    color: _designSystem.TextColor.textAlternative
  }, description), blockExplorerUrl && /*#__PURE__*/_react.default.createElement(_viewOnBlockExplorer.default, {
    blockExplorerUrl: blockExplorerUrl,
    sensitiveTrackingProperties: sensitiveProperties
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    className: "smart-transaction-status__background-animation smart-transaction-status__background-animation--bottom"
  }), subDescription && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginTop: 8,
    color: _designSystem.TextColor.textAlternative
  }, subDescription)), showCancelSwapLink && latestSmartTransactionUuid && isSmartTransactionPending && /*#__PURE__*/_react.default.createElement(CancelSwap, null), smartTransactionStatus === _transaction.SmartTransactionStatus.success ? /*#__PURE__*/_react.default.createElement(_createNewSwap.default, {
    sensitiveTrackingProperties: sensitiveProperties
  }) : null, /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: async () => {
      if (showCloseButtonOnly) {
        await dispatch((0, _swaps.prepareToLeaveSwaps)());
        history.push(_routes.DEFAULT_ROUTE);
      } else {
        history.push(_routes.BUILD_QUOTE_ROUTE);
      }
    },
    onCancel: async () => {
      await dispatch((0, _swaps.prepareToLeaveSwaps)());
      history.push(_routes.DEFAULT_ROUTE);
    },
    submitText: showCloseButtonOnly ? t('close') : t('tryAgain'),
    hideCancel: showCloseButtonOnly,
    cancelText: t('close'),
    className: "smart-transaction-status__swaps-footer"
  }));
}


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\smart-transaction-status.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\success-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Csuccess-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SuccessIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function SuccessIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "39",
    height: "39",
    viewBox: "0 0 39 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.5457 19.8983C34.5457 23.9296 32.9443 27.7958 30.0937 30.6463C27.2432 33.4969 23.377 35.0983 19.3457 35.0983C15.3144 35.0983 11.4482 33.4969 8.59768 30.6463C5.74713 27.7958 4.1457 23.9296 4.1457 19.8983C4.1457 15.867 5.74713 12.0008 8.59768 9.15029C11.4482 6.29974 15.3144 4.69832 19.3457 4.69832C20.7897 4.69832 22.1957 4.90732 23.5257 5.28732L26.5087 2.30432C24.3047 1.39232 21.8917 0.898315 19.3457 0.898315C16.8506 0.898315 14.3799 1.38977 12.0747 2.3446C9.76953 3.29944 7.67499 4.69897 5.91067 6.46329C2.34748 10.0265 0.345703 14.8592 0.345703 19.8983C0.345703 24.9374 2.34748 29.7702 5.91067 33.3333C7.67499 35.0977 9.76953 36.4972 12.0747 37.452C14.3799 38.4069 16.8506 38.8983 19.3457 38.8983C24.3848 38.8983 29.2175 36.8965 32.7807 33.3333C36.3439 29.7702 38.3457 24.9374 38.3457 19.8983H34.5457ZM11.5747 16.2503L8.8957 18.9483L17.4457 27.4983L36.4457 8.49832L33.7667 5.80032L17.4457 22.1213L11.5747 16.2503Z",
    fill: "#28A745"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\success-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\timer-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Ctimer-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TimerIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function TimerIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "15",
    height: "14",
    viewBox: "0 0 15 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M7.36621 0.0810547C3.62012 0.0810547 0.584961 3.11621 0.584961 6.8623C0.584961 10.6084 3.62012 13.6436 7.36621 13.6436C11.1123 13.6436 14.1475 10.6084 14.1475 6.8623C14.1475 3.11621 11.1123 0.0810547 7.36621 0.0810547ZM7.36621 12.3311C4.33105 12.3311 1.89746 9.89746 1.89746 6.8623C1.89746 3.85449 4.33105 1.39355 7.36621 1.39355C10.374 1.39355 12.835 3.85449 12.835 6.8623C12.835 9.89746 10.374 12.3311 7.36621 12.3311ZM9.03418 9.4873C9.19824 9.59668 9.38965 9.56934 9.49902 9.40527L10.0186 8.72168C10.1279 8.55762 10.1006 8.36621 9.93652 8.25684L8.13184 6.91699V3.03418C8.13184 2.87012 7.96777 2.70605 7.80371 2.70605H6.92871C6.7373 2.70605 6.60059 2.87012 6.60059 3.03418V7.5459C6.60059 7.62793 6.62793 7.7373 6.70996 7.79199L9.03418 9.4873Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\timer-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\unknown-icon.js", {"react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Csmart-transaction-status%5Cunknown-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UnknownIcon;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function UnknownIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "39",
    height: "39",
    viewBox: "0 0 39 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("circle", {
    cx: "19.1533",
    cy: "19.2715",
    r: "17.1",
    stroke: "var(--color-primary-default)",
    strokeWidth: "3.8"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M16.712 21.5034C16.712 20.7834 16.88 20.1834 17.216 19.7034C17.568 19.2074 18.08 18.7274 18.752 18.2634C19.008 18.0874 19.264 17.9274 19.52 17.7834C19.776 17.6394 20 17.4874 20.192 17.3274C20.4 17.1514 20.56 16.9674 20.672 16.7754C20.8 16.5674 20.864 16.3194 20.864 16.0314C20.864 15.5354 20.688 15.1594 20.336 14.9034C20 14.6474 19.592 14.5194 19.112 14.5194C18.616 14.5194 18.16 14.6794 17.744 14.9994C17.344 15.3034 17.144 15.7674 17.144 16.3914H13.52C13.52 15.6394 13.664 14.9354 13.952 14.2794C14.24 13.6074 14.632 13.0314 15.128 12.5514C15.64 12.0554 16.232 11.6634 16.904 11.3754C17.592 11.0874 18.328 10.9434 19.112 10.9434C19.896 10.9434 20.616 11.0794 21.272 11.3514C21.944 11.6234 22.512 11.9834 22.976 12.4314C23.456 12.8794 23.824 13.3994 24.08 13.9914C24.352 14.5674 24.488 15.1754 24.488 15.8154C24.488 16.2314 24.456 16.6234 24.392 16.9914C24.344 17.3594 24.24 17.7114 24.08 18.0474C23.936 18.3834 23.728 18.7114 23.456 19.0314C23.184 19.3514 22.84 19.6634 22.424 19.9674C21.784 20.4474 21.272 20.8234 20.888 21.0954C20.52 21.3674 20.336 21.6474 20.336 21.9354V21.9594H16.712V21.5034ZM18.512 28.4634C18.16 28.4634 17.824 28.3994 17.504 28.2714C17.2 28.1274 16.928 27.9434 16.688 27.7194C16.464 27.4794 16.28 27.2074 16.136 26.9034C16.008 26.5834 15.944 26.2474 15.944 25.8954C15.944 25.5434 16.008 25.2154 16.136 24.9114C16.28 24.5914 16.464 24.3194 16.688 24.0954C16.928 23.8554 17.2 23.6714 17.504 23.5434C17.824 23.3994 18.16 23.3274 18.512 23.3274C18.864 23.3274 19.192 23.3994 19.496 23.5434C19.816 23.6714 20.088 23.8554 20.312 24.0954C20.552 24.3194 20.736 24.5914 20.864 24.9114C21.008 25.2154 21.08 25.5434 21.08 25.8954C21.08 26.2474 21.008 26.5834 20.864 26.9034C20.736 27.2074 20.552 27.4794 20.312 27.7194C20.088 27.9434 19.816 28.1274 19.496 28.2714C19.192 28.3994 18.864 28.4634 18.512 28.4634Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\smart-transaction-status\\unknown-icon.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\swaps-banner-alert\\swaps-banner-alert.js", {"../../../../shared/constants/swaps":"F:\\metamask-extension\\shared\\constants\\swaps.ts","../../../components/component-library":"F:\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/component-library/banner-alert":"F:\\metamask-extension\\ui\\components\\component-library\\banner-alert\\index.js","../../../components/ui/box":"F:\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/swaps/swaps":"F:\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"F:\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js","react-redux":"F:\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cswaps-banner-alert%5Cswaps-banner-alert.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapsBannerAlert;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _bannerAlert = require("../../../components/component-library/banner-alert");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../../components/component-library");
var _swaps = require("../../../../shared/constants/swaps");
var _swaps2 = require("../../../ducks/swaps/swaps");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SwapsBannerAlert({
  swapsErrorKey
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  let severity = _designSystem.SEVERITIES.DANGER;
  let title;
  let description;
  switch (swapsErrorKey) {
    case _swaps.SLIPPAGE_OVER_LIMIT_ERROR:
      title = t('swapSlippageOverLimitTitle');
      description = /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapSlippageOverLimitDescription')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
        size: _designSystem.Size.INHERIT,
        textProps: {
          variant: _designSystem.TextVariant.bodyMd,
          alignItems: _designSystem.AlignItems.flexStart
        },
        onClick: e => {
          e.preventDefault();
          dispatch((0, _swaps2.setTransactionSettingsOpened)(true));
        }
      }, t('swapEditTransactionSettings')));
      break;
    case _swaps.SLIPPAGE_VERY_HIGH_ERROR:
      severity = _designSystem.SEVERITIES.WARNING;
      title = t('swapSlippageVeryHighTitle');
      description = /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapSlippageVeryHighDescription'));
      break;
    case _swaps.SLIPPAGE_TOO_LOW_ERROR:
      severity = _designSystem.SEVERITIES.WARNING;
      title = t('swapSlippageTooLowTitle');
      description = /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapSlippageTooLowDescription'));
      break;
    case _swaps.SLIPPAGE_NEGATIVE_ERROR:
      title = t('swapSlippageNegativeTitle');
      description = /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapSlippageNegativeDescription')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
        size: _designSystem.Size.INHERIT,
        textProps: {
          variant: _designSystem.TextVariant.bodyMd,
          alignItems: _designSystem.AlignItems.flexStart
        },
        onClick: e => {
          e.preventDefault();
          dispatch((0, _swaps2.setTransactionSettingsOpened)(true));
        }
      }, t('swapEditTransactionSettings')));
      break;
    case _swaps.QUOTES_NOT_AVAILABLE_ERROR:
      title = t('swapQuotesNotAvailableErrorTitle');
      description = /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapQuotesNotAvailableDescription')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
        size: _designSystem.Size.INHERIT,
        textProps: {
          variant: _designSystem.TextVariant.bodyMd,
          alignItems: _designSystem.AlignItems.flexStart
        },
        as: "a",
        href: "https://support.metamask.io/hc/en-us/articles/4405093054363-User-Guide-Swaps",
        target: "_blank",
        rel: "noopener noreferrer"
      }, t('swapLearnMore')));
      break;
    case _swaps.ERROR_FETCHING_QUOTES:
      title = t('swapFetchingQuotesErrorTitle');
      description = /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapFetchingQuotesErrorDescription'));
      break;
    case _swaps.CONTRACT_DATA_DISABLED_ERROR:
      title = t('swapContractDataDisabledErrorTitle');
      description = /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapContractDataDisabledErrorDescription'));
      break;
    case _swaps.QUOTES_EXPIRED_ERROR:
      title = t('swapQuotesExpiredErrorTitle');
      description = /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('swapQuotesExpiredErrorDescription'));
      break;
    case _swaps.OFFLINE_FOR_MAINTENANCE:
      title = t('offlineForMaintenance');
      description = /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyMd,
        as: "h6"
      }, t('metamaskSwapsOfflineDescription'));
      break;
    case _swaps.SWAP_FAILED_ERROR:
      title = t('swapFailedErrorTitle');
      break;
    default:
  }
  return /*#__PURE__*/_react.default.createElement(_bannerAlert.BannerAlert, {
    severity: severity,
    title: title
  }, description);
}
SwapsBannerAlert.propTypes = {
  swapsErrorKey: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\swaps-banner-alert\\swaps-banner-alert.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js", {"./swaps-footer":"F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\swaps-footer.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cswaps-footer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _swapsFooter.default;
  }
});
var _swapsFooter = _interopRequireDefault(require("./swaps-footer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\swaps-footer\\index.js",}],
["F:\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\swaps-footer.js", {"../../../components/ui/page-container/page-container-footer":"F:\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","../../../contexts/i18n":"F:\\metamask-extension\\ui\\contexts\\i18n.js","classnames":"F:\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"F:\\metamask-extension\\node_modules\\prop-types\\index.js","react":"F:\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: F:%5Cmetamask-extension%5Cui%5Cpages%5Cswaps%5Cswaps-footer%5Cswaps-footer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapsFooter;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../../contexts/i18n");
var _pageContainerFooter = _interopRequireDefault(require("../../../components/ui/page-container/page-container-footer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SwapsFooter({
  onCancel,
  hideCancel,
  onSubmit,
  submitText,
  disabled,
  showTermsOfService,
  showTopBorder,
  className = '',
  cancelText
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps-footer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('swaps-footer__buttons', className, {
      'swaps-footer__buttons--border': showTopBorder
    })
  }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
    onCancel: onCancel,
    hideCancel: hideCancel,
    cancelText: cancelText || t('back'),
    onSubmit: onSubmit,
    submitText: submitText,
    footerClassName: (0, _classnames.default)('swaps-footer__custom-page-container-footer-class', className),
    footerButtonClassName: (0, _classnames.default)('swaps-footer__custom-page-container-footer-button-class', {
      'swaps-footer__custom-page-container-footer-button-class--single': hideCancel
    }),
    disabled: disabled
  })), showTermsOfService && /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps-footer__bottom-text",
    onClick: () => global.platform.openTab({
      url: 'https://metamask.io/terms.html'
    })
  }, t('termsOfService')));
}
SwapsFooter.propTypes = {
  onCancel: _propTypes.default.func,
  hideCancel: _propTypes.default.bool,
  onSubmit: _propTypes.default.func.isRequired,
  submitText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  showTermsOfService: _propTypes.default.bool,
  showTopBorder: _propTypes.default.bool,
  className: _propTypes.default.string,
  cancelText: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\swaps\\swaps-footer\\swaps-footer.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
